!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.$=t():e.$=t()}(self,(()=>(()=>{var e={4553:(e,t,n)=>{var a;(()=>{"use strict";var r,i,s,o,l={819:(e,t,n)=>{n.a(e,(async(e,t)=>{try{var a=n(988),r=e([a]);a=(r.then?(await r)():r)[0],self.onmessage=async({data:e})=>{try{let t=await(0,a.Z)({image:e.image,sessionTime:e.sessionTime,gazeNotCenteredTime:e.gazeNotCenteredTime,closedEyeSecond:e.closedEyeSecond});return t?(self.postMessage(t),e=null,void(t=null)):self.postMessage("[ERROR] Возникла проблема при чтении индексов")}catch(e){return self.postMessage(`[ERROR] ${e}`)}},t()}catch(e){t(e)}}))},988:(e,t,n)=>{n.a(e,(async(e,a)=>{try{n.d(t,{Z:()=>p});var r=n(665),i=n(508),s=n(293),o=n(718),l=n(733),u=n(485),d=e([r]);r=(d.then?(await d)():d)[0];const p=async({image:e,sessionTime:t,gazeNotCenteredTime:n,closedEyeSecond:a})=>{const{face:d,gesture:p}=await(0,r.Z)(e),c=await(0,i.Z)(p),h=await(0,s.Z)(d.length>0?d[0].emotion:void 0),f=await(0,l.Z)(d),m=await(0,u.Z)(d),y=await(0,o.Z)(p);let g=0;const A=c.leftEye&&c.rightEye;if(y)n=0;else if(0==n&&(n=t),Number(t-n)>300)return{faces:d.length,age:f,gender:m,emotion:h,gazeFaceCentered:y,blink:!1,attention:g,closedEyeSecond:a,gazeNotCenteredTime:n,sessionTime:t};if(c.leftEye||c.rightEye){if(0==a&&(a=t),Number(t-a)>=100&&Number(t-a)<300)return{faces:d.length,age:f,gender:m,emotion:h,gazeFaceCentered:!0,blink:!1,attention:1,closedEyeSecond:a,gazeNotCenteredTime:n,sessionTime:t};if(Number(t-a)>300)return{faces:d.length,age:f,gender:m,emotion:h,gazeFaceCentered:y,blink:!1,attention:g,closedEyeSecond:a,gazeNotCenteredTime:n,sessionTime:t}}else a=0;return g=d.length>0?1:0,{faces:d.length,age:f,gender:m,emotion:h,gazeFaceCentered:y,blink:A,attention:g,closedEyeSecond:a,gazeNotCenteredTime:n,sessionTime:t}};a()}catch(e){a(e)}}))},686:(e,t,n)=>{n.a(e,(async(e,a)=>{try{n.d(t,{Z:()=>s});var r=n(279),i=n(23);const e=async()=>{try{return new r.p2(i.Z)}catch(e){return Promise.reject(new Error("Возникла проблема при инициализации модели"))}},s=await e();a()}catch(e){a(e)}}),1)},665:(e,t,n)=>{n.a(e,(async(e,a)=>{try{n.d(t,{Z:()=>s});var r=n(686),i=e([r]);r=(i.then?(await i)():i)[0];const s=async e=>{try{return await r.Z.detect(e)}catch(e){return Promise.reject(new Error("Возникла ошибка при обнаружении лиц(-а)"))}};a()}catch(e){a(e)}}))},23:(e,t,n)=>{n.d(t,{Z:()=>a});const a={debug:!0,backend:"webgl",warmup:"face",modelBasePath:"./models/",filter:{enabled:!1,equalization:!1,flip:!1},face:{enabled:!0,detector:{rotation:!1},mesh:{enabled:!0},attention:{enabled:!1},iris:{enabled:!0},description:{enabled:!0},emotion:{enabled:!0},antispoof:{enabled:!0},liveness:{enabled:!0}},body:{enabled:!1},hand:{enabled:!1},object:{enabled:!1},segmentation:{enabled:!1},gesture:{enabled:!0}}},733:(e,t,n)=>{n.d(t,{Z:()=>a});const a=async e=>e[0]?.age||0},508:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(57);const r=async e=>{const t=(0,a.U)(e,"blink right eye");return{leftEye:(0,a.U)(e,"blink left eye"),rightEye:t}}},293:(e,t,n)=>{n.d(t,{Z:()=>a});const a=async e=>{if(e){const t=e.map((e=>e.score)),n=Math.max(...t,0);return e.filter((e=>e.score==n))[0].emotion}return!1}},718:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(57);const r=async e=>{const t=(0,a.U)(e,"facing center"),n=(0,a.U)(e,"looking center"),r=(0,a.U)(e,"head up");return!(!t&&!n||r)}},485:(e,t,n)=>{n.d(t,{Z:()=>a});const a=async e=>e[0]?.gender||"unknown"},57:(e,t,n)=>{n.d(t,{U:()=>a});const a=(e,t)=>e.some((e=>e.gesture===t))},279:(r,i,s)=>{var o="/index.js";s.d(i,{p2:()=>L1});var l=Object.defineProperty,u=(e,t)=>{for(var n in t)l(e,n,{get:t[n],enumerable:!0})},d=(e,t,n)=>(((e,t,n)=>{t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n),n),p=(e,t,n)=>{if(!t.has(e))throw TypeError("Cannot "+n)},c=(e,t,n)=>(p(e,t,"read from private field"),n?n.call(e):t.get(e)),h=(e,t,n)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,n)},f=(e,t,n,a)=>(p(e,t,"write to private field"),a?a.call(e,n):t.set(e,n),n),m={};u(m,{Abs:()=>Ze,Acos:()=>Ye,Acosh:()=>Je,AdadeltaOptimizer:()=>Nh,AdagradOptimizer:()=>Ch,AdamOptimizer:()=>Th,AdamaxOptimizer:()=>Eh,Add:()=>Qe,AddN:()=>et,All:()=>tt,Any:()=>nt,ArgMax:()=>at,ArgMin:()=>rt,Asin:()=>it,Asinh:()=>st,Atan:()=>ot,Atan2:()=>ut,Atanh:()=>lt,AvgPool:()=>dt,AvgPool3D:()=>ct,AvgPool3DGrad:()=>ht,AvgPoolGrad:()=>pt,BackendWasm:()=>kz,BatchMatMul:()=>ft,BatchToSpaceND:()=>mt,Bincount:()=>yt,BitwiseAnd:()=>gt,BroadcastArgs:()=>xt,BroadcastTo:()=>At,Cast:()=>bt,Ceil:()=>vt,ClipByValue:()=>wt,Complex:()=>kt,ComplexAbs:()=>It,Concat:()=>St,Conv2D:()=>Nt,Conv2DBackpropFilter:()=>Ct,Conv2DBackpropInput:()=>Tt,Conv3D:()=>Et,Conv3DBackpropFilterV2:()=>Rt,Conv3DBackpropInputV2:()=>$t,Cos:()=>Mt,Cosh:()=>_t,CropAndResize:()=>Pt,Cumprod:()=>Ft,Cumsum:()=>Ot,DataStorage:()=>H,DenseBincount:()=>Dt,DepthToSpace:()=>zt,DepthwiseConv2dNative:()=>Lt,DepthwiseConv2dNativeBackpropFilter:()=>Wt,DepthwiseConv2dNativeBackpropInput:()=>Bt,Diag:()=>Vt,Dilation2D:()=>Ut,Dilation2DBackpropFilter:()=>Ht,Dilation2DBackpropInput:()=>Gt,Draw:()=>jt,ENV:()=>qe,Einsum:()=>Xt,Elu:()=>Kt,EluGrad:()=>Zt,Environment:()=>Ue,Equal:()=>Jt,Erf:()=>Yt,Exp:()=>Qt,ExpandDims:()=>en,Expm1:()=>tn,FFT:()=>nn,Fill:()=>an,FlipLeftRight:()=>rn,Floor:()=>sn,FloorDiv:()=>on,FromPixels:()=>dr,FusedBatchNorm:()=>ln,FusedConv2D:()=>hr,FusedDepthwiseConv2D:()=>fr,GPGPUContext:()=>xN,GatherNd:()=>dn,GatherV2:()=>un,GraphModel:()=>Rg,Greater:()=>pn,GreaterEqual:()=>cn,IFFT:()=>fn,Identity:()=>hn,Imag:()=>mn,IsFinite:()=>yn,IsInf:()=>gn,IsNan:()=>An,KernelBackend:()=>j,LRN:()=>$n,LRNGrad:()=>Mn,LeakyRelu:()=>xn,Less:()=>bn,LessEqual:()=>vn,LinSpace:()=>wn,Log:()=>kn,Log1p:()=>In,LogSoftmax:()=>En,LogicalAnd:()=>Sn,LogicalNot:()=>Nn,LogicalOr:()=>Cn,LogicalXor:()=>Tn,LowerBound:()=>Rn,MathBackendCPU:()=>Pg,MathBackendWebGL:()=>LC,MatrixBandPart:()=>_n,Max:()=>Fn,MaxPool:()=>Pn,MaxPool3D:()=>zn,MaxPool3DGrad:()=>Ln,MaxPoolGrad:()=>Dn,MaxPoolWithArgmax:()=>Wn,Maximum:()=>On,Mean:()=>Bn,Min:()=>Vn,Minimum:()=>Un,MirrorPad:()=>Gn,Mod:()=>Hn,MomentumOptimizer:()=>$h,Multinomial:()=>jn,Multiply:()=>qn,Neg:()=>Xn,NonMaxSuppressionV3:()=>Zn,NonMaxSuppressionV4:()=>Yn,NonMaxSuppressionV5:()=>Jn,NotEqual:()=>Kn,OP_SCOPE_SUFFIX:()=>ji,OneHot:()=>ea,OnesLike:()=>Qn,Optimizer:()=>Sh,OptimizerConstructors:()=>Pf,Pack:()=>ta,PadV2:()=>na,Pool:()=>aa,Pow:()=>ra,Prelu:()=>ia,Prod:()=>sa,RMSPropOptimizer:()=>Mh,RaggedGather:()=>oa,RaggedRange:()=>la,RaggedTensorToTensor:()=>ua,Range:()=>da,Rank:()=>ci,Real:()=>pa,RealDiv:()=>qt,Reciprocal:()=>ca,Reduction:()=>Kc,Relu:()=>ha,Relu6:()=>xa,Reshape:()=>fa,ResizeBilinear:()=>ga,ResizeBilinearGrad:()=>Aa,ResizeNearestNeighbor:()=>ma,ResizeNearestNeighborGrad:()=>ya,Reverse:()=>ba,RotateWithOffset:()=>pr,Round:()=>va,Rsqrt:()=>wa,SGDOptimizer:()=>Rh,ScatterNd:()=>ka,SearchSorted:()=>Sa,Select:()=>Na,Selu:()=>Ca,Sigmoid:()=>Ma,Sign:()=>$a,Sin:()=>Ea,Sinh:()=>Ra,Slice:()=>Ta,Softmax:()=>za,Softplus:()=>_a,SpaceToBatchND:()=>Pa,SparseFillEmptyRows:()=>La,SparseReshape:()=>Wa,SparseSegmentMean:()=>Ba,SparseSegmentSum:()=>Va,SparseToDense:()=>Ua,SplitV:()=>Da,Sqrt:()=>Fa,Square:()=>Ha,SquaredDifference:()=>Ga,StaticRegexReplace:()=>ja,Step:()=>ur,StridedSlice:()=>qa,StringNGrams:()=>Xa,StringSplit:()=>Ka,StringToHashBucketFast:()=>Za,Sub:()=>Ya,Sum:()=>Oa,Tan:()=>Ja,Tanh:()=>Qa,Tensor:()=>di,TensorBuffer:()=>oi,TensorScatterUpdate:()=>Ia,Tile:()=>er,TopK:()=>tr,Transform:()=>nr,Transpose:()=>ar,Unique:()=>rr,Unpack:()=>ir,UnsortedSegmentSum:()=>sr,UpperBound:()=>or,Variable:()=>pi,WebGPUBackend:()=>mL,ZerosLike:()=>lr,_FusedMatMul:()=>cr,abs:()=>wo,acos:()=>ko,acosh:()=>Io,add:()=>Ao,addN:()=>So,all:()=>No,any:()=>Co,argMax:()=>To,argMin:()=>Eo,asin:()=>Ro,asinh:()=>$o,atan:()=>Mo,atan2:()=>_o,atanh:()=>Fo,avgPool:()=>Yo,avgPool3d:()=>Jo,backend:()=>yo,backend_util:()=>Bf,basicLSTMCell:()=>rl,batchNorm:()=>ol,batchNorm2d:()=>ll,batchNorm3d:()=>ul,batchNorm4d:()=>dl,batchToSpaceND:()=>il,bincount:()=>pl,bitwiseAnd:()=>cl,booleanMaskAsync:()=>ec,broadcastArgs:()=>hl,broadcastTo:()=>fl,broadcast_util:()=>zl,browser:()=>rf,buffer:()=>js,cast:()=>qs,ceil:()=>ml,clipByValue:()=>gl,clone:()=>Xs,complex:()=>Xi,concat:()=>Qo,concat1d:()=>Al,concat2d:()=>xl,concat3d:()=>bl,concat4d:()=>vl,conv1d:()=>kl,conv2d:()=>wl,conv2dTranspose:()=>Sl,conv3d:()=>Nl,conv3dTranspose:()=>Tl,copyRegisteredKernels:()=>Nr,cos:()=>El,cosh:()=>Rl,cosineWindow:()=>lc,cumprod:()=>$l,cumsum:()=>Ml,customGrad:()=>Wu,denseBincount:()=>_l,deprecationWarn:()=>Qs,depthToSpace:()=>Fl,depthwiseConv2d:()=>Ol,deregisterOp:()=>Qm,device_util:()=>Pi,diag:()=>Pl,dilation2d:()=>Dl,disableDeprecationWarnings:()=>Js,dispose:()=>io,disposeVariables:()=>eo,div:()=>bo,divNoNan:()=>Hl,dot:()=>jl,dropout:()=>sc,einsum:()=>ql,elu:()=>Xl,enableDebugMode:()=>Ys,enableProdMode:()=>Zs,enclosingPowerOfTwo:()=>oc,engine:()=>to,ensureShape:()=>Kl,env:()=>He,equal:()=>Vl,erf:()=>Zl,euclideanNorm:()=>fu,exp:()=>mu,expandDims:()=>yu,expm1:()=>gu,eye:()=>xu,fft:()=>kp,fill:()=>yl,findBackend:()=>ho,findBackendFactory:()=>fo,floor:()=>bu,floorDiv:()=>xo,forceHalfFloat:()=>BC,fused:()=>dc,gather:()=>vu,gatherND:()=>ic,gather_util:()=>hf,getBackend:()=>po,getGradient:()=>br,getKernel:()=>xr,getKernelsForBackend:()=>vr,getThreadsCount:()=>Pz,gpgpu_util:()=>ZS,grad:()=>Ou,grads:()=>Pu,greater:()=>wu,greaterEqual:()=>ku,ifft:()=>Ip,imag:()=>Iu,image:()=>yh,inTopKAsync:()=>uc,io:()=>Fh,irfft:()=>Sp,isFinite:()=>Su,isInf:()=>Nu,isNaN:()=>Cu,keep:()=>so,kernel_impls:()=>Km,leakyRelu:()=>Tu,less:()=>Eu,lessEqual:()=>Ru,linalg:()=>gh,linspace:()=>$u,loadGraphModel:()=>$g,loadGraphModelSync:()=>Mg,localResponseNormalization:()=>Mu,log:()=>_u,log1p:()=>Fu,logSigmoid:()=>Gu,logSoftmax:()=>ju,logSumExp:()=>qu,logicalAnd:()=>Xu,logicalNot:()=>Ku,logicalOr:()=>Zu,logicalXor:()=>Yu,losses:()=>Ah,lowerBound:()=>ed,matMul:()=>el,math:()=>tf,max:()=>iu,maxPool:()=>td,maxPool3d:()=>nd,maxPoolWithArgmax:()=>ad,maximum:()=>rd,mean:()=>id,memory:()=>no,meshgrid:()=>ld,min:()=>su,minimum:()=>ud,mirrorPad:()=>dd,mod:()=>pd,moments:()=>cd,movingAverage:()=>nc,mul:()=>vo,multiRNNCell:()=>hd,multinomial:()=>fd,neg:()=>Vu,nextFrame:()=>Lf,norm:()=>hu,notEqual:()=>md,oneHot:()=>yd,ones:()=>od,onesLike:()=>gd,op:()=>qi,outerProduct:()=>Ad,pad:()=>xd,pad1d:()=>bd,pad2d:()=>vd,pad3d:()=>wd,pad4d:()=>kd,pool:()=>Sd,pow:()=>ou,prelu:()=>Nd,print:()=>Ks,prod:()=>Cd,profile:()=>ao,raggedGather:()=>Td,raggedRange:()=>Ed,raggedTensorToTensor:()=>Rd,rand:()=>$d,randomGamma:()=>Kd,randomNormal:()=>Zd,randomStandardNormal:()=>Yd,randomUniform:()=>Jd,randomUniformInt:()=>Qd,range:()=>ep,ready:()=>uo,real:()=>tp,reciprocal:()=>np,registerBackend:()=>mo,registerGradient:()=>kr,registerKernel:()=>wr,registerOp:()=>Ym,relu:()=>ap,relu6:()=>rp,removeBackend:()=>co,reshape:()=>Zo,reverse:()=>ip,reverse1d:()=>sp,reverse2d:()=>op,reverse3d:()=>lp,reverse4d:()=>up,rfft:()=>Cp,round:()=>dp,rsqrt:()=>pp,scalar:()=>lu,scatterND:()=>ac,scatter_util:()=>Wp,searchSorted:()=>Qu,selu:()=>cp,separableConv2d:()=>hp,serialization:()=>vh,setBackend:()=>lo,setPlatform:()=>go,setThreadsCount:()=>Oz,setWasmPath:()=>$z,setWasmPaths:()=>Mz,setWebGLContext:()=>vI,setdiff1dAsync:()=>fp,shared:()=>Dg,sigmoid:()=>tl,sign:()=>mp,signal:()=>mh,sin:()=>yp,sinh:()=>gp,slice:()=>nl,slice1d:()=>Ap,slice2d:()=>xp,slice3d:()=>bp,slice4d:()=>vp,slice_util:()=>mf,softmax:()=>wp,softplus:()=>Uu,spaceToBatchND:()=>Id,sparse:()=>xh,sparseToDense:()=>rc,spectral:()=>fh,split:()=>Np,sqrt:()=>uu,square:()=>du,squaredDifference:()=>Tp,squeeze:()=>Ep,stack:()=>Rp,step:()=>$p,stridedSlice:()=>Mp,string:()=>bh,sub:()=>Hu,sum:()=>pu,sumOutType:()=>vi,tan:()=>_p,tanh:()=>al,tensor:()=>Zi,tensor1d:()=>Fp,tensor2d:()=>Op,tensor3d:()=>Pp,tensor4d:()=>Dp,tensor5d:()=>zp,tensor6d:()=>Lp,tensorScatterUpdate:()=>Gp,tensor_util:()=>Ai,test_util:()=>_d,tidy:()=>ro,tile:()=>Au,time:()=>oo,topk:()=>Hp,train:()=>Df,transpose:()=>tc,truncatedNormal:()=>jp,unique:()=>qp,unregisterGradient:()=>Sr,unregisterKernel:()=>Ir,unsortedSegmentSum:()=>Xp,unstack:()=>Kp,upcastType:()=>bi,upperBound:()=>Zp,util:()=>Tr,valueAndGrad:()=>Du,valueAndGrads:()=>zu,variable:()=>Yp,variableGrads:()=>Lu,version:()=>Vj,version_converter:()=>_g,version_core:()=>Of,version_cpu:()=>lb,version_wasm:()=>Dz,version_webgl:()=>WC,webgl:()=>VC,webgl_util:()=>mI,webgpu_util:()=>tL,where:()=>Ul,whereAsync:()=>Qp,zeros:()=>sd,zerosLike:()=>Gl});var y=Object.create,g=Object.defineProperty,A=Object.getOwnPropertyDescriptor,x=Object.getOwnPropertyNames,b=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty,w=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),k=(e,t)=>{for(var n in t)g(e,n,{get:t[n],enumerable:!0})},I=(e,t,n)=>(n=null!=e?y(b(e)):{},((e,t,n,a)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let n of x(t))!v.call(e,n)&&void 0!==n&&g(e,n,{get:()=>t[n],enumerable:!(a=A(t,n))||a.enumerable});return e})(!t&&e&&e.__esModule?n:g(n,"default",{value:e,enumerable:!0}),e)),S=w(((e,t)=>{t.exports=a;var n=null;try{n=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function a(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function r(e){return!0===(e&&e.__isLong__)}a.prototype.__isLong__,Object.defineProperty(a.prototype,"__isLong__",{value:!0}),a.isLong=r;var i={},s={};function o(e,t){var n,a,r;return t?(r=0<=(e>>>=0)&&e<256)&&(a=s[e])?a:(n=u(e,(0|e)<0?-1:0,!0),r&&(s[e]=n),n):(r=-128<=(e|=0)&&e<128)&&(a=i[e])?a:(n=u(e,e<0?-1:0,!1),r&&(i[e]=n),n)}function l(e,t){if(isNaN(e))return t?A:g;if(t){if(e<0)return A;if(e>=f)return k}else{if(e<=-m)return I;if(e+1>=m)return w}return e<0?l(-e,t).neg():u(e%h|0,e/h|0,t)}function u(e,t,n){return new a(e,t,n)}a.fromInt=o,a.fromNumber=l,a.fromBits=u;var d=Math.pow;function p(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var a;if((a=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===a)return p(e.substring(1),t,n).neg();for(var r=l(d(n,8)),i=g,s=0;s<e.length;s+=8){var o=Math.min(8,e.length-s),u=parseInt(e.substring(s,s+o),n);if(o<8){var c=l(d(n,o));i=i.mul(c).add(l(u))}else i=(i=i.mul(r)).add(l(u))}return i.unsigned=t,i}function c(e,t){return"number"==typeof e?l(e,t):"string"==typeof e?p(e,t):u(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}a.fromString=p,a.fromValue=c;var h=4294967296,f=h*h,m=f/2,y=o(1<<24),g=o(0);a.ZERO=g;var A=o(0,!0);a.UZERO=A;var x=o(1);a.ONE=x;var b=o(1,!0);a.UONE=b;var v=o(-1);a.NEG_ONE=v;var w=u(-1,2147483647,!1);a.MAX_VALUE=w;var k=u(-1,-1,!0);a.MAX_UNSIGNED_VALUE=k;var I=u(0,-2147483648,!1);a.MIN_VALUE=I;var S=a.prototype;S.toInt=function(){return this.unsigned?this.low>>>0:this.low},S.toNumber=function(){return this.unsigned?(this.high>>>0)*h+(this.low>>>0):this.high*h+(this.low>>>0)},S.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(I)){var t=l(e),n=this.div(t),a=n.mul(t).sub(this);return n.toString(e)+a.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=l(d(e,6),this.unsigned),i=this,s="";;){var o=i.div(r),u=(i.sub(o.mul(r)).toInt()>>>0).toString(e);if((i=o).isZero())return u+s;for(;u.length<6;)u="0"+u;s=""+u+s}},S.getHighBits=function(){return this.high},S.getHighBitsUnsigned=function(){return this.high>>>0},S.getLowBits=function(){return this.low},S.getLowBitsUnsigned=function(){return this.low>>>0},S.getNumBitsAbs=function(){if(this.isNegative())return this.eq(I)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&!(e&1<<t);t--);return 0!=this.high?t+33:t+1},S.isZero=function(){return 0===this.high&&0===this.low},S.eqz=S.isZero,S.isNegative=function(){return!this.unsigned&&this.high<0},S.isPositive=function(){return this.unsigned||this.high>=0},S.isOdd=function(){return 1==(1&this.low)},S.isEven=function(){return 0==(1&this.low)},S.equals=function(e){return r(e)||(e=c(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},S.eq=S.equals,S.notEquals=function(e){return!this.eq(e)},S.neq=S.notEquals,S.ne=S.notEquals,S.lessThan=function(e){return this.comp(e)<0},S.lt=S.lessThan,S.lessThanOrEqual=function(e){return this.comp(e)<=0},S.lte=S.lessThanOrEqual,S.le=S.lessThanOrEqual,S.greaterThan=function(e){return this.comp(e)>0},S.gt=S.greaterThan,S.greaterThanOrEqual=function(e){return this.comp(e)>=0},S.gte=S.greaterThanOrEqual,S.ge=S.greaterThanOrEqual,S.compare=function(e){if(r(e)||(e=c(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},S.comp=S.compare,S.negate=function(){return!this.unsigned&&this.eq(I)?I:this.not().add(x)},S.neg=S.negate,S.add=function(e){r(e)||(e=c(e));var t=this.high>>>16,n=65535&this.high,a=this.low>>>16,i=65535&this.low,s=e.high>>>16,o=65535&e.high,l=e.low>>>16,d=0,p=0,h=0,f=0;return h+=(f+=i+(65535&e.low))>>>16,p+=(h+=a+l)>>>16,d+=(p+=n+o)>>>16,d+=t+s,u((h&=65535)<<16|(f&=65535),(d&=65535)<<16|(p&=65535),this.unsigned)},S.subtract=function(e){return r(e)||(e=c(e)),this.add(e.neg())},S.sub=S.subtract,S.multiply=function(e){if(this.isZero())return g;if(r(e)||(e=c(e)),n)return u(n.mul(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(I))return e.isOdd()?I:g;if(e.eq(I))return this.isOdd()?I:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(y)&&e.lt(y))return l(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,a=65535&this.high,i=this.low>>>16,s=65535&this.low,o=e.high>>>16,d=65535&e.high,p=e.low>>>16,h=65535&e.low,f=0,m=0,A=0,x=0;return A+=(x+=s*h)>>>16,m+=(A+=i*h)>>>16,A&=65535,m+=(A+=s*p)>>>16,f+=(m+=a*h)>>>16,m&=65535,f+=(m+=i*p)>>>16,m&=65535,f+=(m+=s*d)>>>16,f+=t*h+a*p+i*d+s*o,u((A&=65535)<<16|(x&=65535),(f&=65535)<<16|(m&=65535),this.unsigned)},S.mul=S.multiply,S.divide=function(e){if(r(e)||(e=c(e)),e.isZero())throw Error("division by zero");var t,a,i;if(n)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?u((this.unsigned?n.div_u:n.div_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?A:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return A;if(e.gt(this.shru(1)))return b;i=A}else{if(this.eq(I))return e.eq(x)||e.eq(v)?I:e.eq(I)?x:(t=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?x:v:(a=this.sub(e.mul(t)),i=t.add(a.div(e)));if(e.eq(I))return this.unsigned?A:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();i=g}for(a=this;a.gte(e);){t=Math.max(1,Math.floor(a.toNumber()/e.toNumber()));for(var s=Math.ceil(Math.log(t)/Math.LN2),o=s<=48?1:d(2,s-48),p=l(t),h=p.mul(e);h.isNegative()||h.gt(a);)h=(p=l(t-=o,this.unsigned)).mul(e);p.isZero()&&(p=x),i=i.add(p),a=a.sub(h)}return i},S.div=S.divide,S.modulo=function(e){return r(e)||(e=c(e)),n?u((this.unsigned?n.rem_u:n.rem_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},S.mod=S.modulo,S.rem=S.modulo,S.not=function(){return u(~this.low,~this.high,this.unsigned)},S.and=function(e){return r(e)||(e=c(e)),u(this.low&e.low,this.high&e.high,this.unsigned)},S.or=function(e){return r(e)||(e=c(e)),u(this.low|e.low,this.high|e.high,this.unsigned)},S.xor=function(e){return r(e)||(e=c(e)),u(this.low^e.low,this.high^e.high,this.unsigned)},S.shiftLeft=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):u(0,this.low<<e-32,this.unsigned)},S.shl=S.shiftLeft,S.shiftRight=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):u(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},S.shr=S.shiftRight,S.shiftRightUnsigned=function(e){if(r(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?u(this.low>>>e|t<<32-e,t>>>e,this.unsigned):u(32===e?t:t>>>e-32,0,this.unsigned)},S.shru=S.shiftRightUnsigned,S.shr_u=S.shiftRightUnsigned,S.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},S.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},S.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},S.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},S.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},a.fromBytes=function(e,t,n){return n?a.fromBytesLE(e,t):a.fromBytesBE(e,t)},a.fromBytesLE=function(e,t){return new a(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},a.fromBytesBE=function(e,t){return new a(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}})),N=w((()=>{})),C=w((()=>{})),T=w(((r,i)=>{!function(r,i,s){function o(e){var t=this,n=function(){var e=4022871197;return function(t){t=String(t);for(var n=0;n<t.length;n++){var a=.02519603282416938*(e+=t.charCodeAt(n));a-=e=a>>>0,e=(a*=e)>>>0,e+=4294967296*(a-=e)}return 2.3283064365386963e-10*(e>>>0)}}();t.next=function(){var e=2091639*t.s0+2.3283064365386963e-10*t.c;return t.s0=t.s1,t.s1=t.s2,t.s2=e-(t.c=0|e)},t.c=1,t.s0=n(" "),t.s1=n(" "),t.s2=n(" "),t.s0-=n(e),t.s0<0&&(t.s0+=1),t.s1-=n(e),t.s1<0&&(t.s1+=1),t.s2-=n(e),t.s2<0&&(t.s2+=1),n=null}function l(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function u(e,t){var n=new o(e),a=t&&t.state,r=n.next;return r.int32=function(){return 4294967296*n.next()|0},r.double=function(){return r()+11102230246251565e-32*(2097152*r()|0)},r.quick=r,a&&("object"==typeof a&&l(a,n),r.state=function(){return l(n,{})}),r}i&&i.exports?i.exports=u:n.amdD&&n.amdO?void 0===(a=function(){return u}.call(t,n,t,e))||(e.exports=a):this.alea=u}(0,"object"==typeof i&&i,n.amdD)})),E=w(((r,i)=>{!function(r,i,s){function o(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var a=0;a<n.length+64;a++)t.x^=0|n.charCodeAt(a),t.next()}function l(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function u(e,t){var n=new o(e),a=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,a&&("object"==typeof a&&l(a,n),r.state=function(){return l(n,{})}),r}i&&i.exports?i.exports=u:n.amdD&&n.amdO?void 0===(a=function(){return u}.call(t,n,t,e))||(e.exports=a):this.xor128=u}(0,"object"==typeof i&&i,n.amdD)})),R=w(((r,i)=>{!function(r,i,s){function o(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var a=0;a<n.length+64;a++)t.x^=0|n.charCodeAt(a),a==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function l(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function u(e,t){var n=new o(e),a=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,a&&("object"==typeof a&&l(a,n),r.state=function(){return l(n,{})}),r}i&&i.exports?i.exports=u:n.amdD&&n.amdO?void 0===(a=function(){return u}.call(t,n,t,e))||(e.exports=a):this.xorwow=u}(0,"object"==typeof i&&i,n.amdD)})),$=w(((r,i)=>{!function(r,i,s){function o(e){var t=this;t.next=function(){var e,n,a=t.x,r=t.i;return e=a[r],n=(e^=e>>>7)^e<<24,n^=(e=a[r+1&7])^e>>>10,n^=(e=a[r+3&7])^e>>>3,n^=(e=a[r+4&7])^e<<7,e=a[r+7&7],n^=(e^=e<<13)^e<<9,a[r]=n,t.i=r+1&7,n},function(e,t){var n,a=[];if(t===(0|t))a[0]=t;else for(t=""+t,n=0;n<t.length;++n)a[7&n]=a[7&n]<<15^t.charCodeAt(n)+a[n+1&7]<<13;for(;a.length<8;)a.push(0);for(n=0;n<8&&0===a[n];++n);for(8==n?a[7]=-1:a[n],e.x=a,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function l(e,t){return t.x=e.x.slice(),t.i=e.i,t}function u(e,t){null==e&&(e=+new Date);var n=new o(e),a=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,a&&(a.x&&l(a,n),r.state=function(){return l(n,{})}),r}i&&i.exports?i.exports=u:n.amdD&&n.amdO?void 0===(a=function(){return u}.call(t,n,t,e))||(e.exports=a):this.xorshift7=u}(0,"object"==typeof i&&i,n.amdD)})),M=w(((r,i)=>{!function(r,i,s){function o(e){var t=this;t.next=function(){var e,n,a=t.w,r=t.X,i=t.i;return t.w=a=a+1640531527|0,n=r[i+34&127],e=r[i=i+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[i]=n^e,t.i=i,n+(a^a>>>16)|0},function(e,t){var n,a,r,i,s,o=[],l=128;for(t===(0|t)?(a=t,t=null):(t+="\0",a=0,l=Math.max(l,t.length)),r=0,i=-32;i<l;++i)t&&(a^=t.charCodeAt((i+32)%t.length)),0===i&&(s=a),a^=a<<10,a^=a>>>15,a^=a<<4,a^=a>>>13,i>=0&&(s=s+1640531527|0,r=0==(n=o[127&i]^=a+s)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,i=512;i>0;--i)a=o[r+34&127],n=o[r=r+1&127],a^=a<<13,n^=n<<17,a^=a>>>15,n^=n>>>12,o[r]=a^n;e.w=s,e.X=o,e.i=r}(t,e)}function l(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function u(e,t){null==e&&(e=+new Date);var n=new o(e),a=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,a&&(a.X&&l(a,n),r.state=function(){return l(n,{})}),r}i&&i.exports?i.exports=u:n.amdD&&n.amdO?void 0===(a=function(){return u}.call(t,n,t,e))||(e.exports=a):this.xor4096=u}(0,"object"==typeof i&&i,n.amdD)})),_=w(((r,i)=>{!function(r,i,s){function o(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,a=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-a|0,a=a<<24^a>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-a|0,t.d=a<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var a=0;a<n.length+20;a++)t.b^=0|n.charCodeAt(a),t.next()}function l(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function u(e,t){var n=new o(e),a=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,a&&("object"==typeof a&&l(a,n),r.state=function(){return l(n,{})}),r}i&&i.exports?i.exports=u:n.amdD&&n.amdO?void 0===(a=function(){return u}.call(t,n,t,e))||(e.exports=a):this.tychei=u}(0,"object"==typeof i&&i,n.amdD)})),F=w((()=>{})),O=w(((r,i)=>{!function(r,o,l){var u,d=256,p="random",c=l.pow(d,6),h=l.pow(2,52),f=2*h,m=d-1;function y(e,t,n){var a=[],i=b(x((t=1==t?{entropy:!0}:t||{}).entropy?[e,v(o)]:null==e?function(){try{var e;return u&&(e=u.randomBytes)?e=e(d):(e=new Uint8Array(d),(r.crypto||r.msCrypto).getRandomValues(e)),v(e)}catch(e){var t=r.navigator,n=t&&t.plugins;return[+new Date,r,n,r.screen,v(o)]}}():e,3),a),s=new g(a),m=function(){for(var e=s.g(6),t=c,n=0;e<h;)e=(e+n)*d,t*=d,n=s.g(1);for(;e>=f;)e/=2,t/=2,n>>>=1;return(e+n)/t};return m.int32=function(){return 0|s.g(4)},m.quick=function(){return s.g(4)/4294967296},m.double=m,b(v(s.S),o),(t.pass||n||function(e,t,n,a){return a&&(a.S&&A(a,s),e.state=function(){return A(s,{})}),n?(l[p]=e,t):e})(m,i,"global"in t?t.global:this==l,t.state)}function g(e){var t,n=e.length,a=this,r=0,i=a.i=a.j=0,s=a.S=[];for(n||(e=[n++]);r<d;)s[r]=r++;for(r=0;r<d;r++)s[r]=s[i=m&i+e[r%n]+(t=s[r])],s[i]=t;(a.g=function(e){for(var t,n=0,r=a.i,i=a.j,s=a.S;e--;)t=s[r=m&r+1],n=n*d+s[m&(s[r]=s[i=m&i+t])+(s[i]=t)];return a.i=r,a.j=i,n})(d)}function A(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function x(e,t){var n,a=[],r=typeof e;if(t&&"object"==r)for(n in e)try{a.push(x(e[n],t-1))}catch(e){}return a.length?a:"string"==r?e:e+"\0"}function b(e,t){for(var n,a=e+"",r=0;r<a.length;)t[m&r]=m&(n^=19*t[m&r])+a.charCodeAt(r++);return v(t)}function v(e){return String.fromCharCode.apply(0,e)}if(b(l.random(),o),"object"==typeof i&&i.exports){i.exports=y;try{u=F()}catch(r){}}else s.amdO?void 0===(a=function(){return y}.call(t,n,t,e))||(e.exports=a):l["seed"+p]=y}("undefined"!=typeof self?self:r,[],Math)})),P=w(((e,t)=>{var n=T(),a=E(),r=R(),i=$(),s=M(),o=_(),l=O();l.alea=n,l.xor128=a,l.xorwow=r,l.xorshift7=i,l.xor4096=s,l.tychei=o,t.exports=l})),D=w((()=>{})),z=w((()=>{})),L=w((()=>{})),W=w((()=>{})),B=w((()=>{})),V=w(((n,r)=>{var i,l=(i=(i="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||o,function(e){function t(){return $.buffer!=F&&X($.buffer),P}function n(){return $.buffer!=F&&X($.buffer),V}function a(){return $.buffer!=F&&X($.buffer),U}function r(){return $.buffer!=F&&X($.buffer),G}var o,l,u,d=void 0!==(e=e||{})?e:{};d.ready=new Promise((function(e,t){o=e,l=t})),{env:{NODE_ENV:"production",TARGET:"module"}}.listeners&&(u={uncaughtException:{env:{NODE_ENV:"production",TARGET:"module"}}.listeners("uncaughtException"),unhandledRejection:{env:{NODE_ENV:"production",TARGET:"module"}}.listeners("unhandledRejection")});var p,c,h,f=Object.assign({},d),m=[],y=(e,t)=>{throw t},g="object"==typeof window,A="function"==typeof importScripts,x="object"==typeof{env:{NODE_ENV:"production",TARGET:"module"}}.versions&&"string"==typeof{env:{NODE_ENV:"production",TARGET:"module"}}.versions.node,b=d.ENVIRONMENT_IS_PTHREAD||!1,v="";function w(e){return d.locateFile?d.locateFile(e,v):v+e}if(x){var k=D(),I=z();let t;v=A?I.dirname(v)+"/":"//",p=(e,t)=>(e=le(e)?new URL(e):I.normalize(e),k.readFileSync(e,t?void 0:"utf8")),h=e=>{var t=p(e,!0);return t.buffer||(t=new Uint8Array(t)),t},c=(e,t,n)=>{e=le(e)?new URL(e):I.normalize(e),k.readFile(e,(function(e,a){e?n(e):t(a.buffer)}))},{env:{NODE_ENV:"production",TARGET:"module"}}.argv.length>1&&{env:{NODE_ENV:"production",TARGET:"module"}}.argv[1].replace(/\\/g,"/"),m={env:{NODE_ENV:"production",TARGET:"module"}}.argv.slice(2),{env:{NODE_ENV:"production",TARGET:"module"}}.on("uncaughtException",(function(e){if(!(e instanceof pe))throw e})),{env:{NODE_ENV:"production",TARGET:"module"}}.on("unhandledRejection",(function(e){throw e})),y=(e,t)=>{if(ee())throw t;(function(e){e instanceof pe||E("exiting due to exception: "+e)})(t),{env:{NODE_ENV:"production",TARGET:"module"}}.exit(e)},d.inspect=function(){return"[Emscripten Module object]"};try{t=L()}catch(e){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),e}s.g.Worker=t.Worker}else(g||A)&&(A?v=self.location.href:"undefined"!=typeof document&&document.currentScript&&(v=document.currentScript.src),void 0!==i&&i&&(v=i),v=0!==v.indexOf("blob:")?v.substr(0,v.replace(/[?#].*/,"").lastIndexOf("/")+1):"",x||(p=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},A&&(h=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),c=(e,t,n)=>{var a=new XMLHttpRequest;a.open("GET",e,!0),a.responseType="arraybuffer",a.onload=()=>{200==a.status||0==a.status&&a.response?t(a.response):n()},a.onerror=n,a.send(null)}));x&&"undefined"==typeof performance&&(s.g.performance=W().performance);var S=console.log.bind(console),N=console.warn.bind(console);x&&(S=e=>k.writeSync(1,e+"\n"),N=e=>k.writeSync(2,e+"\n"));var C,T=d.print||S,E=d.printErr||N;Object.assign(d,f),f=null,d.arguments&&(m=d.arguments),d.thisProgram&&d.thisProgram,d.quit&&(y=d.quit),Atomics.load,Atomics.store,Atomics.compareExchange,d.wasmBinary&&(C=d.wasmBinary);var R=d.noExitRuntime||!0;"object"!=typeof WebAssembly&&se("no native wasm support detected");var $,M,_,F,O,P,V,U,G,H=!1,j="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function q(e,t,n){for(var a=(t>>>=0)+n,r=t;e[r]&&!(r>=a);)++r;if(r-t>16&&e.buffer&&j)return j.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,r):e.subarray(t,r));for(var i="";t<r;){var s=e[t++];if(128&s){var o=63&e[t++];if(192!=(224&s)){var l=63&e[t++];if((s=224==(240&s)?(15&s)<<12|o<<6|l:(7&s)<<18|o<<12|l<<6|63&e[t++])<65536)i+=String.fromCharCode(s);else{var u=s-65536;i+=String.fromCharCode(55296|u>>10,56320|1023&u)}}else i+=String.fromCharCode((31&s)<<6|o)}else i+=String.fromCharCode(s)}return i}function X(e){F=e,d.HEAP8=O=new Int8Array(e),d.HEAP16=new Int16Array(e),d.HEAP32=V=new Int32Array(e),d.HEAPU8=P=new Uint8Array(e),d.HEAPU16=new Uint16Array(e),d.HEAPU32=U=new Uint32Array(e),d.HEAPF32=new Float32Array(e),d.HEAPF64=G=new Float64Array(e)}b&&(F=d.buffer);var K=d.INITIAL_MEMORY||16777216;if(b)$=d.wasmMemory,F=d.buffer;else if(d.wasmMemory)$=d.wasmMemory;else if(!(($=new WebAssembly.Memory({initial:K/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw E("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),x&&E("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");$&&(F=$.buffer),K=F.byteLength,X(F);var Z,Y=[],J=[],Q=[];function ee(){return R}function te(){!b&&ge(J)}var ne,ae=0,re=null,ie=null;function se(e){d.onAbort&&d.onAbort(e),E(e="Aborted("+e+")"),H=!0,_=1,e+=". Build with -sASSERTIONS for more info.";var t=new WebAssembly.RuntimeError(e);throw l(t),t}function oe(e){return e.startsWith("data:application/octet-stream;base64,")}function le(e){return e.startsWith("file://")}function ue(e){try{if(e==ne&&C)return new Uint8Array(C);if(h)return h(e);throw"both async and sync fetching of the wasm failed"}catch(e){se(e)}}oe(ne="tfjs-backend-wasm-threaded-simd.wasm")||(ne=w(ne));var de={};function pe(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function ce(e){var t=ye.pthreads[e];(function(e,t){e||se(void 0)})(t),ye.returnWorkerToPool(t)}function he(e){var t=ye.getNewWorker();if(!t)return 6;ye.runningWorkers.push(t),ye.pthreads[e.pthread_ptr]=t,t.pthread_ptr=e.pthread_ptr;var n={cmd:"run",start_routine:e.startRoutine,arg:e.arg,pthread_ptr:e.pthread_ptr};return t.runPthread=()=>{x&&t.ref(),t.postMessage(n,e.transferList),delete t.runPthread},t.loaded&&t.runPthread(),0}function fe(e){if(b)return Se(1,1,e);_=e,ee()||(ye.terminateAllThreads(),d.onExit&&d.onExit(e),H=!0),y(e,new pe(e))}var me=function(e,t){if(_=e,!t&&b)throw Ae(e),"unwind";fe(e)},ye={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],pthreads:{},init:function(){b?ye.initWorker():ye.initMainThread()},initMainThread:function(){for(var e=8;e--;)ye.allocateUnusedWorker()},initWorker:function(){R=!1},setExitStatus:function(e){_=e},terminateAllThreads:function(){for(var e of Object.values(ye.pthreads))ye.returnWorkerToPool(e);for(var e of ye.unusedWorkers)e.terminate();ye.unusedWorkers=[]},returnWorkerToPool:function(e){var t=e.pthread_ptr;delete ye.pthreads[t],ye.unusedWorkers.push(e),ye.runningWorkers.splice(ye.runningWorkers.indexOf(e),1),e.pthread_ptr=0,x&&e.unref(),Ge(t)},receiveObjectTransfer:function(e){},threadInitTLS:function(){ye.tlsInitFunctions.forEach((e=>e()))},loadWasmModuleToWorker:function(e,t){e.onmessage=n=>{var a=n.data,r=a.cmd;if(e.pthread_ptr&&(ye.currentProxiedOperationCallerThread=e.pthread_ptr),a.targetThread&&a.targetThread!=We()){var i=ye.pthreads[a.targetThread];return i?i.postMessage(a,a.transferList):E('Internal error! Worker sent a message "'+r+'" to target pthread '+a.targetThread+", but that thread no longer exists!"),void(ye.currentProxiedOperationCallerThread=void 0)}"processProxyingQueue"===r?ke(a.queue):"spawnThread"===r?he(a):"cleanupThread"===r?ce(a.thread):"killThread"===r?function(e){var t=ye.pthreads[e];delete ye.pthreads[e],t.terminate(),Ge(e),ye.runningWorkers.splice(ye.runningWorkers.indexOf(t),1),t.pthread_ptr=0}(a.thread):"cancelThread"===r?function(e){ye.pthreads[e].postMessage({cmd:"cancel"})}(a.thread):"loaded"===r?(e.loaded=!0,x&&e.unref(),t&&t(e),e.runPthread&&e.runPthread()):"print"===r?T("Thread "+a.threadId+": "+a.text):"printErr"===r?E("Thread "+a.threadId+": "+a.text):"alert"===r?alert("Thread "+a.threadId+": "+a.text):"setimmediate"===a.target?e.postMessage(a):"callHandler"===r?d[a.handler](...a.args):r&&E("worker sent an unknown command "+r),ye.currentProxiedOperationCallerThread=void 0},e.onerror=e=>{throw E("worker sent an error! "+e.filename+":"+e.lineno+": "+e.message),e},x&&(e.on("message",(function(t){e.onmessage({data:t})})),e.on("error",(function(t){e.onerror(t)})),e.on("detachedExit",(function(){})));var n=[];for(var a of["onExit","onAbort","print","printErr"])d.hasOwnProperty(a)&&n.push(a);e.postMessage({cmd:"load",handlers:n,urlOrBlob:d.mainScriptUrlOrBlob||i,wasmMemory:$,wasmModule:M})},allocateUnusedWorker:function(){var e,t=w("tfjs-backend-wasm-threaded-simd.worker.js");e=new Worker(t),ye.unusedWorkers.push(e)},getNewWorker:function(){return 0==ye.unusedWorkers.length&&(ye.allocateUnusedWorker(),ye.loadWasmModuleToWorker(ye.unusedWorkers[0])),ye.unusedWorkers.pop()}};function ge(e){for(;e.length>0;)e.shift()(d)}function Ae(e){if(b)return Se(2,0,e);try{me(e)}catch(e){!function(e){if(e instanceof pe||"unwind"==e)return _;y(1,e)}(e)}}d.PThread=ye,d.establishStackSpace=function(){var e=We(),t=n()[e+52>>>2],a=n()[e+56>>>2];je(t,t-a),Xe(t)};var xe,be=[];function ve(e,t,n,a){return b?Se(3,1,e,t,n,a):we(e,t,n,a)}function we(e,t,n,a){if("undefined"==typeof SharedArrayBuffer)return E("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var r=[];if(b&&0===r.length)return ve(e,t,n,a);var i={startRoutine:n,pthread_ptr:e,arg:a,transferList:r};return b?(i.cmd="spawnThread",postMessage(i,r),0):he(i)}function ke(e){Atomics.store(n(),e>>2,1),We()&&Ue(e),Atomics.compareExchange(n(),e>>2,1,0)}function Ie(e){Ie.shown||(Ie.shown={}),Ie.shown[e]||(Ie.shown[e]=1,x&&(e="warning: "+e),E(e))}function Se(e,t){var n=arguments.length-2,a=arguments;return function(e){var t=qe(),n=e();return Xe(t),n}((()=>{for(var i=n,s=Ke(8*i),o=s>>3,l=0;l<n;l++){var u=a[2+l];r()[o+l>>>0]=u}return Ve(e,i,s,t)}))}d.invokeEntryPoint=function(e,t){var n=function(e){var t=be[e];return t||(e>=be.length&&(be.length=e+1),be[e]=t=Z.get(e)),t}(e)(t);ee()?ye.setExitStatus(n):He(n)},d.executeNotifiedProxyingQueue=ke,xe=x?()=>{var e={env:{NODE_ENV:"production",TARGET:"module"}}.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.timeOrigin+performance.now();var Ne=[];function Ce(e){try{return $.grow(e-F.byteLength+65535>>>16),X($.buffer),1}catch(e){}}function Te(e){return b?Se(4,1,e):52}function Ee(e,t,n,a,r){return b?Se(5,1,e,t,n,a,r):70}var Re=[null,[],[]];function $e(e,t){var n=Re[e];0===t||10===t?((1===e?T:E)(q(n,0)),n.length=0):n.push(t)}function Me(e,n,r,i){if(b)return Se(6,1,e,n,r,i);for(var s=0,o=0;o<r;o++){var l=a()[n>>>2],u=a()[n+4>>>2];n+=8;for(var d=0;d<u;d++)$e(e,t()[l+d>>>0]);s+=u}return a()[i>>>2]=s,0}function _e(e){return d["_"+e]}function Fe(e,n,a,r,i){var s={string:e=>{var n=0;if(null!=e&&0!==e){var a=1+(e.length<<2);!function(e,n,a){!function(e,t,n,a){if(!(a>0))return 0;for(var r=(n>>>=0)+a-1,i=0;i<e.length;++i){var s=e.charCodeAt(i);if(s>=55296&&s<=57343&&(s=65536+((1023&s)<<10)|1023&e.charCodeAt(++i)),s<=127){if(n>=r)break;t[n++>>>0]=s}else if(s<=2047){if(n+1>=r)break;t[n++>>>0]=192|s>>6,t[n++>>>0]=128|63&s}else if(s<=65535){if(n+2>=r)break;t[n++>>>0]=224|s>>12,t[n++>>>0]=128|s>>6&63,t[n++>>>0]=128|63&s}else{if(n+3>=r)break;t[n++>>>0]=240|s>>18,t[n++>>>0]=128|s>>12&63,t[n++>>>0]=128|s>>6&63,t[n++>>>0]=128|63&s}}t[n>>>0]=0}(e,t(),n,a)}(e,n=Ke(a),a)}return n},array:e=>{var t=Ke(e.length);return function(e,t){($.buffer!=F&&X($.buffer),O).set(e,t>>>0)}(e,t),t}},o=_e(e),l=[],u=0;if(r)for(var d=0;d<r.length;d++){var p=s[a[d]];p?(0===u&&(u=qe()),l[d]=p(r[d])):l[d]=r[d]}var c,h=o.apply(null,l);return c=h,0!==u&&Xe(u),h=function(e){return"string"===n?function(e,n){return(e>>>=0)?q(t(),e,void 0):""}(e):"boolean"===n?!!e:e}(c),h}ye.init();var Oe,Pe,De,ze=[null,fe,Ae,ve,Te,Ee,Me],Le={__emscripten_init_main_thread_js:function(e){Be(e,!A,1,!g),ye.threadInitTLS()},__emscripten_thread_cleanup:function(e){b?postMessage({cmd:"cleanupThread",thread:e}):ce(e)},__pthread_create_js:we,_emscripten_default_pthread_stack_size:function(){return 65536},_emscripten_get_now_is_monotonic:function(){return!0},_emscripten_notify_task_queue:function(e,t,n,a){if(e==t)setTimeout((()=>ke(a)));else if(b)postMessage({targetThread:e,cmd:"processProxyingQueue",queue:a});else{var r=ye.pthreads[e];if(!r)return;r.postMessage({cmd:"processProxyingQueue",queue:a})}return 1},_emscripten_set_offscreencanvas_size:function(e,t,n){return-1},abort:function(){se("")},emscripten_check_blocking_allowed:function(){x||A||Ie("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread")},emscripten_date_now:function(){return Date.now()},emscripten_get_heap_max:function(){return 4294901760},emscripten_get_now:xe,emscripten_memcpy_big:function(e,n,a){t().copyWithin(e>>>0,n>>>0,n+a>>>0)},emscripten_num_logical_cores:function(){return x?B().cpus().length:navigator.hardwareConcurrency},emscripten_receive_on_main_thread_js:function(e,t,n){Ne.length=t;for(var a=n>>3,i=0;i<t;i++)Ne[i]=r()[a+i>>>0];return(e<0?de[-e-1]:ze[e]).apply(null,Ne)},emscripten_resize_heap:function(e){var n=t().length;if((e>>>=0)<=n)return!1;var a,r=4294901760;if(e>r)return!1;for(var i=1;i<=4;i*=2){var s=n*(1+.2/i);if(s=Math.min(s,e+100663296),Ce(Math.min(r,(a=Math.max(e,s))+(65536-a%65536)%65536)))return!0}return!1},emscripten_unwind_to_js_event_loop:function(){throw"unwind"},exit:me,fd_close:Te,fd_seek:Ee,fd_write:Me,memory:$||d.wasmMemory},We=(function(){var e={env:Le,wasi_snapshot_preview1:Le};function t(e,t){var n=e.exports;if(d.asm=n,function(e){ye.tlsInitFunctions.push(e)}(d.asm._emscripten_tls_init),Z=d.asm.__indirect_function_table,function(e){J.unshift(e)}(d.asm.__wasm_call_ctors),M=t,!b){var a=ye.unusedWorkers.length;ye.unusedWorkers.forEach((function(e){ye.loadWasmModuleToWorker(e,(function(){--a||function(e){if(ae--,d.monitorRunDependencies&&d.monitorRunDependencies(ae),0==ae&&(null!==re&&(clearInterval(re),re=null),ie)){var t=ie;ie=null,t()}}()}))}))}}function n(e){t(e.instance,e.module)}function a(t){return function(){if(!C&&(g||A)){if("function"==typeof fetch&&!le(ne))return fetch(ne,{credentials:"same-origin"}).then((function(e){if(!e.ok)throw"failed to load wasm binary file at '"+ne+"'";return e.arrayBuffer()})).catch((function(){return ue(ne)}));if(c)return new Promise((function(e,t){c(ne,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return ue(ne)}))}().then((function(t){return WebAssembly.instantiate(t,e)})).then((function(e){return e})).then(t,(function(e){E("failed to asynchronously prepare wasm: "+e),se(e)}))}if(b||(ae++,d.monitorRunDependencies&&d.monitorRunDependencies(ae)),d.instantiateWasm)try{return d.instantiateWasm(e,t)}catch(e){E("Module.instantiateWasm callback failed with error: "+e),l(e)}(C||"function"!=typeof WebAssembly.instantiateStreaming||oe(ne)||le(ne)||x||"function"!=typeof fetch?a(n):fetch(ne,{credentials:"same-origin"}).then((function(t){return WebAssembly.instantiateStreaming(t,e).then(n,(function(e){return E("wasm streaming compile failed: "+e),E("falling back to ArrayBuffer instantiation"),a(n)}))}))).catch(l)}(),d.___wasm_call_ctors=function(){return(d.___wasm_call_ctors=d.asm.__wasm_call_ctors).apply(null,arguments)},d._init=function(){return(d._init=d.asm.init).apply(null,arguments)},d._init_with_threads_count=function(){return(d._init_with_threads_count=d.asm.init_with_threads_count).apply(null,arguments)},d._get_threads_count=function(){return(d._get_threads_count=d.asm.get_threads_count).apply(null,arguments)},d._register_tensor=function(){return(d._register_tensor=d.asm.register_tensor).apply(null,arguments)},d._dispose_data=function(){return(d._dispose_data=d.asm.dispose_data).apply(null,arguments)},d._dispose=function(){return(d._dispose=d.asm.dispose).apply(null,arguments)},d._Abs=function(){return(d._Abs=d.asm.Abs).apply(null,arguments)},d._Acos=function(){return(d._Acos=d.asm.Acos).apply(null,arguments)},d._Acosh=function(){return(d._Acosh=d.asm.Acosh).apply(null,arguments)},d._Add=function(){return(d._Add=d.asm.Add).apply(null,arguments)},d._AddN=function(){return(d._AddN=d.asm.AddN).apply(null,arguments)},d._All=function(){return(d._All=d.asm.All).apply(null,arguments)},d._Any=function(){return(d._Any=d.asm.Any).apply(null,arguments)},d._ArgMax=function(){return(d._ArgMax=d.asm.ArgMax).apply(null,arguments)},d._ArgMin=function(){return(d._ArgMin=d.asm.ArgMin).apply(null,arguments)},d._Asin=function(){return(d._Asin=d.asm.Asin).apply(null,arguments)},d._Asinh=function(){return(d._Asinh=d.asm.Asinh).apply(null,arguments)},d._Atan=function(){return(d._Atan=d.asm.Atan).apply(null,arguments)},d._Atan2=function(){return(d._Atan2=d.asm.Atan2).apply(null,arguments)},d._Atanh=function(){return(d._Atanh=d.asm.Atanh).apply(null,arguments)},d._AvgPool=function(){return(d._AvgPool=d.asm.AvgPool).apply(null,arguments)},d._AvgPool3D=function(){return(d._AvgPool3D=d.asm.AvgPool3D).apply(null,arguments)},d._AvgPool3DGrad=function(){return(d._AvgPool3DGrad=d.asm.AvgPool3DGrad).apply(null,arguments)},d._AvgPoolGrad=function(){return(d._AvgPoolGrad=d.asm.AvgPoolGrad).apply(null,arguments)},d._BatchMatMul=function(){return(d._BatchMatMul=d.asm.BatchMatMul).apply(null,arguments)},d._Bincount=function(){return(d._Bincount=d.asm.Bincount).apply(null,arguments)},d._BitwiseAnd=function(){return(d._BitwiseAnd=d.asm.BitwiseAnd).apply(null,arguments)},d._Ceil=function(){return(d._Ceil=d.asm.Ceil).apply(null,arguments)},d._ClipByValue=function(){return(d._ClipByValue=d.asm.ClipByValue).apply(null,arguments)},d._Conv2D=function(){return(d._Conv2D=d.asm.Conv2D).apply(null,arguments)},d._Conv2DBackpropInput=function(){return(d._Conv2DBackpropInput=d.asm.Conv2DBackpropInput).apply(null,arguments)},d._Conv3D=function(){return(d._Conv3D=d.asm.Conv3D).apply(null,arguments)},d._Conv3DBackpropFilterV2=function(){return(d._Conv3DBackpropFilterV2=d.asm.Conv3DBackpropFilterV2).apply(null,arguments)},d._Conv3DBackpropInputV2=function(){return(d._Conv3DBackpropInputV2=d.asm.Conv3DBackpropInputV2).apply(null,arguments)},d._Cos=function(){return(d._Cos=d.asm.Cos).apply(null,arguments)},d._Cosh=function(){return(d._Cosh=d.asm.Cosh).apply(null,arguments)},d._CropAndResize=function(){return(d._CropAndResize=d.asm.CropAndResize).apply(null,arguments)},d._Cumprod=function(){return(d._Cumprod=d.asm.Cumprod).apply(null,arguments)},d._Cumsum=function(){return(d._Cumsum=d.asm.Cumsum).apply(null,arguments)},d._DenseBincount=function(){return(d._DenseBincount=d.asm.DenseBincount).apply(null,arguments)},d._DepthToSpace=function(){return(d._DepthToSpace=d.asm.DepthToSpace).apply(null,arguments)},d._DepthwiseConv2dNative=function(){return(d._DepthwiseConv2dNative=d.asm.DepthwiseConv2dNative).apply(null,arguments)},d._Diag=function(){return(d._Diag=d.asm.Diag).apply(null,arguments)},d._Dilation2D=function(){return(d._Dilation2D=d.asm.Dilation2D).apply(null,arguments)},d._Dilation2DBackpropFilter=function(){return(d._Dilation2DBackpropFilter=d.asm.Dilation2DBackpropFilter).apply(null,arguments)},d._Dilation2DBackpropInput=function(){return(d._Dilation2DBackpropInput=d.asm.Dilation2DBackpropInput).apply(null,arguments)},d._Elu=function(){return(d._Elu=d.asm.Elu).apply(null,arguments)},d._EluGrad=function(){return(d._EluGrad=d.asm.EluGrad).apply(null,arguments)},d._Equal=function(){return(d._Equal=d.asm.Equal).apply(null,arguments)},d._Erf=function(){return(d._Erf=d.asm.Erf).apply(null,arguments)},d._Exp=function(){return(d._Exp=d.asm.Exp).apply(null,arguments)},d._Expm1=function(){return(d._Expm1=d.asm.Expm1).apply(null,arguments)},d._FlipLeftRight=function(){return(d._FlipLeftRight=d.asm.FlipLeftRight).apply(null,arguments)},d._Floor=function(){return(d._Floor=d.asm.Floor).apply(null,arguments)},d._FloorDiv=function(){return(d._FloorDiv=d.asm.FloorDiv).apply(null,arguments)},d._FusedBatchNorm=function(){return(d._FusedBatchNorm=d.asm.FusedBatchNorm).apply(null,arguments)},d._FusedConv2D=function(){return(d._FusedConv2D=d.asm.FusedConv2D).apply(null,arguments)},d._FusedDepthwiseConv2D=function(){return(d._FusedDepthwiseConv2D=d.asm.FusedDepthwiseConv2D).apply(null,arguments)},d._Gather=function(){return(d._Gather=d.asm.Gather).apply(null,arguments)},d._GatherNd=function(){return(d._GatherNd=d.asm.GatherNd).apply(null,arguments)},d._Greater=function(){return(d._Greater=d.asm.Greater).apply(null,arguments)},d._GreaterEqual=function(){return(d._GreaterEqual=d.asm.GreaterEqual).apply(null,arguments)},d._IsFinite=function(){return(d._IsFinite=d.asm.IsFinite).apply(null,arguments)},d._IsInf=function(){return(d._IsInf=d.asm.IsInf).apply(null,arguments)},d._IsNan=function(){return(d._IsNan=d.asm.IsNan).apply(null,arguments)},d._LRN=function(){return(d._LRN=d.asm.LRN).apply(null,arguments)},d._LRNGrad=function(){return(d._LRNGrad=d.asm.LRNGrad).apply(null,arguments)},d._LeakyRelu=function(){return(d._LeakyRelu=d.asm.LeakyRelu).apply(null,arguments)},d._Less=function(){return(d._Less=d.asm.Less).apply(null,arguments)},d._LessEqual=function(){return(d._LessEqual=d.asm.LessEqual).apply(null,arguments)},d._LinSpace=function(){return(d._LinSpace=d.asm.LinSpace).apply(null,arguments)},d._Log=function(){return(d._Log=d.asm.Log).apply(null,arguments)},d._Log1p=function(){return(d._Log1p=d.asm.Log1p).apply(null,arguments)},d._LogicalAnd=function(){return(d._LogicalAnd=d.asm.LogicalAnd).apply(null,arguments)},d._LogicalNot=function(){return(d._LogicalNot=d.asm.LogicalNot).apply(null,arguments)},d._LogicalOr=function(){return(d._LogicalOr=d.asm.LogicalOr).apply(null,arguments)},d._LogicalXor=function(){return(d._LogicalXor=d.asm.LogicalXor).apply(null,arguments)},d._Max=function(){return(d._Max=d.asm.Max).apply(null,arguments)},d._MaxPool=function(){return(d._MaxPool=d.asm.MaxPool).apply(null,arguments)},d._MaxPool3D=function(){return(d._MaxPool3D=d.asm.MaxPool3D).apply(null,arguments)},d._MaxPool3DGrad=function(){return(d._MaxPool3DGrad=d.asm.MaxPool3DGrad).apply(null,arguments)},d._MaxPoolGrad=function(){return(d._MaxPoolGrad=d.asm.MaxPoolGrad).apply(null,arguments)},d._MaxPoolWithArgmax=function(){return(d._MaxPoolWithArgmax=d.asm.MaxPoolWithArgmax).apply(null,arguments)},d._Maximum=function(){return(d._Maximum=d.asm.Maximum).apply(null,arguments)},d._Mean=function(){return(d._Mean=d.asm.Mean).apply(null,arguments)},d._Min=function(){return(d._Min=d.asm.Min).apply(null,arguments)},d._Minimum=function(){return(d._Minimum=d.asm.Minimum).apply(null,arguments)},d._MirrorPad=function(){return(d._MirrorPad=d.asm.MirrorPad).apply(null,arguments)},d._Mod=function(){return(d._Mod=d.asm.Mod).apply(null,arguments)},d._Multinomial=function(){return(d._Multinomial=d.asm.Multinomial).apply(null,arguments)},d._Multiply=function(){return(d._Multiply=d.asm.Multiply).apply(null,arguments)},d._Neg=function(){return(d._Neg=d.asm.Neg).apply(null,arguments)},d._NonMaxSuppressionV3=function(){return(d._NonMaxSuppressionV3=d.asm.NonMaxSuppressionV3).apply(null,arguments)},d._NonMaxSuppressionV4=function(){return(d._NonMaxSuppressionV4=d.asm.NonMaxSuppressionV4).apply(null,arguments)},d._NonMaxSuppressionV5=function(){return(d._NonMaxSuppressionV5=d.asm.NonMaxSuppressionV5).apply(null,arguments)},d._NotEqual=function(){return(d._NotEqual=d.asm.NotEqual).apply(null,arguments)},d._OneHot=function(){return(d._OneHot=d.asm.OneHot).apply(null,arguments)},d._PadV2=function(){return(d._PadV2=d.asm.PadV2).apply(null,arguments)},d._Pow=function(){return(d._Pow=d.asm.Pow).apply(null,arguments)},d._Prelu=function(){return(d._Prelu=d.asm.Prelu).apply(null,arguments)},d._Prod=function(){return(d._Prod=d.asm.Prod).apply(null,arguments)},d._RealDiv=function(){return(d._RealDiv=d.asm.RealDiv).apply(null,arguments)},d._Reciprocal=function(){return(d._Reciprocal=d.asm.Reciprocal).apply(null,arguments)},d._Relu=function(){return(d._Relu=d.asm.Relu).apply(null,arguments)},d._Relu6=function(){return(d._Relu6=d.asm.Relu6).apply(null,arguments)},d._ResizeBilinear=function(){return(d._ResizeBilinear=d.asm.ResizeBilinear).apply(null,arguments)},d._ResizeBilinearGrad=function(){return(d._ResizeBilinearGrad=d.asm.ResizeBilinearGrad).apply(null,arguments)},d._ResizeNearestNeighbor=function(){return(d._ResizeNearestNeighbor=d.asm.ResizeNearestNeighbor).apply(null,arguments)},d._ResizeNearestNeighborGrad=function(){return(d._ResizeNearestNeighborGrad=d.asm.ResizeNearestNeighborGrad).apply(null,arguments)},d._Reverse=function(){return(d._Reverse=d.asm.Reverse).apply(null,arguments)},d._RotateWithOffset=function(){return(d._RotateWithOffset=d.asm.RotateWithOffset).apply(null,arguments)},d._Round=function(){return(d._Round=d.asm.Round).apply(null,arguments)},d._Rsqrt=function(){return(d._Rsqrt=d.asm.Rsqrt).apply(null,arguments)},d._ScatterNd=function(){return(d._ScatterNd=d.asm.ScatterNd).apply(null,arguments)},d._SearchSorted=function(){return(d._SearchSorted=d.asm.SearchSorted).apply(null,arguments)},d._SelectV2=function(){return(d._SelectV2=d.asm.SelectV2).apply(null,arguments)},d._Selu=function(){return(d._Selu=d.asm.Selu).apply(null,arguments)},d._Sigmoid=function(){return(d._Sigmoid=d.asm.Sigmoid).apply(null,arguments)},d._Sign=function(){return(d._Sign=d.asm.Sign).apply(null,arguments)},d._Sin=function(){return(d._Sin=d.asm.Sin).apply(null,arguments)},d._Sinh=function(){return(d._Sinh=d.asm.Sinh).apply(null,arguments)},d._Softmax=function(){return(d._Softmax=d.asm.Softmax).apply(null,arguments)},d._Softplus=function(){return(d._Softplus=d.asm.Softplus).apply(null,arguments)},d._SparseFillEmptyRows=function(){return(d._SparseFillEmptyRows=d.asm.SparseFillEmptyRows).apply(null,arguments)},d._SparseReshape=function(){return(d._SparseReshape=d.asm.SparseReshape).apply(null,arguments)},d._SparseSegmentReduction=function(){return(d._SparseSegmentReduction=d.asm.SparseSegmentReduction).apply(null,arguments)},d._SparseToDense=function(){return(d._SparseToDense=d.asm.SparseToDense).apply(null,arguments)},d._Sqrt=function(){return(d._Sqrt=d.asm.Sqrt).apply(null,arguments)},d._Square=function(){return(d._Square=d.asm.Square).apply(null,arguments)},d._SquaredDifference=function(){return(d._SquaredDifference=d.asm.SquaredDifference).apply(null,arguments)},d._Step=function(){return(d._Step=d.asm.Step).apply(null,arguments)},d._StridedSlice=function(){return(d._StridedSlice=d.asm.StridedSlice).apply(null,arguments)},d._Sub=function(){return(d._Sub=d.asm.Sub).apply(null,arguments)},d._Sum=function(){return(d._Sum=d.asm.Sum).apply(null,arguments)},d._Tan=function(){return(d._Tan=d.asm.Tan).apply(null,arguments)},d._Tanh=function(){return(d._Tanh=d.asm.Tanh).apply(null,arguments)},d._TensorScatterUpdate=function(){return(d._TensorScatterUpdate=d.asm.TensorScatterUpdate).apply(null,arguments)},d._Tile=function(){return(d._Tile=d.asm.Tile).apply(null,arguments)},d._TopK=function(){return(d._TopK=d.asm.TopK).apply(null,arguments)},d._Transform=function(){return(d._Transform=d.asm.Transform).apply(null,arguments)},d._Transpose=function(){return(d._Transpose=d.asm.Transpose).apply(null,arguments)},d.__FusedMatMul=function(){return(d.__FusedMatMul=d.asm._FusedMatMul).apply(null,arguments)},d._malloc=function(){return(d._malloc=d.asm.malloc).apply(null,arguments)},d._free=function(){return(d._free=d.asm.free).apply(null,arguments)},d.__emscripten_tls_init=function(){return(d.__emscripten_tls_init=d.asm._emscripten_tls_init).apply(null,arguments)},d._pthread_self=function(){return(We=d._pthread_self=d.asm.pthread_self).apply(null,arguments)}),Be=(d.___errno_location=function(){return(d.___errno_location=d.asm.__errno_location).apply(null,arguments)},d.__emscripten_thread_init=function(){return(Be=d.__emscripten_thread_init=d.asm._emscripten_thread_init).apply(null,arguments)}),Ve=(d.__emscripten_thread_crashed=function(){return(d.__emscripten_thread_crashed=d.asm._emscripten_thread_crashed).apply(null,arguments)},d._emscripten_main_thread_process_queued_calls=function(){return(d._emscripten_main_thread_process_queued_calls=d.asm.emscripten_main_thread_process_queued_calls).apply(null,arguments)},d._emscripten_main_browser_thread_id=function(){return(d._emscripten_main_browser_thread_id=d.asm.emscripten_main_browser_thread_id).apply(null,arguments)},d._emscripten_run_in_main_runtime_thread_js=function(){return(Ve=d._emscripten_run_in_main_runtime_thread_js=d.asm.emscripten_run_in_main_runtime_thread_js).apply(null,arguments)}),Ue=(d._emscripten_dispatch_to_thread_=function(){return(d._emscripten_dispatch_to_thread_=d.asm.emscripten_dispatch_to_thread_).apply(null,arguments)},d.__emscripten_proxy_execute_task_queue=function(){return(Ue=d.__emscripten_proxy_execute_task_queue=d.asm._emscripten_proxy_execute_task_queue).apply(null,arguments)}),Ge=d.__emscripten_thread_free_data=function(){return(Ge=d.__emscripten_thread_free_data=d.asm._emscripten_thread_free_data).apply(null,arguments)},He=d.__emscripten_thread_exit=function(){return(He=d.__emscripten_thread_exit=d.asm._emscripten_thread_exit).apply(null,arguments)},je=d._emscripten_stack_set_limits=function(){return(je=d._emscripten_stack_set_limits=d.asm.emscripten_stack_set_limits).apply(null,arguments)},qe=d.stackSave=function(){return(qe=d.stackSave=d.asm.stackSave).apply(null,arguments)},Xe=d.stackRestore=function(){return(Xe=d.stackRestore=d.asm.stackRestore).apply(null,arguments)},Ke=d.stackAlloc=function(){return(Ke=d.stackAlloc=d.asm.stackAlloc).apply(null,arguments)};function Ze(e){if(e=e||m,!(ae>0)){if(b)return o(d),te(),void startWorker(d);(function(){if(d.preRun)for("function"==typeof d.preRun&&(d.preRun=[d.preRun]);d.preRun.length;)e=d.preRun.shift(),Y.unshift(e);var e;ge(Y)})(),ae>0||(d.setStatus?(d.setStatus("Running..."),setTimeout((function(){setTimeout((function(){d.setStatus("")}),1),t()}),1)):t())}function t(){Oe||(Oe=!0,d.calledRun=!0,!H&&(te(),o(d),d.onRuntimeInitialized&&d.onRuntimeInitialized(),function(){if(!b){if(d.postRun)for("function"==typeof d.postRun&&(d.postRun=[d.postRun]);d.postRun.length;)e=d.postRun.shift(),Q.unshift(e);ge(Q)}var e}()))}}if(d.dynCall_iijjiiii=function(){return(d.dynCall_iijjiiii=d.asm.dynCall_iijjiiii).apply(null,arguments)},d.dynCall_jiji=function(){return(d.dynCall_jiji=d.asm.dynCall_jiji).apply(null,arguments)},d.keepRuntimeAlive=ee,d.wasmMemory=$,d.cwrap=function(e,t,n,a){var r=(n=n||[]).every((e=>"number"===e||"boolean"===e));return"string"!==t&&r&&!a?_e(e):function(){return Fe(e,t,n,arguments)}},d.ExitStatus=pe,d.PThread=ye,ie=function e(){Oe||Ze(),Oe||(ie=e)},d.preInit)for("function"==typeof d.preInit&&(d.preInit=[d.preInit]);d.preInit.length>0;)d.preInit.pop()();if(Ze(),u&&(Pe={uncaughtException:{env:{NODE_ENV:"production",TARGET:"module"}}.listeners("uncaughtException").filter((function(e){return!u.uncaughtException.indexOf(e)>-1})),unhandledRejection:{env:{NODE_ENV:"production",TARGET:"module"}}.listeners("unhandledRejection").filter((function(e){return!u.unhandledRejection.indexOf(e)>-1}))}),"undefined"!=typeof WasmBackendModule)De=WasmBackendModule;else{if(void 0===e)throw new Error("Could not find wasm module in post.js");De=e}if(Pe){var Ye=De._dispose;De._dispose=function(){Ye(),Pe.uncaughtException.forEach((function(e){({env:{NODE_ENV:"production",TARGET:"module"}}).removeListener("uncaughtException",e)})),Pe.unhandledRejection.forEach((function(e){({env:{NODE_ENV:"production",TARGET:"module"}}).removeListener("unhandledRejection",e)}))}}return e.ready});"object"==typeof n&&"object"==typeof r?r.exports=l:s.amdO?void 0===(a=function(){return l}.apply(t,[]))||(e.exports=a):"object"==typeof n&&(n.WasmBackendModuleThreadedSimd=l)})),U=w(((e,t)=>{t.exports.wasmWorkerContents='"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:function(f){(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f)},postMessage:function(msg){parentPort.postMessage(msg)},performance:global.performance||{now:function(){return Date.now()}}})}var initializedJS=false;var pendingNotifiedProxyingQueues=[];function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var instance=new WebAssembly.Instance(Module["wasmModule"],info);receiveInstance(instance);Module["wasmModule"]=null;return instance.exports};self.onunhandledrejection=e=>{throw e.reason??e};self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"})};self.onmessage=e=>{try{if(e.data.cmd==="load"){Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=function(){postMessage({cmd:"callHandler",handler:handler,args:[...arguments]})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}WasmBackendModuleThreadedSimd(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,0,0,1);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){pendingNotifiedProxyingQueues.forEach(queue=>{Module["executeNotifiedProxyingQueue"](queue)});pendingNotifiedProxyingQueues=[];initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){if(ex instanceof Module["ExitStatus"]){if(Module["keepRuntimeAlive"]()){}else{Module["__emscripten_thread_exit"](ex.status)}}else{throw ex}}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="processProxyingQueue"){if(initializedJS){Module["executeNotifiedProxyingQueue"](e.data.queue)}else{pendingNotifiedProxyingQueues.push(e.data.queue)}}else if(e.data.cmd){err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}};'})),G=w(((n,r)=>{var i,l=(i=(i="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||o,function(e){var t,n,a,r=void 0!==(e=e||{})?e:{};r.ready=new Promise((function(e,a){t=e,n=a})),{env:{NODE_ENV:"production",TARGET:"module"}}.listeners&&(a={uncaughtException:{env:{NODE_ENV:"production",TARGET:"module"}}.listeners("uncaughtException"),unhandledRejection:{env:{NODE_ENV:"production",TARGET:"module"}}.listeners("unhandledRejection")});var s,o,l,u=Object.assign({},r),d=[],p="object"==typeof window,c="function"==typeof importScripts,h="object"==typeof{env:{NODE_ENV:"production",TARGET:"module"}}.versions&&"string"==typeof{env:{NODE_ENV:"production",TARGET:"module"}}.versions.node,f="";if(h){var m=D(),y=z();f=c?y.dirname(f)+"/":"//",s=(e,t)=>(e=B(e)?new URL(e):y.normalize(e),m.readFileSync(e,t?void 0:"utf8")),l=e=>{var t=s(e,!0);return t.buffer||(t=new Uint8Array(t)),t},o=(e,t,n)=>{e=B(e)?new URL(e):y.normalize(e),m.readFile(e,(function(e,a){e?n(e):t(a.buffer)}))},{env:{NODE_ENV:"production",TARGET:"module"}}.argv.length>1&&{env:{NODE_ENV:"production",TARGET:"module"}}.argv[1].replace(/\\/g,"/"),d={env:{NODE_ENV:"production",TARGET:"module"}}.argv.slice(2),{env:{NODE_ENV:"production",TARGET:"module"}}.on("uncaughtException",(function(e){if(!(e instanceof U))throw e})),{env:{NODE_ENV:"production",TARGET:"module"}}.on("unhandledRejection",(function(e){throw e})),r.inspect=function(){return"[Emscripten Module object]"}}else(p||c)&&(c?f=self.location.href:"undefined"!=typeof document&&document.currentScript&&(f=document.currentScript.src),i&&(f=i),f=0!==f.indexOf("blob:")?f.substr(0,f.replace(/[?#].*/,"").lastIndexOf("/")+1):"",s=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},c&&(l=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),o=(e,t,n)=>{var a=new XMLHttpRequest;a.open("GET",e,!0),a.responseType="arraybuffer",a.onload=()=>{200==a.status||0==a.status&&a.response?t(a.response):n()},a.onerror=n,a.send(null)});var g,A=r.print||console.log.bind(console),x=r.printErr||console.warn.bind(console);Object.assign(r,u),u=null,r.arguments&&(d=r.arguments),r.thisProgram&&r.thisProgram,r.quit&&r.quit,r.wasmBinary&&(g=r.wasmBinary),r.noExitRuntime,"object"!=typeof WebAssembly&&L("no native wasm support detected");var b,v,w,k,I,S=!1,N="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function C(e,t,n){for(var a=(t>>>=0)+n,r=t;e[r]&&!(r>=a);)++r;if(r-t>16&&e.buffer&&N)return N.decode(e.subarray(t,r));for(var i="";t<r;){var s=e[t++];if(128&s){var o=63&e[t++];if(192!=(224&s)){var l=63&e[t++];if((s=224==(240&s)?(15&s)<<12|o<<6|l:(7&s)<<18|o<<12|l<<6|63&e[t++])<65536)i+=String.fromCharCode(s);else{var u=s-65536;i+=String.fromCharCode(55296|u>>10,56320|1023&u)}}else i+=String.fromCharCode((31&s)<<6|o)}else i+=String.fromCharCode(s)}return i}function T(e){v=e,r.HEAP8=w=new Int8Array(e),r.HEAP16=new Int16Array(e),r.HEAP32=new Int32Array(e),r.HEAPU8=k=new Uint8Array(e),r.HEAPU16=new Uint16Array(e),r.HEAPU32=I=new Uint32Array(e),r.HEAPF32=new Float32Array(e),r.HEAPF64=new Float64Array(e)}r.INITIAL_MEMORY;var E,R,$=[],M=[],_=[],F=0,O=null,P=null;function L(e){r.onAbort&&r.onAbort(e),x(e="Aborted("+e+")"),S=!0,e+=". Build with -sASSERTIONS for more info.";var t=new WebAssembly.RuntimeError(e);throw n(t),t}function W(e){return e.startsWith("data:application/octet-stream;base64,")}function B(e){return e.startsWith("file://")}function V(e){try{if(e==E&&g)return new Uint8Array(g);if(l)return l(e);throw"both async and sync fetching of the wasm failed"}catch(e){L(e)}}function U(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function G(e){for(;e.length>0;)e.shift()(r)}function H(e){try{return b.grow(e-v.byteLength+65535>>>16),T(b.buffer),1}catch(e){}}W(E="tfjs-backend-wasm.wasm")||(R=E,E=r.locateFile?r.locateFile(R,f):f+R);var j=[null,[],[]];function q(e,t){var n=j[e];0===t||10===t?((1===e?A:x)(C(n,0)),n.length=0):n.push(t)}function X(e){return r["_"+e]}var K,Z,Y,J={abort:function(){L("")},emscripten_get_heap_max:function(){return 4294901760},emscripten_memcpy_big:function(e,t,n){k.copyWithin(e>>>0,t>>>0,t+n>>>0)},emscripten_resize_heap:function(e){var t,n=k.length,a=4294901760;if((e>>>=0)>a)return!1;for(var r=1;r<=4;r*=2){var i=n*(1+.2/r);if(i=Math.min(i,e+100663296),H(Math.min(a,(t=Math.max(e,i))+(65536-t%65536)%65536)))return!0}return!1},fd_close:function(e){return 52},fd_seek:function(e,t,n,a,r){return 70},fd_write:function(e,t,n,a){for(var r=0,i=0;i<n;i++){var s=I[t>>>2],o=I[t+4>>>2];t+=8;for(var l=0;l<o;l++)q(e,k[s+l>>>0]);r+=o}return I[a>>>2]=r,0}},Q=(function(){var e={env:J,wasi_snapshot_preview1:J};function t(e,t){var n=e.exports;r.asm=n,T((b=r.asm.memory).buffer),r.asm.__indirect_function_table,function(e){M.unshift(e)}(r.asm.__wasm_call_ctors),function(e){if(F--,r.monitorRunDependencies&&r.monitorRunDependencies(F),0==F&&(null!==O&&(clearInterval(O),O=null),P)){var t=P;P=null,t()}}()}function a(e){t(e.instance)}function i(t){return function(){if(!g&&(p||c)){if("function"==typeof fetch&&!B(E))return fetch(E,{credentials:"same-origin"}).then((function(e){if(!e.ok)throw"failed to load wasm binary file at '"+E+"'";return e.arrayBuffer()})).catch((function(){return V(E)}));if(o)return new Promise((function(e,t){o(E,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return V(E)}))}().then((function(t){return WebAssembly.instantiate(t,e)})).then((function(e){return e})).then(t,(function(e){x("failed to asynchronously prepare wasm: "+e),L(e)}))}if(F++,r.monitorRunDependencies&&r.monitorRunDependencies(F),r.instantiateWasm)try{return r.instantiateWasm(e,t)}catch(e){x("Module.instantiateWasm callback failed with error: "+e),n(e)}(g||"function"!=typeof WebAssembly.instantiateStreaming||W(E)||B(E)||h||"function"!=typeof fetch?i(a):fetch(E,{credentials:"same-origin"}).then((function(t){return WebAssembly.instantiateStreaming(t,e).then(a,(function(e){return x("wasm streaming compile failed: "+e),x("falling back to ArrayBuffer instantiation"),i(a)}))}))).catch(n)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.__wasm_call_ctors).apply(null,arguments)},r._init=function(){return(r._init=r.asm.init).apply(null,arguments)},r._init_with_threads_count=function(){return(r._init_with_threads_count=r.asm.init_with_threads_count).apply(null,arguments)},r._get_threads_count=function(){return(r._get_threads_count=r.asm.get_threads_count).apply(null,arguments)},r._register_tensor=function(){return(r._register_tensor=r.asm.register_tensor).apply(null,arguments)},r._dispose_data=function(){return(r._dispose_data=r.asm.dispose_data).apply(null,arguments)},r._dispose=function(){return(r._dispose=r.asm.dispose).apply(null,arguments)},r._Abs=function(){return(r._Abs=r.asm.Abs).apply(null,arguments)},r._Acos=function(){return(r._Acos=r.asm.Acos).apply(null,arguments)},r._Acosh=function(){return(r._Acosh=r.asm.Acosh).apply(null,arguments)},r._Add=function(){return(r._Add=r.asm.Add).apply(null,arguments)},r._AddN=function(){return(r._AddN=r.asm.AddN).apply(null,arguments)},r._All=function(){return(r._All=r.asm.All).apply(null,arguments)},r._Any=function(){return(r._Any=r.asm.Any).apply(null,arguments)},r._ArgMax=function(){return(r._ArgMax=r.asm.ArgMax).apply(null,arguments)},r._ArgMin=function(){return(r._ArgMin=r.asm.ArgMin).apply(null,arguments)},r._Asin=function(){return(r._Asin=r.asm.Asin).apply(null,arguments)},r._Asinh=function(){return(r._Asinh=r.asm.Asinh).apply(null,arguments)},r._Atan=function(){return(r._Atan=r.asm.Atan).apply(null,arguments)},r._Atan2=function(){return(r._Atan2=r.asm.Atan2).apply(null,arguments)},r._Atanh=function(){return(r._Atanh=r.asm.Atanh).apply(null,arguments)},r._AvgPool=function(){return(r._AvgPool=r.asm.AvgPool).apply(null,arguments)},r._AvgPool3D=function(){return(r._AvgPool3D=r.asm.AvgPool3D).apply(null,arguments)},r._AvgPool3DGrad=function(){return(r._AvgPool3DGrad=r.asm.AvgPool3DGrad).apply(null,arguments)},r._AvgPoolGrad=function(){return(r._AvgPoolGrad=r.asm.AvgPoolGrad).apply(null,arguments)},r._BatchMatMul=function(){return(r._BatchMatMul=r.asm.BatchMatMul).apply(null,arguments)},r._Bincount=function(){return(r._Bincount=r.asm.Bincount).apply(null,arguments)},r._BitwiseAnd=function(){return(r._BitwiseAnd=r.asm.BitwiseAnd).apply(null,arguments)},r._Ceil=function(){return(r._Ceil=r.asm.Ceil).apply(null,arguments)},r._ClipByValue=function(){return(r._ClipByValue=r.asm.ClipByValue).apply(null,arguments)},r._Conv2D=function(){return(r._Conv2D=r.asm.Conv2D).apply(null,arguments)},r._Conv2DBackpropInput=function(){return(r._Conv2DBackpropInput=r.asm.Conv2DBackpropInput).apply(null,arguments)},r._Conv3D=function(){return(r._Conv3D=r.asm.Conv3D).apply(null,arguments)},r._Conv3DBackpropFilterV2=function(){return(r._Conv3DBackpropFilterV2=r.asm.Conv3DBackpropFilterV2).apply(null,arguments)},r._Conv3DBackpropInputV2=function(){return(r._Conv3DBackpropInputV2=r.asm.Conv3DBackpropInputV2).apply(null,arguments)},r._Cos=function(){return(r._Cos=r.asm.Cos).apply(null,arguments)},r._Cosh=function(){return(r._Cosh=r.asm.Cosh).apply(null,arguments)},r._CropAndResize=function(){return(r._CropAndResize=r.asm.CropAndResize).apply(null,arguments)},r._Cumprod=function(){return(r._Cumprod=r.asm.Cumprod).apply(null,arguments)},r._Cumsum=function(){return(r._Cumsum=r.asm.Cumsum).apply(null,arguments)},r._DenseBincount=function(){return(r._DenseBincount=r.asm.DenseBincount).apply(null,arguments)},r._DepthToSpace=function(){return(r._DepthToSpace=r.asm.DepthToSpace).apply(null,arguments)},r._DepthwiseConv2dNative=function(){return(r._DepthwiseConv2dNative=r.asm.DepthwiseConv2dNative).apply(null,arguments)},r._Diag=function(){return(r._Diag=r.asm.Diag).apply(null,arguments)},r._Dilation2D=function(){return(r._Dilation2D=r.asm.Dilation2D).apply(null,arguments)},r._Dilation2DBackpropFilter=function(){return(r._Dilation2DBackpropFilter=r.asm.Dilation2DBackpropFilter).apply(null,arguments)},r._Dilation2DBackpropInput=function(){return(r._Dilation2DBackpropInput=r.asm.Dilation2DBackpropInput).apply(null,arguments)},r._Elu=function(){return(r._Elu=r.asm.Elu).apply(null,arguments)},r._EluGrad=function(){return(r._EluGrad=r.asm.EluGrad).apply(null,arguments)},r._Equal=function(){return(r._Equal=r.asm.Equal).apply(null,arguments)},r._Erf=function(){return(r._Erf=r.asm.Erf).apply(null,arguments)},r._Exp=function(){return(r._Exp=r.asm.Exp).apply(null,arguments)},r._Expm1=function(){return(r._Expm1=r.asm.Expm1).apply(null,arguments)},r._FlipLeftRight=function(){return(r._FlipLeftRight=r.asm.FlipLeftRight).apply(null,arguments)},r._Floor=function(){return(r._Floor=r.asm.Floor).apply(null,arguments)},r._FloorDiv=function(){return(r._FloorDiv=r.asm.FloorDiv).apply(null,arguments)},r._FusedBatchNorm=function(){return(r._FusedBatchNorm=r.asm.FusedBatchNorm).apply(null,arguments)},r._FusedConv2D=function(){return(r._FusedConv2D=r.asm.FusedConv2D).apply(null,arguments)},r._FusedDepthwiseConv2D=function(){return(r._FusedDepthwiseConv2D=r.asm.FusedDepthwiseConv2D).apply(null,arguments)},r._Gather=function(){return(r._Gather=r.asm.Gather).apply(null,arguments)},r._GatherNd=function(){return(r._GatherNd=r.asm.GatherNd).apply(null,arguments)},r._Greater=function(){return(r._Greater=r.asm.Greater).apply(null,arguments)},r._GreaterEqual=function(){return(r._GreaterEqual=r.asm.GreaterEqual).apply(null,arguments)},r._IsFinite=function(){return(r._IsFinite=r.asm.IsFinite).apply(null,arguments)},r._IsInf=function(){return(r._IsInf=r.asm.IsInf).apply(null,arguments)},r._IsNan=function(){return(r._IsNan=r.asm.IsNan).apply(null,arguments)},r._LRN=function(){return(r._LRN=r.asm.LRN).apply(null,arguments)},r._LRNGrad=function(){return(r._LRNGrad=r.asm.LRNGrad).apply(null,arguments)},r._LeakyRelu=function(){return(r._LeakyRelu=r.asm.LeakyRelu).apply(null,arguments)},r._Less=function(){return(r._Less=r.asm.Less).apply(null,arguments)},r._LessEqual=function(){return(r._LessEqual=r.asm.LessEqual).apply(null,arguments)},r._LinSpace=function(){return(r._LinSpace=r.asm.LinSpace).apply(null,arguments)},r._Log=function(){return(r._Log=r.asm.Log).apply(null,arguments)},r._Log1p=function(){return(r._Log1p=r.asm.Log1p).apply(null,arguments)},r._LogicalAnd=function(){return(r._LogicalAnd=r.asm.LogicalAnd).apply(null,arguments)},r._LogicalNot=function(){return(r._LogicalNot=r.asm.LogicalNot).apply(null,arguments)},r._LogicalOr=function(){return(r._LogicalOr=r.asm.LogicalOr).apply(null,arguments)},r._LogicalXor=function(){return(r._LogicalXor=r.asm.LogicalXor).apply(null,arguments)},r._Max=function(){return(r._Max=r.asm.Max).apply(null,arguments)},r._MaxPool=function(){return(r._MaxPool=r.asm.MaxPool).apply(null,arguments)},r._MaxPool3D=function(){return(r._MaxPool3D=r.asm.MaxPool3D).apply(null,arguments)},r._MaxPool3DGrad=function(){return(r._MaxPool3DGrad=r.asm.MaxPool3DGrad).apply(null,arguments)},r._MaxPoolGrad=function(){return(r._MaxPoolGrad=r.asm.MaxPoolGrad).apply(null,arguments)},r._MaxPoolWithArgmax=function(){return(r._MaxPoolWithArgmax=r.asm.MaxPoolWithArgmax).apply(null,arguments)},r._Maximum=function(){return(r._Maximum=r.asm.Maximum).apply(null,arguments)},r._Mean=function(){return(r._Mean=r.asm.Mean).apply(null,arguments)},r._Min=function(){return(r._Min=r.asm.Min).apply(null,arguments)},r._Minimum=function(){return(r._Minimum=r.asm.Minimum).apply(null,arguments)},r._MirrorPad=function(){return(r._MirrorPad=r.asm.MirrorPad).apply(null,arguments)},r._Mod=function(){return(r._Mod=r.asm.Mod).apply(null,arguments)},r._Multinomial=function(){return(r._Multinomial=r.asm.Multinomial).apply(null,arguments)},r._Multiply=function(){return(r._Multiply=r.asm.Multiply).apply(null,arguments)},r._Neg=function(){return(r._Neg=r.asm.Neg).apply(null,arguments)},r._NonMaxSuppressionV3=function(){return(r._NonMaxSuppressionV3=r.asm.NonMaxSuppressionV3).apply(null,arguments)},r._NonMaxSuppressionV4=function(){return(r._NonMaxSuppressionV4=r.asm.NonMaxSuppressionV4).apply(null,arguments)},r._NonMaxSuppressionV5=function(){return(r._NonMaxSuppressionV5=r.asm.NonMaxSuppressionV5).apply(null,arguments)},r._NotEqual=function(){return(r._NotEqual=r.asm.NotEqual).apply(null,arguments)},r._OneHot=function(){return(r._OneHot=r.asm.OneHot).apply(null,arguments)},r._PadV2=function(){return(r._PadV2=r.asm.PadV2).apply(null,arguments)},r._Pow=function(){return(r._Pow=r.asm.Pow).apply(null,arguments)},r._Prelu=function(){return(r._Prelu=r.asm.Prelu).apply(null,arguments)},r._Prod=function(){return(r._Prod=r.asm.Prod).apply(null,arguments)},r._RealDiv=function(){return(r._RealDiv=r.asm.RealDiv).apply(null,arguments)},r._Reciprocal=function(){return(r._Reciprocal=r.asm.Reciprocal).apply(null,arguments)},r._Relu=function(){return(r._Relu=r.asm.Relu).apply(null,arguments)},r._Relu6=function(){return(r._Relu6=r.asm.Relu6).apply(null,arguments)},r._ResizeBilinear=function(){return(r._ResizeBilinear=r.asm.ResizeBilinear).apply(null,arguments)},r._ResizeBilinearGrad=function(){return(r._ResizeBilinearGrad=r.asm.ResizeBilinearGrad).apply(null,arguments)},r._ResizeNearestNeighbor=function(){return(r._ResizeNearestNeighbor=r.asm.ResizeNearestNeighbor).apply(null,arguments)},r._ResizeNearestNeighborGrad=function(){return(r._ResizeNearestNeighborGrad=r.asm.ResizeNearestNeighborGrad).apply(null,arguments)},r._Reverse=function(){return(r._Reverse=r.asm.Reverse).apply(null,arguments)},r._RotateWithOffset=function(){return(r._RotateWithOffset=r.asm.RotateWithOffset).apply(null,arguments)},r._Round=function(){return(r._Round=r.asm.Round).apply(null,arguments)},r._Rsqrt=function(){return(r._Rsqrt=r.asm.Rsqrt).apply(null,arguments)},r._ScatterNd=function(){return(r._ScatterNd=r.asm.ScatterNd).apply(null,arguments)},r._SearchSorted=function(){return(r._SearchSorted=r.asm.SearchSorted).apply(null,arguments)},r._SelectV2=function(){return(r._SelectV2=r.asm.SelectV2).apply(null,arguments)},r._Selu=function(){return(r._Selu=r.asm.Selu).apply(null,arguments)},r._Sigmoid=function(){return(r._Sigmoid=r.asm.Sigmoid).apply(null,arguments)},r._Sign=function(){return(r._Sign=r.asm.Sign).apply(null,arguments)},r._Sin=function(){return(r._Sin=r.asm.Sin).apply(null,arguments)},r._Sinh=function(){return(r._Sinh=r.asm.Sinh).apply(null,arguments)},r._Softmax=function(){return(r._Softmax=r.asm.Softmax).apply(null,arguments)},r._Softplus=function(){return(r._Softplus=r.asm.Softplus).apply(null,arguments)},r._SparseFillEmptyRows=function(){return(r._SparseFillEmptyRows=r.asm.SparseFillEmptyRows).apply(null,arguments)},r._SparseReshape=function(){return(r._SparseReshape=r.asm.SparseReshape).apply(null,arguments)},r._SparseSegmentReduction=function(){return(r._SparseSegmentReduction=r.asm.SparseSegmentReduction).apply(null,arguments)},r._SparseToDense=function(){return(r._SparseToDense=r.asm.SparseToDense).apply(null,arguments)},r._Sqrt=function(){return(r._Sqrt=r.asm.Sqrt).apply(null,arguments)},r._Square=function(){return(r._Square=r.asm.Square).apply(null,arguments)},r._SquaredDifference=function(){return(r._SquaredDifference=r.asm.SquaredDifference).apply(null,arguments)},r._Step=function(){return(r._Step=r.asm.Step).apply(null,arguments)},r._StridedSlice=function(){return(r._StridedSlice=r.asm.StridedSlice).apply(null,arguments)},r._Sub=function(){return(r._Sub=r.asm.Sub).apply(null,arguments)},r._Sum=function(){return(r._Sum=r.asm.Sum).apply(null,arguments)},r._Tan=function(){return(r._Tan=r.asm.Tan).apply(null,arguments)},r._Tanh=function(){return(r._Tanh=r.asm.Tanh).apply(null,arguments)},r._TensorScatterUpdate=function(){return(r._TensorScatterUpdate=r.asm.TensorScatterUpdate).apply(null,arguments)},r._Tile=function(){return(r._Tile=r.asm.Tile).apply(null,arguments)},r._TopK=function(){return(r._TopK=r.asm.TopK).apply(null,arguments)},r._Transform=function(){return(r._Transform=r.asm.Transform).apply(null,arguments)},r._Transpose=function(){return(r._Transpose=r.asm.Transpose).apply(null,arguments)},r.__FusedMatMul=function(){return(r.__FusedMatMul=r.asm._FusedMatMul).apply(null,arguments)},r._malloc=function(){return(r._malloc=r.asm.malloc).apply(null,arguments)},r._free=function(){return(r._free=r.asm.free).apply(null,arguments)},r.___errno_location=function(){return(r.___errno_location=r.asm.__errno_location).apply(null,arguments)},r.stackSave=function(){return(Q=r.stackSave=r.asm.stackSave).apply(null,arguments)}),ee=r.stackRestore=function(){return(ee=r.stackRestore=r.asm.stackRestore).apply(null,arguments)},te=r.stackAlloc=function(){return(te=r.stackAlloc=r.asm.stackAlloc).apply(null,arguments)};function ne(e){function n(){K||(K=!0,r.calledRun=!0,!S&&(G(M),t(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)e=r.postRun.shift(),_.unshift(e);var e;G(_)}()))}e=e||d,F>0||(function(){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)e=r.preRun.shift(),$.unshift(e);var e;G($)}(),F>0)||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),n()}),1)):n())}if(r.dynCall_iijjiiii=function(){return(r.dynCall_iijjiiii=r.asm.dynCall_iijjiiii).apply(null,arguments)},r.dynCall_jiji=function(){return(r.dynCall_jiji=r.asm.dynCall_jiji).apply(null,arguments)},r.cwrap=function(e,t,n,a){var r=(n=n||[]).every((e=>"number"===e||"boolean"===e));return"string"!==t&&r&&!a?X(e):function(){return function(e,t,n,a,r){var i={string:e=>{var t=0;if(null!=e&&0!==e){var n=1+(e.length<<2);!function(e,t,n){!function(e,t,n,a){if(!(a>0))return 0;for(var r=(n>>>=0)+a-1,i=0;i<e.length;++i){var s=e.charCodeAt(i);if(s>=55296&&s<=57343&&(s=65536+((1023&s)<<10)|1023&e.charCodeAt(++i)),s<=127){if(n>=r)break;t[n++>>>0]=s}else if(s<=2047){if(n+1>=r)break;t[n++>>>0]=192|s>>6,t[n++>>>0]=128|63&s}else if(s<=65535){if(n+2>=r)break;t[n++>>>0]=224|s>>12,t[n++>>>0]=128|s>>6&63,t[n++>>>0]=128|63&s}else{if(n+3>=r)break;t[n++>>>0]=240|s>>18,t[n++>>>0]=128|s>>12&63,t[n++>>>0]=128|s>>6&63,t[n++>>>0]=128|63&s}}t[n>>>0]=0}(e,k,t,n)}(e,t=te(n),n)}return t},array:e=>{var t=te(e.length);return function(e,t){w.set(e,t>>>0)}(e,t),t}},s=X(e),o=[],l=0;if(a)for(var u=0;u<a.length;u++){var d=i[n[u]];d?(0===l&&(l=Q()),o[u]=d(a[u])):o[u]=a[u]}var p,c=s.apply(null,o);return p=c,0!==l&&ee(l),c=function(e){return"string"===t?function(e,t){return(e>>>=0)?C(k,e,void 0):""}(e):"boolean"===t?!!e:e}(p),c}(e,t,n,arguments)}},P=function e(){K||ne(),K||(P=e)},r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();if(ne(),a&&(Z={uncaughtException:{env:{NODE_ENV:"production",TARGET:"module"}}.listeners("uncaughtException").filter((function(e){return!a.uncaughtException.indexOf(e)>-1})),unhandledRejection:{env:{NODE_ENV:"production",TARGET:"module"}}.listeners("unhandledRejection").filter((function(e){return!a.unhandledRejection.indexOf(e)>-1}))}),void 0!==e)Y=e;else{if("undefined"==typeof WasmBackendModuleThreadedSimd)throw new Error("Could not find wasm module in post.js");Y=WasmBackendModuleThreadedSimd}if(Z){var ae=Y._dispose;Y._dispose=function(){ae(),Z.uncaughtException.forEach((function(e){({env:{NODE_ENV:"production",TARGET:"module"}}).removeListener("uncaughtException",e)})),Z.unhandledRejection.forEach((function(e){({env:{NODE_ENV:"production",TARGET:"module"}}).removeListener("unhandledRejection",e)}))}}return e.ready});"object"==typeof n&&"object"==typeof r?r.exports=l:s.amdO?void 0===(a=function(){return l}.apply(t,[]))||(e.exports=a):"object"==typeof n&&(n.WasmBackendModule=l)})),H=class{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}},j=class{refCount(e){return q("refCount")}incRef(e){return q("incRef")}timerAvailable(){return!0}time(e){return q("time")}read(e){return q("read")}readSync(e){return q("readSync")}readToGPU(e,t){return q("readToGPU")}numDataIds(){return q("numDataIds")}disposeData(e,t){return q("disposeData")}write(e,t,n){return q("write")}move(e,t,n,a,r){return q("move")}createTensorFromGPUData(e,t,n){return q("createTensorFromGPUData")}memory(){return q("memory")}floatPrecision(){return q("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return q("dispose")}};function q(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function X(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,J(e,t,n)}function K(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,a=0;for(;n>0;)a=Math.random()*n|0,n--,J(e,n,a),J(t,n,a)}function Z(e,t,n){return Math.max(e,Math.min(t,n))}function Y(e){return e%2==0?e:e+1}function J(e,t,n){let a=e[t];e[t]=e[n],e[n]=a}function Q(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function ee(e,t){let n=Math.random();return t*n+(1-n)*e}function te(e,t){let n=0;for(let a=0;a<e.length;a++){let r=Number(e[a])-Number(t[a]);n+=r*r}return n}function ne(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function ae(e,t,n=""){ne(le(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function re(e){ne(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function ie(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function se(e){return 0===e.length}function oe(e,t){if(e===t)return!0;if(null==e||null==t||e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(null!==e[n]&&null!==t[n]&&e[n]!==t[n])return!1;return!0}function le(e,t){if(e===t)return!0;if(null==e||null==t||e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function ue(e){return e%1==0}function de(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{let t=Math.exp(2*e);return(t-1)/(t+1)}}function pe(e){let t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function ce(e){let t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return X(t),t}function he(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function fe(e,t=(e=>0),n,a){return new Promise(((r,i)=>{let s=0,o=()=>{if(e())return void r();s++;let l=t(s);null!=n&&s>=n?i():null!=a?a(o,l):setTimeout(o,l)};o()}))}function me(e,t){let n=1,a=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==a)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${a} and dim ${t}`);a=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===a){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);let r=e.slice();return r[a]=t/n,r}function ye(e,t){let n=t.length;return ne((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),ne(e.every((e=>ue(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function ge(e,t){let n=[],a=[],r=null!=t&&Array.isArray(t)&&0===t.length,i=null==t||r?null:ye(t,e).sort(),s=0;for(let t=0;t<e.length;++t){if(null!=i){if(i[s]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==i[s]||i[s]>t)&&1===e[t]&&(n.push(e[t]),a.push(t)),i[s]<=t&&s++}1!==e[t]&&(n.push(e[t]),a.push(t))}return{newShape:n,keptDims:a}}function Ae(e,t){return xe(e,t)}function xe(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function be(e,t){for(let n=0;n<e.length;n++){let a=e[n];if(isNaN(a)||!isFinite(a))throw Error(`A tensor of type ${t} being uploaded contains ${a}.`)}}function ve(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function we(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function ke(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function Ie(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function Se(e){return"string"==typeof e||e instanceof String}function Ne(e){return"boolean"==typeof e}function Ce(e){return"number"==typeof e}function Te(e){return Array.isArray(e)?Te(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":Ce(e)?"float32":Se(e)?"string":Ne(e)?"bool":"float32"}function Ee(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Re(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function $e(e){let t=e.length;if(t<2)return[];let n=new Array(t-1);n[t-2]=e[t-1];for(let a=t-3;a>=0;--a)n[a]=n[a+1]*e[a+1];return n}function Me(e,t,n,a=!1){let r=new Array;if(1===t.length){let i=t[0]*(a?2:1);for(let t=0;t<i;t++)r[t]=n[e+t]}else{let i=t[0],s=t.slice(1),o=s.reduce(((e,t)=>e*t))*(a?2:1);for(let t=0;t<i;t++)r[t]=Me(e+t*o,s,n,a)}return r}function _e(e,t,n=!1){if(0===e.length)return t[0];let a=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===a)return[];if(a!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return Me(0,e,t,n)}function Fe(e,t){if(Array.isArray(e))return e;if("float32"===t)return e instanceof Float32Array?e:new Float32Array(e);if("int32"===t)return e instanceof Int32Array?e:new Int32Array(e);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(e));throw new Error(`Unknown dtype ${t}`)}function Oe(e,t){let n=Pe(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function Pe(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function De(e,t){let n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return _e(e,new Float32Array(n));if("int32"===t)return _e(e,new Int32Array(n));if("bool"===t)return _e(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function ze(e){e.forEach((t=>{ne(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function Le(e,t,n){if(0===t)return 0;if(1===t)return e[0];let a=e[e.length-1];for(let t=0;t<e.length-1;++t)a+=n[t]*e[t];return a}function We(e,t,n){if(0===t)return[];if(1===t)return[e];let a=new Array(t);for(let t=0;t<a.length-1;++t)a[t]=Math.floor(e/n[t]),e-=a[t]*n[t];return a[a.length-1]=e,a}function Be(e){return e&&e.then&&"function"==typeof e.then}var Ve="tfjsflags",Ue=class{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=Ge,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(He().getBool("IS_TEST")||He().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){let t=this.urlFlags[e];He().getBool("IS_TEST")||He().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];let t=this.evaluateFlag(e);if(Be(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;let e=this.getQueryParams(this.global.location.search);Ve in e&&e[Ve].split(",").forEach((e=>{let[t,n]=e.split(":");this.urlFlags[t]=function(e,t){let n=t.toLowerCase();return"true"===n||"false"===n?"true"===n:""+ +n===n?+n:t}(0,n)}))}};function Ge(e){let t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function He(){return qe}var je,qe=null;function Xe(){if(null==je){let e;e="undefined"!=typeof window?window:void 0!==s.g?s.g:{env:{NODE_ENV:"production",TARGET:"module"}},je=e}return je}function Ke(e,t){let n=function(){let e=Xe();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{let a=t();return n.set(e,a),n.get(e)}}var Ze="Abs",Ye="Acos",Je="Acosh",Qe="Add",et="AddN",tt="All",nt="Any",at="ArgMax",rt="ArgMin",it="Asin",st="Asinh",ot="Atan",lt="Atanh",ut="Atan2",dt="AvgPool",pt="AvgPoolGrad",ct="AvgPool3D",ht="AvgPool3DGrad",ft="BatchMatMul",mt="BatchToSpaceND",yt="Bincount",gt="BitwiseAnd",At="BroadcastTo",xt="BroadcastArgs",bt="Cast",vt="Ceil",wt="ClipByValue",kt="Complex",It="ComplexAbs",St="Concat",Nt="Conv2D",Ct="Conv2DBackpropFilter",Tt="Conv2DBackpropInput",Et="Conv3D",Rt="Conv3DBackpropFilterV2",$t="Conv3DBackpropInputV2",Mt="Cos",_t="Cosh",Ft="Cumprod",Ot="Cumsum",Pt="CropAndResize",Dt="DenseBincount",zt="DepthToSpace",Lt="DepthwiseConv2dNative",Wt="DepthwiseConv2dNativeBackpropFilter",Bt="DepthwiseConv2dNativeBackpropInput",Vt="Diag",Ut="Dilation2D",Gt="Dilation2DBackpropInput",Ht="Dilation2DBackpropFilter",jt="Draw",qt="RealDiv",Xt="Einsum",Kt="Elu",Zt="EluGrad",Yt="Erf",Jt="Equal",Qt="Exp",en="ExpandDims",tn="Expm1",nn="FFT",an="Fill",rn="FlipLeftRight",sn="Floor",on="FloorDiv",ln="FusedBatchNorm",un="GatherV2",dn="GatherNd",pn="Greater",cn="GreaterEqual",hn="Identity",fn="IFFT",mn="Imag",yn="IsFinite",gn="IsInf",An="IsNan",xn="LeakyRelu",bn="Less",vn="LessEqual",wn="LinSpace",kn="Log",In="Log1p",Sn="LogicalAnd",Nn="LogicalNot",Cn="LogicalOr",Tn="LogicalXor",En="LogSoftmax",Rn="LowerBound",$n="LRN",Mn="LRNGrad",_n="MatrixBandPart",Fn="Max",On="Maximum",Pn="MaxPool",Dn="MaxPoolGrad",zn="MaxPool3D",Ln="MaxPool3DGrad",Wn="MaxPoolWithArgmax",Bn="Mean",Vn="Min",Un="Minimum",Gn="MirrorPad",Hn="Mod",jn="Multinomial",qn="Multiply",Xn="Neg",Kn="NotEqual",Zn="NonMaxSuppressionV3",Yn="NonMaxSuppressionV4",Jn="NonMaxSuppressionV5",Qn="OnesLike",ea="OneHot",ta="Pack",na="PadV2",aa="Pool",ra="Pow",ia="Prelu",sa="Prod",oa="RaggedGather",la="RaggedRange",ua="RaggedTensorToTensor",da="Range",pa="Real",ca="Reciprocal",ha="Relu",fa="Reshape",ma="ResizeNearestNeighbor",ya="ResizeNearestNeighborGrad",ga="ResizeBilinear",Aa="ResizeBilinearGrad",xa="Relu6",ba="Reverse",va="Round",wa="Rsqrt",ka="ScatterNd",Ia="TensorScatterUpdate",Sa="SearchSorted",Na="Select",Ca="Selu",Ta="Slice",Ea="Sin",Ra="Sinh",$a="Sign",Ma="Sigmoid",_a="Softplus",Fa="Sqrt",Oa="Sum",Pa="SpaceToBatchND",Da="SplitV",za="Softmax",La="SparseFillEmptyRows",Wa="SparseReshape",Ba="SparseSegmentMean",Va="SparseSegmentSum",Ua="SparseToDense",Ga="SquaredDifference",Ha="Square",ja="StaticRegexReplace",qa="StridedSlice",Xa="StringNGrams",Ka="StringSplit",Za="StringToHashBucketFast",Ya="Sub",Ja="Tan",Qa="Tanh",er="Tile",tr="TopK",nr="Transform",ar="Transpose",rr="Unique",ir="Unpack",sr="UnsortedSegmentSum",or="UpperBound",lr="ZerosLike",ur="Step",dr="FromPixels",pr="RotateWithOffset",cr="_FusedMatMul",hr="FusedConv2D",fr="FusedDepthwiseConv2D";function mr(...e){He().getBool("IS_TEST")||He().getBool("PROD")||console.warn(...e)}function yr(...e){He().getBool("IS_TEST")||He().getBool("PROD")||console.log(...e)}var gr=Ke("kernelRegistry",(()=>new Map)),Ar=Ke("gradRegistry",(()=>new Map));function xr(e,t){let n=Cr(e,t);return gr.get(n)}function br(e){return Ar.get(e)}function vr(e){let t=gr.entries(),n=[];for(;;){let{done:a,value:r}=t.next();if(a)break;let[i,s]=r,[o]=i.split("_");o===e&&n.push(s)}return n}function wr(e){let{kernelName:t,backendName:n}=e,a=Cr(t,n);gr.has(a)&&mr(`The kernel '${t}' for backend '${n}' is already registered`),gr.set(a,e)}function kr(e){let{kernelName:t}=e;Ar.has(t)&&He().getBool("DEBUG")&&mr(`Overriding the gradient for '${t}'`),Ar.set(t,e)}function Ir(e,t){let n=Cr(e,t);if(!gr.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);gr.delete(n)}function Sr(e){if(!Ar.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);Ar.delete(e)}function Nr(e,t){vr(e).forEach((e=>{wr(Object.assign({},e,{backendName:t}))}))}function Cr(e,t){return`${t}_${e}`}var Tr={};function Er(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}k(Tr,{arraysEqual:()=>le,arraysEqualWithNull:()=>oe,assert:()=>ne,assertNonNegativeIntegerDimensions:()=>ze,assertNonNull:()=>re,assertShapesMatch:()=>ae,bytesFromStringArray:()=>Ie,bytesPerElement:()=>ke,checkConversionForErrors:()=>be,clamp:()=>Z,computeStrides:()=>$e,convertBackendValuesAndArrayBuffer:()=>Fe,createScalarValue:()=>Gr,createShuffledIndices:()=>ce,decodeString:()=>Kr,distSquared:()=>te,encodeString:()=>Xr,fetch:()=>qr,fingerPrint64:()=>Ur,flatten:()=>Yr,getArrayFromDType:()=>xe,getTypedArrayFromDType:()=>Ae,hasEncodingLoss:()=>we,hexToLong:()=>Mr,indexToLoc:()=>We,inferDtype:()=>Te,inferFromImplicitShape:()=>me,isBoolean:()=>Ne,isFunction:()=>Ee,isInt:()=>ue,isNumber:()=>Ce,isPromise:()=>Be,isScalarShape:()=>se,isString:()=>Se,isTypedArray:()=>Zr,isValidDtype:()=>ve,locToIndex:()=>Le,makeOnesTypedArray:()=>Oe,makeZerosNestedTypedArray:()=>De,makeZerosTypedArray:()=>Pe,nearestDivisor:()=>Re,nearestLargerEven:()=>Y,now:()=>jr,parseAxisParam:()=>ye,randUniform:()=>ee,repeatedTry:()=>fe,rightPad:()=>he,shuffle:()=>X,shuffleCombo:()=>K,sizeFromShape:()=>ie,sizeToSquarishShape:()=>pe,squeezeShape:()=>ge,sum:()=>Q,swap:()=>J,tanh:()=>de,toNestedArray:()=>_e,toTypedArray:()=>Hr});var Rr=I(S()),$r=Rr.default||Rr;function Mr(e){return $r.fromString(e,!0,16)}var _r=Mr("c3a5c85c97cb3127"),Fr=Mr("b492b66fbe98f273"),Or=Mr("9ae16a3b2f90404f");function Pr(e){return e.xor(e.shru(47))}function Dr(e,t,n){let a=e.slice(t,t+n);return $r.fromBytes(Array.from(a),!0,!0)}function zr(e,t){return Dr(e,t,8)}function Lr(e,t){return Dr(e,t,4)}function Wr(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function Br(e,t,n=Mr("9ddfea08eb382d69")){let a=e.xor(t).mul(n);a=a.xor(a.shru(47));let r=t.xor(a).mul(n);return r=r.xor(r.shru(47)),r=r.mul(n),r}function Vr(e,t,n,a){return function(e,t,n,a,r,i){r=r.add(e),i=Wr(i.add(r).add(a),21);let s=r;return r=(r=r.add(t)).add(n),i=i.add(Wr(r,44)),[r.add(a),i.add(s)]}(zr(e,t),zr(e,t+8),zr(e,t+16),zr(e,t+24),n,a)}function Ur(e,t=e.length){let n=$r.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){let n=Or.add(2*t),a=zr(e,0).add(Or),r=zr(e,t-8);return Br(Wr(r,37).mul(n).add(a),Wr(a,25).add(r).mul(n),n)}if(t>=4){let n=Or.add(2*t);return Br(Lr(e,0).shl(3).add(t),Lr(e,t-4),n)}if(t>0){let n=e[0]+(e[t>>1]<<8),a=t+(e[t-1]<<2);return Pr(Or.mul(n).xor(_r.mul(a))).mul(Or)}return Or}(e,t):function(e,t=e.length){let n=Or.add(2*t),a=zr(e,0).mul(Fr),r=zr(e,8),i=zr(e,t-8).mul(n),s=zr(e,t-16).mul(Or);return Br(Wr(a.add(r),43).add(Wr(i,30)).add(s),a.add(Wr(r.add(Or),18)).add(i),n)}(e,t);if(t<=64)return function(e,t=e.length){let n=Or.add(2*t),a=zr(e,0).mul(Or),r=zr(e,8),i=zr(e,t-8).mul(n),s=zr(e,t-16).mul(Or),o=Wr(a.add(r),43).add(Wr(i,30)).add(s),l=Br(o,a.add(Wr(r.add(Or),18)).add(i),n),u=zr(e,16).mul(n),d=zr(e,24),p=o.add(zr(e,t-32)).mul(n),c=l.add(zr(e,t-24)).mul(n);return Br(Wr(u.add(d),43).add(Wr(p,30)).add(c),u.add(Wr(d.add(a),18)).add(p),n)}(e,t);let a=n,r=n.mul(Fr).add(113),i=Pr(r.mul(Or).add(113)).mul(Or),s=[$r.UZERO,$r.UZERO],o=[$r.UZERO,$r.UZERO];a=a.mul(Or).add(zr(e,0));let l=0,u=64*(t-1>>6),d=u+(t-1&63)-63;do{a=Wr(a.add(r).add(s[0]).add(zr(e,l+8)),37).mul(Fr),r=Wr(r.add(s[1]).add(zr(e,l+48)),42).mul(Fr),a=a.xor(o[1]),r=r.add(s[0]).add(zr(e,l+40)),i=Wr(i.add(o[0]),33).mul(Fr),s=Vr(e,l,s[1].mul(Fr),a.add(o[0])),o=Vr(e,l+32,i.add(o[1]),r.add(zr(e,l+16))),[i,a]=[a,i],l+=64}while(l!==u);let p=Fr.add(i.and(255).shl(1));return l=d,o[0]=o[0].add(t-1&63),s[0]=s[0].add(o[0]),o[0]=o[0].add(s[0]),a=Wr(a.add(r).add(s[0]).add(zr(e,l+8)),37).mul(p),r=Wr(r.add(s[1]).add(zr(e,l+48)),42).mul(p),a=a.xor(o[1].mul(9)),r=r.add(s[0].mul(9).add(zr(e,l+40))),i=Wr(i.add(o[0]),33).mul(p),s=Vr(e,l,s[1].mul(p),a.add(o[0])),o=Vr(e,l+32,i.add(o[1]),r.add(zr(e,l+16))),[i,a]=[a,i],Br(Br(s[0],o[0],p).add(Pr(r).mul(_r)).add(i),Br(s[1],o[1],p).add(a),p)}function Gr(e,t){return"string"===t?Xr(e):Hr([e],t)}function Hr(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=Yr(e)),He().getBool("DEBUG")&&be(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){let t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function jr(){return He().platform.now()}function qr(e,t){return He().platform.fetch(e,t)}function Xr(e,t="utf-8"){return t=t||"utf-8",He().platform.encode(e,t)}function Kr(e,t="utf-8"){return t=t||"utf-8",He().platform.decode(e,t)}function Zr(e){return null!=He().platform.isTypedArray?He().platform.isTypedArray(e):Er(e)}function Yr(e,t=[],n=!1){if(null==t&&(t=[]),"boolean"==typeof e||"number"==typeof e||"string"==typeof e||Be(e)||null==e||Zr(e)&&n)t.push(e);else if(Array.isArray(e)||Zr(e))for(let a=0;a<e.length;++a)Yr(e[a],t,n);else{let a=-1;for(let t of Object.keys(e))/^([1-9]+[0-9]*|0)$/.test(t)&&(a=Math.max(a,Number(t)));for(let r=0;r<=a;r++)Yr(e[r],t,n)}return t}function Jr(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){let a=e[t];if(isNaN(a)||!isFinite(a))return console.warn(`Found ${a} in the result of '${n}'`),!0}return!1}var Qr=20,ei=3,ti=7;function ni(e,t,n,a){let r=$e(t),i=function(e,t,n,a){let r=ie(t),i=a[a.length-1],s=new Array(i).fill(0),o=t.length,l="complex64"===n?si(e):e;if(o>1)for(let e=0;e<r/i;e++){let t=e*i;for(let e=0;e<i;e++)s[e]=Math.max(s[e],ai(l[t+e],0,n).length)}return s}(e,t,n,r),s=t.length,o=ii(e,t,n,r,i),l=["Tensor"];return a&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${s}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map((e=>"    "+e)).join("\n")),l.join("\n")}function ai(e,t,n){let a;return a=Array.isArray(e)?`${parseFloat(e[0].toFixed(ti))} + ${parseFloat(e[1].toFixed(ti))}j`:Se(e)?`'${e}'`:"bool"===n?ri(e):parseFloat(e.toFixed(ti)).toString(),he(a,t)}function ri(e){return 0===e?"false":"true"}function ii(e,t,n,a,r,i=!0){let s="complex64"===n?2:1,o=t[0],l=t.length;if(0===l)return"complex64"===n?[ai(si(e)[0],0,n)]:"bool"===n?[ri(e[0])]:[e[0].toString()];if(1===l){if(o>Qr){let t=ei*s,a=Array.from(e.slice(0,t)),i=Array.from(e.slice((o-ei)*s,o*s));return"complex64"===n&&(a=si(a),i=si(i)),["["+a.map(((e,t)=>ai(e,r[t],n))).join(", ")+", ..., "+i.map(((e,t)=>ai(e,r[o-ei+t],n))).join(", ")+"]"]}return["["+("complex64"===n?si(e):Array.from(e)).map(((e,t)=>ai(e,r[t],n))).join(", ")+"]"]}let u=t.slice(1),d=a.slice(1),p=a[0]*s,c=[];if(o>Qr){for(let t=0;t<ei;t++){let a=t*p,i=a+p;c.push(...ii(e.slice(a,i),u,n,d,r,!1))}c.push("...");for(let t=o-ei;t<o;t++){let a=t*p,i=a+p;c.push(...ii(e.slice(a,i),u,n,d,r,t===o-1))}}else for(let t=0;t<o;t++){let a=t*p,i=a+p;c.push(...ii(e.slice(a,i),u,n,d,r,t===o-1))}let h=2===l?",":"";c[0]="["+(o>0?c[0]+h:"");for(let e=1;e<c.length-1;e++)c[e]=" "+c[e]+h;let f=",\n";for(let e=2;e<l;e++)f+="\n";return c[c.length-1]=" "+c[c.length-1]+"]"+(i?"":f),c}function si(e){let t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}var oi=class{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=ie(e),null!=n){let e=n.length;ne(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||xe(t,this.size),this.strides=$e(e)}set(e,...t){0===t.length&&(t=[0]),ne(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));let n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(let n of e){if(n<0||n>=this.shape[t]){let t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];let t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return li().makeTensor(this.values,this.shape,this.dtype)}},li=null,ui=null,di=class{constructor(e,t,n,a){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=ie(e),this.strides=$e(e),this.dataId=n,this.id=a,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){let e=await this.data();return ui.buffer(this.shape,this.dtype,e)}bufferSync(){return ui.buffer(this.shape,this.dtype,this.dataSync())}async array(){let e=await this.data();return _e(this.shape,e,"complex64"===this.dtype)}arraySync(){return _e(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();let e=li().read(this.dataId);if("string"===this.dtype){let t=await e;try{return t.map((e=>Kr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),li().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();let e=li().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Kr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();let e=await li().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(li().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return ui.print(this,e)}clone(){return this.throwIfDisposed(),ui.clone(this)}toString(e=!1){return ni(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),ui.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),li().makeVariable(this,e,t,n)}};Object.defineProperty(di,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),Ke("Tensor",(()=>di));var pi=class extends di{constructor(e,t,n,a){super(e.shape,e.dtype,e.dataId,a),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!le(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);li().disposeTensor(this),this.dataId=e.dataId,li().incRef(this,null)}dispose(){li().disposeVariable(this),this.isDisposedInternal=!0}};Object.defineProperty(pi,Symbol.hasInstance,{value:e=>e instanceof di&&null!=e.assign&&e.assign instanceof Function});var ci,hi,fi,mi,yi,gi,Ai={};k(Ai,{assertTypesMatch:()=>Si,getTensorsInContainer:()=>Ci,isTensorInList:()=>Ni,makeTypesMatch:()=>Ii}),(hi=ci||(ci={})).R0="R0",hi.R1="R1",hi.R2="R2",hi.R3="R3",hi.R4="R4",hi.R5="R5",hi.R6="R6",function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(fi||(fi={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(mi||(mi={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(yi||(yi={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(gi||(gi={}));var xi={float32:yi,int32:fi,bool:mi,complex64:gi};function bi(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return xi[e][t]}function vi(e){return bi(e,"int32")}function wi(e){return null!=e&&"object"==typeof e&&"texture"in e&&e.texture instanceof WebGLTexture}function ki(e){return"undefined"!=typeof GPUBuffer&&null!=e&&"object"==typeof e&&"buffer"in e&&e.buffer instanceof GPUBuffer}function Ii(e,t){if(e.dtype===t.dtype)return[e,t];let n=bi(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function Si(e,t){ne(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function Ni(e,t){return t.some((t=>t.id===e.id))}function Ci(e){let t=[];return Ti(e,t,new Set),t}function Ti(e,t,n){if(null==e)return;if(e instanceof di)return void t.push(e);if(!function(e){return Array.isArray(e)||"object"==typeof e}(e))return;let a=e;for(let e in a){let r=a[e];n.has(r)||(n.add(r),Ti(r,t,n))}}function Ei(e){return null!=e.kernelName}var Ri=class{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(let e in this.registeredVariables)this.registeredVariables[e].dispose()}},$i=class{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Ri}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;let e=this.getSortedBackends();for(let t=0;t<e.length;t++){let n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){let{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{let{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(mr(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;let{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new class{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new class{logKernelProfile(e,t,n,a,r,i){let s="number"==typeof a?he(`${a}ms`,9):a.error,o=he(e,25),l=t.rank,u=t.size,d=he(t.shape.toString(),14),p="";for(let e in r){let n=r[e];if(null!=n){let a=n.shape||t.shape,r=a.length;p+=`${e}: ${r}D ${r>0?a:""} `}}console.log(`%c${o}\t%c${s}\t%c${l}D ${d}\t%c${u}\t%c${p}\t%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}})}profileKernel(e,t,n){let a,r,i=()=>{a=n()},s=jr();if(this.backendTimer.timerAvailable())r=this.backendTimer.time(i);else{i();for(let e of a)e.dataSync();r=Promise.resolve({kernelMs:jr()-s})}if(He().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<a.length;t++){let n=a[t];n.data().then((t=>{Jr(t,n.dtype,e)}))}return{kernelName:e,outputs:a,inputs:t,timeMs:r.then((e=>e.kernelMs)),extraInfo:r.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){let{kernelName:t,outputs:n,timeMs:a,inputs:r,extraInfo:i}=e;n.forEach((e=>{Promise.all([e.data(),a,i]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}(this.backendInstance),!0}setupRegisteredKernels(){vr(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){vr(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){let t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{let n=t.factory();if(!n||n instanceof j||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{let t=++this.pendingBackendInitId,a=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,mr(`Initialization of backend ${e} failed`),mr(n.stack||n.message)),!1)));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}}catch(t){return mr(`Initialization of backend ${e} failed`),mr(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){let e=this.getSortedBackends();for(let t=0;t<e.length;t++){let n=e[t],{success:a,asyncInit:r}=this.initializeBackend(n);if(r||a)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){let n=this.state.tensorInfo.get(t),a=n.backend,r=this.readSync(t),i=a.refCount(t);a.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,a=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");a=e}return this.scopedRun((()=>this.startScope(a)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{let e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return $i.nextTensorId++}nextVariableId(){return $i.nextVariableId++}clone(e){let t=_i.runKernel(hn,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{let t={x:e};return _i.runKernel(bt,t,{dtype:"float32"})}})),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==xr(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){let a=this.backend.numDataIds(),r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));let i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],s=a-t-r-i;if(s>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${s} data ids) after running '${e}'`)}runKernelFunc(e){let t,n,a=[],r=this.isTapeOn(),i=this.state.numBytes,s=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;let o,l=Ei(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Ei(e)){let{kernelName:t,inputs:i,attrs:s}=e;null==this.backendName&&this.backend;let l=xr(t,this.backendName);ne(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),n=()=>{let e=this.backend.numDataIds();o=l.kernelFunc({inputs:i,attrs:s,backend:this.backend});let n=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,n);let u=n.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){let e=this.getTensorsForGradient(t,i,u);a=this.saveTensorsForBackwardMode(e)}return u}}else{let{forwardFunc:t}=e,i=e=>{r&&(a=e.map((e=>this.keep(this.clone(e)))))};n=()=>{let e=this.backend.numDataIds();o=this.tidy((()=>t(this.backend,i)));let n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}let u,{inputs:d,attrs:p}=e,c=Ei(e)?null:e.backwardsFunc;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(u=this.profiler.profileKernel(l,d,(()=>n())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(u),t=u.outputs):t=n()})),r&&this.addTapeNode(l,d,t,c,a,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-i,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-s,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(d).map((e=>null!=d[e]?d[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:u.timeMs,extraInfo:u.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){let a=br(e);if(null!=a){let e,r=a.inputsToSave||[],i=a.outputsToSave||[];a.saveAllInputs?(ne(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),e=Object.keys(t).map((e=>t[e]))):e=r.map((e=>t[e]));let s=n.filter(((e,t)=>i[t]));return e.concat(s)}return[]}makeTensor(e,t,n,a){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",a=a||this.backend;let r=e;"string"===n&&Se(e[0])&&(r=e.map((e=>Xr(e))));let i=a.write(r,t,n),s=new di(t,n,i,this.nextTensorId());if(this.trackTensor(s,a),"string"===n){let e=this.state.tensorInfo.get(i),t=Ie(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return s}makeTensorFromDataId(e,t,n,a){let r={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(r,a)}makeTensorFromTensorInfo(e,t){let{dataId:n,shape:a,dtype:r}=e,i=new di(a,r,n,this.nextTensorId());return this.trackTensor(i,t),i}makeVariable(e,t=!0,n,a){n=n||this.nextVariableId().toString(),null!=a&&a!==e.dtype&&(e=e.cast(a));let r=new pi(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*ke(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof pi||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;let t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){let t=e.size*ke(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(let e in this.state.registeredVariables){let t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){let e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;let t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(let e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,a,r,i){let s={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=br(e);null!=o&&(a=o.gradFunc),null!=a&&(s.gradient=e=>(e=e.map(((e,t)=>{if(null==e){let e=n[t],a=Pe(e.size,e.dtype);return this.makeTensor(a,e.shape,e.dtype)}return e})),a(e.length>1?e:e[0],r,i))),this.state.activeTape.push(s)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){let t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){let t=Ci(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){let t=this.state.activeScope.track[e];!t.kept&&!n.has(t.id)&&t.dispose()}let a=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{!e.kept&&e.scopeId===a.id&&this.track(e)}))}gradients(e,t,n,a=!1){if(ne(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);let r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));ne(r instanceof di,(()=>"The result y returned by f() must be a tensor."));let i=function(e,t,n){let a={},r={};for(let e=0;e<t.length;e++)a[t[e].id]=!0;for(let n=0;n<e.length;n++){let i=e[n],s=i.inputs;for(let e in s){let n=s[e],o=!1;for(let e=0;e<t.length;e++)if(a[n.id]){i.outputs.forEach((e=>a[e.id]=!0)),o=!0,r[i.id]=!0;break}if(o)break}}let i={};i[n.id]=!0;let s={};for(let t=e.length-1;t>=0;t--){let n=e[t],a=n.inputs;for(let e=0;e<n.outputs.length;e++)if(i[n.outputs[e].id]){for(let e in a)i[a[e].id]=!0,s[n.id]=!0;break}}let o=[];for(let t=0;t<e.length;t++){let n=e[t];if(r[n.id]&&s[n.id]){let e={};for(let t in n.inputs){let r=n.inputs[t];a[r.id]&&(e[t]=r)}let t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,r);if(!a&&0===i.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{let e={};e[r.id]=null==n?function(e){let t=Oe(ie(e),"float32");return _i.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,a){for(let r=t.length-1;r>=0;r--){let i=t[r],s=[];if(i.outputs.forEach((t=>{let n=e[t.id];null!=n?s.push(n):s.push(null)})),null==i.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${i.kernelName}.`);let o=i.gradient(s);for(let t in i.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);let r=n((()=>o[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${i.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);let s=i.inputs[t];if(!le(r.shape,s.shape))throw new Error(`Error in gradient for op ${i.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${s.shape}'`);if(null==e[s.id])e[s.id]=r;else{let t=e[s.id];e[s.id]=a(t,r),t.dispose()}}}}(e,i,(e=>this.tidy(e)),Fi);let a=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(let t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:a}}))}customGrad(e){return ne(Ee(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{ne(t.every((e=>e instanceof di)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));let n,a={};return t.forEach(((e,t)=>{a[t]=e})),this.runKernelFunc({forwardFunc:(a,r)=>(n=e(...t,r),ne(n.value instanceof di,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),ne(Ee(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,a)=>{let r=n.gradFunc(e,a),i=Array.isArray(r)?r:[r];ne(i.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),ne(i.every((e=>e instanceof di)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));let s={};return i.forEach(((e,t)=>{s[t]=()=>e})),s},inputs:a})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){let t=jr(),n=await this.backend.time(e);return n.wallMs=jr()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Ri;for(let e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}};function Mi(){let e=Xe();if(null==e._tfengine){let t=new Ue(e);e._tfengine=new $i(t)}return function(e){qe=e}(e._tfengine.ENV),function(e){li=e}((()=>e._tfengine)),e._tfengine}$i.nextTensorId=0,$i.nextVariableId=0;var _i=Mi();function Fi(e,t){let n={a:e,b:t};return _i.runKernel(Qe,n)}var Oi,Pi={};function Di(e){Oi=e}function zi(e){if(void 0!==Oi)return Oi;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;let t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){let t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Li(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}k(Pi,{isBrowser:()=>Li,isMobile:()=>zi,mockIsMobile:()=>Di});var Wi=He();function Bi(e,t){let n=e;if(Zr(e))return"string"===t?[]:[e.length];if(wi(e)){let t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(ki(e))return[e.buffer.size/(null==t?4:ke(t))];if(!Array.isArray(e))return[];let a=[];for(;Array.isArray(n)||Zr(n)&&"string"!==t;)a.push(n.length),n=n[0];return Array.isArray(e)&&He().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Vi(e,a,[]),a}function Vi(e,t,n){if(n=n||[],!Array.isArray(e)&&!Zr(e))return void ne(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));ne(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),ne(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));let a=t.slice(1);for(let t=0;t<e.length;++t)Vi(e[t],a,n.concat(t))}function Ui(e,t,n,a){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${a}' must be ${e} tensor, but got ${t} tensor`)}}function Gi(e,t,n,a="numeric"){if(e instanceof di)return Ui(a,e.dtype,t,n),e;let r=Te(e);if("string"!==r&&["bool","int32","float32"].indexOf(a)>=0&&(r=a),Ui(a,r,t,n),null==e||!Zr(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){let a=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${a}'`)}let i=Bi(e,r);!Zr(e)&&!Array.isArray(e)&&(e=[e]);let s="string"!==r?Hr(e,r):Yr(e,[],!0);return _i.makeTensor(s,i,r)}function Hi(e,t,n,a="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>Gi(e,`${t}[${r}]`,n,a)))}Wi.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Wi.registerFlag("IS_BROWSER",(()=>Li())),Wi.registerFlag("IS_NODE",(()=>void 0!=={env:{NODE_ENV:"production",TARGET:"module"}}.versions&&void 0!=={env:{NODE_ENV:"production",TARGET:"module"}}.versions.node)),Wi.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Wi.registerFlag("IS_SAFARI",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor))),Wi.registerFlag("PROD",(()=>!1)),Wi.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Wi.getBool("DEBUG"))),Wi.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Wi.registerFlag("IS_TEST",(()=>!1)),Wi.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>Wi.getBool("DEBUG"))),Wi.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),Wi.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),Wi.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));var ji="__op";function qi(e){let t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0],a=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=ji;let r=(...e)=>{_i.startScope(n);try{let t=a(...e);return Be(t)&&console.error("Cannot return a Promise inside of tidy."),_i.endScope(t),t}catch(e){throw _i.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}var Xi=qi({complex_:function(e,t){let n=Gi(e,"real","complex"),a=Gi(t,"imag","complex");ae(n.shape,a.shape,`real and imag shapes, ${n.shape} and ${a.shape}, must match in call to tf.complex().`);let r={real:n,imag:a};return _i.runKernel(kt,r)}});function Ki(e,t,n,a){if(null==a)a=Te(e);else if("complex64"===a)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(ki(e)||wi(e)){if("float32"!==a&&"int32"!==a)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${a}.`);return _i.backend.createTensorFromGPUData(e,t||n,a)}if(!Zr(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){ze(t);let e=ie(t),a=ie(n);ne(e===a,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${a}`));for(let e=0;e<n.length;++e){let a=n[e],r=e!==n.length-1||a!==ie(t.slice(e));ne(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return!Zr(e)&&!Array.isArray(e)&&(e=[e]),t=t||n,e="string"!==a?Hr(e,a):Yr(e,[],!0),_i.makeTensor(e,t,a)}function Zi(e,t,n){return Ki(e,t,Bi(e,n),n)}var Yi={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8},Ji=class{static join(e){return new Ji(e).slice()}constructor(e){if(this.shards=[],this.previousShardIndex=0,null==e||(e instanceof Array||(e=[e]),0===(e=e.map((e=>Zr(e)?e.buffer:e))).length))return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let n=0;n<e.length;n++){let a=e[n];n!==e.length-1&&a.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);let r=t+a.byteLength;this.shards.push({buffer:a,start:t,end:r}),t=r}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),(t=Math.min(this.byteLength,t))<=e)return new ArrayBuffer(0);let n=this.findShardForByte(e);if(-1===n)throw new Error(`Could not find start shard for byte ${e}`);let a=new ArrayBuffer(t-e),r=new Uint8Array(a),i=0;for(let a=n;a<this.shards.length;a++){let n=this.shards[a],s=e+i-n.start,o=i,l=Math.min(t,n.end)-n.start,u=new Uint8Array(n.buffer,s,l-s);if(r.set(u,o),i+=u.length,t<n.end)break}return a}findShardForByte(e){if(0===this.shards.length||e<0||e>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(t){return e<t.start?-1:e>=t.end?1:0}if(0===t(this.shards[this.previousShardIndex]))return this.previousShardIndex;let n=function(e,t){let n=0,a=e.length;for(;n<=a;){let r=Math.floor((a-n)/2)+n,i=t(e[r]);if(0===i)return r;i<0?a=r:n=r+1}return-1}(this.shards,t);return-1===n?-1:(this.previousShardIndex=n,this.previousShardIndex)}},Qi=4;async function es(e,t){let n=[],a=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let i=0;i<r.length;++i){let s=r[i],o=Array.isArray(e)?e[i].tensor:e[s];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${s}': ${o.dtype}`);let l={name:s,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){let e=new Promise((async e=>{let t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+Qi*t.length,a=new Uint8Array(n),r=0;for(let e=0;e<t.length;e++){let n=t[e],i=new Uint8Array(new Uint32Array([n.length]).buffer);a.set(i,r),r+=Qi,a.set(n,r),r+=n.length}e(a)}));a.push(e)}else a.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:ns(await Promise.all(a)),specs:n}}function ts(e,t){let n,a=new Ji(e),r={},i=0;for(let e of t){let t,s=e.name,o=e.dtype,l=e.shape,u=ie(l);if("quantization"in e){let r=e.quantization;if("uint8"===r.dtype||"uint16"===r.dtype){if(!("min"in r)||!("scale"in r))throw new Error(`Weight ${e.name} with quantization ${r.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==r.dtype)throw new Error(`Weight ${e.name} has unknown quantization dtype ${r.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${e.name} is quantized with ${r.dtype} which only supports weights of type float32 not ${o}.`)}let l=Yi[r.dtype],d=a.slice(i,i+u*l),p="uint8"===r.dtype?new Uint8Array(d):new Uint16Array(d);if("float32"===o)if("uint8"===r.dtype||"uint16"===r.dtype){t=new Float32Array(p.length);for(let e=0;e<p.length;e++){let n=p[e];t[e]=n*r.scale+r.min}}else{if("float16"!==r.dtype)throw new Error(`Unsupported quantization type ${r.dtype} for weight type float32.`);void 0===n&&(n=cs()),t=n(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${s}': ${o}`);if("uint8"!==r.dtype&&"uint16"!==r.dtype)throw new Error(`Unsupported quantization type ${r.dtype} for weight type int32.`);t=new Int32Array(p.length);for(let e=0;e<p.length;e++){let n=p[e];t[e]=Math.round(n*r.scale+r.min)}}i+=u*l}else if("string"===o){let n=ie(e.shape);t=[];for(let e=0;e<n;e++){let e=new Uint32Array(a.slice(i,i+Qi))[0];i+=Qi;let n=new Uint8Array(a.slice(i,i+e));t.push(n),i+=e}}else{let e=Yi[o],n=a.slice(i,i+u*e);if("float32"===o)t=new Float32Array(n);else if("int32"===o)t=new Int32Array(n);else if("bool"===o)t=new Uint8Array(n);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${s}': ${o}`);{t=new Float32Array(n);let e=new Float32Array(t.length/2),a=new Float32Array(t.length/2);for(let n=0;n<e.length;n++)e[n]=t[2*n],a[n]=t[2*n+1];let i=Zi(e,l,"float32"),o=Zi(a,l,"float32");r[s]=Xi(i,o),i.dispose(),o.dispose()}}i+=u*e}"complex64"!==o&&(r[s]=Zi(t,l,o))}return r}function ns(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0,n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));let a=new Uint8Array(t),r=0;return n.forEach((e=>{a.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),a.buffer}var as="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function rs(e){return as?Buffer.byteLength(e,"utf8"):new Blob([e]).size}function is(e){return Ji.join(e)}function ss(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);let t=e.split("/");return t[t.length-1]}function os(e,t){let n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function ls(e,t,n){let a={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(a.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");a.weightSpecs=t,a.weightData=n}return null!=e.signature&&(a.signature=e.signature),null!=e.userDefinedMetadata&&(a.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(a.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(a.initializerSignature=e.initializerSignature),a}async function us(e,t){let n,a;return null!=e.weightsManifest&&([n,a]=await t(e.weightsManifest)),ls(e,n,a)}function ds(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:rs(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:rs(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:new Ji(e.weightData).byteLength}}function ps(e){let t=[];for(let n of e)t.push(...n.weights);return t}function cs(){let e=function(){let e=e=>{let t=e<<13,n=0;for(;!(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){let e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){let e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return a=>{let r=new ArrayBuffer(4*a.length),i=new Uint32Array(r);for(let r=0;r<a.length;r++){let s=a[r],o=e[n[s>>10]+(1023&s)]+t[s>>10];i[r]=o}return new Float32Array(r)}}var hs=class{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==hs.instance&&(hs.instance=new hs),hs.instance}static registerSaveRouter(e){hs.getInstance().saveRouters.push(e)}static registerLoadRouter(e){hs.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return hs.getHandlers(e,"save")}static getLoadHandlers(e,t){return hs.getHandlers(e,"load",t)}static getHandlers(e,t,n){let a=[];return("load"===t?hs.getInstance().loadRouters:hs.getInstance().saveRouters).forEach((t=>{let r=t(e,n);null!==r&&a.push(r)})),a}},fs=e=>hs.registerSaveRouter(e),ms=e=>hs.registerLoadRouter(e),ys=e=>hs.getSaveHandlers(e),gs=(e,t)=>hs.getLoadHandlers(e,t),As="tensorflowjs",xs="models_store",bs="model_info_store";function vs(){if(!He().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");let e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function ws(e){let t=e.result;t.createObjectStore(xs,{keyPath:"modelPath"}),t.createObjectStore(bs,{keyPath:"modelPath"})}var ks=class{constructor(e){if(this.indexedDB=vs(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{let a=this.indexedDB.open(As,1);a.onupgradeneeded=()=>ws(a),a.onsuccess=()=>{let r=a.result;if(null==t){let t=r.transaction(xs,"readonly"),a=t.objectStore(xs).get(this.modelPath);a.onsuccess=()=>{if(null==a.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(a.result.modelArtifacts)},a.onerror=e=>(r.close(),n(a.error)),t.oncomplete=()=>r.close()}else{t.weightData=Ji.join(t.weightData);let a,i,s=ds(t),o=r.transaction(bs,"readwrite"),l=o.objectStore(bs);try{a=l.put({modelPath:this.modelPath,modelArtifactsInfo:s})}catch(e){return n(e)}a.onsuccess=()=>{i=r.transaction(xs,"readwrite");let a,u=i.objectStore(xs);try{a=u.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s})}catch(e){return n(e)}a.onsuccess=()=>e({modelArtifactsInfo:s}),a.onerror=e=>{l=o.objectStore(bs);let t=l.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(a.error)),t.onerror=e=>(r.close(),n(a.error))}},a.onerror=e=>(r.close(),n(a.error)),o.oncomplete=()=>{null==i?r.close():i.oncomplete=()=>r.close()}}},a.onerror=e=>n(a.error)}))}};ks.URL_SCHEME="indexeddb://";var Is=e=>He().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ks.URL_SCHEME)?function(e){return new ks(e)}(e.slice(ks.URL_SCHEME.length)):null;hs.registerSaveRouter(Is),hs.registerLoadRouter(Is);var Ss="/",Ns="tensorflowjs_models",Cs="info",Ts="model_topology",Es="weight_specs",Rs="weight_data",$s="model_metadata";function Ms(e){return{info:[Ns,e,Cs].join(Ss),topology:[Ns,e,Ts].join(Ss),weightSpecs:[Ns,e,Es].join(Ss),weightData:[Ns,e,Rs].join(Ss),modelMetadata:[Ns,e,$s].join(Ss)}}function _s(e){for(let t of Object.values(e))window.localStorage.removeItem(t)}function Fs(e){let t=e.split(Ss);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(Ss)}var Os=class{constructor(e){if(!He().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Ms(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{let t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),a=ds(e),r=Ji.join(e.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(a)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(as)return Buffer.from(e).toString("base64");let t=new Uint8Array(e),n="";for(let e=0,a=t.length;e<a;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(r));let i={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(i)),{modelArtifactsInfo:a}}catch(e){throw _s(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${a.modelTopologyBytes}, weightSpecsBytes=${a.weightSpecsBytes}, weightDataBytes=${a.weightDataBytes}.`)}}}async load(){let e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");let t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;let a=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==a)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=a;let r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){let e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}let i=this.LS.getItem(this.keys.weightData);if(null==i)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(as){let t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}let t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(i),t}};Os.URL_SCHEME="localstorage://";var Ps=e=>He().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Os.URL_SCHEME)?function(e){return new Os(e)}(e.slice(Os.URL_SCHEME.length)):null;hs.registerSaveRouter(Ps),hs.registerLoadRouter(Ps);var Ds,zs="://",Ls=class{constructor(){this.managers={}}static getInstance(){return null==Ls.instance&&(Ls.instance=new Ls),Ls.instance}static registerManager(e,t){ne(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(zs)&&(e=e.slice(0,e.indexOf(zs))),ne(e.length>0,(()=>"scheme must not be an empty string."));let n=Ls.getInstance();ne(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){let t=Ls.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(Ls.getInstance().managers)}};function Ws(e){if(-1===e.indexOf(zs))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Ls.getSchemes().join(",")}`);return{scheme:e.split(zs)[0],path:e.split(zs)[1]}}async function Bs(e,t,n=!1){ne(e!==t,(()=>`Old path and new path are the same: '${e}'`));let a=hs.getLoadHandlers(e);ne(a.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),ne(a.length<2,(()=>`Copying failed because more than one (${a.length}) load handlers for source URL ${e}.`));let r=a[0],i=hs.getSaveHandlers(t);ne(i.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),ne(i.length<2,(()=>`Copying failed because more than one (${a.length}) save handlers for destination URL ${t}.`));let s=i[0],o=Ws(e).scheme,l=Ws(e).path,u=o===Ws(e).scheme,d=await r.load();n&&u&&await Ls.getManager(o).removeModel(l);let p=await s.save(d);return n&&!u&&await Ls.getManager(o).removeModel(l),p.modelArtifactsInfo}async function Vs(){let e=Ls.getSchemes(),t={};for(let n of e){let e=await Ls.getManager(n).listModels();for(let a in e)t[n+zs+a]=e[a]}return t}async function Us(e){let t=Ws(e);return Ls.getManager(t.scheme).removeModel(t.path)}async function Gs(e,t){return Bs(e,t,!1)}async function Hs(e,t){return Bs(e,t,!0)}if(He().get("IS_BROWSER")){He().setPlatform("browser",new class{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&He().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))}),!0))):setTimeout(e,t)}isTypedArray(e){return Er(e)}});try{Ls.registerManager(Os.URL_SCHEME,new class{constructor(){ne(He().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),ne("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){let e={},t=Ns+Ss,n=Ss+Cs;for(let a=0;a<this.LS.length;++a){let r=this.LS.key(a);r.startsWith(t)&&r.endsWith(n)&&(e[Fs(r)]=JSON.parse(this.LS.getItem(r)))}return e}async removeModel(e){let t=Ms(e=function(e){return e.startsWith(Os.URL_SCHEME)?e.slice(Os.URL_SCHEME.length):e}(e));if(null==this.LS.getItem(t.info))throw new Error(`Cannot find model at path '${e}'`);let n=JSON.parse(this.LS.getItem(t.info));return _s(t),n}})}catch(hi){}try{Ls.registerManager(ks.URL_SCHEME,new class{constructor(){this.indexedDB=vs()}async listModels(){return new Promise(((e,t)=>{let n=this.indexedDB.open(As,1);n.onupgradeneeded=()=>ws(n),n.onsuccess=()=>{let a=n.result,r=a.transaction(bs,"readonly"),i=r.objectStore(bs).getAll();i.onsuccess=()=>{let t={};for(let e of i.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},i.onerror=e=>(a.close(),t(i.error)),r.oncomplete=()=>a.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){return e=function(e){return e.startsWith(ks.URL_SCHEME)?e.slice(ks.URL_SCHEME.length):e}(e),new Promise(((t,n)=>{let a=this.indexedDB.open(As,1);a.onupgradeneeded=()=>ws(a),a.onsuccess=()=>{let r,i=a.result,s=i.transaction(bs,"readwrite"),o=s.objectStore(bs),l=o.get(e);l.onsuccess=()=>{if(null==l.result)return i.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{let a=o.delete(e),s=()=>{r=i.transaction(xs,"readwrite");let a=r.objectStore(xs).delete(e);a.onsuccess=()=>t(l.result.modelArtifactsInfo),a.onerror=e=>n(l.error)};a.onsuccess=s,a.onerror=e=>(s(),i.close(),n(l.error))}},l.onerror=e=>(i.close(),n(l.error)),s.oncomplete=()=>{null==r?i.close():r.oncomplete=()=>i.close()}},a.onerror=e=>n(a.error)}))}})}catch(hi){}}function js(e,t="float32",n){return t=t||"float32",ze(e),new oi(e,t,n)}He().get("IS_NODE")&&!He().get("IS_BROWSER")&&He().setPlatform("node",new class{constructor(){this.util=C(),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=He().global.fetch?He().global.fetch(e,t):(null==Ds&&(Ds=N()),Ds(e,t))}now(){let e={env:{NODE_ENV:"production",TARGET:"module"}}.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}});var qs=qi({cast_:function(e,t){let n=Gi(e,"x","cast");if(!ve(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");let a={x:n},r={dtype:t};return _i.runKernel(bt,a,r)}}),Xs=qi({clone_:function(e){let t={x:Gi(e,"x","clone","string_or_numeric")};return _i.runKernel(hn,t)}});function Ks(e,t=!1){console.log(e.toString(t))}function Zs(){He().set("PROD",!0)}function Ys(){He().set("DEBUG",!0)}function Js(){He().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function Qs(e){He().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function eo(){_i.disposeVariables()}function to(){return _i}function no(){return _i.memory()}function ao(e){return _i.profile(e)}function ro(e,t){return _i.tidy(e,t)}function io(e){Ci(e).forEach((e=>e.dispose()))}function so(e){return _i.keep(e)}function oo(e){return _i.time(e)}function lo(e){return _i.setBackend(e)}function uo(){return _i.ready()}function po(){return _i.backendName}function co(e){_i.removeBackend(e)}function ho(e){return _i.findBackend(e)}function fo(e){return _i.findBackendFactory(e)}function mo(e,t,n=1){return _i.registerBackend(e,t,n)}function yo(){return _i.backend}function go(e,t){He().setPlatform(e,t)}Mi(),function(e){ui=e}({buffer:js,cast:qs,clone:Xs,print:Ks});var Ao=qi({add_:function(e,t){let n=Gi(e,"a","add"),a=Gi(t,"b","add");[n,a]=Ii(n,a);let r={a:n,b:a};return _i.runKernel(Qe,r)}}),xo=qi({floorDiv_:function(e,t){let n=Gi(e,"a","floorDiv"),a=Gi(t,"b","floorDiv");[n,a]=Ii(n,a);let r={a:n,b:a};return _i.runKernel(on,r)}}),bo=qi({div_:function(e,t){let n=Gi(e,"a","div"),a=Gi(t,"b","div");if([n,a]=Ii(n,a),"int32"===n.dtype&&"int32"===a.dtype)return xo(n,a);let r={a:n,b:a};return _i.runKernel(qt,r,{})}}),vo=qi({mul_:function(e,t){let n=Gi(e,"a","mul"),a=Gi(t,"b","mul");[n,a]=Ii(n,a);let r={a:n,b:a};return _i.runKernel(qn,r)}}),wo=qi({abs_:function(e){let t=Gi(e,"x","abs");if("complex64"===t.dtype){let e={x:t};return _i.runKernel(It,e)}{let e={x:t};return _i.runKernel(Ze,e)}}}),ko=qi({acos_:function(e){let t={x:Gi(e,"x","acos")};return _i.runKernel(Ye,t)}}),Io=qi({acosh_:function(e){let t={x:Gi(e,"x","acosh")};return _i.runKernel(Je,t)}}),So=qi({addN_:function(e){ne(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),ne(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));let t=e.map(((e,t)=>Gi(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!le(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));let a=t;return _i.runKernel(et,a)}}),No=qi({all_:function(e,t=null,n=!1){let a={x:Gi(e,"x","all","bool")},r={axis:t,keepDims:n};return _i.runKernel(tt,a,r)}}),Co=qi({any_:function(e,t=null,n=!1){let a={x:Gi(e,"x","any","bool")},r={axis:t,keepDims:n};return _i.runKernel(nt,a,r)}}),To=qi({argMax_:function(e,t=0){let n={x:Gi(e,"x","argMax")},a={axis:t};return _i.runKernel(at,n,a)}}),Eo=qi({argMin_:function(e,t=0){let n={x:Gi(e,"x","argMin")},a={axis:t};return _i.runKernel(rt,n,a)}}),Ro=qi({asin_:function(e){let t={x:Gi(e,"x","asin")};return _i.runKernel(it,t)}}),$o=qi({asinh_:function(e){let t={x:Gi(e,"x","asinh")};return _i.runKernel(st,t)}}),Mo=qi({atan_:function(e){let t={x:Gi(e,"x","atan")};return _i.runKernel(ot,t)}}),_o=qi({atan2_:function(e,t){let n=Gi(e,"a","atan2"),a=Gi(t,"b","atan2");[n,a]=Ii(n,a);let r={a:n,b:a};return _i.runKernel(ut,r)}}),Fo=qi({atanh_:function(e){let t={x:Gi(e,"x","atanh")};return _i.runKernel(lt,t)}});function Oo(e,t,n,a,r="NHWC",i){return zo(e,[...t,e[3]],n,i,a,null,null,Xo(r))}function Po(e,t,n,a,r,i,s="channelsLast"){let o,[l,u]=Bo(t);if("channelsLast"===s)o=[l,u,e[3],e[3]];else{if("channelsFirst"!==s)throw new Error(`Unknown dataFormat ${s}`);o=[l,u,e[1],e[1]]}return zo(e,o,n,a,r,i,!1,s)}function Do(e,t,n,a,r,i,s="NDHWC"){let o,l,[u,d,p]=Vo(t);if("NDHWC"===s)l="channelsLast",o=[u,d,p,e[4],e[4]];else{if("NCDHW"!==s)throw new Error(`Unknown dataFormat ${s}`);l="channelsFirst",o=[u,d,p,e[1],e[1]]}return Lo(e,o,n,a,r,!1,l,i)}function zo(e,t,n,a,r,i,s=!1,o="channelsLast"){let[l,u,d,p]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,d,p]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,p,u,d]=e}let c,[h,f,,m]=t,[y,g]=Bo(n),[A,x]=Bo(a),b=Uo(h,A),v=Uo(f,x),{padInfo:w,outHeight:k,outWidth:I}=function(e,t,n,a,r,i,s,o,l){let u,d,p;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};let r=function(e,t,n,a,r){null==a&&(a=Wo(e,t,n));let i=e[1];return[Go((e[0]-t+2*a)/n+1,r),Go((i-t+2*a)/n+1,r)]}([t,n],i,a,e,o);d=r[0],p=r[1]}else if("same"===e){d=Math.ceil(t/a),p=Math.ceil(n/r);let e=Math.max(0,(d-1)*a+i-t),o=Math.max(0,(p-1)*r+s-n),l=Math.floor(e/2),c=e-l,h=Math.floor(o/2);u={top:l,bottom:c,left:h,right:o-h,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},d=Math.ceil((t-i+1)/a),p=Math.ceil((n-s+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{let c="channelsLast"===l?e[1][0]:e[2][0],h="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:c,bottom:h,left:f,right:m,type:0===c&&0===h&&0===f&&0===m?"VALID":"EXPLICIT"},d=Go((t-i+c+h)/a+1,o),p=Go((n-s+f+m)/r+1,o)}}return{padInfo:u,outHeight:d,outWidth:p}}(r,u,d,y,g,b,v,i,o),S=s?m*p:m;return"channelsFirst"===o?c=[l,S,k,I]:"channelsLast"===o&&(c=[l,k,I,S]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:d,inChannels:p,outHeight:k,outWidth:I,outChannels:S,padInfo:w,strideHeight:y,strideWidth:g,filterHeight:h,filterWidth:f,effectiveFilterHeight:b,effectiveFilterWidth:v,dilationHeight:A,dilationWidth:x,inShape:e,outShape:c,filterShape:t}}function Lo(e,t,n,a,r,i=!1,s="channelsLast",o){let[l,u,d,p,c]=[-1,-1,-1,-1,-1];if("channelsLast"===s)[l,u,d,p,c]=e;else{if("channelsFirst"!==s)throw new Error(`Unknown dataFormat ${s}`);[l,c,u,d,p]=e}let h,[f,m,y,,g]=t,[A,x,b]=Vo(n),[v,w,k]=Vo(a),I=Uo(f,v),S=Uo(m,w),N=Uo(y,k),{padInfo:C,outDepth:T,outHeight:E,outWidth:R}=function(e,t,n,a,r,i,s,o,l,u,d){let p,c,h,f;if("valid"===e&&(e=0),"number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};let m=function(e,t,n,a,r,i){null==r&&(r=Wo(e,t[0],a[0]));let s=[0,0,0,1];for(let n=0;n<3;n++)e[n]+2*r>=t[n]&&(s[n]=Go((e[n]-t[n]+2*r)/a[n]+1,i));return s}([t,n,a,1],[o,l,u],0,[r,i,s],e,d);c=m[0],h=m[1],f=m[2]}else{if("same"!==e)throw Error(`Unknown padding parameter: ${e}`);{c=Math.ceil(t/r),h=Math.ceil(n/i),f=Math.ceil(a/s);let e=(c-1)*r+o-t,d=(h-1)*i+l-n,m=(f-1)*s+u-a,y=Math.floor(e/2),g=e-y,A=Math.floor(d/2),x=d-A,b=Math.floor(m/2);p={top:A,bottom:x,left:b,right:m-b,front:y,back:g,type:"SAME"}}}return{padInfo:p,outDepth:c,outHeight:h,outWidth:f}}(r,u,d,p,A,x,b,I,S,N,o),$=i?g*c:g;return"channelsFirst"===s?h=[l,$,T,E,R]:"channelsLast"===s&&(h=[l,T,E,R,$]),{batchSize:l,dataFormat:s,inDepth:u,inHeight:d,inWidth:p,inChannels:c,outDepth:T,outHeight:E,outWidth:R,outChannels:$,padInfo:C,strideDepth:A,strideHeight:x,strideWidth:b,filterDepth:f,filterHeight:m,filterWidth:y,effectiveFilterDepth:I,effectiveFilterHeight:S,effectiveFilterWidth:N,dilationDepth:v,dilationHeight:w,dilationWidth:k,inShape:e,outShape:h,filterShape:t}}function Wo(e,t,n,a=1){let r=Uo(t,a);return Math.floor((e[0]*(n-1)-n+r)/2)}function Bo(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Vo(e){return"number"==typeof e?[e,e,e]:e}function Uo(e,t){return t<=1?e:e+(e-1)*(t-1)}function Go(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Ho(e){let[t,n,a]=Bo(e);return 1===t&&1===n&&1===a}function jo(e,t){return Ho(e)||Ho(t)}function qo(e){return Bo(e).every((e=>e>0))}function Xo(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function Ko(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)ne(ue(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{ne(ue(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}var Zo=qi({reshape_:function(e,t){let n={x:Gi(e,"x","reshape","string_or_numeric")},a={shape:t};return _i.runKernel(fa,n,a)}}),Yo=qi({avgPool_:function(e,t,n,a,r){let i=Gi(e,"x","avgPool","float32");ne(jo(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let s=i,o=!1;3===i.rank&&(o=!0,s=Zo(i,[1,i.shape[0],i.shape[1],i.shape[2]])),ne(4===s.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${s.rank}.`)),Ko("avgPool",a,r);let l={x:s},u={filterSize:t,strides:n,pad:a,dimRoundingMode:r},d=_i.runKernel(dt,l,u);return d=qs(d,i.dtype),o?Zo(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Jo=qi({avgPool3d_:function(e,t,n,a,r,i="NDHWC"){let s=Gi(e,"x","avgPool3d","float32"),o=s,l=!1;4===s.rank&&(l=!0,o=Zo(s,[1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]])),ne(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),ne("NDHWC"===i,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${i}`)),ne("number"==typeof n&&n>0||Array.isArray(n)&&n[0]>0&&n[1]>0&&n[2]>0,(()=>`Error in avgPool3d: Stride must be > 0, but got '${n}'`)),Ko("avgPool3d",a,r);let u={x:o},d={filterSize:t,strides:n,pad:a,dimRoundingMode:r,dataFormat:i},p=_i.runKernel(ct,u,d);return p=qs(p,o.dtype),l?Zo(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Qo=qi({concat_:function(e,t=0){ne(e.length>=1,(()=>"Pass at least one tensor to concat"));let n=Hi(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Xs(n[0]);let a=n,r={axis:t};return _i.runKernel(St,a,r)}}),el=qi({matMul_:function(e,t,n=!1,a=!1){let r=Gi(e,"a","matMul"),i=Gi(t,"b","matMul");[r,i]=Ii(r,i);let s={a:r,b:i},o={transposeA:n,transposeB:a};return _i.runKernel(ft,s,o)}}),tl=qi({sigmoid_:function(e){let t={x:Gi(e,"x","sigmoid","float32")};return _i.runKernel(Ma,t)}}),nl=qi({slice_:function(e,t,n){let a=Gi(e,"x","slice","string_or_numeric");if(0===a.rank)throw new Error("Slicing scalar is not possible");let r={x:a},i={begin:t,size:n};return _i.runKernel(Ta,r,i)}}),al=qi({tanh_:function(e){let t={x:Gi(e,"x","tanh","float32")};return _i.runKernel(Qa,t)}}),rl=qi({basicLSTMCell_:function(e,t,n,a,r,i){let s=Gi(e,"forgetBias","basicLSTMCell"),o=Gi(t,"lstmKernel","basicLSTMCell"),l=Gi(n,"lstmBias","basicLSTMCell"),u=Gi(a,"data","basicLSTMCell"),d=Gi(r,"c","basicLSTMCell"),p=Gi(i,"h","basicLSTMCell"),c=Qo([u,p],1),h=el(c,o),f=Ao(h,l),m=f.shape[0],y=f.shape[1]/4,g=[m,y],A=nl(f,[0,0],g),x=nl(f,[0,y],g),b=nl(f,[0,2*y],g),v=nl(f,[0,3*y],g),w=Ao(vo(tl(A),al(x)),vo(d,tl(Ao(s,b))));return[w,vo(al(w),tl(v))]}}),il=qi({batchToSpaceND_:function(e,t,n){let a=Gi(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));ne(a.rank>=1+t.length,(()=>`input rank is ${a.rank} but should be > than blockShape.length ${t.length}`)),ne(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),ne(a.shape[0]%r==0,(()=>`input tensor batch is ${a.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));let i={x:a},s={blockShape:t,crops:n};return _i.runKernel(mt,i,s)}});function sl(e){let t;return t=0===e.rank||1===e.rank?Zo(e,[1,1,1,e.size]):2===e.rank?Zo(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Zo(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}var ol=qi({batchNorm_:function(e,t,n,a,r,i){null==i&&(i=.001);let s,o,l=Gi(e,"x","batchNorm"),u=Gi(t,"mean","batchNorm"),d=Gi(n,"variance","batchNorm");null!=r&&(s=Gi(r,"scale","batchNorm")),null!=a&&(o=Gi(a,"offset","batchNorm")),ne(u.rank===d.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ne(null==o||u.rank===o.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ne(null==s||u.rank===s.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let p={x:sl(l),scale:s,offset:o,mean:u,variance:d},c={varianceEpsilon:i},h=_i.runKernel(ln,p,c);return Zo(h,l.shape)}}),ll=qi({batchNorm2d_:function(e,t,n,a,r,i){let s,o,l=Gi(e,"x","batchNorm"),u=Gi(t,"mean","batchNorm"),d=Gi(n,"variance","batchNorm");return null!=r&&(s=Gi(r,"scale","batchNorm")),null!=a&&(o=Gi(a,"offset","batchNorm")),ne(2===l.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${l.rank}.`)),ne(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${u.rank}.`)),ne(2===d.rank||1===d.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${d.rank}.`)),null!=s&&ne(2===s.rank||1===s.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${s.rank}.`)),null!=o&&ne(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${o.rank}.`)),ol(l,u,d,o,s,i)}}),ul=qi({batchNorm3d_:function(e,t,n,a,r,i){let s,o,l=Gi(e,"x","batchNorm"),u=Gi(t,"mean","batchNorm"),d=Gi(n,"variance","batchNorm");return null!=r&&(s=Gi(r,"scale","batchNorm")),null!=a&&(o=Gi(a,"offset","batchNorm")),ne(3===l.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${l.rank}.`)),ne(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${u.rank}.`)),ne(3===d.rank||1===d.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${d.rank}.`)),null!=s&&ne(3===s.rank||1===s.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${s.rank}.`)),null!=o&&ne(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${o.rank}.`)),ol(l,u,d,o,s,i)}}),dl=qi({batchNorm4d_:function(e,t,n,a,r,i){let s,o,l=Gi(e,"x","batchNorm"),u=Gi(t,"mean","batchNorm"),d=Gi(n,"variance","batchNorm");return null!=r&&(s=Gi(r,"scale","batchNorm")),null!=a&&(o=Gi(a,"offset","batchNorm")),ne(4===l.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${l.rank}.`)),ne(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${u.rank}.`)),ne(4===d.rank||1===d.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${d.rank}.`)),null!=s&&ne(4===s.rank||1===s.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${s.rank}.`)),null!=o&&ne(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${o.rank}.`)),ol(l,u,d,o,s,i)}}),pl=qi({bincount_:function(e,t,n){let a=Gi(e,"x","bincount"),r=Gi(t,"weights","bincount");ne("int32"===a.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${a.dtype}`)),ne(n>=0,(()=>`size must be non-negative, but got ${n}.`)),ne(r.size===a.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${a.shape}, weights shape: ${r.shape}.`));let i={x:a,weights:r},s={size:n};return _i.runKernel(yt,i,s)}}),cl=qi({bitwiseAnd_:function(e,t){let n=Gi(e,"x","bitwiseAnd"),a=Gi(t,"y","bitwiseAnd");if(!le(n.shape,a.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${n.shape}, y: ${a.shape}`);if("int32"!==n.dtype||"int32"!==a.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${n.dtype} and type of y: ${a.dtype}`);let r={a:n,b:a};return _i.runKernel(gt,r)}}),hl=qi({broadcastArgs_:function(e,t){let n=Gi(e,"s0","broadcastArgs","int32"),a=Gi(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==a.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${a.rank}`);let r={s0:n,s1:a};return _i.runKernel(xt,r)}}),fl=qi({broadcastTo_:function(e,t){let n=Gi(e,"broadcastTo","x"),a=n.shape;if(ze(t),t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){let e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Zo(n,e)}let r=n.shape,i=Array.from(t);for(let e=t.length-1;e>=0;e--)if(r[e]===t[e])i[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${a}] cannot be broadcast to [${t}].`);if(0===i.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Xs(n);let s={x:n},o={reps:i};return _i.runKernel(er,s,o)}}),ml=qi({ceil_:function(e){let t={x:Gi(e,"x","ceil","float32")};return _i.runKernel(vt,t)}});function yl(e,t,n){ze(e);let a={shape:e,value:t,dtype:n=n||Te(t)};return _i.runKernel(an,{},a)}var gl=qi({clipByValue_:function(e,t,n){let a=Gi(e,"x","clipByValue");if(ne(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return yl(a.shape,t,a.dtype);let r={x:a},i={clipValueMin:t,clipValueMax:n};return _i.runKernel(wt,r,i)}}),Al=qi({concat1d_:function(e){return Qo(e,0)}}),xl=qi({concat2d_:function(e,t){return Qo(e,t)}}),bl=qi({concat3d_:function(e,t){return Qo(e,t)}}),vl=qi({concat4d_:function(e,t){return Qo(e,t)}}),wl=qi({conv2d_:function(e,t,n,a,r="NHWC",i=[1,1],s){let o=Gi(e,"x","conv2d","float32"),l=Gi(t,"filter","conv2d","float32"),u=o,d=!1;3===o.rank&&(d=!0,u=Zo(o,[1,o.shape[0],o.shape[1],o.shape[2]])),ne(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),ne(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),Ko("conv2d",a,s);let p="NHWC"===r?u.shape[3]:u.shape[1];ne(p===l.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`)),ne(jo(n,i),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),ne(qo(i),(()=>"Error in conv2D: Dilated rates should be larger than 0.")),ne(qo(n),(()=>"Error in conv2D: Strides should be larger than 0."));let c={x:u,filter:l},h={strides:n,pad:a,dataFormat:r,dilations:i,dimRoundingMode:s},f=_i.runKernel(Nt,c,h);return d?Zo(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),kl=qi({conv1d_:function(e,t,n,a,r="NWC",i=1,s){let o=Gi(e,"x","conv1d"),l=Gi(t,"filter","conv1d"),u=o,d=!1;2===o.rank&&(d=!0,u=Zo(o,[1,o.shape[0],o.shape[1]])),ne(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),ne(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),Ko("conv1d",a,s),ne(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),ne(jo(n,i),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${i}'`)),ne(qo(i),(()=>"Error in conv1D: Dilated rates should be larger than 0.")),ne(qo(n),(()=>"Error in conv1D: Stride should be larger than 0.")),ne("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));let p=Zo(l,[1,l.shape[0],l.shape[1],l.shape[2]]),c=Zo(u,[u.shape[0],1,u.shape[1],u.shape[2]]),h=wl(c,p,[1,n],a,"NHWC",[1,i],s);return Zo(h,d?[h.shape[2],h.shape[3]]:[h.shape[0],h.shape[2],h.shape[3]])}}),Il=qi({conv2DBackpropInput_:function(e,t,n,a,r,i="NHWC",s){ne(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=Zo(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),ne(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),ne(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),ne(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));let d="NHWC"===i?o[3]:o[1],p="NHWC"===i?l.shape[3]:l.shape[1];ne(d===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${d}) must match input depth for filter ${n.shape[2]}.`)),ne(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),Ko("conv2dDerInput",r,s);let c={dy:l,filter:n},h={strides:a,pad:r,dataFormat:i,dimRoundingMode:s,inputShape:o},f=_i.runKernel(Tt,c,h);return u?Zo(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Sl=qi({conv2dTranspose_:function(e,t,n,a,r,i){let s=Gi(e,"x","conv2dTranspose"),o=Gi(t,"filter","conv2dTranspose");return Il(n,s,o,a,r,"NHWC",i)}}),Nl=qi({conv3d_:function(e,t,n,a,r="NDHWC",i=[1,1,1]){let s=Gi(e,"x","conv3d"),o=Gi(t,"filter","conv3d"),l=s,u=!1;4===s.rank&&(u=!0,l=Zo(s,[1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]])),ne(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),ne(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),ne(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),ne(jo(n,i),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),ne("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`)),ne(qo(i),(()=>"Error in conv3D: Dilated rates should be larger than 0.")),ne(qo(n),(()=>"Error in conv3D: Strides should be larger than 0."));let d={x:l,filter:o},p={strides:n,pad:a,dataFormat:r,dilations:i},c=_i.runKernel(Et,d,p);return u?Zo(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),Cl=qi({conv3DBackpropInput_:function(e,t,n,a,r){ne(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,s=t,o=!1;4===t.rank&&(o=!0,s=Zo(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),i=[1,e[0],e[1],e[2],e[3]]);let l=i[4],u=s.shape[4];ne(5===i.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${i.length}.`)),ne(5===s.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${s.rank}`)),ne(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),ne(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),ne(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));let d={dy:s,filter:n},p={pad:r,strides:a,inputShape:i},c=_i.runKernel($t,d,p);return o?Zo(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),Tl=qi({conv3dTranspose_:function(e,t,n,a,r){let i=Gi(e,"x","conv3dTranspose"),s=Gi(t,"filter","conv3dTranspose");return Cl(n,i,s,a,r)}}),El=qi({cos_:function(e){let t={x:Gi(e,"x","cos","float32")};return _i.runKernel(Mt,t)}}),Rl=qi({cosh_:function(e){let t={x:Gi(e,"x","cosh","float32")};return _i.runKernel(_t,t)}}),$l=qi({cumprod_:function(e,t=0,n=!1,a=!1){let r={x:Gi(e,"x","cumprod")},i={axis:t,exclusive:n,reverse:a};return _i.runKernel(Ft,r,i)}}),Ml=qi({cumsum_:function(e,t=0,n=!1,a=!1){let r={x:Gi(e,"x","cumsum")},i={axis:t,exclusive:n,reverse:a};return _i.runKernel(Ot,r,i)}}),_l=qi({denseBincount_:function(e,t,n,a=!1){let r=Gi(e,"x","denseBincount"),i=Gi(t,"weights","denseBincount");ne("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),ne(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),ne(n>=0,(()=>`size must be non-negative, but got ${n}.`)),ne(i.size===r.size||0===i.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${i.shape}.`));let s={x:r,weights:i},o={size:n,binaryOutput:a};return _i.runKernel(Dt,s,o)}}),Fl=qi({depthToSpace_:function(e,t,n="NHWC"){let a=Gi(e,"x","depthToSpace","float32"),r="NHWC"===n?a.shape[1]:a.shape[2],i="NHWC"===n?a.shape[2]:a.shape[3],s="NHWC"===n?a.shape[3]:a.shape[1];ne(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),ne(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${a.shape}`)),ne(i*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${i} and ${t} for depthToSpace with input shape\n        ${a.shape}`)),ne(s%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${s} for depthToSpace with input shape ${a.shape}`));let o={x:a},l={blockSize:t,dataFormat:n};return _i.runKernel(zt,o,l)}}),Ol=qi({depthwiseConv2d_:function(e,t,n,a,r="NHWC",i=[1,1],s){let o=Gi(e,"x","depthwiseConv2d","float32"),l=Gi(t,"filter","depthwiseConv2d","float32"),u=o,d=!1;3===o.rank&&(d=!0,u=Zo(o,[1,o.shape[0],o.shape[1],o.shape[2]])),ne(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),ne(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`));let p="NHWC"===r?u.shape[3]:u.shape[1];ne(p===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${l.shape[2]}.`)),Ko("depthwiseConv2d",a,s);let c={x:u,filter:l},h={strides:n,pad:a,dataFormat:r,dilations:i,dimRoundingMode:s},f=_i.runKernel(Lt,c,h);return d?Zo(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Pl=qi({diag_:function(e){let t={x:Gi(e,"x","diag")};return _i.runKernel(Vt,t)}}),Dl=qi({dilation2d_:function(e,t,n,a,r=[1,1],i="NHWC"){let s=Gi(e,"x","dilation2d"),o=Gi(t,"filter","dilation2d");ne(3===s.rank||4===s.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${s.rank}.`)),ne(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),ne("NHWC"===i,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${i}`));let l=s,u=!1;3===s.rank&&(l=Zo(s,[1,s.shape[0],s.shape[1],s.shape[2]]),u=!0),ne(l.shape[3]===o.shape[2],(()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${o.shape[2]}`));let d={x:l,filter:o},p={strides:n,pad:a,dilations:r},c=_i.runKernel(Ut,d,p);return u?Zo(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),zl={};function Ll(e,t){let n=e.length,a=[];for(let r=0;r<n;r++){let i=n-1-r,s=e[i]||1;(t[t.length-1-r]||1)>1&&1===s&&a.unshift(i)}return a}function Wl(e,t){let n=[];for(let a=0;a<t.length;a++){let r=e[e.length-a-1],i=t.length-a-1,s=t[i];(null==r||1===r&&s>1)&&n.unshift(i)}return n}function Bl(e,t){let n=Math.max(e.length,t.length),a=new Array(n);for(let r=0;r<n;r++){let i=e[e.length-r-1];null==i&&(i=1);let s=t[t.length-r-1];if(null==s&&(s=1),1===i)a[n-r-1]=s;else if(1===s)a[n-r-1]=i;else{if(i!==s)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);a[n-r-1]=i}}return a}k(zl,{assertAndGetBroadcastShape:()=>Bl,getBroadcastDims:()=>Ll,getReductionAxes:()=>Wl});var Vl=qi({equal_:function(e,t){let n=Gi(e,"a","equal","string_or_numeric"),a=Gi(t,"b","equal","string_or_numeric");[n,a]=Ii(n,a),Bl(n.shape,a.shape);let r={a:n,b:a};return _i.runKernel(Jt,r)}}),Ul=qi({where_:function(e,t,n){let a=Gi(t,"a","where"),r=Gi(n,"b","where"),i=Gi(e,"condition","where","bool"),s=Bl(Bl(i.shape,a.shape),r.shape),o={condition:fl(i,s),t:fl(a,s),e:fl(r,s)};return _i.runKernel(Na,o)}}),Gl=qi({zerosLike_:function(e){let t={x:Gi(e,"x","zerosLike")};return _i.runKernel(lr,t)}}),Hl=qi({divNoNan_:function(e,t){let n=Gi(e,"a","div"),a=Gi(t,"b","div");[n,a]=Ii(n,a);let r=bo(n,a),i=Gl(r),s=Vl(a,i);return Ul(s,i,r)}}),jl=qi({dot_:function(e,t){let n=Gi(e,"t1","dot"),a=Gi(t,"t2","dot");ne(!(1!==n.rank&&2!==n.rank||1!==a.rank&&2!==a.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${a.rank}.`));let r=1===n.rank?n.size:n.shape[1],i=1===a.rank?a.size:a.shape[0];if(ne(r===i,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${i}.`)),1===n.rank&&1===a.rank){let e=Zo(n,[1,-1]),t=Zo(a,[-1,1]),r=el(e,t);return Zo(r,[])}if(1===n.rank&&2===a.rank){let e=Zo(n,[1,-1]),t=Zo(a,[a.shape[0],a.shape[1]]),r=el(e,t);return Zo(r,[r.size])}if(2===n.rank&&1===a.rank){let e=Zo(a,[-1,1]),t=el(n,e);return Zo(t,[t.size])}{let e=Zo(a,[a.shape[0],a.shape[1]]);return el(n,e)}}}),ql=qi({einsum_:function(e,...t){let n=t.map(((e,t)=>Gi(e,`tensors${t}`,"einsum"))),a={equation:e};return _i.runKernel(Xt,n,a)}}),Xl=qi({elu_:function(e){let t={x:Gi(e,"x","elu","float32")};return _i.runKernel(Kt,t)}}),Kl=qi({ensureShape_:function(e,t){let n=Gi(e,"x","ensureShape","string_or_numeric");if(!oe(n.shape,t))throw new Error(`EnsureShape: Shape of tensor ${n.shape} is not compatible with expected shape ${t}`);return e}}),Zl=qi({erf_:function(e){let t=Gi(e,"x","erf");ne("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=qs(t,"float32"));let n={x:t};return _i.runKernel(Yt,n)}});function Yl(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Jl(e,t,n){let a=e.length+t.length,r=[],i=0,s=0;for(let o=0;o<a;o++)-1===n.indexOf(o)?r.push(e[i++]):r.push(t[s++]);return r}function Ql(e,t){let n=[],a=e.length;for(let r=0;r<a;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function eu(e,t){return Jl(e,t.map((e=>1)),t)}function tu(e,t,n){ne(Yl(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function nu(e,t){if(Yl(e,t))return null;let n=[];for(let a=0;a<t;++a)-1===e.indexOf(a)&&n.push(a);return e.forEach((e=>n.push(e))),n}function au(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function ru(e,t){let n=[];for(let a=t-e;a<t;++a)n.push(a);return n}var iu=qi({max_:function(e,t=null,n=!1){let a={x:Gi(e,"x","max")},r={reductionIndices:t,keepDims:n};return _i.runKernel(Fn,a,r)}}),su=qi({min_:function(e,t=null,n=!1){let a={x:Gi(e,"x","min")},r={axis:t,keepDims:n};return _i.runKernel(Vn,a,r)}}),ou=qi({pow_:function(e,t){let n=Gi(e,"base","pow"),a=Gi(t,"exp","pow");[n,a]=Ii(n,a);let r={a:n,b:a};return _i.runKernel(ra,r)}});function lu(e,t){if((Zr(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Zr(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Ki(e,[],[],t)}var uu=qi({sqrt_:function(e){let t={x:Gi(e,"x","sqrt","float32")};return _i.runKernel(Fa,t)}}),du=qi({square_:function(e){let t=Gi(e,"x","square");return _i.runKernel("Square",{x:t},{})}}),pu=qi({sum_:function(e,t=null,n=!1){let a=Gi(e,"x","sum");"bool"===a.dtype&&(a=qs(a,"int32"));let r={x:a},i={axis:t,keepDims:n};return _i.runKernel(Oa,r,i)}});function cu(e,t,n=null){if(0===e.rank)return wo(e);if(1!==e.rank&&null===n)return cu(Zo(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return pu(wo(e),n);if(t===1/0)return iu(wo(e),n);if(t===-1/0)return su(wo(e),n);if("euclidean"===t||2===t)return uu(pu(ou(wo(e),lu(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return iu(pu(wo(e),n[0]),n[1]-1);if(t===1/0)return iu(pu(wo(e),n[1]),n[0]);if(t===-1/0)return su(pu(wo(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return uu(pu(du(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}var hu=qi({norm_:function(e,t="euclidean",n=null,a=!1){let r=cu(e=Gi(e,"x","norm"),t,n),i=r.shape;if(a){let t=ye(n,e.shape);i=eu(r.shape,t)}return Zo(r,i)}}),fu=qi({euclideanNorm_:function(e,t=null,n=!1){return hu(e,"euclidean",t,n)}}),mu=qi({exp_:function(e){let t={x:Gi(e,"x","exp")};return _i.runKernel(Qt,t)}}),yu=qi({expandDims_:function(e,t=0){let n=Gi(e,"x","expandDims","string_or_numeric");ne(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));let a={input:n},r={dim:t};return _i.runKernel(en,a,r)}}),gu=qi({expm1_:function(e){let t={x:Gi(e,"x","expm1")};return _i.runKernel(tn,t)}}),Au=qi({tile_:function(e,t){let n=Gi(e,"x","tile","string_or_numeric");ne(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));let a={x:n},r={reps:t};return _i.runKernel(er,a,r)}}),xu=qi({eye_:function(e,t,n,a="float32"){null==t&&(t=e);let r=js([e,t],a),i=e<=t?e:t;for(let e=0;e<i;++e)r.set(1,e,e);let s=Zo(r.toTensor(),[e,t]);if(null==n)return s;if(1===n.length)return Au(yu(s,0),[n[0],1,1]);if(2===n.length)return Au(yu(yu(s,0),0),[n[0],n[1],1,1]);if(3===n.length)return Au(yu(yu(yu(s,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),bu=qi({floor_:function(e){let t={x:Gi(e,"x","floor","float32")};return _i.runKernel(sn,t)}}),vu=qi({gather_:function(e,t,n=0,a=0){let r={x:Gi(e,"x","gather"),indices:Gi(t,"indices","gather","int32")},i={axis:n,batchDims:a};return _i.runKernel(un,r,i)}}),wu=qi({greater_:function(e,t){let n=Gi(e,"a","greater","string_or_numeric"),a=Gi(t,"b","greater","string_or_numeric");[n,a]=Ii(n,a),Bl(n.shape,a.shape);let r={a:n,b:a};return _i.runKernel(pn,r)}}),ku=qi({greaterEqual_:function(e,t){let n=Gi(e,"a","greaterEqual","string_or_numeric"),a=Gi(t,"b","greaterEqual","string_or_numeric");[n,a]=Ii(n,a),Bl(n.shape,a.shape);let r={a:n,b:a};return _i.runKernel(cn,r)}}),Iu=qi({imag_:function(e){let t={input:Gi(e,"input","imag")};return _i.runKernel(mn,t)}}),Su=qi({isFinite_:function(e){let t={x:Gi(e,"x","isFinite")};return _i.runKernel(yn,t)}}),Nu=qi({isInf_:function(e){let t={x:Gi(e,"x","isInf")};return _i.runKernel(gn,t)}}),Cu=qi({isNaN_:function(e){let t={x:Gi(e,"x","isNaN")};return _i.runKernel(An,t)}}),Tu=qi({leakyRelu_:function(e,t=.2){let n={x:Gi(e,"x","leakyRelu")},a={alpha:t};return _i.runKernel(xn,n,a)}}),Eu=qi({less_:function(e,t){let n=Gi(e,"a","less","string_or_numeric"),a=Gi(t,"b","less","string_or_numeric");[n,a]=Ii(n,a),Bl(n.shape,a.shape);let r={a:n,b:a};return _i.runKernel(bn,r)}}),Ru=qi({lessEqual_:function(e,t){let n=Gi(e,"a","lessEqual","string_or_numeric"),a=Gi(t,"b","lessEqual","string_or_numeric");[n,a]=Ii(n,a),Bl(n.shape,a.shape);let r={a:n,b:a};return _i.runKernel(vn,r)}});function $u(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");let a={start:e,stop:t,num:n};return _i.runKernel(wn,{},a)}var Mu=qi({localResponseNormalization_:function(e,t=5,n=1,a=1,r=.5){let i=Gi(e,"x","localResponseNormalization");ne(4===i.rank||3===i.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${i.rank}.`)),ne(ue(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let s=i,o=!1;3===i.rank&&(o=!0,s=Zo(i,[1,i.shape[0],i.shape[1],i.shape[2]]));let l={x:s},u={depthRadius:t,bias:n,alpha:a,beta:r},d=_i.runKernel($n,l,u);return o?Zo(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),_u=qi({log_:function(e){let t={x:Gi(e,"x","log","float32")};return _i.runKernel(kn,t)}}),Fu=qi({log1p_:function(e){let t={x:Gi(e,"x","log1p")};return _i.runKernel(In,t)}});function Ou(e){return ne(Ee(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{let a=Gi(t,"x","tf.grad","string_or_numeric"),r=null!=n?Gi(n,"dy","tf.grad"):null;return _i.tidy((()=>{let{value:t,grads:n}=_i.gradients((()=>e(a)),[a],r);return null!=r&&ae(t.shape,r.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Bu(n),n[0]}))}}function Pu(e){return ne(Ee(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{ne(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));let a=Hi(t,"args","tf.grads","string_or_numeric"),r=null!=n?Gi(n,"dy","tf.grads"):null;return _i.tidy((()=>{let{value:t,grads:n}=_i.gradients((()=>e(...a)),a,r);return null!=r&&ae(t.shape,r.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Bu(n),n}))}}function Du(e){return ne(Ee(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{ne(t instanceof di,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),ne(null==n||n instanceof di,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));let{grads:a,value:r}=_i.gradients((()=>e(t)),[t],n);return Bu(a),{grad:a[0],value:r}}}function zu(e){return ne(Ee(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{ne(Array.isArray(t)&&t.every((e=>e instanceof di)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),ne(null==n||n instanceof di,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));let a=_i.gradients((()=>e(...t)),t,n);return null!=n&&ae(a.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Bu(a.grads),a}}function Lu(e,t){ne(Ee(e),(()=>"The f passed in variableGrads(f) must be a function")),ne(null==t||Array.isArray(t)&&t.every((e=>e instanceof pi)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));let n=null!=t;if(!n){t=[];for(let e in _i.registeredVariables)t.push(_i.registeredVariables[e])}let a=n?t.filter((e=>!e.trainable)):null,r=t.length;ne((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));let{value:i,grads:s}=_i.gradients(e,t,null,!0);ne(s.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),ne(0===i.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`));let o={};return t.forEach(((e,t)=>{null!=s[t]&&(o[e.name]=s[t])})),null!=a&&a.forEach((e=>o[e.name]=null)),{value:i,grads:o}}function Wu(e){return _i.customGrad(e)}function Bu(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}var Vu=qi({neg_:function(e){let t={x:Gi(e,"x","neg")};return _i.runKernel(Xn,t)}}),Uu=qi({softplus_:function(e){let t={x:Gi(e,"x","softplus")};return _i.runKernel(_a,t)}}),Gu=qi({logSigmoid_:function(e){let t=Gi(e,"x","logSigmoid");return Wu((e=>({value:Vu(Uu(Vu(e))),gradFunc:t=>vo(t,tl(Vu(e)))})))(t)}}),Hu=qi({sub_:function(e,t){let n=Gi(e,"a","sub"),a=Gi(t,"b","sub");[n,a]=Ii(n,a);let r={a:n,b:a};return _i.runKernel(Ya,r)}}),ju=qi({logSoftmax_:function(e,t=-1){let n=Gi(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return Wu(((e,n)=>{let a=iu(e,t,!0),r=Hu(e,a),i=Hu(qs(r,"float32"),_u(pu(mu(r),t,!0)));return n([i]),{value:i,gradFunc:(e,n)=>{let[a]=n,r=mu(a);return Hu(e,vo(pu(e,t,!0),r))}}}))(n)}}),qu=qi({logSumExp_:function(e,t=null,n=!1){let a=Gi(e,"x","logSumExp"),r=ye(t,a.shape),i=iu(a,r,!0),s=Hu(a,i),o=mu(s),l=pu(o,r),u=_u(l),d=Ao(Zo(i,u.shape),u);if(n){let e=eu(d.shape,r);return Zo(d,e)}return d}}),Xu=qi({logicalAnd_:function(e,t){let n=Gi(e,"a","logicalAnd","bool"),a=Gi(t,"b","logicalAnd","bool");Bl(n.shape,a.shape);let r={a:n,b:a};return _i.runKernel(Sn,r)}}),Ku=qi({logicalNot_:function(e){let t={x:Gi(e,"x","logicalNot","bool")};return _i.runKernel(Nn,t)}}),Zu=qi({logicalOr_:function(e,t){let n=Gi(e,"a","logicalOr","bool"),a=Gi(t,"b","logicalOr","bool");Bl(n.shape,a.shape);let r={a:n,b:a};return _i.runKernel(Cn,r)}}),Yu=qi({logicalXor_:function(e,t){let n=Gi(e,"a","logicalXor","bool"),a=Gi(t,"b","logicalXor","bool");return Bl(n.shape,a.shape),Xu(Zu(e,t),Ku(Xu(e,t)))}}),Ju=2147483648,Qu=qi({searchSorted_:function(e,t,n="left"){let a=Gi(e,"sortedSequence","searchSorted"),r=Gi(t,"values","searchSorted"),i=a.shape[a.shape.length-1],s=r.shape[r.shape.length-1],o=Zo(a,[-1,i]),l=Zo(r,[-1,s]);if(o.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(o.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(ie(l.shape)>=Ju)throw new Error(`values tensor size must less than ${Ju}`);if(o.shape[1]>=Ju)throw new Error(`trailing dim_size must less than ${Ju} for int32 output type, was ${o.shape[1]}`);let u={sortedSequence:o,values:l},d={side:n};return _i.runKernel(Sa,u,d)}});function ed(e,t){return Qu(e,t,"left")}var td=qi({maxPool_:function(e,t,n,a,r){let i=Gi(e,"x","maxPool"),s=i,o=!1;3===i.rank&&(o=!0,s=Zo(i,[1,i.shape[0],i.shape[1],i.shape[2]])),ne(4===s.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.rank}.`)),ne(jo(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),Ko("maxPool",a,r);let l={x:s},u={filterSize:t,strides:n,pad:a,dimRoundingMode:r},d=_i.runKernel(Pn,l,u);return o?Zo(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),nd=qi({maxPool3d_:function(e,t=[1,1,1],n,a,r,i="NDHWC"){let s=Gi(e,"x","maxPool3d"),o=s,l=!1;4===s.rank&&(l=!0,o=Zo(s,[1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]])),ne(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),ne("NDHWC"===i,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${i}`)),Ko("maxPool3d",a,r);let u={x:o},d={filterSize:t,strides:n,pad:a,dimRoundingMode:r,dataFormat:i},p=_i.runKernel(zn,u,d);return l?Zo(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),ad=qi({maxPoolWithArgmax_:function(e,t,n,a,r=!1){let i={x:Gi(e,"x","maxPoolWithArgmax")},s={filterSize:t,strides:n,pad:a,includeBatchInIndex:r},o=_i.runKernel(Wn,i,s);return{result:o[0],indexes:o[1]}}}),rd=qi({maximum_:function(e,t){let n=Gi(e,"a","maximum"),a=Gi(t,"b","maximum");[n,a]=Ii(n,a),"bool"===n.dtype&&(n=qs(n,"int32"),a=qs(a,"int32")),Bl(n.shape,a.shape);let r={a:n,b:a};return _i.runKernel(On,r)}}),id=qi({mean_:function(e,t=null,n=!1){let a={x:Gi(e,"x","mean")},r={axis:t,keepDims:n};return _i.runKernel(Bn,a,r)}});function sd(e,t="float32"){if(ze(e),"complex64"===t){let t=sd(e,"float32"),n=sd(e,"float32");return Xi(t,n)}let n=Pe(ie(e),t);return _i.makeTensor(n,e,t)}function od(e,t="float32"){if(ze(e),"complex64"===t){let t=od(e,"float32"),n=sd(e,"float32");return Xi(t,n)}let n=Oe(ie(e),t);return _i.makeTensor(n,e,t)}function ld(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let a=Gi(e,"x","meshgrid",e instanceof di?e.dtype:"float32");if(void 0===t)return[a];let r=Gi(t,"y","meshgrid",t instanceof di?t.dtype:"float32"),i=ie(a.shape),s=ie(r.shape);return"xy"===n?(a=Zo(a,[1,-1]),r=Zo(r,[-1,1]),[el(od([s,1],a.dtype),a),el(r,od([1,i],r.dtype))]):(a=Zo(a,[-1,1]),r=Zo(r,[1,-1]),[el(a,od([1,s],a.dtype)),el(od([i,1],r.dtype),r)])}var ud=qi({minimum_:function(e,t){let n=Gi(e,"a","minimum"),a=Gi(t,"b","minimum");[n,a]=Ii(n,a),"bool"===n.dtype&&(n=qs(n,"int32"),a=qs(a,"int32")),Bl(n.shape,a.shape);let r={a:n,b:a};return _i.runKernel(Un,r)}}),dd=qi({mirrorPad_:function(e,t,n){ne("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));let a=Gi(e,"x","mirrorPad");if(0===a.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");ne(t.length===a.rank,(()=>`Padding doesn't match input. Must be ${a.rank}. Got ${t.length}.`));let r="reflect"===n?1:0;for(let e=0;e<a.rank;e++)ne(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),ne(t[e][0]>=0&&t[e][0]<=a.shape[e]-r&&t[e][1]>=0&&t[e][1]<=a.shape[e]-r,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${a.shape[e]-r} or less than 0 for input of shape ${a.shape}`));let i={paddings:t,mode:n},s={x:a};return _i.runKernel(Gn,s,i)}}),pd=qi({mod_:function(e,t){let n=Gi(e,"a","mod"),a=Gi(t,"b","mod");[n,a]=Ii(n,a);let r={a:n,b:a};return _i.runKernel(Hn,r)}}),cd=qi({moments_:function(e,t=null,n=!1){let a=ye(t,(e=Gi(e,"x","moments")).shape),r=id(e,a,n),i=r.shape;n||(i=eu(r.shape,a));let s=du(Hu(qs(e,"float32"),Zo(r,i)));return{mean:r,variance:id(s,a,n)}}}),hd=qi({multiRNNCell_:function(e,t,n,a){let r=Gi(t,"data","multiRNNCell"),i=Hi(n,"c","multiRNNCell"),s=Hi(a,"h","multiRNNCell"),o=r,l=[];for(let t=0;t<e.length;t++){let n=e[t](o,i[t],s[t]);l.push(n[0]),l.push(n[1]),o=n[1]}let u=[],d=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),d.push(l[e+1]);return[u,d]}}),fd=qi({multinomial_:function(e,t,n,a=!1){let r=Gi(e,"logits","multinomial"),i=r.size,s=r.rank;if(i<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${i}.`);if(s>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${s}`);n=n||Math.random();let o={logits:1===s?Zo(r,[1,-1]):r},l={numSamples:t,seed:n,normalized:a},u=_i.runKernel(jn,o,l);return 1===s?Zo(u,[u.size]):u}}),md=qi({notEqual_:function(e,t){let n=Gi(e,"a","notEqual","string_or_numeric"),a=Gi(t,"b","notEqual","string_or_numeric");[n,a]=Ii(n,a),Bl(n.shape,a.shape);let r={a:n,b:a};return _i.runKernel(Kn,r)}}),yd=qi({oneHot_:function(e,t,n=1,a=0,r="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);let i={indices:Gi(e,"indices","oneHot","int32")},s={dtype:r,depth:t,onValue:n,offValue:a};return _i.runKernel(ea,i,s)}}),gd=qi({onesLike_:function(e){let t={x:Gi(e,"x","onesLike")};return _i.runKernel(Qn,t)}}),Ad=qi({outerProduct_:function(e,t){let n=Gi(e,"v1","outerProduct"),a=Gi(t,"v2","outerProduct");ne(1===n.rank&&1===a.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${a.rank}.`));let r=Zo(n,[-1,1]),i=Zo(a,[1,-1]);return el(r,i)}}),xd=qi({pad_:function(e,t,n=0){let a=Gi(e,"x","pad");if(0===a.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");let r={paddings:t,constantValue:n},i={x:a};return _i.runKernel(na,i,r)}}),bd=qi({pad1d_:function(e,t,n=0){return ne(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),xd(e,[t],n)}}),vd=qi({pad2d_:function(e,t,n=0){return ne(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),xd(e,t,n)}}),wd=qi({pad3d_:function(e,t,n=0){return ne(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),xd(e,t,n)}}),kd=qi({pad4d_:function(e,t,n=0){return ne(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),xd(e,t,n)}}),Id=qi({spaceToBatchND_:function(e,t,n){let a=Gi(e,"x","spaceToBatchND");ne(a.rank>=1+t.length,(()=>`input rank ${a.rank} should be > than [blockShape] ${t.length}`)),ne(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),ne(a.shape.reduce(((e,a,r)=>r>0&&r<=t.length?e&&(a+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${a.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));let r={x:a},i={blockShape:t,paddings:n};return _i.runKernel(Pa,r,i)}}),Sd=qi({pool_:function(e,t,n,a,r,i,s){null==r&&(r=[1,1]),null==i&&(i=1),0===a&&(a="valid");let o=Gi(e,"x","maxPool"),l=o,u=!1;3===o.rank&&(u=!0,l=Zo(o,[1,o.shape[0],o.shape[1],o.shape[2]])),ne(jo(i,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${i} and dilations '${r}'`));let d,p=Po(l.shape,t,i,r,a),c=[p.dilationHeight,p.dilationWidth];d="same"===a?function(e,t){let n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),a=n.map((e=>Math.floor(e/2))),r=n.map(((e,t)=>e-a[t]));return n.map(((e,t)=>[a[t],r[t]]))}([p.filterHeight,p.filterWidth],c):[[0,0],[0,0]];let h=1===c[0]&&1===c[1],[f,m]=function(e,t,n){let a=n.map((e=>e[0])),r=n.map((e=>e[1])),i=e.concat(a,r),s=t.map(((e,t)=>(e-i[t]%e)%e)),o=r.map(((e,t)=>e+s[t]));return[t.map(((e,t)=>[a[t],o[t]])),t.map(((e,t)=>[0,s[t]]))]}([p.inHeight,p.inWidth],c,d),y=h?a:"valid",g=h?l:Id(l,c,f),A=("avg"===n?()=>Yo(g,t,i,y,s):()=>td(g,t,i,y,s))(),x=h?A:il(A,c,m);return u?Zo(x,[x.shape[1],x.shape[2],x.shape[3]]):x}}),Nd=qi({prelu_:function(e,t){let n={x:Gi(e,"x","prelu"),alpha:Gi(t,"alpha","prelu")};return _i.runKernel(ia,n)}}),Cd=qi({prod_:function(e,t=null,n=!1){let a=Gi(e,"x","prod");"bool"===a.dtype&&(a=qs(a,"int32"));let r={x:a},i={axis:t,keepDims:n};return _i.runKernel(sa,r,i)}}),Td=qi({raggedGather_:function(e,t,n,a){let r={paramsNestedSplits:e.map(((e,t)=>Gi(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:Gi(t,"paramsDenseValues","raggedGather"),indices:Gi(n,"indices","raggedGather","int32")},i={outputRaggedRank:a},s=_i.runKernel(oa,r,i);return{outputNestedSplits:s.slice(0,s.length-1),outputDenseValues:s[s.length-1]}}}),Ed=qi({raggedRange_:function(e,t,n){let a=Gi(e,"starts","raggedRange"),r={starts:a,limits:Gi(t,"limits","raggedRange",a.dtype),deltas:Gi(n,"deltas","raggedRange",a.dtype)},i=_i.runKernel(la,r);return{rtNestedSplits:i[0],rtDenseValues:i[1]}}}),Rd=qi({raggedTensorToTensor_:function(e,t,n,a,r){let i=Gi(e,"shape","raggedTensorToTensor","int32"),s=Gi(t,"values","raggedTensorToTensor"),o={shape:i,values:s,defaultValue:Gi(n,"defaultValue","raggedTensorToTensor",s.dtype),rowPartitionTensors:a.map(((e,t)=>Gi(e,`tensors${t}`,"raggedTensorToTensor","int32")))},l={rowPartitionTypes:r};return _i.runKernel(ua,o,l)}}),$d=qi({rand_:function(e,t,n){ze(e);let a=ie(e),r=null;if(null==n||"float32"===n)r=new Float32Array(a);else if("int32"===n)r=new Int32Array(a);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);r=new Uint8Array(a)}for(let e=0;e<a;e++)r[e]=t();return _i.makeTensor(r,e,n)}}),Md=I(P()),_d={};k(_d,{TEST_EPSILON_FLOAT16:()=>Od,createVideoElement:()=>jd,encodeStrings:()=>Hd,expectArrayBuffersEqual:()=>Gd,expectArraysClose:()=>Pd,expectArraysEqual:()=>Wd,expectNumbersClose:()=>Bd,expectPromiseToFail:()=>Ld,expectValuesInRange:()=>Ud,play:()=>qd,testEpsilon:()=>Dd});var Fd=.001,Od=.1;function Pd(e,t,n){return null==n&&(n=Dd()),zd(e,t,((e,t)=>Vd(e,t,n)))}function Dd(){return 32===_i.backend.floatPrecision()?Fd:Od}function zd(e,t,n){let a=!0;if((Zr(e)||Zr(t))&&(a=!1),Zr(e)&&Zr(t)&&(a=!0),a){let n=e.constructor.name,a=t.constructor.name;if(n!==a)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${a}`)}if(Array.isArray(e)&&Array.isArray(t)){let n=Bi(e),a=Bi(t);if(!le(n,a))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${a}]`)}let r=Zr(e)?e:Yr(e),i=Zr(t)?t:Yr(t);if(r.length!==i.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${i.length}.\nActual:   ${r}.\nExpected: ${i}.`);for(let e=0;e<i.length;++e){let t=r[e],a=i[e];if(!n(t,a))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${a}.\nActual:   ${r}.\nExpected: ${i}.`)}"undefined"!=typeof expect&&expect().nothing()}function Ld(e,t){e().then((()=>t.fail()),(()=>t())),"undefined"!=typeof expect&&expect().nothing()}function Wd(e,t){let n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return Se(e)||Se(e[0])||Se(t)||Se(t[0])?zd(e,n,((e,t)=>e==t)):zd(e,t,((e,t)=>Vd(e,t,0)))}function Bd(e,t,n){if(null==n&&(n=Dd()),!Vd(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`);"undefined"!=typeof expect&&expect().nothing()}function Vd(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function Ud(e,t,n){for(let a=0;a<e.length;a++)if(e[a]<t||e[a]>n)throw new Error(`Value out of range:${e[a]} low: ${t}, high: ${n}`)}function Gd(e,t){let n=new Float32Array(e),a=new Float32Array(t);if(n.length!==a.length)throw new Error(`Expected ArrayBuffer to be of length ${a.length}, but it was ${n.length}`);for(let e=0;e<a.length;e++)if(n[e]!==a[e])throw new Error(`Expected ArrayBuffer value at ${e} to be ${a[e]} but got ${n[e]} instead`)}function Hd(e){for(let t=0;t<e.length;t++){let n=e[t];Array.isArray(n)?Hd(n):e[t]=Xr(n)}return e}function jd(e){let t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(e),new Promise((e=>{t.addEventListener("loadeddata",(n=>e(t))),t.load()}))}async function qd(e){await e.play(),"requestVideoFrameCallback"in e&&await new Promise((t=>{e.requestVideoFrameCallback(t)}))}var Xd=class{constructor(e,t,n,a,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=a,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);let i=r||Math.random();this.random=Md.alea(i.toString())}nextValue(){if(!isNaN(this.nextVal)){let e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let a,r,i;do{a=2*this.random()-1,r=2*this.random()-1,i=a*a+r*r}while(i>=1||0===i);let s=Math.sqrt(-2*Math.log(i)/i);e=this.mean+this.stdDev*a*s,t=this.mean+this.stdDev*r*s,(!this.truncated||this.isValidTruncated(e))&&(n=!0)}return(!this.truncated||this.isValidTruncated(t))&&(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}},Kd=qi({randomGamma_:function(e,t,n=1,a="float32",r){if(ze(e),null==n&&(n=1),null==a&&(a="float32"),"float32"!==a&&"int32"!==a)throw new Error(`Unsupported data type ${a}`);let i=new class{constructor(e,t,n,a){this.alpha=e,this.beta=1/t,this.dtype=n;let r=a||Math.random();this.randu=Md.alea(r.toString()),this.randn=new Xd(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,a,r,i;for(;;){do{a=this.randn.nextValue(),i=1+this.c*a}while(i<=0);if(i*=i*i,e=a*a,t=1-.331*e*e,n=.5*e+this.d*(1-i+Math.log(i)),r=this.randu(),r<t||Math.log(r)<n)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}(t,n,a,r),s=js(e,a);for(let e=0;e<s.values.length;e++)s.values[e]=i.nextValue();return s.toTensor()}}),Zd=qi({randomNormal_:function(e,t=0,n=1,a,r){if(ze(e),null!=a&&"bool"===a)throw new Error(`Unsupported data type ${a}`);let i=new Xd(t,n,a,!1,r),s=js(e,a);for(let e=0;e<s.values.length;e++)s.values[e]=i.nextValue();return s.toTensor()}}),Yd=qi({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Zd(e,0,1,t,n)}}),Jd=qi({randomUniform_:function(e,t=0,n=1,a="float32",r){ze(e);let i=js(e,a),s=new class{constructor(e=0,t=1,n,a){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==a&&(a=Math.random()),"number"==typeof a&&(a=a.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Md.alea(a)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}(t,n,null,r);for(let e=0;e<i.values.length;e++)i.values[e]=s.nextValue();return i.toTensor()}}),Qd=qi({randomUniformInt_:function(e,t,n,a){return Jd(e,t,n,"int32",a)}});function ep(e,t,n=1,a="float32"){if(0===n)throw new Error("Cannot have a step of zero");let r={start:e,stop:t,step:n,dtype:a};return _i.runKernel(da,{},r)}var tp=qi({real_:function(e){let t={input:Gi(e,"input","real")};return _i.runKernel(pa,t)}}),np=qi({reciprocal_:function(e){let t={x:Gi(e,"x","reciprocal")};return _i.runKernel(ca,t)}}),ap=qi({relu_:function(e){let t={x:Gi(e,"x","relu")};return _i.runKernel(ha,t)}}),rp=qi({relu6_:function(e){let t={x:Gi(e,"x","relu6")};return _i.runKernel(xa,t)}}),ip=qi({reverse_:function(e,t){let n={x:Gi(e,"x","reverse")},a={dims:t};return _i.runKernel(ba,n,a)}}),sp=qi({reverse1d_:function(e){let t=Gi(e,"x","reverse");return ne(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),ip(t,0)}}),op=qi({reverse2d_:function(e,t){let n=Gi(e,"x","reverse");return ne(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),ip(n,t)}}),lp=qi({reverse3d_:function(e,t){let n=Gi(e,"x","reverse");return ne(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),ip(n,t)}}),up=qi({reverse4d_:function(e,t){let n=Gi(e,"x","reverse");return ne(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),ip(n,t)}}),dp=qi({round_:function(e){let t={x:Gi(e,"x","round")};return _i.runKernel(va,t)}}),pp=qi({rsqrt_:function(e){let t={x:Gi(e,"x","rsqrt","float32")};return _i.runKernel(wa,t)}}),cp=qi({selu_:function(e){let t={x:Gi(e,"x","selu")};return _i.runKernel(Ca,t)}}),hp=qi({separableConv2d_:function(e,t,n,a,r,i=[1,1],s="NHWC"){let o=Gi(e,"x","separableConv2d"),l=Gi(t,"depthwiseFilter","separableConv2d"),u=Gi(n,"pointwiseFilter","separableConv2d"),d=o,p=!1;if(3===o.rank&&(p=!0,d=Zo(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===s)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");ne(4===d.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${d.rank}.`)),ne(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),ne(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),ne(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),ne(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));let c=l.shape[2],h=l.shape[3];ne(u.shape[2]===c*h,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${c*h}, but got ${u.shape[2]}.`));let f=Ol(d,l,a,r,s,i),m=wl(f,u,1,"valid",s);return p?Zo(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),fp=async function(e,t){let n=Gi(e,"x","setdiff1d"),a=Gi(t,"y","setdiff1d");ne(n.dtype===a.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${a.dtype}).`)),ne(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),ne(1===a.rank,(()=>`y should be 1D tensor, but got y (${a.shape}).`));let r=await n.data(),i=await a.data(),s=new Set(i),o=0;for(let e=0;e<r.length;e++)s.has(r[e])||o++;let l=new oi([o],n.dtype),u=new oi([o],"int32");for(let e=0,t=0;e<r.length;e++)s.has(r[e])||(l.values[t]=r[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]},mp=qi({sign_:function(e){let t={x:Gi(e,"x","sign")};return _i.runKernel($a,t)}}),yp=qi({sin_:function(e){let t={x:Gi(e,"x","sin","float32")};return _i.runKernel(Ea,t)}}),gp=qi({sinh_:function(e){let t={x:Gi(e,"x","sinh")};return _i.runKernel(Ra,t)}}),Ap=qi({slice1d_:function(e,t,n){let a=Gi(e,"x","slice1d");return ne(1===a.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${a.rank} tensor`)),nl(a,[t],[n])}}),xp=qi({slice2d_:function(e,t,n){let a=Gi(e,"x","slice2d");return ne(2===a.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${a.rank} tensor`)),nl(a,t,n)}}),bp=qi({slice3d_:function(e,t,n){let a=Gi(e,"x","slice3d");return ne(3===a.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${a.rank} tensor`)),nl(a,t,n)}}),vp=qi({slice4d_:function(e,t,n){let a=Gi(e,"x","slice4d");return ne(4===a.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${a.rank} tensor`)),nl(a,t,n)}}),wp=qi({softmax_:function(e,t=-1){let n=Gi(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);let a={logits:n},r={dim:t};return _i.runKernel(za,a,r)}}),kp=qi({fft_:function(e){ne("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));let t={input:e};return _i.runKernel(nn,t)}}),Ip=qi({ifft_:function(e){ne("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));let t={input:e};return _i.runKernel(fn,t)}}),Sp=qi({irfft_:function(e){let t,n=e.shape[e.shape.length-1],a=e.size/n;if(n<=2){let r=Zo(e,[a,n]);t=Ip(r)}else{let r=[a,2*(n-1)],i=Zo(tp(e),[a,n]),s=Zo(Iu(e),[a,n]),o=ip(nl(i,[0,1],[a,n-2]),1),l=vo(ip(nl(s,[0,1],[a,n-2]),1),lu(-1)),u=Qo([i,o],1),d=Qo([s,l],1),p=Zo(Xi(u,d),[r[0],r[1]]);t=Ip(p)}if(t=tp(t),3===e.rank&&0!==e.shape[0]){let n=t,a=e.shape[0];t=Zo(t,[a,t.shape[0]/a,t.shape[1]]),n.dispose()}return t}}),Np=qi({split_:function(e,t,n=0){let a={x:Gi(e,"x","split")},r={numOrSizeSplits:t,axis:n};return _i.runKernel(Da,a,r)}}),Cp=qi({rfft_:function(e,t){ne("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n,a=e.shape[e.shape.length-1],r=e.size/a;if(null!=t&&t<a){let r=e.shape.map((e=>0)),i=e.shape.map((e=>e));i[e.shape.length-1]=t,n=nl(e,r,i),a=t}else if(null!=t&&t>a){let r=e.shape.map((e=>e));r[e.shape.length-1]=t-a,n=Qo([e,sd(r)],e.shape.length-1),a=t}else n=e;let i=Gl(n),s=Zo(Xi(n,i),[r,a]),o=kp(s),l=Math.floor(a/2)+1,u=tp(o),d=Iu(o),p=Np(u,[l,a-l],u.shape.length-1),c=Np(d,[l,a-l],d.shape.length-1),h=n.shape.slice();return h[n.shape.length-1]=l,Zo(Xi(p[0],c[0]),h)}}),Tp=qi({squaredDifference_:function(e,t){let n=Gi(e,"a","squaredDifference"),a=Gi(t,"b","squaredDifference");[n,a]=Ii(n,a),Bl(n.shape,a.shape);let r={a:n,b:a};return _i.runKernel(Ga,r,{})}}),Ep=qi({squeeze_:function(e,t){let n=Gi(e,"x","squeeze","string_or_numeric");return Zo(n,ge(n.shape,t).newShape)}}),Rp=qi({stack_:function(e,t=0){let n=Hi(e,"tensors","stack","string_or_numeric");ne(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&ne(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));let a=n,r={axis:t};return _i.runKernel(ta,a,r)}}),$p=qi({step_:function(e,t=0){let n={x:Gi(e,"x","step")},a={alpha:t};return _i.runKernel(ur,n,a)}}),Mp=qi({stridedSlice_:function(e,t,n,a,r=0,i=0,s=0,o=0,l=0){let u={x:Gi(e,"x","stridedSlice","string_or_numeric")},d={begin:t,end:n,strides:a,beginMask:r,endMask:i,ellipsisMask:s,newAxisMask:o,shrinkAxisMask:l};return _i.runKernel(qa,u,d)}}),_p=qi({tan_:function(e){let t={x:Gi(e,"x","tan","float32")};return _i.runKernel(Ja,t)}});function Fp(e,t){re(e);let n=Bi(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Ki(e,null,n,t)}function Op(e,t,n){if(re(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");let a=Bi(e,n);if(2!==a.length&&1!==a.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Ki(e,t,a,n)}function Pp(e,t,n){if(re(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");let a=Bi(e,n);if(3!==a.length&&1!==a.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Ki(e,t,a,n)}function Dp(e,t,n){if(re(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");let a=Bi(e,n);if(4!==a.length&&1!==a.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Ki(e,t,a,n)}function zp(e,t,n){if(re(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");let a=Bi(e,n);if(5!==a.length&&1!==a.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Ki(e,t,a,n)}function Lp(e,t,n){if(re(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");let a=Bi(e,n);if(6!==a.length&&1!==a.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Ki(e,t=t||a,a,n)}var Wp={};function Bp(e,t,n){let a=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,i=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${a}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(i+` update.rank < ${r}. `);if(e.length<a+(n.rank-r))throw new Error(i+` Output shape length < ${a+(n.rank-r)}`);if(n.rank!==r+e.length-a)throw new Error(i+" update.rank != "+(r+e.length-a));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(i+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+a])throw new Error(i+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function Vp(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Bp(n,t,e)}function Up(e,t,n){let a=t.shape.length,r=a>1?t.shape[a-1]:1,i=n.length,s=1;for(let e=r;e<i;++e)s*=n[e];let o=r<1?1:r;return{sliceRank:r,numUpdates:ie(t.shape)/o,sliceSize:s,strides:[...$e(n.slice(0,r)),1],outputSize:ie(n)}}k(Wp,{calculateShapes:()=>Up,validateInput:()=>Vp,validateUpdateShape:()=>Bp});var Gp=qi({tensorScatterUpdate_:function(e,t,n){let a=Gi(e,"tensor","tensorScatterupdate"),r=Gi(t,"indices","tensorScatterupdate","int32"),i=Gi(n,"updates","tensorScatterupdate");if(Vp(i,r,a.shape),a.dtype!==i.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${a.dtype} and ${i.dtype}.`);let s={tensor:a,indices:r,updates:i};return _i.runKernel(Ia,s,{})}}),Hp=qi({topk_:function(e,t=1,n=!0){let a=Gi(e,"x","topk");if(0===a.rank)throw new Error("topk() expects the input to be of rank 1 or higher");let r=a.shape[a.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);let i={x:a},s={k:t,sorted:n},[o,l]=_i.runKernel(tr,i,s);return{values:o,indices:l}}}),jp=qi({truncatedNormal_:function(e,t=0,n=1,a,r){if(ze(e),null!=a&&"bool"===a)throw new Error("Unsupported data type $ { dtype }");let i=new Xd(t,n,a,!0,r),s=js(e,a);for(let e=0;e<s.values.length;e++)s.values[e]=i.nextValue();return s.toTensor()}}),qp=qi({unique_:function(e,t=0){let n=Gi(e,"x","unique","string_or_numeric");ne(n.rank>0,(()=>"The input tensor must be at least 1D"));let a={x:n},r={axis:t},[i,s]=_i.runKernel(rr,a,r);return{values:i,indices:s}}}),Xp=qi({unsortedSegmentSum_:function(e,t,n){let a=Gi(e,"x","unsortedSegmentSum"),r=Gi(t,"segmentIds","unsortedSegmentSum","int32");ne(ue(n),(()=>"numSegments must be of dtype int"));let i={x:a,segmentIds:r},s={numSegments:n};return _i.runKernel(sr,i,s)}}),Kp=qi({unstack_:function(e,t=0){let n=Gi(e,"x","unstack","string_or_numeric");ne(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));let a={value:n},r={axis:t};return _i.runKernel(ir,a,r)}});function Zp(e,t){return Qu(e,t,"right")}function Yp(e,t=!0,n,a){return _i.makeVariable(e,t,n,a)}function Jp(e,t){let n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);let a=js(e,"int32"),r=js([n.length,e.length],"int32");for(let t=0;t<n.length;t++){let i=a.indexToLoc(n[t]),s=t*e.length;r.values.set(i,s)}return r.toTensor()}var Qp=async function(e){let t=Gi(e,"condition","whereAsync","bool"),n=await t.data(),a=Jp(t.shape,n);return e!==t&&t.dispose(),a},ec=async function(e,t,n){let a=Gi(e,"tensor","boolMask"),r=Gi(t,"mask","boolMask","bool"),i=null==n?0:n,s=r.rank,o=a.shape;ne(s>0,(()=>"mask cannot be scalar")),ae(o.slice(i,i+s),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=i;e<i+s;e++)l*=o[e];let u=o.slice(0,i).concat([l],o.slice(i+s)),d=Zo(a,u),p=Zo(r,[-1]),c=await Qp(p),h=Ep(c,[1]),f=vu(d,h,i);return e!==a&&a.dispose(),t!==r&&r.dispose(),h.dispose(),d.dispose(),p.dispose(),c.dispose(),f},tc=qi({transpose_:function(e,t,n){let a=Gi(e,"x","transpose");if(null==t&&(t=a.shape.map(((e,t)=>t)).reverse()),ne(a.rank===t.length,(()=>`Error in transpose: rank of input ${a.rank} must match length of perm ${t}.`)),t.forEach((e=>{ne(e>=0&&e<a.rank,(()=>`All entries in 'perm' must be between 0 and ${a.rank-1} but got ${t}`))})),a.rank<=1)return a.clone();let r={x:a},i={perm:t};return"complex64"===a.dtype?ro((()=>{let e=tp(a),t=Iu(a);return e=_i.runKernel(ar,{x:e},i),t=_i.runKernel(ar,{x:t},i),n&&(t=Vu(t)),Xi(e,t)})):_i.runKernel(ar,r,i)}}),nc=qi({movingAverage_:function(e,t,n,a,r=!0){let i=Gi(e,"v","movingAverage"),s=Gi(t,"x","movingAverage"),o=Gi(n,"decay","movingAverage");Si(i,s),ne(le(i.shape,s.shape),(()=>"Shape mismatch in v and x"));let l=lu(1),u=Hu(l,o),d=vo(Hu(s,i),u);if(r){ne(null!=a,(()=>"When using zeroDebias: true, step is required."));let e=Gi(a,"step","movingAverage");d=bo(d,Hu(l,ou(o,e)))}return Ao(i,d)}}),ac=qi({scatterND_:function(e,t,n){ze(n);let a=Gi(e,"indices","scatterND","int32"),r=Gi(t,"updates","scatterND");Vp(r,a,n);let i={indices:a,updates:r},s={shape:n};return _i.runKernel(ka,i,s)}}),rc=qi({sparseToDense_:function(e,t,n,a=0){ze(n);let r=Gi(e,"sparseIndices","sparseToDense","int32"),i=Gi(t,"sparseValues","sparseToDense","string_or_numeric"),s=Gi(a,"defaultValue","sparseToDense",i.dtype);!function(e,t,n,a){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);let r=e.rank>0?e.shape[0]:1,i=e.rank>1?e.shape[1]:1;if(n.length!==i)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${i}.`);let s=t.size;if(0!==t.rank&&(1!==t.rank||s!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==a.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,i,n,s);let o={sparseIndices:r,sparseValues:i,defaultValue:s},l={outputShape:n};return _i.runKernel(Ua,o,l)}}),ic=qi({gatherND_:function(e,t){let n=Gi(t,"indices","gatherND","int32"),a={params:Gi(e,"x","gatherND","string_or_numeric"),indices:n};return _i.runKernel(dn,a)}}),sc=qi({dropout_:function(e,t,n,a){let r=Gi(e,"x","dropout");if(ne("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),ne(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof di?r.clone():r;let i=function(e,t){if(null==t)return e.shape.slice();if(le(e.shape,t))return t;if(e.shape.length===t.length){let n=[];for(let a=0;a<e.shape.length;a++)null==t[a]&&null!=e.shape[a]?n.push(e.shape[a]):n.push(t[a]);return n}return t}(r,n),s=1-t,o=bo(bu(Ao(Jd(i,0,1,"float32",a),s)),s);return vo(r,o)}});function oc(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function lc(e,t,n){let a=1-e%2,r=new Float32Array(e);for(let i=0;i<e;++i){let s=2*Math.PI*i/(e+a-1);r[i]=t-n*Math.cos(s)}return Fp(r,"float32")}var uc=async function(e,t,n=1){let a=Gi(e,"predictions","inTopK"),r=Gi(t,"targets","inTopK");ne(a.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${a.rank}`)),ne(a.rank-1===r.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${a.rank} and targets rank ${r.rank}`)),ae(a.shape.slice(0,a.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");let i=a.shape[a.shape.length-1];ne(n>0&&n<=i,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${i}), but got ${n}`));let s=await a.data(),o=await r.data(),[l,u]=[s.length/i,i],d=Ae("bool",l);for(let e=0;e<l;e++){let t=e*u,a=s.subarray(t,t+u),r=[];for(let e=0;e<a.length;e++)r.push({value:a[e],index:e});r.sort(((e,t)=>t.value-e.value)),d[e]=0;for(let t=0;t<n;t++)if(r[t].index===o[e]){d[e]=1;break}}return e!==a&&a.dispose(),t!==r&&r.dispose(),Zi(d,r.shape,"bool")},dc={};k(dc,{conv2d:()=>yc,depthwiseConv2d:()=>xc,matMul:()=>bc});var pc=qi({conv2DBackpropFilter_:function(e,t,n,a,r,i="NHWC",s){let o=e;3===e.rank&&(o=Zo(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Zo(t,[1,t.shape[0],t.shape[1],t.shape[2]])),ne(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),ne(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),ne(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));let u="NHWC"===i?o.shape[3]:o.shape[1],d="NHWC"===i?l.shape[3]:l.shape[1];ne(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),ne(d===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${d}) must match output depth for filter (${n[3]}).`)),Ko("conv2dDerFilter",r,s);let p={x:o,dy:l},c={strides:a,pad:r,dataFormat:i,dimRoundingMode:s,filterShape:n};return _i.runKernel(Ct,p,c)}});function cc(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return vo(e,$p(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function hc(e,t){let n=t,a=Wl(e.shape,t.shape);return a.length>0&&(n=pu(n,a)),Zo(n,e.shape)}function fc(e,t,n,a){if("linear"===t)return e;if("relu"===t)return ap(e);if("elu"===t)return Xl(e);if("relu6"===t)return rp(e);if("prelu"===t)return Nd(e,n);if("leakyrelu"===t)return Tu(e,a);if("sigmoid"===t)return tl(e);throw new Error(`Unknown fused activation ${t}.`)}var mc=(e,t)=>!(e>0)||"linear"===t,yc=qi({fusedConv2d_:function({x:e,filter:t,strides:n,pad:a,dataFormat:r="NHWC",dilations:i=[1,1],dimRoundingMode:s,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:d}){if(l=l||"linear",!1===mc(_i.state.gradientDepth,l)){ne("NHWC"===r,(()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let p=wl(e,t,n,a,r,i,s);return null!=o&&(p=Ao(p,o)),fc(p,l,u,d)}let p=Gi(e,"x","conv2d","float32"),c=Gi(t,"filter","conv2d","float32"),h=p,f=!1;3===p.rank&&(f=!0,h=Zo(p,[1,p.shape[0],p.shape[1],p.shape[2]])),ne(4===h.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${h.rank}.`)),ne(4===c.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${c.rank}.`)),Ko("fused conv2d",a,s);let m="NHWC"===r?h.shape[3]:h.shape[1];ne(c.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${c.shape[2]}.`)),ne(jo(n,i),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`));let y,g,A=zo(h.shape,c.shape,n,i,a,s);if(null!=o&&(y=Gi(o,"bias","fused conv2d"),[y]=Ii(y,p),"NHWC"===r?Bl(A.outShape,y.shape):(ne(y.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`)),ne(0===y.shape.length||y.shape[0]===A.outChannels||1===y.shape[0],(()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${A.outChannels})`)))),null!=u){let e=u.shape;if(ne(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)ne(1===e[0]||e[0]===A.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${A.outChannels}).`));else if(3===e.length)try{Bl(e,A.outShape)}catch(t){let n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${A.outShape}).`;throw Error(n)}g=Gi(u,"prelu weights","fused conv2d")}let x=(e,t)=>{ne("NHWC"===r,(()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`));let[s,o,u,d]=t,p=cc(e,u,l);ne(Ho(i),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${i}'`));let c=[Il(o.shape,p,s,n,a),pc(o,p,s.shape,n,a)];if(null!=d){let e=hc(d,p);c.push(e)}return c},b={x:h,filter:c,bias:y,preluActivationWeights:g},v={strides:n,pad:a,dataFormat:r,dilations:i,dimRoundingMode:s,activation:l,leakyreluAlpha:d};return null==o?Wu(((e,t,n)=>{let a=_i.runKernel(hr,b,v);return n([t,e,a]),f&&(a=Zo(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:x}}))(h,c):Wu(((e,t,n,a)=>{let r=_i.runKernel(hr,b,v);return a([t,e,r,n]),f&&(r=Zo(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(h,c,y)}}),gc=qi({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,a,r,i=[1,1],s){let o=e;3===e.rank&&(o=Zo(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Zo(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={x:o,dy:l},d={strides:a,pad:r,dimRoundingMode:s,dilations:i,filterShape:n};return _i.runKernel(Wt,u,d)}}),Ac=qi({depthwiseConv2dNativeBackpropInput_:function(e,t,n,a,r,i=[1,1],s){let o=t,l=!1;3===t.rank&&(l=!0,o=Zo(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={dy:o,filter:n},d={strides:a,pad:r,dimRoundingMode:s,dilations:i,inputShape:e},p=_i.runKernel(Bt,u,d);return l?Zo(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),xc=qi({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:a,dataFormat:r="NHWC",dilations:i=[1,1],dimRoundingMode:s,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:d}){if(!1===mc(_i.state.gradientDepth,l)){let p=Ol(e,t,n,a,r,i,s);return null!=o&&(p=Ao(p,o)),fc(p,l,u,d)}let p=Gi(e,"x","depthwiseConv2d","float32"),c=Gi(t,"filter","depthwiseConv2d","float32"),h=p,f=!1;3===p.rank&&(f=!0,h=Zo(p,[1,p.shape[0],p.shape[1],p.shape[2]])),ne(4===h.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${h.rank}.`)),ne(4===c.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${c.rank}.`)),ne(h.shape[3]===c.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${h.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`)),null==i&&(i=[1,1]),ne(jo(n,i),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),Ko("fused depthwiseConv2d",a,s);let m,y,g=zo(h.shape,c.shape,n,i,a,s,!0);null!=o&&(m=Gi(o,"bias","fused conv2d"),[m]=Ii(m,p),Bl(g.outShape,m.shape)),null!=u&&(y=Gi(u,"prelu weights","fused depthwiseConv2d"));let A=(e,t)=>{ne(Ho(i),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`));let[r,o,u,d]=t,p=cc(e,u,l),c=Ac(o.shape,p,r,n,a,i,s),h=gc(o,p,r.shape,n,a,i,s);return null!=d?[c,h,hc(m,p)]:[c,h]},x={x:h,filter:c,bias:m,preluActivationWeights:y},b={strides:n,pad:a,dataFormat:r,dilations:i,dimRoundingMode:s,activation:l,leakyreluAlpha:d};return null==o?Wu(((e,t,n)=>{let a=_i.runKernel(fr,x,b);return n([t,e,a]),f&&(a=Zo(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:A}}))(h,c):Wu(((e,t,n,a)=>{let r=_i.runKernel(fr,x,b);return a([t,e,r,n]),f&&(r=Zo(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:A}}))(h,c,m)}}),bc=qi({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:a=!1,bias:r,activation:i="linear",preluActivationWeights:s,leakyreluAlpha:o=.2}){if(!1===mc(_i.state.gradientDepth,i)){let l=el(e,t,n,a);return null!=r&&(l=Ao(l,r)),fc(l,i,s,o)}let l=Gi(e,"a","fused matMul"),u=Gi(t,"b","fused matMul");[l,u]=Ii(l,u);let d=n?l.shape[l.rank-2]:l.shape[l.rank-1],p=a?u.shape[u.rank-1]:u.shape[u.rank-2],c=n?l.shape[l.rank-1]:l.shape[l.rank-2],h=a?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),y=ie(f),g=ie(m);ne(d===p,(()=>`Error in fused matMul: inner shapes (${d}) and (${p}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${a} must match.`));let A,x,b=Bl(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([c,h]),v=Zo(l,n?[y,d,c]:[y,c,d]),w=Zo(u,a?[g,h,p]:[g,p,h]);null!=r&&(A=Gi(r,"bias","fused matMul"),[A]=Ii(A,l),Bl(b,A.shape)),null!=s&&(x=Gi(s,"prelu weights","fused matMul"));let k=(e,t)=>{let s,o,[l,u,d,p]=t,c=cc(Zo(e,d.shape),d,i);return n||a?!n&&a?(s=el(c,u,!1,!1),o=el(c,l,!0,!1)):n&&!a?(s=el(u,c,!1,!0),o=el(l,c,!1,!1)):(s=el(u,c,!0,!0),o=el(c,l,!0,!0)):(s=el(c,u,!1,!0),o=el(l,c,!0,!1)),null!=r?[s,o,hc(p,c)]:[s,o]},I={a:v,b:w,bias:A,preluActivationWeights:x},S={transposeA:n,transposeB:a,activation:i,leakyreluAlpha:o};return null==r?Wu(((e,t,n)=>{let a=_i.runKernel(cr,I,S);return n([e,t,a]),{value:Zo(a,b),gradFunc:k}}))(v,w):Wu(((e,t,n,a)=>{let r=_i.runKernel(cr,I,S);return a([e,t,r,n]),{value:Zo(r,b),gradFunc:k}}))(v,w,A)}}),vc=qi({hammingWindow_:function(e){return lc(e,.54,.46)}}),wc=qi({hannWindow_:function(e){return lc(e,.5,.5)}}),kc=qi({frame_:function(e,t,n,a=!1,r=0){let i=0,s=[];for(;i+t<=e.size;)s.push(nl(e,i,t)),i+=n;if(a)for(;i<e.size;){let a=i+t-e.size,o=Qo([nl(e,i,t-a),yl([a],r)]);s.push(o),i+=n}return 0===s.length?Op([],[0,t]):Zo(Qo(s),[s.length,t])}}),Ic=qi({stft_:function(e,t,n,a,r=wc){null==a&&(a=oc(t));let i=kc(e,t,n),s=vo(i,r(t));return Cp(s,a)}}),Sc=qi({cropAndResize_:function(e,t,n,a,r="bilinear",i=0){let s=Gi(e,"image","cropAndResize"),o=Gi(t,"boxes","cropAndResize","float32"),l=Gi(n,"boxInd","cropAndResize","int32"),u=o.shape[0];ne(4===s.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${s.rank}.`)),ne(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),ne(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),ne(2===a.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${a.length}.`)),ne(a[0]>=1&&a[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${a}`)),ne("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));let d={image:s,boxes:o,boxInd:l},p={method:r,extrapolationValue:i,cropSize:a};return _i.runKernel(Pt,d,p)}}),Nc=qi({flipLeftRight_:function(e){let t=Gi(e,"image","flipLeftRight","float32");ne(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));let n={image:t};return _i.runKernel(rn,n,{})}}),Cc=qi({grayscaleToRGB_:function(e){let t=Gi(e,"image","grayscaleToRGB"),n=t.rank-1,a=t.shape[n];ne(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),ne(1===a,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${a}.`));let r=new Array(t.rank);return r.fill(1,0,n),r[n]=3,Au(t,r)}}),Tc=qi({rotateWithOffset_:function(e,t,n=0,a=.5){let r=Gi(e,"image","rotateWithOffset","float32");ne(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));let i={image:r},s={radians:t,fillValue:n,center:a};return _i.runKernel(pr,i,s)}});function Ec(e,t,n,a,r,i){null==a&&(a=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==i&&(i=0);let s=e.shape[0];return n=Math.min(n,s),ne(0<=a&&a<=1,(()=>`iouThreshold must be in [0, 1], but was '${a}'`)),ne(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),ne(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),ne(1===t.rank,(()=>"scores must be a 1D tensor")),ne(t.shape[0]===s,(()=>`scores has incompatible shape with boxes. Expected ${s}, but was ${t.shape[0]}`)),ne(0<=i&&i<=1,(()=>`softNmsSigma must be in [0, 1], but was '${i}'`)),{maxOutputSize:n,iouThreshold:a,scoreThreshold:r,softNmsSigma:i}}var Rc=qi({nonMaxSuppression_:function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY){let i=Gi(e,"boxes","nonMaxSuppression","float32"),s=Gi(t,"scores","nonMaxSuppression","float32"),o=Ec(i,s,n,a,r),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:a=o.iouThreshold,scoreThreshold:r=o.scoreThreshold};return _i.runKernel(Zn,{boxes:i,scores:s},l)}});function $c(e,t,n){let a=function(e,t,n){return function(e,t,n){let a=0,r=e.length,i=0,s=!1;for(;a<r;){i=a+(r-a>>>1);let o=n(t,e[i]);o>0?a=i+1:(r=i,s=!o)}return s?a:-a-1}(e,t,n||Mc)}(e,t,n),r=a<0?-(a+1):a;e.splice(r,0,t)}function Mc(e,t){return e>t?1:e<t?-1:0}function _c(e,t,n,a,r){return Pc(e,t,n,a,r,0)}function Fc(e,t,n,a,r,i){return Pc(e,t,n,a,r,0,!1,i,!0)}function Oc(e,t,n,a,r,i){return Pc(e,t,n,a,r,i,!0)}function Pc(e,t,n,a,r,i,s=!1,o=!1,l=!1){let u=[];for(let e=0;e<t.length;e++)t[e]>r&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(Lc);let d=i>0?-.5/i:0,p=[],c=[];for(;p.length<n&&u.length>0;){let t=u.pop(),{score:n,boxIndex:i,suppressBeginIndex:s}=t;if(n<r)break;let o=!1;for(let n=p.length-1;n>=s;--n){let s=Dc(e,i,p[n]);if(s>=a){o=!0;break}if(t.score=t.score*zc(a,d,s),t.score<=r)break}t.suppressBeginIndex=p.length,o||(t.score===n?(p.push(i),c.push(t.score)):t.score>r&&$c(u,t,Lc))}let h=p.length,f=n-h;o&&f>0&&(p.push(...new Array(f).fill(0)),c.push(...new Array(f).fill(0)));let m={selectedIndices:p};return s&&(m.selectedScores=c),l&&(m.validOutputs=h),m}function Dc(e,t,n){let a=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),i=Math.min(a[0],a[2]),s=Math.min(a[1],a[3]),o=Math.max(a[0],a[2]),l=Math.max(a[1],a[3]),u=Math.min(r[0],r[2]),d=Math.min(r[1],r[3]),p=Math.max(r[0],r[2]),c=Math.max(r[1],r[3]),h=(o-i)*(l-s),f=(p-u)*(c-d);if(h<=0||f<=0)return 0;let m=Math.max(i,u),y=Math.max(s,d),g=Math.min(o,p),A=Math.min(l,c),x=Math.max(g-m,0)*Math.max(A-y,0);return x/(h+f-x)}function zc(e,t,n){let a=Math.exp(t*n*n);return n<=e?a:0}function Lc(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}var Wc=qi({nonMaxSuppressionWithScore_:function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY,i=0){let s=Gi(e,"boxes","nonMaxSuppression"),o=Gi(t,"scores","nonMaxSuppression"),l=Ec(s,o,n,a,r,i),u={boxes:s,scores:o},d={maxOutputSize:n=l.maxOutputSize,iouThreshold:a=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:i=l.softNmsSigma},p=_i.runKernel(Jn,u,d);return{selectedIndices:p[0],selectedScores:p[1]}}}),Bc=qi({nonMaxSuppressionPadded_:function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY,i=!1){let s=Gi(e,"boxes","nonMaxSuppression"),o=Gi(t,"scores","nonMaxSuppression"),l=Ec(s,o,n,a,r,null),u={boxes:s,scores:o},d={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:i},p=_i.runKernel(Yn,u,d);return{selectedIndices:p[0],validOutputs:p[1]}}}),Vc=qi({resizeBilinear_:function(e,t,n=!1,a=!1){let r=Gi(e,"images","resizeBilinear");ne(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),ne(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),ne(!1===a||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let i=r,s=!1;3===r.rank&&(s=!0,i=Zo(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let[]=t,o={images:i},l={alignCorners:n,halfPixelCenters:a,size:t},u=_i.runKernel(ga,o,l);return s?Zo(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Uc=qi({resizeNearestNeighbor_:function(e,t,n=!1,a=!1){let r=Gi(e,"images","resizeNearestNeighbor");ne(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),ne(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),ne("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),ne(!1===a||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let i=r,s=!1;3===r.rank&&(s=!0,i=Zo(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let[]=t,o={images:i},l={alignCorners:n,halfPixelCenters:a,size:t},u=_i.runKernel(ma,o,l);return s?Zo(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Gc=qi({threshold_:function(e,t="binary",n=!1,a=.5){let r,i,s,o,l=Gi(e,"image","threshold"),u=l.shape[0]*l.shape[1],d=vo(Fp([a]),255);if(ne(3===l.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${l.rank}.`)),ne(3===l.shape[2]||1===l.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${l.shape[2]}.`)),ne("int32"===l.dtype||"float32"===l.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${l.dtype}.`)),ne("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===l.shape[2]){[r,i,s]=Np(l,[1,1,1],-1);let e=vo(r,.2989),t=vo(i,.587),n=vo(s,.114);o=Ao(Ao(e,t),n)}else o=e;"otsu"===t&&(d=function(e,t){let n,a,r,i,s,o,l=Fp([-1]),u=Fp([0]),d=Fp([0]);for(let p=0;p<e.size-1;p++){n=nl(e,0,p+1),a=nl(e,p+1),s=bo(pu(n),t),o=bo(pu(a),t);let c=pu(vo(n,ep(0,n.size)));r=bo(c,pu(n));let h=yl(a.shape,n.size),f=Ao(ep(0,a.size),h),m=vo(a,f);i=bo(pu(m),pu(a));let y=Hu(r,i),g=Hu(r,i),A=vo(s,o);d=vo(vo(A,y),g);let x=wu(d,u);u=Ul(x,d,u),l=Ul(x,Fp([p]),l)}return l}(pl(qs(dp(o),"int32"),Zi([]),256),u));let p=n?Ru(o,d):wu(o,d);return qs(vo(p,255),"int32")}}),Hc=qi({transform_:function(e,t,n="nearest",a="constant",r=0,i){let s=Gi(e,"image","transform","float32"),o=Gi(t,"transforms","transform","float32");ne(4===s.rank,(()=>`Error in transform: image must be rank 4,but got rank ${s.rank}.`)),ne(2===o.rank&&(o.shape[0]===s.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),ne(null==i||2===i.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${i}.`));let l={image:s,transforms:o},u={interpolation:n,fillMode:a,fillValue:r,outputShape:i};return _i.runKernel(nr,l,u)}}),jc=qi({bandPart_:function(e,t,n){let a=Gi(e,"a","bandPart");ne(a.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${a.rank}.`));let r,i,s=a.shape,[o,l]=a.shape.slice(-2);"number"==typeof t?(ne(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),ne(t<=o,(()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${o}).`)),r=Gi(t<0?o:t,"numLower","bandPart")):(ne("int32"===t.dtype,(()=>"bandPart(): numLower's dtype must be an int32.")),r=Ul(Eu(t,0),o,ud(t,o))),"number"==typeof n?(ne(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`)),ne(n<=l,(()=>`bandPart(): numUpper (${n}) must not be greater than the number of columns (${l}).`)),i=Gi(n<0?l:n,"numUpper","bandPart")):(ne("int32"===n.dtype,(()=>"bandPart(): numUpper's dtype must be an int32.")),i=Ul(Eu(n,0),l,ud(n,l)));let u=Zo(ep(0,o,1,"int32"),[-1,1]),d=ep(0,l,1,"int32"),p=Hu(u,d),c=Xu(Ru(p,r),ku(p,Vu(i))),h=sd([o,l],a.dtype);return Zo(Rp(Kp(Zo(a,[-1,o,l])).map((e=>Ul(c,e,h)))),s)}}),qc=qi({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,ne(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));let n=e[0].shape[0];for(let t=1;t<e.length;++t)ne(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Np(e,e.shape[0],0).map((e=>Ep(e,[0])));ne(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));let n=[],a=e;for(let t=0;t<e.length;++t)n.push(_i.tidy((()=>{let e=a[t];if(t>0)for(let a=0;a<t;++a){let t=vo(pu(vo(n[a],e)),n[a]);e=Hu(e,t)}return bo(e,hu(e,"euclidean"))})));return t?Rp(n,0):n}});function Xc(e,t=!1){return _i.tidy((()=>{ne(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));let n=e.shape[0],a=e.shape[1],r=xu(n),i=Xs(e),s=Op([[1]],[1,1]),o=Xs(s),l=n>=a?a:n;for(let e=0;e<l;++e){let t=i,l=o,u=r;[o,i,r]=_i.tidy((()=>{let t=nl(i,[e,e],[n-e,1]),l=hu(t),u=nl(i,[e,e],[1,1]),d=Ul(wu(u,0),Op([[-1]]),Op([[1]])),p=Hu(u,vo(d,l)),c=bo(t,p);o=1===c.shape[0]?Xs(s):Qo([s,nl(c,[1,0],[c.shape[0]-1,c.shape[1]])],0);let h=Vu(bo(el(d,p),l)),f=nl(i,[e,0],[n-e,a]),m=vo(h,o),y=tc(o);if(0===e)i=Hu(f,el(m,el(y,f)));else{let t=Hu(f,el(m,el(y,f)));i=Qo([nl(i,[0,0],[e,a]),t],0)}let g=tc(m),A=nl(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=Hu(A,el(el(A,o),g));else{let t=Hu(A,el(el(A,o),g));r=Qo([nl(r,[0,0],[n,e]),t],1)}return[o,i,r]})),io([t,l,u])}return!t&&n>a&&(r=nl(r,[0,0],[n,a]),i=nl(i,[0,0],[a,a])),[r,i]}))}var Kc,Zc=qi({qr_:function(e,t=!1){if(ne(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Xc(e,t);{let n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),a=Kp(Zo(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],i=[];return a.forEach((e=>{let[n,a]=Xc(e,t);r.push(n),i.push(a)})),[Zo(Rp(r,0),e.shape),Zo(Rp(i,0),e.shape)]}}});!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Kc||(Kc={}));var Yc=qi({computeWeightedLoss_:function(e,t,n=Kc.SUM_BY_NONZERO_WEIGHTS){let a=Gi(e,"losses","computeWeightedLoss"),r=null;null!=t&&(r=Gi(t,"weights","computeWeightedLoss"));let i=null==r?a:vo(a,r);if(n===Kc.NONE)return i;if(n===Kc.SUM)return pu(i);if(n===Kc.MEAN){if(null==r)return id(i);{let e=a.size/r.size,t=bo(pu(i),pu(r));return e>1?bo(t,lu(e)):t}}if(n===Kc.SUM_BY_NONZERO_WEIGHTS){if(null==r)return bo(pu(i),lu(a.size));{let e=vo(r,od(a.shape)),t=qs(pu(md(e,lu(0))),"float32");return bo(pu(i),t)}}throw Error(`Unknown reduction: ${n}`)}}),Jc=qi({absoluteDifference_:function(e,t,n,a=Kc.SUM_BY_NONZERO_WEIGHTS){let r=Gi(e,"labels","absoluteDifference"),i=Gi(t,"predictions","absoluteDifference"),s=null;null!=n&&(s=Gi(n,"weights","absoluteDifference")),ae(r.shape,i.shape,"Error in absoluteDifference: ");let o=wo(Hu(r,i));return Yc(o,s,a)}}),Qc=qi({cosineDistance_:function(e,t,n,a,r=Kc.SUM_BY_NONZERO_WEIGHTS){let i=Gi(e,"labels","cosineDistance"),s=Gi(t,"predictions","cosineDistance"),o=null;null!=a&&(o=Gi(a,"weights","cosineDistance")),ae(i.shape,s.shape,"Error in cosineDistance: ");let l=lu(1),u=Hu(l,pu(vo(i,s),n,!0));return Yc(u,o,r)}}),eh=qi({hingeLoss_:function(e,t,n,a=Kc.SUM_BY_NONZERO_WEIGHTS){let r=Gi(e,"labels","hingeLoss"),i=Gi(t,"predictions","hingeLoss"),s=null;null!=n&&(s=Gi(n,"weights","hingeLoss")),ae(r.shape,i.shape,"Error in hingeLoss: ");let o=lu(1);r=Hu(vo(lu(2),r),o);let l=ap(Hu(o,vo(r,i)));return Yc(l,s,a)}}),th=qi({huberLoss_:function(e,t,n,a=1,r=Kc.SUM_BY_NONZERO_WEIGHTS){let i=Gi(e,"labels","huberLoss"),s=Gi(t,"predictions","huberLoss"),o=null;null!=n&&(o=Gi(n,"weights","huberLoss")),ae(i.shape,s.shape,"Error in huberLoss: ");let l=lu(a),u=wo(Hu(s,i)),d=ud(u,l),p=Hu(u,d),c=Ao(vo(lu(.5),du(d)),vo(l,p));return Yc(c,o,r)}}),nh=qi({logLoss_:function(e,t,n,a=1e-7,r=Kc.SUM_BY_NONZERO_WEIGHTS){let i=Gi(e,"labels","logLoss"),s=Gi(t,"predictions","logLoss"),o=null;null!=n&&(o=Gi(n,"weights","logLoss")),ae(i.shape,s.shape,"Error in logLoss: ");let l=lu(1),u=lu(a),d=Vu(vo(i,_u(Ao(s,u)))),p=vo(Hu(l,i),_u(Ao(Hu(l,s),u))),c=Hu(d,p);return Yc(c,o,r)}}),ah=qi({meanSquaredError_:function(e,t,n,a=Kc.SUM_BY_NONZERO_WEIGHTS){let r=Gi(e,"labels","meanSquaredError"),i=Gi(t,"predictions","meanSquaredError"),s=null;null!=n&&(s=Gi(n,"weights","meanSquaredError")),ae(r.shape,i.shape,"Error in meanSquaredError: ");let o=Tp(r,i);return Yc(o,s,a)}}),rh=qi({sigmoidCrossEntropy_:function(e,t,n,a=0,r=Kc.SUM_BY_NONZERO_WEIGHTS){let i=Gi(e,"multiClassLabels","sigmoidCrossEntropy"),s=Gi(t,"logits","sigmoidCrossEntropy"),o=null;if(null!=n&&(o=Gi(n,"weights","sigmoidCrossEntropy")),ae(i.shape,s.shape,"Error in sigmoidCrossEntropy: "),a>0){let e=lu(a),t=lu(1),n=lu(.5);i=Ao(vo(i,Hu(t,e)),vo(n,e))}let l=function(e,t){let n=Gi(e,"labels","sigmoidCrossEntropyWithLogits"),a=Gi(t,"logits","sigmoidCrossEntropyWithLogits");ae(n.shape,a.shape,"Error in sigmoidCrossEntropyWithLogits: ");let r=ap(a),i=vo(a,n),s=Fu(mu(Vu(wo(a))));return Ao(Hu(r,i),s)}(i,s);return Yc(l,o,r)}}),ih=qi({softmaxCrossEntropy_:function(e,t,n,a=0,r=Kc.SUM_BY_NONZERO_WEIGHTS){let i=Gi(e,"onehotLabels","softmaxCrossEntropy"),s=Gi(t,"logits","softmaxCrossEntropy"),o=null;if(null!=n&&(o=Gi(n,"weights","softmaxCrossEntropy")),ae(i.shape,s.shape,"Error in softmaxCrossEntropy: "),a>0){let e=lu(a),t=lu(1),n=lu(i.shape[1]);i=Ao(vo(i,Hu(t,e)),bo(e,n))}let l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return Wu(((e,t,a)=>{let r=qu(t,[n],!0),i=Hu(qs(t,"float32"),r);a([e,i]);let s=Vu(vo(i,e));return{value:pu(s,[n]),gradFunc:(e,t)=>{let[a,r]=t,i=eu(e.shape,[n]);return[vo(Zo(e,i),Hu(qs(a,"float32"),mu(r))),vo(Zo(e,i),Hu(mu(r),qs(a,"float32")))]}}}))(e,t)}(i,s);return Yc(l,o,r)}}),sh=qi({sparseFillEmptyRows_:function(e,t,n,a){let r=Gi(e,"indices","sparseFillEmptyRows","int32"),i=Gi(t,"values","sparseFillEmptyRows"),s=Gi(n,"denseShape","sparseFillEmptyRows","int32"),o=Gi(a,"defaultValue","sparseFillEmptyRows",i.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==i.rank)throw new Error(`Values should be Tensor1D but received shape ${i.shape}`);if(1!==s.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${s.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);let l={indices:r,values:i,denseShape:s,defaultValue:o},u=_i.runKernel(La,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}}),oh=qi({sparseReshape_:function(e,t,n){let a=Gi(e,"inputIndices","sparseReshape","int32"),r=Gi(t,"inputShape","sparseReshape","int32"),i=Gi(n,"newShape","sparseReshape","int32");if(2!==a.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${a.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==i.rank)throw new Error(`New shape should be Tensor1D but received shape ${i.shape}`);let s={inputIndices:a,inputShape:r,newShape:i},o=_i.runKernel(Wa,s);return{outputIndices:o[0],outputShape:o[1]}}}),lh=qi({sparseSegmentMean_:function(e,t,n){let a=Gi(e,"data","sparseSegmentMean"),r=Gi(t,"indices","sparseSegmentMean","int32"),i=Gi(n,"segmentIds","sparseSegmentMean","int32");if(a.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==i.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${i.shape}`);let s={data:a,indices:r,segmentIds:i};return _i.runKernel(Ba,s)}}),uh=qi({sparseSegmentSum_:function(e,t,n){let a=Gi(e,"data","sparseSegmentSum"),r=Gi(t,"indices","sparseSegmentSum","int32"),i=Gi(n,"segmentIds","sparseSegmentSum","int32");if(a.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==i.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${i.shape}`);let s={data:a,indices:r,segmentIds:i};return _i.runKernel(Va,s)}}),dh=qi({stringNGrams_:function(e,t,n,a,r,i,s,o){let l=Gi(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);let u=Gi(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");let d={separator:n,nGramWidths:a,leftPad:r,rightPad:i,padWidth:s,preserveShortSequences:o},p={data:l,dataSplits:u},c=_i.runKernel(Xa,p,d);return{nGrams:c[0],nGramsSplits:c[1]}}}),ph=qi({stringSplit_:function(e,t,n=!0){let a=Gi(e,"input","stringSplit","string"),r=Gi(t,"delimiter","stringSplit","string");if(1!==a.rank)throw new Error(`Input should be Tensor1D but received shape ${a.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);let i={skipEmpty:n},s={input:a,delimiter:r},o=_i.runKernel(Ka,s,i);return{indices:o[0],values:o[1],shape:o[2]}}}),ch=qi({stringToHashBucketFast_:function(e,t){let n=Gi(e,"input","stringToHashBucketFast","string"),a={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");let r={input:n};return _i.runKernel(Za,r,a)}}),hh=qi({staticRegexReplace_:function(e,t,n,a=!0){let r=Gi(e,"input","staticRegexReplace","string"),i={pattern:t,rewrite:n,replaceGlobal:a};return _i.runKernel(ja,{x:r},i)}}),fh={fft:kp,ifft:Ip,rfft:Cp,irfft:Sp},mh={hammingWindow:vc,hannWindow:wc,frame:kc,stft:Ic},yh={flipLeftRight:Nc,grayscaleToRGB:Cc,resizeNearestNeighbor:Uc,resizeBilinear:Vc,rotateWithOffset:Tc,cropAndResize:Sc,nonMaxSuppression:Rc,nonMaxSuppressionAsync:async function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY){let i=Gi(e,"boxes","nonMaxSuppressionAsync"),s=Gi(t,"scores","nonMaxSuppressionAsync"),o=Ec(i,s,n,a,r);n=o.maxOutputSize,a=o.iouThreshold,r=o.scoreThreshold;let l=await Promise.all([i.data(),s.data()]),u=l[0],d=l[1],{selectedIndices:p}=_c(u,d,n,a,r);return i!==e&&i.dispose(),s!==t&&s.dispose(),Fp(p,"int32")},nonMaxSuppressionWithScore:Wc,nonMaxSuppressionWithScoreAsync:async function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY,i=0){let s=Gi(e,"boxes","nonMaxSuppressionAsync"),o=Gi(t,"scores","nonMaxSuppressionAsync"),l=Ec(s,o,n,a,r,i);n=l.maxOutputSize,a=l.iouThreshold,r=l.scoreThreshold,i=l.softNmsSigma;let u=await Promise.all([s.data(),o.data()]),d=u[0],p=u[1],{selectedIndices:c,selectedScores:h}=Oc(d,p,n,a,r,i);return s!==e&&s.dispose(),o!==t&&o.dispose(),{selectedIndices:Fp(c,"int32"),selectedScores:Fp(h)}},nonMaxSuppressionPadded:Bc,nonMaxSuppressionPaddedAsync:async function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY,i=!1){let s=Gi(e,"boxes","nonMaxSuppressionAsync"),o=Gi(t,"scores","nonMaxSuppressionAsync"),l=Ec(s,o,n,a,r,null),u=l.maxOutputSize,d=l.iouThreshold,p=l.scoreThreshold,[c,h]=await Promise.all([s.data(),o.data()]),{selectedIndices:f,validOutputs:m}=Fc(c,h,u,d,p,i);return s!==e&&s.dispose(),o!==t&&o.dispose(),{selectedIndices:Fp(f,"int32"),validOutputs:lu(m,"int32")}},threshold:Gc,transform:Hc},gh={bandPart:jc,gramSchmidt:qc,qr:Zc},Ah={absoluteDifference:Jc,computeWeightedLoss:Yc,cosineDistance:Qc,hingeLoss:eh,huberLoss:th,logLoss:nh,meanSquaredError:ah,sigmoidCrossEntropy:rh,softmaxCrossEntropy:ih},xh={sparseFillEmptyRows:sh,sparseReshape:oh,sparseSegmentMean:lh,sparseSegmentSum:uh},bh={stringNGrams:dh,stringSplit:ph,stringToHashBucketFast:ch,staticRegexReplace:hh},vh={};k(vh,{Serializable:()=>wh,SerializationMap:()=>kh,registerClass:()=>Ih});var wh=class{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}},kh=class{constructor(){this.classNameMap={}}static getMap(){return null==kh.instance&&(kh.instance=new kh),kh.instance}static register(e){kh.getMap().classNameMap[e.className]=[e,e.fromConfig]}};function Ih(e){ne(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),ne("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),ne(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),kh.register(e)}var Sh=class extends wh{minimize(e,t=!1,n){let{value:a,grads:r}=this.computeGradients(e,n);if(null!=n){let e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return io(r),t?a:(a.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return Lu(e,t)}dispose(){null!=this.iterations_&&io(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:lu(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}};Object.defineProperty(Sh,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});var Nh=class extends Sh{static get className(){return"Adadelta"}constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=_i.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{let a=_i.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:ro((()=>Gl(a).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:ro((()=>Gl(a).variable(!1)))});let r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;let i=this.accumulatedGrads[n].variable,s=this.accumulatedUpdates[n].variable;ro((()=>{let e=Ao(vo(i,this.rho),vo(du(r),1-this.rho)),t=vo(bo(uu(Ao(s,this.epsilon)),uu(Ao(i,this.epsilon))),r),n=Ao(vo(s,this.rho),vo(du(t),1-this.rho));i.assign(e),s.assign(n);let o=Ao(vo(t,-this.learningRate),a);a.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(io(this.accumulatedGrads.map((e=>e.variable))),io(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){let e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){let t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}},Ch=class extends Sh{static get className(){return"Adagrad"}constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{let a=_i.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:ro((()=>yl(a.shape,this.initialAccumulatorValue).variable(!1)))});let r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;let i=this.accumulatedGrads[n].variable;ro((()=>{let e=Ao(i,du(r));i.assign(e);let t=Ao(vo(bo(r,uu(Ao(e,_i.backend.epsilon()))),-this.learningRate),a);a.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&io(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}},Th=class extends Sh{static get className(){return"Adam"}constructor(e,t,n,a=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=a,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],ro((()=>{this.accBeta1=lu(t).variable(),this.accBeta2=lu(n).variable()})),null==a&&(this.epsilon=_i.backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);ro((()=>{let n=Hu(1,this.accBeta1),a=Hu(1,this.accBeta2);t.forEach(((t,r)=>{let i=_i.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:ro((()=>Gl(i).variable(!1)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:ro((()=>Gl(i).variable(!1)))});let s=Array.isArray(e)?e[r].tensor:e[t];if(null==s)return;let o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=Ao(vo(o,this.beta1),vo(s,1-this.beta1)),d=Ao(vo(l,this.beta2),vo(du(s),1-this.beta2)),p=bo(u,n),c=bo(d,a);o.assign(u),l.assign(d);let h=Ao(vo(bo(p,Ao(uu(c),this.epsilon)),-this.learningRate),i);i.assign(h)})),this.accBeta1.assign(vo(this.accBeta1,this.beta1)),this.accBeta2.assign(vo(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&io(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&io(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){let e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),ro((()=>{this.accBeta1.assign(ou(this.beta1,this.iterations_+1)),this.accBeta2.assign(ou(this.beta2,this.iterations_+1))}));let t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}},Eh=class extends Sh{static get className(){return"Adamax"}constructor(e,t,n,a=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=a,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],ro((()=>{this.iteration=lu(0).variable(),this.accBeta1=lu(t).variable()})),null==a&&(this.epsilon=_i.backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);ro((()=>{let n=Hu(1,this.accBeta1),a=bo(-this.learningRate,Ao(vo(this.iteration,this.decay),1));t.forEach(((t,r)=>{let i=_i.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:Gl(i).variable(!1)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:Gl(i).variable(!1)});let s=Array.isArray(e)?e[r].tensor:e[t];if(null==s)return;let o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=Ao(vo(o,this.beta1),vo(s,1-this.beta1)),d=vo(l,this.beta2),p=wo(s),c=rd(d,p);o.assign(u),l.assign(c);let h=Ao(vo(bo(a,n),bo(u,Ao(c,this.epsilon))),i);i.assign(h)})),this.iteration.assign(Ao(this.iteration,1)),this.accBeta1.assign(vo(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&io(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&io(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}},Rh=class extends Sh{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{let a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;let r=_i.registeredVariables[t];ro((()=>{let e=Ao(vo(this.c,a),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=so(lu(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}},$h=class extends Rh{static get className(){return"Momentum"}constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=lu(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{let a=_i.registeredVariables[t];null==this.accumulations[n]&&(this.accumulations[n]={originalName:`${t}/momentum`,variable:ro((()=>Gl(a).variable(!1)))});let r=this.accumulations[n].variable,i=Array.isArray(e)?e[n].tensor:e[t];null!=i&&ro((()=>{let e,t=Ao(vo(this.m,r),i);e=this.useNesterov?Ao(vo(this.c,Ao(i,vo(t,this.m))),a):Ao(vo(this.c,t),a),r.assign(t),a.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&io(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}},Mh=class extends Sh{static get className(){return"RMSProp"}constructor(e,t=.9,n=0,a=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=a,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==a&&(this.epsilon=_i.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{let a=_i.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:ro((()=>Gl(a).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:ro((()=>Gl(a).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:ro((()=>Gl(a).variable(r)))});let i=Array.isArray(e)?e[n].tensor:e[t];if(null==i)return;let s=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;ro((()=>{let e=Ao(vo(s,this.decay),vo(du(i),1-this.decay));if(this.centered){let t=this.accumulatedMeanGrads[n].variable,r=Ao(vo(t,this.decay),vo(i,1-this.decay)),l=bo(vo(i,this.learningRate),uu(Hu(e,Ao(du(r),this.epsilon)))),u=Ao(vo(o,this.momentum),l);s.assign(e),t.assign(r),o.assign(u);let d=Hu(a,u);a.assign(d)}else{let e=Ao(vo(s,this.decay),vo(du(i),1-this.decay)),t=Ao(vo(o,this.momentum),bo(vo(i,this.learningRate),uu(Ao(e,this.epsilon))));s.assign(e),o.assign(t);let n=Hu(a,t);a.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&io(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&io(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&io(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){let e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);let t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}},_h=[Nh,Ch,Th,Eh,$h,Mh,Rh],Fh={};function Oh(e){return new Promise((e=>setTimeout(e))).then(e)}k(Fh,{CompositeArrayBuffer:()=>Ji,browserFiles:()=>zh,browserHTTPRequest:()=>qh,concatenateArrayBuffers:()=>is,copyModel:()=>Gs,decodeWeights:()=>ts,encodeWeights:()=>es,fromMemory:()=>Yh,fromMemorySync:()=>Jh,getLoadHandlers:()=>gs,getModelArtifactsForJSON:()=>us,getModelArtifactsForJSONSync:()=>ls,getModelArtifactsInfoForJSON:()=>ds,getSaveHandlers:()=>ys,getWeightSpecs:()=>ps,http:()=>jh,isHTTPScheme:()=>Gh,listModels:()=>Vs,loadWeights:()=>Bh,moveModel:()=>Hs,registerLoadRouter:()=>ms,registerSaveRouter:()=>fs,removeModel:()=>Us,weightsLoaderFactory:()=>Vh,withSaveHandler:()=>Qh,withSaveHandlerSync:()=>ef});var Ph=class{constructor(e){if(!He().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Ph.URL_SCHEME)&&(e=e.slice(Ph.URL_SCHEME.length)),(null==e||0===e.length)&&(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");let t=Ji.join(e.weightData),n=window.URL.createObjectURL(new Blob([t],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{let t=os(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),a=window.URL.createObjectURL(new Blob([JSON.stringify(t)],{type:"application/json"})),r=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(r.download=this.modelJsonFileName,r.href=a,await Oh((()=>r.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){let e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=n,await Oh((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:ds(e)}}}};Ph.URL_SCHEME="downloads://";var Dh=class{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{let n=new FileReader;n.onload=n=>{let a=JSON.parse(n.target.result),r=a.modelTopology;if(null==r)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==a.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:r});let i=us(a,(e=>this.loadWeights(e)));e(i)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){let t=[],n=[];for(let a of e)t.push(...a.weights),n.push(...a.paths);let a=this.checkManifestAndWeightFiles(e),r=n.map((e=>this.loadWeightsFile(e,a[e])));return Promise.all(r).then((e=>[t,e]))}loadWeightsFile(e,t){return new Promise(((n,a)=>{let r=new FileReader;r.onload=e=>{let t=e.target.result;n(t)},r.onerror=t=>a(`Failed to weights data from file of path '${e}'.`),r.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){let t=[],n=this.weightsFiles.map((e=>ss(e.name))),a={};for(let r of e)r.paths.forEach((e=>{let r=ss(e);if(-1!==t.indexOf(r))throw new Error(`Duplicate file basename found in weights manifest: '${r}'`);if(t.push(r),-1===n.indexOf(r))throw new Error(`Weight file with basename '${r}' is not provided.`);a[e]=this.weightsFiles[n.indexOf(r)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return a}};function zh(e){return new Dh(e)}function Lh(e,t,n,a){var r;ne(null!=(r=e)&&Array.isArray(r)&&r.length>0,(()=>"promises must be a none empty array")),function(e,t){ne(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),ne(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),ne(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,a=null==a?1:a);let i=0;return Promise.all(e.map((r=>(r.then((r=>{let s=n+ ++i/e.length*(a-n);return t(s),r})),r))))}async function Wh(e,t){null==t&&(t={});let n=null==t.fetchFunc?He().platform.fetch:t.fetchFunc,a=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(a):await Lh(a,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await Lh(r,t.onProgress,.5,1)}async function Bh(e,t="",n,a){return Vh((e=>Wh(e,{requestInit:a})))(e,t,n)}function Vh(e){return async(t,n="",a)=>{let r=t.map((()=>!1)),i={},s=null!=a?a.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{let l="quantization"in e?e.quantization.dtype:e.dtype,u=Yi[l]*ie(e.shape),d=()=>{r[t]=!0,null==i[t]&&(i[t]=[]),i[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=a?a.forEach(((t,n)=>{t===e.name&&(d(),s[n]=!0)})):d(),o.push(e.name),n+=u}))})),!s.every((e=>e))){let e=a.filter(((e,t)=>!s[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}let l=r.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{let t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));let d=await e(u),p={},c=0;return l.forEach((e=>{let n=t[e].paths.length,a=new Ji(d.slice(c,c+n));i[e].forEach((e=>{let t=ts(a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(let e in t)p[e]=t[e]})),c+=n})),p}}hs.registerSaveRouter((e=>He().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ph.URL_SCHEME)?function(e="model"){return new Ph(e)}(e.slice(Ph.URL_SCHEME.length)):null));var Uh=class{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(ne("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=He().platform.fetch,ne(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&ne(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");let t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;let n=os(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);if(t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData){let n=Ji.join(e.weightData);t.body.append("model.weights.bin",new Blob([n],{type:"application/octet-stream"}),"model.weights.bin")}let a=await this.fetch(this.path,t);if(a.ok)return{modelArtifactsInfo:ds(e),responses:[a]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${a.status}.`)}async load(){let e,t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);try{e=await t.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}let n=e.modelTopology,a=e.weightsManifest;if(null==n&&null==a)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return us(e,(e=>this.loadWeights(e)))}async loadWeights(e){let t=Array.isArray(this.path)?this.path[1]:this.path,[n,a]=function(e){let t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),r=this.weightPathPrefix||n,i=ps(e),s=[],o=[];for(let t of e)for(let e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):s.push(r+e+a);return this.weightUrlConverter&&s.push(...await Promise.all(o)),[i,await Wh(s,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})]}};function Gh(e){return null!=e.match(Uh.URL_SCHEME_REGEX)}Uh.URL_SCHEME_REGEX=/^https?:\/\//;var Hh=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Gh(e))):Gh(e),n)return jh(e,t)}return null};function jh(e,t){return new Uh(e,t)}function qh(e,t){return jh(e,t)}hs.registerSaveRouter(Hh),hs.registerLoadRouter(Hh);var Xh=class{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}},Kh=class{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}},Zh=class{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}};function Yh(e,t,n,a){return new Zh(Jh(...arguments))}function Jh(e,t,n,a){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new Xh(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Xh({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Xh({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:a}))}function Qh(e){return new Kh(e)}function ef(e){return new Kh(e)}var tf={};k(tf,{confusionMatrix:()=>af});var nf,af=qi({confusionMatrix_:function(e,t,n){let a=Gi(e,"labels","confusionMatrix"),r=Gi(t,"predictions","confusionMatrix");ne(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),ne(1===a.rank,(()=>`Expected the rank of labels to be 1, but got ${a.rank}`)),ne(1===r.rank,(()=>`Expected the rank of predictions to be 1, but got ${r.rank}`)),ne(a.shape[0]===r.shape[0],(()=>`Mismatch in the number of examples: ${a.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`)),ne(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));let i=yd(qs(a,"int32"),n),s=yd(qs(r,"int32"),n),o=tc(i),l=el(o,s);return qs(l,"int32")}}),rf={};k(rf,{draw:()=>pf,fromPixels:()=>cf,fromPixelsAsync:()=>lf,toPixels:()=>df});var sf=!1;function of(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,a=!1,r=!1,i=!1,s=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)a=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)i=!0;else if(null!=e.getContext)s=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(null!=xr(dr,_i.backendName)){let n={pixels:e},a={numChannels:t};return _i.runKernel(dr,n,a)}let l,u,[d,p]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];if(s)l=e.getContext("2d")?.getImageData(0,0,d,p)?.data;else if(a||n)l=e.data;else if(i||r||o){if(null==nf)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");nf=new OffscreenCanvas(1,1).getContext("2d")}else nf=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});nf.canvas.width=d,nf.canvas.height=p,nf.drawImage(e,0,0,d,p),l=nf.getImageData(0,0,d,p).data}if(4===t)u=new Int32Array(l);else{let e=d*p;u=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)u[n*t+e]=l[4*n+e]}return Pp(u,[p,d,t],"int32")}async function lf(e,t=3){let n=null;if(He().getBool("WRAP_TO_IMAGEBITMAP")&&function(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return of(n,t)}function uf(e){if(2!==e.rank&&3!==e.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);let t=2===e.rank?1:e.shape[2];if(t>4||2===t)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${t}`);if("float32"!==e.dtype&&"int32"!==e.dtype)throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`)}async function df(e,t){let n=Gi(e,"img","toPixels");if(!(e instanceof di)){let e=n;n=qs(e,"int32"),e.dispose()}uf(n);let[a,r]=n.shape.slice(0,2),i=2===n.rank?1:n.shape[2],s=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(r*a*4);for(let e=0;e<a*r;++e){let t=[0,0,0,255];for(let a=0;a<i;a++){let r=s[e*i+a];if("float32"===n.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===n.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===i?(t[0]=r*o,t[1]=r*o,t[2]=r*o):t[a]=r*o}let a=4*e;l[a+0]=Math.round(t[0]),l[a+1]=Math.round(t[1]),l[a+2]=Math.round(t[2]),l[a+3]=Math.round(t[3])}if(null!=t){sf||(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),sf=!0),t.width=r,t.height=a;let e=t.getContext("2d"),n=new ImageData(l,r,a);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}function pf(e,t,n){let a=Gi(e,"img","draw");if(!(e instanceof di)){let e=a;a=qs(e,"int32"),e.dispose()}uf(a),function(e){let t=(null==e?void 0:e.alpha)||1;if(t>1||t<0)throw new Error(`Alpha value ${t} is suppoed to be in range [0 - 1].`)}(null==n?void 0:n.imageOptions);let r={image:a},i={canvas:t,options:n};_i.runKernel(jt,r,i)}var cf=qi({fromPixels_:of}),hf={};function ff(e,t){let n=e.shape.length,a=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(a<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${a}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[a-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[a-1]} vs. ${n}`);if(0===ie(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);let r=t.shape,i=r[r.length-1],s=1;for(let e=0;e<r.length-1;++e)s*=r[e];let o=e.shape,l=r.slice();l.pop();let u=1;for(let e=i;e<n;++e)u*=o[e],l.push(o[e]);let d=[...$e(e.shape).map((e=>e/u)),1].slice(0,i);return[l,s,u,d]}k(hf,{prepareAndValidate:()=>ff});var mf={};k(mf,{assertParamsValid:()=>Af,computeFlatOffset:()=>$f,computeOutShape:()=>bf,getNormalizedAxes:()=>If,isSliceContinous:()=>Rf,maskToAxes:()=>xf,parseSliceParams:()=>Mf,sliceInfo:()=>_f,startForAxis:()=>Tf,startIndicesWithElidedDims:()=>Sf,stopForAxis:()=>Ef,stopIndicesWithElidedDims:()=>Nf,stridesForAxis:()=>Cf,stridesWithElidedDims:()=>vf});var yf=-2,gf=-1;function Af(e,t,n){let a=e.shape.length;ne(a===t.length,(()=>`Error in slice${a}D: Length of begin ${t} must match the rank of the array (${a}).`)),ne(a===n.length,(()=>`Error in slice${a}D: Length of size ${n} must match the rank of the array (${a}).`));for(let r=0;r<a;++r)ne(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${a}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function xf(e){let t=[],n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function bf(e,t,n){let a=[];for(let r=0;r<e.length;r++)a[r]=Math.ceil((t[r]-e[r])/n[r]);return a}function vf(e,t,n,a){let r=[...e];for(let e=r.length;e<a.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function wf(e,t,n){return n<=e?n:n-(t-1)}function kf(e,t){let n=[];for(let a=0;a<e;a++)n.push(t+a);return n}function If(e,t,n,a,r,i,s,o,l){let u=e.length,d=new Array(u),p=new Array(u),c=new Array(u);if(t.length&&n>0){let l=t[0],u=n+1;d=Sf(s,l,u,a,e),p=Nf(o,l,u,r,e),c=vf(i,l,u,e)}else for(let t=0;t<u;t++)d[t]=Tf(s,a,i,e,t,l),p[t]=Ef(o,r,i,e,t,l),c[t]=Cf(i,t,l);return{begin:d,end:p,strides:c}}function Sf(e,t,n,a,r){let i=[...r],s=kf(n,t);for(let r=0;r<i.length;r++)if(s.indexOf(r)>-1)i[r]=0;else{let s=wf(t,n,r),o=a[s];e&1<<s&&(o=0),i[r]=o}return i}function Nf(e,t,n,a,r){let i=[...r],s=kf(n,t);for(let r=0;r<i.length;r++)if(s.indexOf(r)>-1)i[r]=Number.MAX_SAFE_INTEGER;else{let s=wf(t,n,r),o=a[s];e&1<<s&&(o=Number.MAX_SAFE_INTEGER),i[r]=o}for(let e=0;e<i.length;e++){let t=r[e];i[e]<0&&(i[e]+=t),i[e]=Z(0,i[e],r[e])}return i}function Cf(e,t,n){let a=e[t];return(n&1<<t||null==a)&&(a=1),a}function Tf(e,t,n,a,r,i){let s=t[r],o=n[r]||1;(e&1<<r||i&1<<r||null==s)&&(s=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);let l=a[r];return s<0&&(s+=l),s=Z(0,s,l-1),s}function Ef(e,t,n,a,r,i){let s=t[r],o=n[r]||1;(e&1<<r||i&1<<r||null==s)&&(s=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);let l=a[r];return s<0&&(s+=l),s=o>0?Z(0,s,l):Z(-1,s,l-1),s}function Rf(e,t,n){let a=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){a=e;break}for(let r=a+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function $f(e,t){let n=e.length>0?e[e.length-1]:1;for(let a=0;a<e.length-1;a++)n+=e[a]*t[a];return n}function Mf(e,t,n){let a,r,i=e.shape.length;return a="number"==typeof t?[t,...new Array(i-1).fill(0)]:t.length<i?t.concat(new Array(i-t.length).fill(0)):t.slice(),a.forEach((e=>{ne(-1!==e,(()=>"slice() does not support negative begin indexing."))})),r=null==n?new Array(i).fill(-1):"number"==typeof n?[n,...new Array(i-1).fill(-1)]:n.length<i?n.concat(new Array(i-n.length).fill(-1)):n,r=r.map(((t,n)=>t>=0?t:(ne(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-a[n]))),[a,r]}function _f(e,t,n,a,r,i,s,o,l){let u;if(null==a?(u=new Array(t.length),u.fill(1)):u=a,null!=s&&s&s-1)throw new Error("Multiple ellipses in slice is not allowed.");let d=!1,p={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:r,endMask:i,ellipsisMask:s,newAxisMask:o,shrinkAxisMask:l};for(let e=0;e<p.dims;e++)d&&1<<e&o&&p.numAddAxisAfterEllipsis++,1<<e&s&&(d=!0);d||(p.ellipsisMask|=1<<p.dims,p.dims++);let c={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let a=0;a<e.dims;a++)if(1<<a&e.ellipsisMask){let r=Math.min(t.dims-(e.dims-a)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<r;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=a}else if(1<<a&e.newAxisMask)t.finalShapeGatherIndices.push(yf),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[a]),null!=e.end&&(t.end[n]=e.end[a]),t.strides[n]=e.strides[a],e.beginMask&1<<a&&(t.beginMask|=1<<n),e.endMask&1<<a&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<a?(t.finalShapeGatherIndices.push(gf),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(a)),t.inputShapeGatherIndicesSparse[n]=a,n++}}(p,c);let h=!0,f=!0,m=!0,y=[],g=[];for(let t=0;t<e.length;++t){if(0===c.strides[t])throw Error(`strides[${t}] must be non-zero`);let n=!!(c.shrinkAxisMask&1<<t),a=e[t];if(-1===a){y.push(n?1:-1);continue}let r=[c.beginMask&1<<t,c.endMask&1<<t],i=[c.strides[t]>0?0:-1,c.strides[t]>0?a:a-1];if(n&&c.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===c.strides[t];let s=!!(c.beginMask&1<<t&&c.endMask&1<<t);if(c.beginValid&&c.endValid){if(n){let e=c.begin[t]<0?a+c.begin[t]:c.begin[t];if(c.begin[t]=e,c.end[t]=c.begin[t]+1,e<0||e>=a)throw Error(`slice index ${c.begin[t]} of dimension ${t} out of bounds.`)}else c.begin[t]=Ff(c.begin[t],0,c.strides[t],a,r,i),c.end[t]=Ff(c.end[t],1,c.strides[t],a,r,i);let e=1===c.strides[t]&&0===c.begin[t]&&c.end[t]===a;h=h&&e,f=f&&(0===t&&1===c.strides[t]||e)}else h=h&&1===c.strides[t]&&s,f=f&&(0===t&&1===c.strides[t]||s);let o,l=!1;if(c.beginValid&&c.endValid?(o=c.end[t]-c.begin[t],l=!0):n?(o=1,l=!0):s&&a>=0&&(o=c.strides[t]<0?-a:a,l=!0),l){let e;e=0===o||o<0!=c.strides[t]<0?0:Math.trunc(o/c.strides[t])+(o%c.strides[t]!=0?1:0),y.push(e)}else y.push(-1)}for(let e=0;e<c.finalShapeGatherIndices.length;++e){let t=c.finalShapeGatherIndices[e];t>=0?g.push(y[t]):t===yf&&g.push(1)}return{finalShapeSparse:g.filter(((e,t)=>c.finalShapeGatherIndices[t]!==yf)),finalShape:g,isIdentity:h,sliceDim0:f,isSimpleSlice:m,begin:c.begin,end:c.end,strides:c.strides}}function Ff(e,t,n,a,r,i){if(r[t])return n>0?i[t]:i[t+1&1];{let t=e<0?a+e:e;return t<i[0]?i[0]:t>i[1]?i[1]:t}}var Of="4.7.0",Pf=class{static sgd(e){return new Rh(e)}static momentum(e,t,n=!1){return new $h(e,t,n)}static rmsprop(e,t=.9,n=0,a=null,r=!1){return new Mh(e,t,n,a,r)}static adam(e=.001,t=.9,n=.999,a=null){return new Th(e,t,n,a)}static adadelta(e=.001,t=.95,n=null){return new Nh(e,t,n)}static adamax(e=.002,t=.9,n=.999,a=null,r=0){return new Eh(e,t,n,a,r)}static adagrad(e,t=.1){return new Ch(e,t)}},Df=Pf,zf="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function Lf(){return new Promise((e=>zf((()=>e()))))}var Wf,Bf={};function Vf(e,t){let n=e[0].length;e.forEach(((e,t)=>{ne(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),ne(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));let a=e[0];e.forEach(((e,r)=>{for(let i=0;i<n;i++)ne(i===t||e[i]===a[i],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${a}) along the non-concatenated axis ${r}.`))}))}function Uf(e,t){let n=e[0].slice();for(let a=1;a<e.length;a++)n[t]+=e[a][t];return n}function Gf(e,t,n){let a=new Array;if(null==n&&null==t)return a;if(null==t)for(;a.length<e+n.length;)a.push(-1);else a=t.slice();if(null==n)return a;if(e+n.length!==a.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${a.length}`);for(let r=1;r<n.length;++r){let i=n[r],s=a[a.length-n.length+r],o=a[s];if(i>=0)if(o>=0){if(o!==i)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+e}] = ${i} but shape[${r+e}] = ${o}`)}else a[s]=i}return a}function Hf(e){let t={FIRST_DIM_SIZE:Wf.FIRST_DIM_SIZE,VALUE_ROWIDS:Wf.VALUE_ROWIDS,ROW_LENGTHS:Wf.ROW_LENGTHS,ROW_SPLITS:Wf.ROW_SPLITS,ROW_LIMITS:Wf.ROW_LIMITS,ROW_STARTS:Wf.ROW_STARTS},n=[];for(let a of e){if(!(a in t))break;n.push(t[a])}return n}function jf(e){return 0===e.length?0:e[0]===Wf.FIRST_DIM_SIZE?e.length-1:e.length}function qf(e,t){if(null==e||null==t)return;let n=e.length,a=t.length;if(n>=a)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${a})`);for(let r=0;r<Math.min(n,a-1);++r){let n=e[r],a=t[r+1];if(n>=0&&a>=0&&1!==n&&n!==a)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-e.length}] = ${n} but ragged tensor input.flatValues.shape[${r-e.length}] = ${a}`)}}k(Bf,{ERF_A1:()=>im,ERF_A2:()=>sm,ERF_A3:()=>om,ERF_A4:()=>lm,ERF_A5:()=>um,ERF_P:()=>rm,PARALLELIZE_THRESHOLD:()=>Xf,RowPartitionType:()=>Wf,SELU_SCALE:()=>am,SELU_SCALEALPHA:()=>nm,applyActivation:()=>fc,assertAndGetBroadcastShape:()=>Bl,assertAxesAreInnerMostDims:()=>tu,assertParamsConsistent:()=>Vf,assignToTypedArray:()=>mm,axesAreInnerMostDims:()=>Yl,calculateShapes:()=>Up,checkEinsumDimSizes:()=>Im,checkPadOnDimRoundingMode:()=>Ko,combineLocations:()=>Jl,combineRaggedTensorToTensorShapes:()=>Gf,complexWithEvenIndex:()=>cm,complexWithOddIndex:()=>hm,computeConv2DInfo:()=>zo,computeConv3DInfo:()=>Lo,computeDefaultPad:()=>Wo,computeDilation2DInfo:()=>Oo,computeOptimalWindowSize:()=>Kf,computeOutAndReduceShapes:()=>Ql,computeOutShape:()=>Uf,computePool2DInfo:()=>Po,computePool3DInfo:()=>Do,convertConv2DDataFormat:()=>Xo,decodeEinsumEquation:()=>wm,eitherStridesOrDilationsAreOne:()=>jo,expandShapeToKeepDim:()=>eu,exponent:()=>gm,exponents:()=>ym,fromStringArrayToUint8:()=>jm,fromUint8ToStringArray:()=>Hm,getAxesPermutation:()=>nu,getBroadcastDims:()=>Ll,getComplexWithIndex:()=>fm,getEinsumComputePath:()=>Sm,getEinsumPermutation:()=>km,getFusedBiasGradient:()=>hc,getFusedDyActivation:()=>cc,getImageCenter:()=>Zf,getInnerMostAxes:()=>ru,getPermuted:()=>Jf,getRaggedRank:()=>jf,getReductionAxes:()=>Wl,getReshaped:()=>Yf,getReshapedPermuted:()=>Qf,getRowPartitionTypesHelper:()=>Hf,getSliceBeginCoords:()=>em,getSliceSize:()=>tm,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>Em,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>Rm,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>$m,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>Fm,getSparseReshapeInputOutputMismatchErrorMessage:()=>Pm,getSparseReshapeInputOutputMultipleErrorMessage:()=>Om,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>Mm,getSparseReshapeNegativeOutputDimErrorMessage:()=>_m,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>Wm,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>Dm,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>zm,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>Lm,getUndoAxesPermutation:()=>au,isIdentityPermutation:()=>Nm,log:()=>yr,mergeRealAndImagArrays:()=>dm,prepareAndValidate:()=>ff,prepareSplitSize:()=>Tm,segment_util:()=>Bm,shouldFuse:()=>mc,slice_util:()=>mf,splitRealAndImagArrays:()=>pm,stridesOrDilationsArePositive:()=>qo,tupleValuesAreOne:()=>Ho,upcastType:()=>bi,validateDefaultValueShape:()=>qf,validateInput:()=>Vp,validateUpdateShape:()=>Bp,warn:()=>mr}),function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(Wf||(Wf={}));var Xf=30;function Kf(e){return e<=Xf?e:Re(e,Math.floor(Math.sqrt(e)))}function Zf(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function Yf(e,t,n,a=!0){let r=[];if(a)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);let n=t.length;for(let a=0;a<n;++a)r=r.concat([e[a+1]/t[a],t[a]]);r=r.concat(e.slice(n+1))}return r}function Jf(e,t,n=!0){let a=[];if(n){a.push(t);for(let n=t+1;n<e;++n)n<=2*t?(a.push(n),a.push(n-(t+1))):a.push(n)}else{let n=[],r=[];for(let a=1;a<e;++a)a>=2*t+1||a%2==1?r.push(a):n.push(a);a.push(...n),a.push(0),a.push(...r)}return a}function Qf(e,t,n,a=!0){let r=[];a?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?a?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function em(e,t){let n=[0];for(let a=0;a<t;++a)n.push(e[a][0]);return n}function tm(e,t,n){let a=e.slice(0,1);for(let r=0;r<n;++r)a.push(e[r+1]-t[r][0]-t[r][1]);return a}var nm=1.7580993408473768,am=1.0507009873554805,rm=.3275911,im=.254829592,sm=-.284496736,om=1.421413741,lm=-1.453152027,um=1.061405429;function dm(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);let n=new Float32Array(2*e.length);for(let a=0;a<n.length;a+=2)n[a]=e[a/2],n[a+1]=t[a/2];return n}function pm(e){let t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let a=0;a<e.length;a+=2)t[a/2]=e[a],n[a/2]=e[a+1];return{real:t,imag:n}}function cm(e){let t=Math.ceil(e.length/4),n=new Float32Array(t),a=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],a[Math.floor(t/4)]=e[t+1];return{real:n,imag:a}}function hm(e){let t=Math.floor(e.length/4),n=new Float32Array(t),a=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],a[Math.floor(t/4)]=e[t+1];return{real:n,imag:a}}function fm(e,t){return{real:e[2*t],imag:e[2*t+1]}}function mm(e,t,n,a){e[2*a]=t,e[2*a+1]=n}function ym(e,t){let n=new Float32Array(e/2),a=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){let i=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(i),a[r]=Math.sin(i)}return{real:n,imag:a}}function gm(e,t,n){let a=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(a),imag:Math.sin(a)}}var Am="->",xm=/->/g,bm=",",vm="...";function wm(e,t){let n=((e=e.replace(/\s/g,"")).length-e.replace(xm,"").length)/Am.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error(`Equation must contain exactly one arrow ("${Am}").`);let[a,r]=e.split(Am);ne(-1===a.indexOf(vm),(()=>`The ellipsis notation ("${vm}") is not supported yet.`));let i=a.split(bm),s=i.length;if(t!==s)throw new Error(`Expected ${s} input tensors, received ${t}`);if(s>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");let o=[];for(let e=0;e<r.length;++e){let t=r[e];if(!i.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<a.length;++e){let t=a[e];-1===o.indexOf(t)&&t!==bm&&o.push(t)}let l=new Array(i.length);for(let e=0;e<s;++e){if(new Set(i[e].split("")).size!==i[e].length)throw new Error(`Found duplicate axes in input component ${i[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<i[e].length;++t)l[e].push(o.indexOf(i[e][t]))}let u=o.length,d=[];for(let e=r.length;e<u;++e)d.push(e);return{allDims:o,summedDims:d,idDims:l}}function km(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;let a=[];for(let t=0;t<e;++t)-1===n[t]&&a.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:a}}function Im(e,t,n){let a=new Array(e);for(let e=0;e<n.length;++e){let r=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===a[t[e][n]]?a[t[e][n]]=r[n]:ne(a[t[e][n]]===r[n],(()=>`Expected dimension ${a[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(r)}, but got dimension ${r[n]}`))}}function Sm(e,t){let n=e,a=[],r=0;0===e.length&&n.push(-1),r=e.length+1;for(let e=0;e<r;++e)a.push([]);let i=[];for(let e=0;e<n.length;++e){let r=Cm(t,n[e]);for(let t of r)-1===i.indexOf(t)&&(a[e].push(t),i.push(t))}return{path:n,steps:a}}function Nm(e){return e.every(((e,t)=>e===t))}function Cm(e,t){let n=[];for(let a=0;a<e.length;++a)(0===e[a].length||-1!==e[a].indexOf(t)||-1===t)&&n.push(a);return n}function Tm(e,t,n=0){let a=[];if("number"==typeof t)ne(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),a=new Array(t).fill(e.shape[n]/t);else{ne(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));let r=t.indexOf(-1);if(-1!==r){let a=t.reduce(((e,t)=>t>0?e+t:e));t[r]=e.shape[n]-a}ne(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),a=t}return a}function Em(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Rm(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function $m(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function Mm(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function _m(e,t){return`size ${e} must be non-negative, not ${t}`}function Fm(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Om(e,t){return`Input to reshape is a SparseTensor with ${ie(e)}\n  dense values, but the requested shape requires a multiple of ${ie(t)}. inputShape=${e} outputShape= ${t}`}function Pm(e,t){return`Input to reshape is a tensor with ${ie(e)} dense values, but the requested shape has ${ie(t)}. inputShape=${e} outputShape=${t}`}function Dm(){return"segment ids must be >= 0"}function zm(){return"segment ids are not increasing"}function Lm(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function Wm(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}var Bm={};function Vm(e,t){let n,a=!1;for(e<=Xf?(n=e,a=!0):n=Re(e,Math.floor(Math.sqrt(e)));!a;)n>t||n===e?a=!0:n=Re(e,n+1);return n}function Um(e,t,n){let a=[],r=e.length;for(let i=0;i<r;i++)i!==t?a.push(e[i]):a.push(n);return a}function Gm(e,t,n,a){let r=t.shape.length,i=e.shape.length;if(0!==a&&(a<-r||a>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${a}`);if(a<0&&(a+=r),a>i)throw new Error(`batchDims (${a}) must be less than rank(x) (\n    ${i}).`);if(n<a)throw new Error(`batchDims (${a}) must be less than or equal to axis (${n}).`);for(let n=0;n<a;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);let s=e.shape[n],o=[],l=1,u=1,d=1;for(let t=0;t<a;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=a;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=a;e<r;e++)o.push(t.shape[e]);for(let t=n+1;t<i;t++)o.push(e.shape[t]),d*=e.shape[t];return{batchSize:l,sliceSize:d,outerSize:u,dimSize:s,outputShape:o}}function Hm(e){try{return e.map((e=>Kr(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function jm(e){return e.map((e=>Xr(e)))}k(Bm,{collectGatherOpShapeInfo:()=>Gm,computeOutShape:()=>Um,segOpComputeOptimalWindowSize:()=>Vm});var qm,Xm,Km={};k(Km,{nonMaxSuppressionV3Impl:()=>_c,nonMaxSuppressionV4Impl:()=>Fc,nonMaxSuppressionV5Impl:()=>Oc,whereImpl:()=>Jp}),function(){for(let e of _h)Ih(e)}(),He().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(qm||(qm={})),function(e){let t;var n;(n=t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))[n.LEGACY=0]="LEGACY",n[n.V1=1]="V1",n[n.V2=2]="V2"}(Xm||(Xm={}));var Zm={};function Ym(e,t){let n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};Zm[e]=n}function Jm(e){return Zm[e]}function Qm(e){delete Zm[e]}function ey(e,t,n,a,r){let i=t.inputParams[e];if(i&&void 0!==i.inputIndexStart){let e=i.inputIndexStart,s=0===i.inputIndexEnd?void 0:void 0===i.inputIndexEnd?e+1:i.inputIndexEnd,o=e<0?t.inputNames.length+e:e;if("tensor"===i.type)return ty(t.inputNames[o],n,a,r);if("tensors"===i.type){let i=t.inputs.slice(e,s);return t.inputNames.slice(e,s).filter(((e,t)=>{var n;return"NoOp"!==(null===(n=i[t])||void 0===n?void 0:n.op)})).map((e=>ty(e,n,a,r)))}let l=ty(t.inputNames[o],n,a,r),u=l.dataSync();return"number"===i.type?u[0]:Tr.toNestedArray(l.shape,u)}let s=t.attrParams[e];return s&&s.value}function ty(e,t,n,a){let[r,i]=iy(e,n);if(null!=a){let e=a.getHashTableHandleByName(r);if(null!=e)return e}let s=n.currentContextIds.find((e=>!!t[ry(r,e)]));return void 0!==s?t[ry(r,s)][i]:void 0}function ny(e,t,n){return t[ry(e,n.currentContextId)]}function ay(e,t){let[n,a,r]=iy(e,t);return[ry(n,t&&t.currentContextId),a,r]}function ry(e,t){return t?`${e}-${t}`:e}function iy(e,t){if(""===e)return["",0,void 0];let n=null!=t&&null!=t.parseNodeNameCache;if(n){let n=t.parseNodeNameCache.get(e);if(null!=n)return n}let a,r=e.split(":");if(1===r.length)a=[e,0,void 0];else{let e=r[0],t=3===r.length?r[1]:void 0;a=[e,Number(r[r.length-1]),t]}return n&&t.parseNodeNameCache.set(e,a),a}function sy(e,t,n){let a=ey("pad",e,t,n);if("explicit"===a){a=ey("explicitPaddings",e,t,n);let r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=a[2*e],r[e][1]=a[2*e+1];return r}return a}function oy(e){return e.kept?e:Xs(e)}var ly={};k(ly,{json:()=>uy});var uy=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],dy={};k(dy,{json:()=>py});var py=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],cy={};k(cy,{json:()=>hy});var hy=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],fy={};k(fy,{json:()=>my});var my=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],yy={};k(yy,{json:()=>gy});var gy=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],Ay={};k(Ay,{json:()=>xy});var xy=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],by={};k(by,{json:()=>vy});var vy=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],wy={};k(wy,{json:()=>ky});var ky=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],Iy={};k(Iy,{json:()=>Sy});var Sy=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],Ny={};k(Ny,{json:()=>Cy});var Cy=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],Ty={};k(Ty,{json:()=>Ey});var Ey=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}],Ry={};k(Ry,{json:()=>$y});var $y=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}],My={};k(My,{json:()=>_y});var _y=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}],Fy={};k(Fy,{json:()=>Oy});var Oy=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Py={};k(Py,{json:()=>Dy});var Dy=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],zy={};k(zy,{json:()=>Ly});var Ly=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],Wy={};k(Wy,{json:()=>By});var By=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Vy={};k(Vy,{json:()=>Uy});var Uy=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],Gy={};k(Gy,{json:()=>Hy});var Hy=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}],jy=class{static get Instance(){return this._instance||(this._instance=new this)}constructor(){let e=[].concat(...[ly,dy,cy,fy,yy,Ay,by,wy,Iy,Ny,Ty,Ry,My,Fy,Py,zy,Wy,Vy,Gy].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){let n=e.node,a=[],r=[],i=[],s=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?a.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):(null==t.input||0===t.input.length)&&i.push(e[t.name]),e)),{}),o=[],l=[],u={},d={};null!=t&&(u=this.mapSignatureEntries(t.inputs),d=this.mapSignatureEntries(t.outputs));let p=Object.keys(s);p.forEach((e=>{let t=s[e];t.inputNames.forEach(((e,n)=>{let[a,,r]=ay(e),i=s[a];if(null!=i.outputs){let e=i.outputs.indexOf(r);if(-1!==e){let r=`${a}:${e}`;t.inputNames[n]=r}}t.inputs.push(i),i.children.push(t)}))})),0===Object.keys(d).length?p.forEach((e=>{let t=s[e];0===t.children.length&&l.push(t)})):Object.keys(d).forEach((e=>{let[t]=ay(e),n=s[t];null!=n&&(n.signatureKey=d[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{let[t]=ay(e),n=s[t];n&&(n.signatureKey=u[e],o.push(n))})):o=a;let c={};null!=e.library&&null!=e.library.function&&(c=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));let h={nodes:s,inputs:o,outputs:l,weights:r,placeholders:a,signature:t,functions:c};return i.length>0&&(h.initNodes=i),h}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){let t=Jm(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});let n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{let a,r=n.type;switch(n.type){case"string":a=Xy(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Xy(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":a=rg(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=rg(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":a=Zy(e.attr,n.tfName,n.defaultValue||0),void 0===a&&n.tfDeprecatedName&&(a=Zy(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":a=ag(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ag(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":a=Ky(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Ky(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":a=sg(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=sg(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":a=ng(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ng(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":a=ig(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ig(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":a=Qy(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Qy(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":a=eg(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=eg(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":a=Jy(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Jy(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:a,type:r},t}),{})),n}mapFunction(e){let t=e.nodeDef,n=[],a={};null!=t&&(a=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));let r=[],i=[];e.signature.inputArg.forEach((e=>{let[t]=ay(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Yy(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),a[t]=n})),Object.keys(a).forEach((e=>{let t=a[e];t.inputNames.forEach(((e,n)=>{let[r,,i]=ay(e),s=a[r];if(null!=s.outputs){let e=s.outputs.indexOf(i);if(-1!==e){let a=`${r}:${e}`;t.inputNames[n]=a}}t.inputs.push(s),s.children.push(t)}))}));let s=e.ret;e.signature.outputArg.forEach((e=>{let[t,n]=ay(s[e.name]),r=a[t];null!=r&&(r.defaultOutput=n,i.push(r))}));let o=this.mapArgsToSignature(e);return{nodes:a,inputs:r,outputs:i,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}};function qy(e,t){let n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){let t=He().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function Xy(e,t,n,a=!1){let r=e[t];return null!=r?qy(r.s,a):n}function Ky(e,t,n){let a=e[t];return a?a.b:n}function Zy(e,t,n){let a=e[t]||{},r=null!=a.i?a.i:null!=a.f?a.f:n;return"number"==typeof r?r:parseInt(r,10)}function Yy(e){switch("string"==typeof e&&(e=qm[e]),e){case qm.DT_FLOAT:case qm.DT_HALF:return"float32";case qm.DT_INT32:case qm.DT_INT64:case qm.DT_INT8:case qm.DT_UINT8:return"int32";case qm.DT_BOOL:return"bool";case qm.DT_DOUBLE:return"float32";case qm.DT_STRING:return"string";default:return null}}function Jy(e,t,n){let a=e[t];return a&&a.func?a.func.name:n}function Qy(e,t,n){let a=e[t];return a&&a.type?Yy(a.type):n}function eg(e,t,n){let a=e[t];return a&&a.list&&a.list.type?a.list.type.map((e=>Yy(e))):n}function tg(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function ng(e,t,n){let a=e[t];return a&&a.shape?tg(a.shape):n}function ag(e,t,n){let a=e[t];return a?((a.list.f&&a.list.f.length?a.list.f:a.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function rg(e,t,n,a=!1){let r=e[t];return r&&r.list&&r.list.s?r.list.s.map((e=>qy(e,a))):n}function ig(e,t,n){let a=e[t];return a&&a.list&&a.list.shape?a.list.shape.map((e=>tg(e))):n}function sg(e,t,n){let a=e[t];return a&&a.list&&a.list.b?a.list.b:n}var og={};function lg(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){Tr.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let a=0;a<e.length;a++){let r=e[a],i=t[a];Tr.assert(r<0||i<0||r===i,(()=>n+` Shapes ${e} and ${t} must match`))}}}function ug(e){return!("number"==typeof e||e.some((e=>e<0)))}function dg(e,t,n){let a=pg(e,n),r=!ug(a);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${a}`);if(r&&t.forEach((e=>{a=pg(e.shape,a)})),!ug(a))throw new Error(`Non-fully-defined elementShape: ${a}`);return a}function pg(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);let n=[];for(let a=0;a<e.length;++a){let r=e[a],i=t[a];if(r>=0&&i>=0&&r!==i)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[a]=r>=0?r:i}return n}k(og,{OP_SCOPE_SUFFIX:()=>ji,abs:()=>wo,acos:()=>ko,acosh:()=>Io,add:()=>Ao,addN:()=>So,all:()=>No,any:()=>Co,argMax:()=>To,argMin:()=>Eo,asin:()=>Ro,asinh:()=>$o,atan:()=>Mo,atan2:()=>_o,atanh:()=>Fo,avgPool:()=>Yo,avgPool3d:()=>Jo,basicLSTMCell:()=>rl,batchNorm:()=>ol,batchNorm2d:()=>ll,batchNorm3d:()=>ul,batchNorm4d:()=>dl,batchToSpaceND:()=>il,bincount:()=>pl,bitwiseAnd:()=>cl,booleanMaskAsync:()=>ec,broadcastArgs:()=>hl,broadcastTo:()=>fl,buffer:()=>js,cast:()=>qs,ceil:()=>ml,clipByValue:()=>gl,clone:()=>Xs,complex:()=>Xi,concat:()=>Qo,concat1d:()=>Al,concat2d:()=>xl,concat3d:()=>bl,concat4d:()=>vl,conv1d:()=>kl,conv2d:()=>wl,conv2dTranspose:()=>Sl,conv3d:()=>Nl,conv3dTranspose:()=>Tl,cos:()=>El,cosh:()=>Rl,cosineWindow:()=>lc,cumprod:()=>$l,cumsum:()=>Ml,denseBincount:()=>_l,depthToSpace:()=>Fl,depthwiseConv2d:()=>Ol,diag:()=>Pl,dilation2d:()=>Dl,div:()=>bo,divNoNan:()=>Hl,dot:()=>jl,dropout:()=>sc,einsum:()=>ql,elu:()=>Xl,enclosingPowerOfTwo:()=>oc,ensureShape:()=>Kl,equal:()=>Vl,erf:()=>Zl,euclideanNorm:()=>fu,exp:()=>mu,expandDims:()=>yu,expm1:()=>gu,eye:()=>xu,fft:()=>kp,fill:()=>yl,floor:()=>bu,floorDiv:()=>xo,fused:()=>dc,gather:()=>vu,gatherND:()=>ic,greater:()=>wu,greaterEqual:()=>ku,ifft:()=>Ip,imag:()=>Iu,image:()=>yh,inTopKAsync:()=>uc,irfft:()=>Sp,isFinite:()=>Su,isInf:()=>Nu,isNaN:()=>Cu,leakyRelu:()=>Tu,less:()=>Eu,lessEqual:()=>Ru,linalg:()=>gh,linspace:()=>$u,localResponseNormalization:()=>Mu,log:()=>_u,log1p:()=>Fu,logSigmoid:()=>Gu,logSoftmax:()=>ju,logSumExp:()=>qu,logicalAnd:()=>Xu,logicalNot:()=>Ku,logicalOr:()=>Zu,logicalXor:()=>Yu,losses:()=>Ah,lowerBound:()=>ed,matMul:()=>el,max:()=>iu,maxPool:()=>td,maxPool3d:()=>nd,maxPoolWithArgmax:()=>ad,maximum:()=>rd,mean:()=>id,meshgrid:()=>ld,min:()=>su,minimum:()=>ud,mirrorPad:()=>dd,mod:()=>pd,moments:()=>cd,movingAverage:()=>nc,mul:()=>vo,multiRNNCell:()=>hd,multinomial:()=>fd,neg:()=>Vu,norm:()=>hu,notEqual:()=>md,oneHot:()=>yd,ones:()=>od,onesLike:()=>gd,op:()=>qi,outerProduct:()=>Ad,pad:()=>xd,pad1d:()=>bd,pad2d:()=>vd,pad3d:()=>wd,pad4d:()=>kd,pool:()=>Sd,pow:()=>ou,prelu:()=>Nd,print:()=>Ks,prod:()=>Cd,raggedGather:()=>Td,raggedRange:()=>Ed,raggedTensorToTensor:()=>Rd,rand:()=>$d,randomGamma:()=>Kd,randomNormal:()=>Zd,randomStandardNormal:()=>Yd,randomUniform:()=>Jd,randomUniformInt:()=>Qd,range:()=>ep,real:()=>tp,reciprocal:()=>np,relu:()=>ap,relu6:()=>rp,reshape:()=>Zo,reverse:()=>ip,reverse1d:()=>sp,reverse2d:()=>op,reverse3d:()=>lp,reverse4d:()=>up,rfft:()=>Cp,round:()=>dp,rsqrt:()=>pp,scalar:()=>lu,scatterND:()=>ac,searchSorted:()=>Qu,selu:()=>cp,separableConv2d:()=>hp,setdiff1dAsync:()=>fp,sigmoid:()=>tl,sign:()=>mp,signal:()=>mh,sin:()=>yp,sinh:()=>gp,slice:()=>nl,slice1d:()=>Ap,slice2d:()=>xp,slice3d:()=>bp,slice4d:()=>vp,softmax:()=>wp,softplus:()=>Uu,spaceToBatchND:()=>Id,sparse:()=>xh,sparseToDense:()=>rc,spectral:()=>fh,split:()=>Np,sqrt:()=>uu,square:()=>du,squaredDifference:()=>Tp,squeeze:()=>Ep,stack:()=>Rp,step:()=>$p,stridedSlice:()=>Mp,string:()=>bh,sub:()=>Hu,sum:()=>pu,tan:()=>_p,tanh:()=>al,tensor:()=>Zi,tensor1d:()=>Fp,tensor2d:()=>Op,tensor3d:()=>Pp,tensor4d:()=>Dp,tensor5d:()=>zp,tensor6d:()=>Lp,tensorScatterUpdate:()=>Gp,tile:()=>Au,topk:()=>Hp,transpose:()=>tc,truncatedNormal:()=>jp,unique:()=>qp,unsortedSegmentSum:()=>Xp,unstack:()=>Kp,upperBound:()=>Zp,variable:()=>Yp,where:()=>Ul,whereAsync:()=>Qp,zeros:()=>sd,zerosLike:()=>Gl});var cg=class{get id(){return this.idTensor.id}constructor(e,t,n,a=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);lg(t,e.shape,"TensorList shape mismatch: "),so(e)})),this.idTensor=lu(0),this.maxNumElements=a,so(this.idTensor)}copy(){return new cg([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{(null==e||!e.has(t.id))&&t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);lg(e,this.elementShape,"TensorList shape mismatch: ");let a=dg(this.elementShape,this.tensors,e);return ro((()=>{let e=this.tensors.map((e=>Zo(e,a)));return Rp(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");let n=dg(this.elementShape,this.tensors,e),a=this.tensors.pop();return a.kept=!1,lg(a.shape,e,"TensorList shape mismatch: "),Zo(a,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(lg(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");so(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);let t=new cg([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);lg(this.tensors[e].shape,t,"TensorList shape mismatch: ");let a=dg(this.elementShape,this.tensors,t);return Zo(this.tensors[e],a)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);lg(this.elementShape,t.shape,"TensorList shape mismatch: "),so(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);lg(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());let a=dg(this.elementShape,this.tensors,n);return 0===e.length?Zi([],[0].concat(a)):ro((()=>{let t=e.map((e=>Zo(this.tensors[e],a)));return Rp(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);lg(this.elementShape,t,"TensorList shape mismatch: ");let n=dg(this.elementShape,this.tensors,t);return 0===this.size()?Zi([],[0].concat(n)):ro((()=>{let e=this.tensors.map((e=>Zo(e,n)));return Qo(e,0)}))}},hg=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{let a=ey("thenBranch",e,t,n),r=ey("elseBranch",e,t,n),i=ey("cond",e,t,n),s=ey("args",e,t,n);return(await i.data())[0]?n.functionMap[a].executeFunctionAsync(s,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(s,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{let a=ey("body",e,t,n),r=ey("cond",e,t,n),i=ey("args",e,t,n),s=await n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap),o=i.map((e=>e.id)),l=await s[0].data();s.forEach((e=>{!e.kept&&-1===o.indexOf(e.id)&&e.dispose()}));let u=i;for(;l[0];){let e=u;u=await n.functionMap[a].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);let t=u.map((e=>e.id));e.forEach((e=>{!e.kept&&-1===o.indexOf(e.id)&&-1===t.indexOf(e.id)&&e.dispose()}));let i=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await i[0].data(),i.forEach((e=>{!e.kept&&-1===o.indexOf(e.id)&&-1===t.indexOf(e.id)&&e.dispose()}))}return u}case"LoopCond":return[oy(ey("pred",e,t,n))];case"Switch":{let a=ey("pred",e,t,n),r=ey("data",e,t,n);return r.kept||(r=oy(r)),(await a.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{let a=e.inputNames.find((e=>void 0!==ty(e,t,n)));return a?[oy(ty(a,t,n))]:void 0}case"Enter":{let a=ey("frameName",e,t,n),r=ey("tensor",e,t,n);return n.enterFrame(a),[oy(r)]}case"Exit":{let a=ey("tensor",e,t,n);return n.exitFrame(),[oy(a)]}case"NextIteration":{let a=ey("tensor",e,t,n);return n.nextIteration(),[oy(a)]}case"TensorArrayV3":{let a=ey("size",e,t,n),r=ey("dtype",e,t,n),i=ey("elementShape",e,t,n),s=ey("dynamicSize",e,t,n),o=ey("clearAfterRead",e,t,n),l=ey("identicalElementShapes",e,t,n),u=ey("name",e,t,n),d=new class{constructor(e,t,n,a,r,i,s){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=a,this.identicalElementShapes=r,this.dynamicSize=i,this.clearAfterRead=s,this.tensors=[],this.closed_=!1,this.idTensor=lu(0),so(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{(null==e||!e.has(t.tensor.id))&&t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);let t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);let n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0===this.size()&&(null==this.elementShape||0===this.elementShape.length)&&(this.elementShape=t.shape),lg(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,so(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Zi([],[0].concat(this.elementShape));let n=this.readMany(e);return lg(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Rp(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Zi([],[0].concat(this.elementShape));let t=[];for(let e=0;e<this.size();e++)t.push(e);let n=this.readMany(t);return lg(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Qo(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);let n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,Kp(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0,a=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);let r=0===n?0:t.size/n,i=[];ro((()=>{t=Zo(t,[1,n,r]);for(let n=0;n<e.length;++n){let s=[0,0===n?0:a[n-1],0],o=[1,e[n],r];i[n]=Zo(nl(t,s,o),this.elementShape)}return i}));let s=[];for(let t=0;t<e.length;t++)s[t]=t;this.writeMany(s,i)}}(u,r,a,i,l,s,o);return n.addTensorArray(d),[d.idTensor,lu(1)]}case"TensorArrayWriteV3":{let a=ey("tensorArrayId",e,t,n),r=ey("index",e,t,n),i=ey("tensor",e,t,n),s=n.getTensorArray(a.id);return s.write(r,i),[s.idTensor]}case"TensorArrayReadV3":{let a=ey("tensorArrayId",e,t,n),r=ey("index",e,t,n);return[n.getTensorArray(a.id).read(r)]}case"TensorArrayGatherV3":{let a=ey("tensorArrayId",e,t,n),r=ey("indices",e,t,n),i=ey("dtype",e,t,n);return[n.getTensorArray(a.id).gather(r,i)]}case"TensorArrayScatterV3":{let a=ey("tensorArrayId",e,t,n),r=ey("indices",e,t,n),i=ey("tensor",e,t,n),s=n.getTensorArray(a.id);return s.scatter(r,i),[s.idTensor]}case"TensorArrayConcatV3":{let a=ey("tensorArrayId",e,t,n),r=n.getTensorArray(a.id),i=ey("dtype",e,t,n);return[r.concat(i)]}case"TensorArraySplitV3":{let a=ey("tensorArrayId",e,t,n),r=ey("tensor",e,t,n),i=ey("lengths",e,t,n),s=n.getTensorArray(a.id);return s.split(i,r),[s.idTensor]}case"TensorArraySizeV3":{let a=ey("tensorArrayId",e,t,n);return[lu(n.getTensorArray(a.id).size(),"int32")]}case"TensorArrayCloseV3":{let a=ey("tensorArrayId",e,t,n),r=n.getTensorArray(a.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{let a=ey("tensorListId",e,t,n),r=ey("index",e,t,n),i=ey("tensor",e,t,n),s=n.getTensorList(a.id);return s.setItem(r,i),[s.idTensor]}case"TensorListGetItem":{let a=ey("tensorListId",e,t,n),r=ey("index",e,t,n),i=ey("elementShape",e,t,n),s=ey("elementDType",e,t,n);return[n.getTensorList(a.id).getItem(r,i,s)]}case"TensorListScatterV2":case"TensorListScatter":{let a=ey("indices",e,t,n),r=function(e,t,n,a){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);let r=Math.max(...t);if(null!=a&&-1!==a&&r>=a)throw new Error(`Max index must be < array size (${r}  vs. ${a})`);let i=new cg([],n,e.dtype,a),s=Kp(e,0);return t.forEach(((e,t)=>{i.setItem(e,s[t])})),i}(ey("tensor",e,t,n),a,ey("elementShape",e,t,n),ey("numElements",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{let a,r=ey("elementShape",e,t,n),i=ey("elementDType",e,t,n);a="TensorListReserve"===e.op?"numElements":"maxNumElements";let s=ey(a,e,t,n),o=function(e,t,n,a){return new cg([],e,t,a)}(r,i,0,"TensorListReserve"===e.op?-1:s);return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{let a=ey("tensorListId",e,t,n),r=ey("indices",e,t,n),i=ey("elementShape",e,t,n),s=ey("elementDType",e,t,n);return[n.getTensorList(a.id).gather(r,s,i)]}case"TensorListStack":{let a=ey("tensorListId",e,t,n),r=ey("elementShape",e,t,n),i=ey("elementDType",e,t,n),s=ey("numElements",e,t,n);return[n.getTensorList(a.id).stack(r,i,s)]}case"TensorListFromTensor":{let a=function(e,t,n){let a=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);lg(e.shape.slice(1),t,"TensorList shape mismatch: ");let r=Kp(e);return new cg(r,t,a)}(ey("tensor",e,t,n),ey("elementShape",e,t,n),ey("elementDType",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{let a=ey("tensorListId",e,t,n),r=n.getTensorList(a.id),i=ey("dtype",e,t,n),s=ey("elementShape",e,t,n);return[r.concat(i,s)]}case"TensorListPushBack":{let a=ey("tensorListId",e,t,n),r=ey("tensor",e,t,n),i=n.getTensorList(a.id);return i.pushBack(r),[i.idTensor]}case"TensorListPopBack":{let a=ey("tensorListId",e,t,n),r=ey("elementShape",e,t,n),i=ey("elementDType",e,t,n);return[n.getTensorList(a.id).popBack(r,i)]}case"TensorListSplit":{let a=ey("tensor",e,t,n),r=ey("elementShape",e,t,n),i=function(e,t,n){let a=0,r=t.map((e=>(a+=e,a)));if(a!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${a}, and tensor's shape is: ${e.shape}`);let i=pg(e.shape.slice(1),n),s=0===a?0:e.size/a,o=ro((()=>{let n=[];e=Zo(e,[1,a,s]);for(let a=0;a<t.length;++a){let o=[0,0===a?0:r[a-1],0],l=[1,t[a],s];n[a]=Zo(nl(e,o,l),i)}return e.dispose(),n})),l=new cg([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)l.setItem(e,o[e]);return l}(a,ey("lengths",e,t,n),r);return n.addTensorList(i),[i.idTensor]}case"TensorListLength":{let a=ey("tensorListId",e,t,n);return[lu(n.getTensorList(a.id).size(),"int32")]}case"TensorListResize":{let a=ey("tensorListId",e,t,n),r=ey("size",e,t,n),i=n.getTensorList(a.id).resize(r);return n.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function fg(e,t,n){let[a,r]=ey("fusedOps",e,t,n),i="biasadd"===a,s=!i,o="prelu"===r,l="fusedbatchnorm"===a,u=ey("numArgs",e,t,n);if(i){if(o&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&i&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");let d=ey("strides",e,t,n),p=sy(e,t,n),c=ey("dataFormat",e,t,n).toUpperCase(),h=ey("dilations",e,t,n),[f,m]=ey("args",e,t,n);return s&&(m=f,f=void 0),{stride:d,pad:p,dataFormat:c,dilations:h,biasArg:f,preluArg:m,activationFunc:r,leakyreluAlpha:ey("leakyreluAlpha",e,t,n)}}function mg(e,t,n){return{boxes:ey("boxes",e,t,n),scores:ey("scores",e,t,n),maxOutputSize:ey("maxOutputSize",e,t,n),iouThreshold:ey("iouThreshold",e,t,n),scoreThreshold:ey("scoreThreshold",e,t,n),softNmsSigma:ey("softNmsSigma",e,t,n)}}var yg=async(e,t,n,a)=>{switch(e.op){case"HashTable":case"HashTableV2":{let r=a.getHashTableHandleByName(e.name);if(null!=r)return[r];{let r=ey("keyDType",e,t,n),i=ey("valueDType",e,t,n),s=new class{get id(){return this.handle.id}constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=lu(0),this.tensorMap=new Map,so(this.handle)}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return lu(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);let n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),ro((()=>{let e=Kp(t),a=n.length,r=e.length;Tr.assert(a===r,(()=>`The number of elements doesn't match, keys has ${a} elements, the values has ${r} elements.`));for(let t=0;t<a;t++){let a=n[t],r=e[t];so(r),this.tensorMap.set(a,r)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);let n=await e.data();return ro((()=>{let e=[];for(let a=0;a<n.length;a++){let r=n[a],i=this.findWithDefault(r,t);e.push(i)}return Rp(e)}))}findWithDefault(e,t){let n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}(r,i);return a.addHashTable(e.name,s),[s.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{let r=ey("tableHandle",e,t,n,a),i=ey("keys",e,t,n),s=ey("values",e,t,n);return[await a.getHashTableById(r.id).import(i,s)]}case"LookupTableFind":case"LookupTableFindV2":{let r=ey("tableHandle",e,t,n,a),i=ey("keys",e,t,n),s=ey("defaultValue",e,t,n);return[await a.getHashTableById(r.id).find(i,s)]}case"LookupTableSize":case"LookupTableSizeV2":{let r=ey("tableHandle",e,t,n,a);return[a.getHashTableById(r.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function gg(e,t,n,a,r=ro){let i=((e,t,n)=>{switch(e.category){case"arithmetic":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[a.add(ey("a",e,t,n),ey("b",e,t,n))];case"AddN":return[a.addN(ey("tensors",e,t,n))];case"FloorMod":case"Mod":return[a.mod(ey("a",e,t,n),ey("b",e,t,n))];case"Mul":return[a.mul(ey("a",e,t,n),ey("b",e,t,n))];case"RealDiv":case"Div":return[a.div(ey("a",e,t,n),ey("b",e,t,n))];case"DivNoNan":return[a.divNoNan(ey("a",e,t,n),ey("b",e,t,n))];case"FloorDiv":return[a.floorDiv(ey("a",e,t,n),ey("b",e,t,n))];case"Sub":return[a.sub(ey("a",e,t,n),ey("b",e,t,n))];case"Minimum":return[a.minimum(ey("a",e,t,n),ey("b",e,t,n))];case"Maximum":return[a.maximum(ey("a",e,t,n),ey("b",e,t,n))];case"Pow":return[a.pow(ey("a",e,t,n),ey("b",e,t,n))];case"SquaredDifference":return[a.squaredDifference(ey("a",e,t,n),ey("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"Abs":case"ComplexAbs":return[a.abs(ey("x",e,t,n))];case"Acos":return[a.acos(ey("x",e,t,n))];case"Acosh":return[a.acosh(ey("x",e,t,n))];case"Asin":return[a.asin(ey("x",e,t,n))];case"Asinh":return[a.asinh(ey("x",e,t,n))];case"Atan":return[a.atan(ey("x",e,t,n))];case"Atan2":return[a.atan2(ey("x",e,t,n),ey("y",e,t,n))];case"Atanh":return[a.atanh(ey("x",e,t,n))];case"Ceil":return[a.ceil(ey("x",e,t,n))];case"Complex":return[a.complex(ey("real",e,t,n),ey("imag",e,t,n))];case"Cos":return[a.cos(ey("x",e,t,n))];case"Cosh":return[a.cosh(ey("x",e,t,n))];case"Elu":return[a.elu(ey("x",e,t,n))];case"Erf":return[a.erf(ey("x",e,t,n))];case"Exp":return[a.exp(ey("x",e,t,n))];case"Expm1":return[a.expm1(ey("x",e,t,n))];case"Floor":return[a.floor(ey("x",e,t,n))];case"Log":return[a.log(ey("x",e,t,n))];case"Log1p":return[a.log1p(ey("x",e,t,n))];case"Imag":return[a.imag(ey("x",e,t,n))];case"Neg":return[a.neg(ey("x",e,t,n))];case"Reciprocal":return[a.reciprocal(ey("x",e,t,n))];case"Real":return[a.real(ey("x",e,t,n))];case"Relu":return[a.relu(ey("x",e,t,n))];case"Round":return[a.round(ey("x",e,t,n))];case"Selu":return[a.selu(ey("x",e,t,n))];case"Sigmoid":return[a.sigmoid(ey("x",e,t,n))];case"Sin":return[a.sin(ey("x",e,t,n))];case"Sign":return[a.sign(ey("x",e,t,n))];case"Sinh":return[a.sinh(ey("x",e,t,n))];case"Softplus":return[a.softplus(ey("x",e,t,n))];case"Sqrt":return[a.sqrt(ey("x",e,t,n))];case"Square":return[a.square(ey("x",e,t,n))];case"Tanh":return[a.tanh(ey("x",e,t,n))];case"Tan":return[a.tan(ey("x",e,t,n))];case"ClipByValue":return[a.clipByValue(ey("x",e,t,n),ey("clipValueMin",e,t,n),ey("clipValueMax",e,t,n))];case"Relu6":return[a.relu6(ey("x",e,t,n))];case"Rsqrt":return[a.rsqrt(ty(e.inputNames[0],t,n))];case"LeakyRelu":return[a.leakyRelu(ey("x",e,t,n),ey("alpha",e,t,n))];case"Prelu":return[a.prelu(ey("x",e,t,n),ey("alpha",e,t,n))];case"IsNan":return[a.isNaN(ty(e.inputNames[0],t,n))];case"IsInf":return[a.isInf(ty(e.inputNames[0],t,n))];case"IsFinite":return[a.isFinite(ty(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return hg(e,t,n);case"convolution":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"Conv1D":{let r=ey("stride",e,t,n),i=ey("pad",e,t,n),s=ey("dataFormat",e,t,n).toUpperCase(),o=ey("dilation",e,t,n);return[a.conv1d(ey("x",e,t,n),ey("filter",e,t,n),r,i,s,o)]}case"Conv2D":{let r=ey("strides",e,t,n),i=sy(e,t,n),s=ey("dataFormat",e,t,n).toUpperCase(),o=ey("dilations",e,t,n);return[a.conv2d(ey("x",e,t,n),ey("filter",e,t,n),[r[1],r[2]],i,s,[o[1],o[2]])]}case"_FusedConv2D":{let{stride:r,pad:i,dataFormat:s,dilations:o,biasArg:l,preluArg:u,activationFunc:d,leakyreluAlpha:p}=fg(e,t,n);return[a.fused.conv2d({x:ey("x",e,t,n),filter:ey("filter",e,t,n),strides:[r[1],r[2]],pad:i,dataFormat:s,dilations:[o[1],o[2]],bias:l,activation:d,preluActivationWeights:u,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{let{stride:r,pad:i,dataFormat:s,dilations:o,biasArg:l,preluArg:u,activationFunc:d,leakyreluAlpha:p}=fg(e,t,n);return[a.fused.depthwiseConv2d({x:ey("x",e,t,n),filter:ey("filter",e,t,n),strides:[r[1],r[2]],pad:i,dataFormat:s,dilations:[o[1],o[2]],bias:l,activation:d,preluActivationWeights:u,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{let r=ey("outputShape",e,t,n),i=ey("strides",e,t,n),s=sy(e,t,n);return[a.conv2dTranspose(ey("x",e,t,n),ey("filter",e,t,n),r,[i[1],i[2]],s)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{let r=ey("strides",e,t,n),i=sy(e,t,n),s=ey("dilations",e,t,n),o=ey("dataFormat",e,t,n).toUpperCase();return[a.depthwiseConv2d(ey("input",e,t,n),ey("filter",e,t,n),[r[1],r[2]],i,o,[s[1],s[2]])]}case"Conv3D":{let r=ey("strides",e,t,n),i=ey("pad",e,t,n),s=ey("dataFormat",e,t,n).toUpperCase(),o=ey("dilations",e,t,n);return[a.conv3d(ey("x",e,t,n),ey("filter",e,t,n),[r[1],r[2],r[3]],i,s,[o[1],o[2],o[3]])]}case"AvgPool":{let r=ey("strides",e,t,n),i=ey("pad",e,t,n),s=ey("kernelSize",e,t,n);return[a.avgPool(ey("x",e,t,n),[s[1],s[2]],[r[1],r[2]],i)]}case"MaxPool":{let r=ey("strides",e,t,n),i=ey("pad",e,t,n),s=ey("kernelSize",e,t,n);return[a.maxPool(ey("x",e,t,n),[s[1],s[2]],[r[1],r[2]],i)]}case"MaxPoolWithArgmax":{let r=ey("strides",e,t,n),i=ey("pad",e,t,n),s=ey("kernelSize",e,t,n),o=ey("includeBatchInIndex",e,t,n),{result:l,indexes:u}=a.maxPoolWithArgmax(ey("x",e,t,n),[s[1],s[2]],[r[1],r[2]],i,o);return[l,u]}case"AvgPool3D":{let r=ey("strides",e,t,n),i=ey("pad",e,t,n),s=ey("kernelSize",e,t,n);return[a.avgPool3d(ey("x",e,t,n),[s[1],s[2],s[3]],[r[1],r[2],r[3]],i)]}case"MaxPool3D":{let r=ey("strides",e,t,n),i=ey("pad",e,t,n),s=ey("kernelSize",e,t,n);return[a.maxPool3d(ey("x",e,t,n),[s[1],s[2],s[3]],[r[1],r[2],r[3]],i)]}case"Dilation2D":{let r=ey("strides",e,t,n),i=ey("pad",e,t,n),s=ey("dilations",e,t,n),o=r[1],l=r[2],u=s[1],d=s[2];return[a.dilation2d(ey("x",e,t,n),ey("filter",e,t,n),[o,l],i,[u,d],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"Fill":{let r=ey("shape",e,t,n),i=ey("dtype",e,t,n),s=ey("value",e,t,n);return[a.fill(r,s,i)]}case"LinSpace":{let r=ey("start",e,t,n),i=ey("stop",e,t,n),s=ey("num",e,t,n);return[a.linspace(r,i,s)]}case"Multinomial":{let r=ey("logits",e,t,n),i=ey("numSamples",e,t,n),s=ey("seed",e,t,n);return[a.multinomial(r,i,s)]}case"OneHot":{let r=ey("indices",e,t,n),i=ey("depth",e,t,n),s=ey("onValue",e,t,n),o=ey("offValue",e,t,n),l=ey("dtype",e,t,n);return[a.oneHot(r,i,s,o,l)]}case"Ones":return[a.ones(ey("shape",e,t,n),ey("dtype",e,t,n))];case"OnesLike":return[a.onesLike(ey("x",e,t,n))];case"RandomStandardNormal":return[a.randomStandardNormal(ey("shape",e,t,n),ey("dtype",e,t,n),ey("seed",e,t,n))];case"RandomUniform":return[a.randomUniform(ey("shape",e,t,n),ey("minval",e,t,n),ey("maxval",e,t,n),ey("dtype",e,t,n))];case"RandomUniformInt":return[a.randomUniformInt(ey("shape",e,t,n),ey("minval",e,t,n),ey("maxval",e,t,n),ey("seed",e,t,n))];case"Range":{let r=ey("start",e,t,n),i=ey("stop",e,t,n),s=ey("step",e,t,n);return[a.range(r,i,s,ey("dtype",e,t,n))]}case"TruncatedNormal":{let r=ey("shape",e,t,n),i=ey("mean",e,t,n),s=ey("stdDev",e,t,n),o=ey("seed",e,t,n);return[a.truncatedNormal(r,i,s,ey("dtype",e,t,n),o)]}case"Zeros":return[a.zeros(ey("shape",e,t,n),ey("dtype",e,t,n))];case"ZerosLike":return[a.zerosLike(ey("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,a,r=og)=>{switch(e.op){case"NonMaxSuppressionV5":{let{boxes:a,scores:i,maxOutputSize:s,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=mg(e,t,n),d=await r.image.nonMaxSuppressionWithScoreAsync(a,i,s,o,l,u);return[d.selectedIndices,d.selectedScores]}case"NonMaxSuppressionV4":{let{boxes:a,scores:i,maxOutputSize:s,iouThreshold:o,scoreThreshold:l}=mg(e,t,n),u=ey("padToMaxOutputSize",e,t,n),d=await r.image.nonMaxSuppressionPaddedAsync(a,i,s,o,l,u);return[d.selectedIndices,d.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{let{boxes:a,scores:i,maxOutputSize:s,iouThreshold:o,scoreThreshold:l}=mg(e,t,n);return[await r.image.nonMaxSuppressionAsync(a,i,s,o,l)]}case"Where":{let a=r.cast(ey("condition",e,t,n),"bool"),i=[await r.whereAsync(a)];return a.dispose(),i}case"ListDiff":return r.setdiff1dAsync(ey("x",e,t,n),ey("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"LowerBound":{let r=ey("sortedSequence",e,t,n),i=ey("values",e,t,n);return[a.lowerBound(r,i)]}case"TopKV2":{let r=ey("x",e,t,n),i=ey("k",e,t,n),s=ey("sorted",e,t,n),o=a.topk(r,i,s);return[o.values,o.indices]}case"UpperBound":{let r=ey("sortedSequence",e,t,n),i=ey("values",e,t,n);return[a.upperBound(r,i)]}case"Unique":{let r=ey("x",e,t,n),i=a.unique(r);return[i.values,i.indices]}case"UniqueV2":{let r=ey("x",e,t,n),i=ey("axis",e,t,n),s=a.unique(r,i);return[s.values,s.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"ResizeBilinear":{let r=ey("images",e,t,n),i=ey("size",e,t,n),s=ey("alignCorners",e,t,n),o=ey("halfPixelCenters",e,t,n);return[a.image.resizeBilinear(r,[i[0],i[1]],s,o)]}case"ResizeNearestNeighbor":{let r=ey("images",e,t,n),i=ey("size",e,t,n),s=ey("alignCorners",e,t,n),o=ey("halfPixelCenters",e,t,n);return[a.image.resizeNearestNeighbor(r,[i[0],i[1]],s,o)]}case"CropAndResize":{let r=ey("image",e,t,n),i=ey("boxes",e,t,n),s=ey("boxInd",e,t,n),o=ey("cropSize",e,t,n),l=ey("method",e,t,n),u=ey("extrapolationValue",e,t,n);return[a.image.cropAndResize(r,i,s,o,l,u)]}case"ImageProjectiveTransformV3":{let r=ey("images",e,t,n),i=ey("transforms",e,t,n),s=ey("outputShape",e,t,n),o=ey("fillValue",e,t,n),l=ey("interpolation",e,t,n),u=ey("fillMode",e,t,n);return[a.image.transform(r,i,l.toLowerCase(),u.toLowerCase(),o,s)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":let r=ey("default",e,t,n);return[ty(e.name,t,n)||r];case"Placeholder":return[ty(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[oy(ey("x",e,t,n))];case"IdentityN":return ey("x",e,t,n).map((e=>oy(e)));case"Shape":return[a.tensor1d(ey("x",e,t,n).shape,"int32")];case"ShapeN":return ey("x",e,t,n).map((e=>a.tensor1d(e.shape)));case"Size":return[a.scalar(ey("x",e,t,n).size,"int32")];case"Rank":return[a.scalar(ey("x",e,t,n).rank,"int32")];case"NoOp":return[a.scalar(1)];case"Print":let i=ey("x",e,t,n),s=ey("data",e,t,n),o=ey("message",e,t,n),l=ey("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<s.length;e++)console.log(Array.prototype.slice.call(s[e].dataSync()).slice(0,l));return[i];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"Equal":return[a.equal(ey("a",e,t,n),ey("b",e,t,n))];case"NotEqual":return[a.notEqual(ey("a",e,t,n),ey("b",e,t,n))];case"Greater":return[a.greater(ey("a",e,t,n),ey("b",e,t,n))];case"GreaterEqual":return[a.greaterEqual(ey("a",e,t,n),ey("b",e,t,n))];case"Less":return[a.less(ey("a",e,t,n),ey("b",e,t,n))];case"LessEqual":return[a.lessEqual(ey("a",e,t,n),ey("b",e,t,n))];case"LogicalAnd":return[a.logicalAnd(ey("a",e,t,n),ey("b",e,t,n))];case"LogicalNot":return[a.logicalNot(ey("a",e,t,n))];case"LogicalOr":return[a.logicalOr(ey("a",e,t,n),ey("b",e,t,n))];case"Select":case"SelectV2":return[a.where(ey("condition",e,t,n),ey("a",e,t,n),ey("b",e,t,n))];case"BitwiseAnd":return[a.bitwiseAnd(ey("a",e,t,n),ey("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[a.matMul(ey("a",e,t,n),ey("b",e,t,n),ey("transposeA",e,t,n),ey("transposeB",e,t,n))];case"Einsum":return[a.einsum(ey("equation",e,t,n),...ey("tensors",e,t,n))];case"Transpose":return[a.transpose(ey("x",e,t,n),ey("perm",e,t,n))];case"_FusedMatMul":let[r,i]=ey("fusedOps",e,t,n),s="biasadd"===r,o="prelu"===i,l=ey("numArgs",e,t,n),u=ey("leakyreluAlpha",e,t,n);if(s){if(o&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}let[d,p]=ey("args",e,t,n);return[a.fused.matMul({a:ey("a",e,t,n),b:ey("b",e,t,n),transposeA:ey("transposeA",e,t,n),transposeB:ey("transposeB",e,t,n),bias:d,activation:i,preluActivationWeights:p,leakyreluAlpha:u})];case"MatrixBandPart":return[a.linalg.bandPart(ey("a",e,t,n),ey("numLower",e,t,n),ey("numUpper",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"EuclideanNorm":return[a.euclideanNorm(ey("x",e,t,n),ey("axis",e,t,n),ey("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[a.batchNorm(ey("x",e,t,n),ey("mean",e,t,n),ey("variance",e,t,n),ey("offset",e,t,n),ey("scale",e,t,n),ey("epsilon",e,t,n))];case"LRN":return[a.localResponseNormalization(ey("x",e,t,n),ey("radius",e,t,n),ey("bias",e,t,n),ey("alpha",e,t,n),ey("beta",e,t,n))];case"Softmax":return[a.softmax(ey("x",e,t,n))];case"LogSoftmax":return[a.logSoftmax(ey("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"ragged":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"RaggedGather":{let{outputNestedSplits:r,outputDenseValues:i}=a.raggedGather(ey("paramsNestedSplits",e,t,n),ey("paramsDenseValues",e,t,n),ey("indices",e,t,n),ey("outputRaggedRank",e,t,n));return r.concat(i)}case"RaggedRange":{let{rtNestedSplits:r,rtDenseValues:i}=a.raggedRange(ey("starts",e,t,n),ey("limits",e,t,n),ey("splits",e,t,n));return[r,i]}case"RaggedTensorToTensor":return[a.raggedTensorToTensor(ey("shape",e,t,n),ey("values",e,t,n),ey("defaultValue",e,t,n),ey("rowPartitionTensors",e,t,n),ey("rowPartitionTypes",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"Max":{let r=ey("axis",e,t,n),i=ey("keepDims",e,t,n);return[a.max(ey("x",e,t,n),r,i)]}case"Mean":{let r=ey("axis",e,t,n),i=ey("keepDims",e,t,n);return[a.mean(ey("x",e,t,n),r,i)]}case"Min":{let r=ey("axis",e,t,n),i=ey("keepDims",e,t,n);return[a.min(ey("x",e,t,n),r,i)]}case"Sum":{let r=ey("axis",e,t,n),i=ey("keepDims",e,t,n);return[a.sum(ey("x",e,t,n),r,i)]}case"All":{let r=ey("axis",e,t,n),i=ey("keepDims",e,t,n);return[a.all(ey("x",e,t,n),r,i)]}case"Any":{let r=ey("axis",e,t,n),i=ey("keepDims",e,t,n);return[a.any(ey("x",e,t,n),r,i)]}case"ArgMax":{let r=ey("axis",e,t,n);return[a.argMax(ey("x",e,t,n),r)]}case"ArgMin":{let r=ey("axis",e,t,n);return[a.argMin(ey("x",e,t,n),r)]}case"Prod":{let r=ey("axis",e,t,n),i=ey("keepDims",e,t,n);return[a.prod(ey("x",e,t,n),r,i)]}case"Cumprod":{let r=ey("axis",e,t,n),i=ey("exclusive",e,t,n),s=ey("reverse",e,t,n);return[a.cumprod(ey("x",e,t,n),r,i,s)]}case"Cumsum":{let r=ey("axis",e,t,n),i=ey("exclusive",e,t,n),s=ey("reverse",e,t,n);return[a.cumsum(ey("x",e,t,n),r,i,s)]}case"Bincount":let r=ey("x",e,t,n),i=ey("weights",e,t,n),s=ey("size",e,t,n);return[a.bincount(r,i,s)];case"DenseBincount":{let r=ey("x",e,t,n),i=ey("weights",e,t,n),s=ey("size",e,t,n),o=ey("binaryOutput",e,t,n);return[a.denseBincount(r,i,s,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"ConcatV2":case"Concat":{let r=ey("n",e,t,n),i=ey("axis",e,t,n),s=ey("tensors",e,t,n);return s=s.slice(0,r),[a.concat(s,i)]}case"Gather":{let r=ey("x",e,t,n),i=ey("indices",e,t,n);return[a.gather(r,a.cast(i,"int32"),0)]}case"GatherV2":{let r=ey("axis",e,t,n),i=ey("batchDims",e,t,n),s=ey("x",e,t,n),o=ey("indices",e,t,n);return[a.gather(s,a.cast(o,"int32"),r,i)]}case"Reverse":{let r=ey("dims",e,t,n),i=[];for(let e=0;e<r.length;e++)r[e]&&i.push(e);let s=ey("x",e,t,n);return[a.reverse(s,i)]}case"ReverseV2":{let r=ey("axis",e,t,n),i=ey("x",e,t,n);return[a.reverse(i,r)]}case"Slice":{let r=ey("begin",e,t,n),i=ey("size",e,t,n);return[a.slice(ey("x",e,t,n),r,i)]}case"StridedSlice":{let r=ey("begin",e,t,n),i=ey("end",e,t,n),s=ey("strides",e,t,n),o=ey("beginMask",e,t,n),l=ey("endMask",e,t,n),u=ey("ellipsisMask",e,t,n),d=ey("newAxisMask",e,t,n),p=ey("shrinkAxisMask",e,t,n),c=ey("x",e,t,n);return[a.stridedSlice(c,r,i,s,o,l,u,d,p)]}case"Pack":return ro((()=>{let r=ey("axis",e,t,n),i=ey("tensors",e,t,n),s=i[0].shape,o=a.squeeze(i[0]).shape,l=i.map((e=>{let t=Tr.arraysEqual(e.shape,s);if(!t&&!Tr.arraysEqual(a.squeeze(e).shape,o))throw new Error("the input tensors shape does not match");return t?e:a.reshape(e,s)}));return[a.stack(l,r)]}));case"Unpack":{let r=ey("axis",e,t,n),i=ey("tensor",e,t,n);return a.unstack(i,r)}case"Tile":{let r=ey("reps",e,t,n);return[a.tile(ey("x",e,t,n),r)]}case"Split":case"SplitV":{let r=ey("axis",e,t,n),i=ey("numOrSizeSplits",e,t,n),s=ey("x",e,t,n);return a.split(s,i,r)}case"ScatterNd":{let r=ey("indices",e,t,n),i=ey("values",e,t,n),s=ey("shape",e,t,n);return[a.scatterND(r,i,s)]}case"GatherNd":{let r=ey("x",e,t,n),i=ey("indices",e,t,n);return[a.gatherND(r,i)]}case"SparseToDense":{let r=ey("sparseIndices",e,t,n),i=ey("outputShape",e,t,n),s=ey("sparseValues",e,t,n),o=ey("defaultValue",e,t,n);return[a.sparseToDense(r,s,i,s.dtype===o.dtype?o:a.cast(o,s.dtype))]}case"TensorScatterUpdate":{let r=ey("indices",e,t,n),i=ey("values",e,t,n),s=ey("tensor",e,t,n);return[a.tensorScatterUpdate(s,r,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"SparseFillEmptyRows":{let{outputIndices:r,outputValues:i,emptyRowIndicator:s,reverseIndexMap:o}=a.sparse.sparseFillEmptyRows(ey("indices",e,t,n),ey("values",e,t,n),ey("denseShape",e,t,n),ey("defaultValue",e,t,n));return[r,i,s,o]}case"SparseReshape":{let{outputIndices:r,outputShape:i}=a.sparse.sparseReshape(ey("inputIndices",e,t,n),ey("inputShape",e,t,n),ey("newShape",e,t,n));return[r,i]}case"SparseSegmentMean":return[a.sparse.sparseSegmentMean(ey("data",e,t,n),ey("indices",e,t,n),ey("segmentIds",e,t,n))];case"SparseSegmentSum":return[a.sparse.sparseSegmentSum(ey("data",e,t,n),ey("indices",e,t,n),ey("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"FFT":return[a.fft(ey("x",e,t,n))];case"IFFT":return[a.ifft(ey("x",e,t,n))];case"RFFT":return[a.rfft(ey("x",e,t,n))];case"IRFFT":return[a.irfft(ey("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"StaticRegexReplace":return[a.string.staticRegexReplace(ey("input",e,t,n),ey("pattern",e,t,n),ey("rewrite",e,t,n),ey("replaceGlobal",e,t,n))];case"StringNGrams":{let{nGrams:r,nGramsSplits:i}=a.string.stringNGrams(ey("data",e,t,n),ey("dataSplits",e,t,n),ey("separator",e,t,n),ey("nGramWidths",e,t,n),ey("leftPad",e,t,n),ey("rightPad",e,t,n),ey("padWidth",e,t,n),ey("preserveShortSequences",e,t,n));return[r,i]}case"StringSplit":{let{indices:r,values:i,shape:s}=a.string.stringSplit(ey("input",e,t,n),ey("delimiter",e,t,n),ey("skipEmpty",e,t,n));return[r,i,s]}case"StringToHashBucketFast":return[a.string.stringToHashBucketFast(ey("input",e,t,n),ey("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return r((()=>((e,t,n,a=og)=>{switch(e.op){case"Cast":return[a.cast(ey("x",e,t,n),ey("dtype",e,t,n))];case"ExpandDims":{let r=ey("axis",e,t,n);return[a.expandDims(ey("x",e,t,n),r)]}case"Squeeze":{let r=ey("axis",e,t,n);return[a.squeeze(ey("x",e,t,n),r)]}case"Reshape":return[a.reshape(ey("x",e,t,n),ey("shape",e,t,n))];case"EnsureShape":return[a.ensureShape(ey("x",e,t,n),ey("shape",e,t,n))];case"MirrorPad":return[a.mirrorPad(ey("x",e,t,n),ey("padding",e,t,n),ey("mode",e,t,n))];case"PadV2":case"Pad":return[a.pad(ey("x",e,t,n),ey("padding",e,t,n),ey("constantValue",e,t,n))];case"SpaceToBatchND":{let r=ey("blockShape",e,t,n),i=ey("paddings",e,t,n);return[a.spaceToBatchND(ey("x",e,t,n),r,i)]}case"BatchToSpaceND":{let r=ey("blockShape",e,t,n),i=ey("crops",e,t,n);return[a.batchToSpaceND(ey("x",e,t,n),r,i)]}case"DepthToSpace":{let r=ey("blockSize",e,t,n),i=ey("dataFormat",e,t,n).toUpperCase();return[a.depthToSpace(ey("x",e,t,n),r,i)]}case"BroadcastTo":return[a.broadcastTo(ey("x",e,t,n),ey("shape",e,t,n))];case"BroadcastArgs":return[a.broadcastArgs(ey("s0",e,t,n),ey("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return yg(e,t,n,a);case"custom":let i=Jm(e.op);if(i&&i.customExecutor)return i.customExecutor(new class{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return ty(e,this.tensorMap,this.context)}getAttr(e,t){let n=this.node.rawAttrs[e];if(null!=n.tensor)return ty(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Zy(this.node.rawAttrs,e,t);if(null!=n.s)return Xy(this.node.rawAttrs,e,t);if(null!=n.b)return Ky(this.node.rawAttrs,e,t);if(null!=n.shape)return ng(this.node.rawAttrs,e,t);if(null!=n.type)return Qy(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return ag(this.node.rawAttrs,e,t);if(null!=n.list.s)return rg(this.node.rawAttrs,e,t);if(null!=n.list.shape)return ig(this.node.rawAttrs,e,t);if(null!=n.list.b)return sg(this.node.rawAttrs,e,t);if(null!=n.list.type)return eg(this.node.rawAttrs,e,t)}return t}}(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return Tr.isPromise(i)?i.then((e=>[].concat(e))):[].concat(i)}var Ag=class{constructor(e={},t={},n={},a={},r){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=a,this.parseNodeNameCache=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){let e=[];for(let t=0;t<this.contexts.length-1;t++){let n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;let e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(let t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(let t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}};function xg(e,t,n,a){let r=new Set,i=[],s=null,o=null,l=new Set,u=new Set(Object.keys(e).map((e=>iy(e)[0])));a=a||[];let d=new Set(a.map((e=>iy(e.name)[0]))),p=[...t];for(;p.length>0;){let e=p.pop();if((Ig(e)||Sg(e)||Ng(e))&&null==s&&(s=e,o=s.children.map((e=>e.name)).filter((e=>r.has(e)))),r.add(e.name),null==n[e.name]&&!u.has(e.name)&&!d.has(e.name)){if(0===e.inputs.length){i.push(e.name);continue}e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),p.push(e))}))}}return{inputs:e,outputs:t,usedNodes:r,missingInputs:i,dynamicNode:s,syncInputs:o}}var bg=class extends Error{constructor(e){super(`NodesExecutionOrderError: ${e}`)}},vg=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),wg=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),kg=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function Ig(e){return vg.has(e.op)}function Sg(e){return wg.has(e.op)}function Ng(e){return kg.has(e.op)}var Cg=class{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){let t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{let t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new Cg(e.functions[t],this)}))}getCompilationKey(e,t){let n=e.map((e=>e.name)).sort(),a=t.map((e=>e.name)).sort();return n.join(this.SEPARATOR)+"--"+a.join(this.SEPARATOR)}compile(e,t){let n=xg(e,t,this.weightMap,this._initNodes),{missingInputs:a,dynamicNode:r,syncInputs:i}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);if(a.length>0){let n=t.map((e=>e.name)),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${a}]`)}let s=function(e,t){let{usedNodes:n,inputs:a}=t,r=Object.keys(a).map((e=>iy(e)[0])).map((t=>e.nodes[t])),i=e.initNodes||[],s=e=>n.has("string"==typeof e?e:e.name);function o(e){return[...new Map(e.map((e=>[e.name,e]))).values()]}let l=o([...r,...e.weights,...i]).filter(s),u=o([...l,...Object.values(e.nodes)]).filter(s),d=new Map(u.map((e=>[e.name,e]))),p={};for(let e of u){p[e.name]=p[e.name]||0;for(let t of e.children)s(t)||(p[t.name]=Number.POSITIVE_INFINITY),p[t.name]=(p[t.name]||0)+1}let c=Object.entries(p).filter((([,e])=>0===e)).map((([e])=>e)),h=[...c];for(;c.length>0;){let e=c.pop(),t=d.get(e);for(let e of t.children.filter(s))0==--p[e.name]&&(h.push(e.name),c.push(e.name))}let f=function(e,t){let n=new Map(e.map((e=>[e.name,e]))),a=t.map((e=>e.name)),r=new Set(a);for(;a.length>0;){let e=a.pop(),t=n.get(e);for(let e of t.children)!n.has(e.name)||r.has(e.name)||(r.add(e.name),a.push(e.name))}return e.filter((e=>r.has(e.name)))}(h.map((e=>d.get(e))),l);return function(e,t){let n=new Map(e.map(((e,t)=>[e.name,t]))),a=new Set(t.map((e=>e.name))),r=e=>a.has("string"==typeof e?e:e.name),i=new Set(e.map((e=>e.name))),s=e=>i.has("string"==typeof e?e:e.name);for(let t of e){for(let e of t.children.filter(s)){if(!n.has(e.name))throw new bg(`Child ${e.name} of node ${t.name} is unreachable.`);if(n.get(t.name)>n.get(e.name))throw new bg(`Node ${t.name} is scheduled to run after its child ${e.name}.`)}if(!r(t))for(let e of t.inputs){if(!n.has(e.name))throw new bg(`Input ${e.name} of node ${t.name} is unreachable.`);if(n.get(e.name)>n.get(t.name))throw new bg(`Node ${t.name} is scheduled to run before its input ${e.name}.`)}}}(f,l),f}(this.graph,n),o=function(e){let t=new Map(e.map(((e,t)=>[e.name,t]))),n=Number.MAX_SAFE_INTEGER,a=e.map(((e,t)=>Ig(e)?n:t)),r=e=>{let n=a[t.get(e.name)];return null==n?-1:n},i=e.map(((e,t)=>e.children.map(r).reduce(((e,t)=>Math.max(e,t)),a[t]))),s=new Map;for(let t=0;t<e.length;++t){let a=i[t];if(a===n)continue;let r=e[t],o=e[a];s.has(o.name)||s.set(o.name,[]),s.get(o.name).push(r)}return s}(s);return{orderedNodes:s,nodeLiveUntilMap:o}}cloneAndKeepTensor(e){if(null==e)return null;let t=e.clone();return so(t),t}cloneTensorList(e){return e?e.map((e=>this.cloneAndKeepTensor(e))):null}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map((([e,t])=>[e,this.cloneTensorList(t)])))}execute(e,t){this.disposeIntermediateTensors(),e=this.mapInputs(e);let n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);let a=n.map((e=>this.graph.nodes[iy(e)[0]])),r=t.map((e=>iy(e)[0])),i=new Set(r),s=r.map((e=>this.graph.nodes[e]));0===s.length&&(s=this._outputs);let o=this.getCompilationKey(a,s),l=this.compiledMap.get(o);null==l&&(l=this.compile(e,s),this.compiledMap.set(o,l));try{this.keepIntermediateTensors=He().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}let u={},d={};return ro((()=>{let n=new Ag(this.weightMap,u,d,this.functionExecutorMap,this.parseNodeNameCache),a=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach((t=>{let[r,i]=iy(t,n),s=[];s[i]=e[t],a[r]=s,this.keepIntermediateTensors&&(this.clonedTensorsMap[r]=this.cloneTensorList(s))}));let r=this.getFrozenTensorIds(a),{orderedNodes:s,nodeLiveUntilMap:o}=l;for(let e of s){if(a[e.name])continue;let t=gg(e,a,n,this._resourceManager);if(Tr.isPromise(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);a[e.name]=t,this.keepIntermediateTensors&&(this.clonedTensorsMap[e.name]=this.cloneTensorList(t)),this.checkTensorForDisposalWithNodeLiveUntilInfo(e,a,n,r,i,o.get(e.name))}return null==this.parent&&n.dispose(r),t.map((e=>ty(e,a,n)))}))}getFrozenTensorIds(e){let t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,a,r,i,s){if(!Ig(t)&&!i.has(e)){for(let a of n[e])null!=a&&(s[a.id]=(s[a.id]||0)+t.children.length);for(let e of t.inputs){if(Ig(e))continue;let t=ny(e.name,n,a);if(null!=t)for(let e of t){if(!e||e.kept||r.has(e.id))continue;let t=s[e.id];1===t?(e.dispose(),delete s[e.id]):null!=t&&s[e.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(e,t,n,a,r,i){function s(e){return Ig(e)||r.has(e.name)}if(!Ig(e)&&null!=i)for(let e of i){if(s(e))continue;let r=ny(e.name,t,n);for(let e of r)!e||e.kept||a.has(e.id)||e.dispose()}}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach((e=>{for(let t of e)t&&!t.isDisposed&&t.dispose()})),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(e,t,n=!1,a={},r={}){this.disposeIntermediateTensors(),n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=He().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}let i=new Ag(this.weightMap,a,r,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));let s=await this.executeWithControlFlow(e,i,t,n),o=t.map((e=>ty(e,s,i))),l=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id)),d=new Set([...l,...u,...this.weightIds]);return Object.values(s).forEach((e=>{e.forEach((e=>{e&&!e.isDisposed&&!d.has(e.id)&&e.dispose()}))})),null==this.parent&&i.dispose(d),o}async executeFunctionAsync(e,t,n){let a=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(a,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,a){let r=Object.keys(e),i=r.map((e=>this.graph.nodes[iy(e)[0]])),s=n.map((e=>iy(e)[0])),o=new Set(s),l=s.map((e=>this.graph.nodes[e]));0===l.length&&(l=this._outputs);let{usedNodes:u,missingInputs:d,dynamicNode:p,syncInputs:c}=xg(e,l,this.weightMap,this._initNodes),h=[...i,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),f=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{let[n,a]=iy(t),r=[];r[a]=e[t],f[n]=r}));let m={},y=this.getFrozenTensorIds(f),g={};for(;h.length>0;){let e=this.processStack(i,h,t,f,g,y,o,m,u);await Promise.all(e)}null==p&&!a&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");let A=l.filter((e=>!Ig(e)&&!ty(e.name,f,t))).map((e=>e.name));if(A.length>0){let e="";throw null!=p&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${c}]`),new Error(`Cannot compute the outputs [${A}] from the provided inputs [${r}]. Consider providing the following inputs: [${d}]. ${e}`)}return f}processStack(e,t,n,a,r,i,s,o,l){let u=[];for(;t.length>0;){let e=t.pop();n.currentContext=e.contexts;let d="";if("Enter"===e.node.op&&ey("isConstant",e.node,a,n)&&([d]=ay(e.node.name,n)),null==a[e.node.name]){let p=gg(e.node,a,n,this._resourceManager);d||([d]=ay(e.node.name,n));let c=n.currentContext;Tr.isPromise(p)?u.push(p.then((u=>(a[d]=u,this.keepIntermediateTensors&&(this.clonedTensorsMap[d]=this.cloneTensorList(u)),n.currentContext=c,this.checkTensorForDisposal(d,e.node,a,n,i,s,o),this.processChildNodes(e.node,t,n,a,r,l),u)))):(a[d]=p,this.keepIntermediateTensors&&(this.clonedTensorsMap[d]=this.cloneTensorList(p)),this.checkTensorForDisposal(d,e.node,a,n,i,s,o),this.processChildNodes(e.node,t,n,a,r,l))}else this.processChildNodes(e.node,t,n,a,r,l)}return u}processChildNodes(e,t,n,a,r,i){e.children.forEach((e=>{let[s]=ay(e.name,n);r[s]||!i.has(e.name)||("Merge"===e.op?e.inputNames.some((e=>!!ty(e,a,n)))&&(r[s]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!ty(e,a,n)))&&(r[s]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{let n=e[t],[a]=iy(t),r=this.graph.nodes[a];if(r.attrParams.shape&&r.attrParams.shape.value){let e=r.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));Tr.assert(t,(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&Tr.assert(n.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){var t,n;let a={};for(let r in e){let i=null===(n=null===(t=this._signature)||void 0===t?void 0:t.inputs)||void 0===n?void 0:n[r];null!=i?a[i.name]=e[r]:a[r]=e[r]}return a}checkInputs(e){let t=Object.keys(e).filter((e=>{let[t]=iy(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{var t,n;let a=null===(n=null===(t=this._signature)||void 0===t?void 0:t.outputs)||void 0===n?void 0:n[e];return null!=a?a.name:e}),{})}checkOutputs(e){e.forEach((e=>{let[t]=iy(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}},Tg="?tfjs-format=file",Eg="model.json",Rg=class{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(e,t={},n=Fh){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new class{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(let e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(let e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}}findIOHandler(){let e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{let t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");let e=this.handler.load();return Tr.isPromise(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;let t=this.artifacts.modelTopology,n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){let e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;let a=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Cg(jy.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(a),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){let t=jy.Instance.transformGraph(e.modelInitializer);this.initializer=new Cg(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}async save(e,t){if("string"==typeof e){let t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}addStructuredOutputNames(e){if(this.structuredOutputKeys){let t={};return(e instanceof di?[e]:e).forEach(((e,n)=>t[this.structuredOutputKeys[n]]=e)),t}return e}predict(e,t){let n=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(n)}async predictAsync(e,t){let n=await this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(n)}normalizeInputs(e){var t;if(!(e instanceof di||Array.isArray(e))){let n=null===(t=this.signature)||void 0===t?void 0:t.inputs;if(null!=n)for(let t in n){let a=n[t];null!=a.resourceId&&(e[t]=this.resourceIdToCapturedInput[a.resourceId])}return e}e=Array.isArray(e)?e:[e];let n=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+n!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-n} non-resource placeholders, while there are ${e.length} input tensors provided.`);let a=0;return this.inputNodes.reduce(((t,n)=>{var r,i,s;let o=null===(s=null===(i=null===(r=this.signature)||void 0===r?void 0:r.inputs)||void 0===i?void 0:i[n])||void 0===s?void 0:s.resourceId;return t[n]=null!=o?this.resourceIdToCapturedInput[o]:e[a++],t}),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}executeInitializerGraph(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){let t=this.initializerSignature.outputs,n=Object.keys(t);for(let a=0;a<n.length;a++){let r=t[n[a]];this.resourceIdToCapturedInput[r.resourceId]=e[a]}}}execute(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);let n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);let n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&io(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}};async function $g(e,t={},n=Fh){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){return e.endsWith("/")||(e+="/"),`${e}${Eg}${Tg}`}(e));let a=new Rg(e,t,n);return await a.load(),a}function Mg(e){if(null==e)throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");let t;if(e instanceof Array){let[n,a]=e;if(!n)throw new Error("modelJSON must be the first element of the array");if(!(a&&a instanceof ArrayBuffer))throw new Error("An ArrayBuffer of weights must be the second element of the array");if(!("modelTopology"in n))throw new Error("Model JSON is missing 'modelTopology'");if(!("weightsManifest"in n))throw new Error("Model JSON is missing 'weightsManifest'");let r=Fh.getWeightSpecs(n.weightsManifest),i=Fh.getModelArtifactsForJSONSync(n,r,a);t=Fh.fromMemorySync(i)}else if("load"in e)t=e;else{if(!("modelTopology"in e&&"weightSpecs"in e&&"weightData"in e))throw new Error("Unknown model format");t=Fh.fromMemorySync(e)}let n=new Rg(t);return n.load(),n}var _g="4.7.0";function Fg(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Tr.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}var Og=Km.whereImpl,Pg=class extends j{nextDataId(){return Pg.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new H(this,to())}write(e,t,n){this.firstUse&&(this.firstUse=!1,He().get("IS_NODE")&&Bf.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));let a={id:this.nextDataId()};return this.data.set(a,{values:e,dtype:n,refCount:1}),a}makeTensorInfo(e,t,n){let a;if("string"===t&&null!=n&&n.length>0&&Tr.isString(n[0])){let r=n.map((e=>Tr.encodeString(e)));a=this.write(r,e,t)}else a=this.write(n,e,t);return{dataId:a,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,a,r){this.data.set(e,{values:t,dtype:a,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){let{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){let e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return Bf.mergeRealAndImagArrays(e,t)}return Tr.convertBackendValuesAndArrayBuffer(this.data.get(e).values,t)}bufferSync(e){let t=this.readSync(e.dataId);if("string"===e.dtype)try{let n=t.map((e=>Tr.decodeString(e)));return js(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return js(e.shape,e.dtype,t)}makeOutput(e,t,n){return to().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;let{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){let t=Tr.now();return e(),{kernelMs:Tr.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Fg([e],"where");let t=this.readSync(e.dataId);return Og(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}};Pg.nextDataId=0;var Dg={};function zg(e){let t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}k(Dg,{addImpl:()=>Qg,bincountImpl:()=>aA,bincountReduceImpl:()=>rA,bitwiseAndImpl:()=>iA,castImpl:()=>Xg,ceilImpl:()=>pA,concatImpl:()=>fA,equalImpl:()=>mA,expImpl:()=>AA,expm1Impl:()=>vA,floorDivImpl:()=>CA,floorImpl:()=>IA,gatherNdImpl:()=>RA,gatherV2Impl:()=>$A,greaterEqualImpl:()=>OA,greaterImpl:()=>MA,lessEqualImpl:()=>BA,lessImpl:()=>zA,linSpaceImpl:()=>GA,logImpl:()=>HA,maxImpl:()=>XA,maximumImpl:()=>KA,minimumImpl:()=>JA,multiplyImpl:()=>tx,negImpl:()=>ix,notEqualImpl:()=>ox,prodImpl:()=>hx,raggedGatherImpl:()=>yx,raggedRangeImpl:()=>Ax,raggedTensorToTensorImpl:()=>kx,rangeImpl:()=>Ix,rsqrtImpl:()=>Sx,scatterImpl:()=>Tx,sigmoidImpl:()=>Ex,simpleAbsImpl:()=>zg,sliceImpl:()=>Mx,sparseFillEmptyRowsImpl:()=>Ox,sparseReshapeImpl:()=>Px,sparseSegmentReductionImpl:()=>Dx,sqrtImpl:()=>zx,squaredDifferenceImpl:()=>Bx,staticRegexReplaceImpl:()=>Gx,stridedSliceImpl:()=>qx,stringNGramsImpl:()=>Kx,stringSplitImpl:()=>Yx,stringToHashBucketFastImpl:()=>Jx,subImpl:()=>Qx,tileImpl:()=>ab,topKImpl:()=>sb,transposeImpl:()=>dx,uniqueImpl:()=>ob});var Lg={kernelName:Ze,backendName:"cpu",kernelFunc:e=>{let{x:t}=e.inputs,n=e.backend;Fg(t,"abs");let a=new Float32Array(Tr.sizeFromShape(t.shape));return a=zg(n.data.get(t.dataId).values),n.makeOutput(a,t.shape,t.dtype)}};function Wg(e){return(t,n,a,r,i)=>{let s=Bf.assertAndGetBroadcastShape(t,n),o=s.length,l=Tr.computeStrides(s),u=Tr.sizeFromShape(s),d=Tr.getTypedArrayFromDType(i,u),p=t.length,c=n.length,h=Tr.computeStrides(t),f=Tr.computeStrides(n),m=Bf.getBroadcastDims(t,s),y=Bf.getBroadcastDims(n,s);if(m.length+y.length===0)for(let t=0;t<d.length;++t)d[t]=e(a[t%a.length],r[t%r.length]);else for(let t=0;t<d.length;++t){let n=Tr.indexToLoc(t,o,l),i=n.slice(-p);m.forEach((e=>i[e]=0));let s=Tr.locToIndex(i,p,h),u=n.slice(-c);y.forEach((e=>u[e]=0));let g=Tr.locToIndex(u,c,f);d[t]=e(a[s],r[g])}return[d,s]}}function Bg(e){let{inputs:t,backend:n}=e,{real:a,imag:r}=t,i=n.data.get(a.dataId).values,s=n.data.get(r.dataId).values,o=n.makeTensorInfo(a.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(a.shape,"float32",i),imag:n.makeTensorInfo(r.shape,"float32",s)},o}var Vg={kernelName:kt,backendName:"cpu",kernelFunc:Bg};function Ug(e,t,n="float32"){if("complex64"===n)return Bg({inputs:{real:Ug(e,t,"float32"),imag:Ug(e,t,"float32")},backend:e});let a=Tr.makeZerosTypedArray(Tr.sizeFromShape(t),n);return e.makeTensorInfo(t,n,a)}function Gg(e){let{inputs:t,backend:n}=e,{x:a}=t;return n.incRef(a.dataId),{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}var Hg={kernelName:hn,backendName:"cpu",kernelFunc:Gg};function jg(e){let{inputs:t,backend:n}=e,{input:a}=t,r=n.data.get(a.dataId).complexTensorInfos.real,i=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,i)}var qg={kernelName:pa,backendName:"cpu",kernelFunc:jg};function Xg(e,t,n,a){if("int32"===a)return[t,"int32",Int32Array.from(e)];if("bool"===a){let a=Tr.toTypedArray([0],n),[r,i]=Wg(((e,t)=>e!==t?1:0))(t,[],e,a,"bool");return[i,"bool",r]}throw new Error(`Error in Cast: failed to cast ${n} to ${a}`)}function Kg(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{dtype:i}=a;if("complex64"===i){if("complex64"===r.dtype)return Gg({inputs:{x:r},backend:n});let e=Ug(n,r.shape,r.dtype),t=Kg({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),a=Bg({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),a}if("complex64"===r.dtype){let e=jg({inputs:{input:r},backend:n}),t=Kg({inputs:{x:e},backend:n,attrs:{dtype:i}});return n.disposeIntermediateTensorInfo(e),t}if(!Tr.hasEncodingLoss(r.dtype,i)){let e=Gg({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:i}}let s=n.data.get(r.dataId).values,[o,l,u]=Xg(s,r.shape,r.dtype,i);return n.makeTensorInfo(o,l,u)}var Zg={kernelName:bt,backendName:"cpu",kernelFunc:Kg};function Yg(e,t,n,a){return null==n?({inputs:n,backend:r})=>{let{a:i,b:s}=n,o=r;Fg([i,s],e);let l=o.data.get(i.dataId).values,u=o.data.get(s.dataId).values,d="string"===i.dtype?Bf.fromUint8ToStringArray(l):l,p="string"===i.dtype?Bf.fromUint8ToStringArray(u):u,c=a||i.dtype,[h,f]=t(i.shape,s.shape,d,p,c);return o.makeTensorInfo(f,c,h)}:({inputs:e,backend:r})=>{let{a:i,b:s}=e,o=r;if("complex64"===i.dtype||"complex64"===s.dtype){let e=Kg({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),a=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,l=o.data.get(a.dataId).values,u=o.data.get(r.dataId).values,d=Kg({inputs:{x:s},backend:o,attrs:{dtype:"complex64"}}),p=o.data.get(d.dataId),c=p.complexTensorInfos.real,h=p.complexTensorInfos.imag,f=o.data.get(c.dataId).values,m=o.data.get(h.dataId).values,[y,g,A]=n(i.shape,s.shape,l,u,f,m),x=o.makeTensorInfo(A,"float32",y),b=o.makeTensorInfo(A,"float32",g),v=Bg({inputs:{real:x,imag:b},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(d),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(b),v}{let e=o.data.get(i.dataId).values,n=o.data.get(s.dataId).values,r=a||i.dtype,[l,u]=t(i.shape,s.shape,e,n,r);return o.makeTensorInfo(u,r,l)}}}function Jg(e){return(t,n,a,r,i,s)=>{let o=Bf.assertAndGetBroadcastShape(t,n),l=Tr.sizeFromShape(o),u=o.length,d=Tr.computeStrides(o),p=Tr.getTypedArrayFromDType("float32",l),c=Tr.getTypedArrayFromDType("float32",l),h=Bf.getBroadcastDims(t,o),f=Bf.getBroadcastDims(n,o),m=Bf.mergeRealAndImagArrays(a,r),y=Bf.mergeRealAndImagArrays(i,s),g=t.length,A=Tr.computeStrides(t),x=n.length,b=Tr.computeStrides(n);if(h.length+f.length===0)for(let t=0;t<p.length;t++){let n=t%m.length,a=t%y.length,r=e(m[2*n],m[2*n+1],y[2*a],y[2*a+1]);p[t]=r.real,c[t]=r.imag}else for(let t=0;t<p.length;t++){let n=Tr.indexToLoc(t,u,d),a=n.slice(-g);h.forEach((e=>a[e]=0));let r=Tr.locToIndex(a,g,A),i=n.slice(-x);f.forEach((e=>i[e]=0));let s=Tr.locToIndex(i,x,b),o=e(m[2*r],m[2*r+1],y[2*s],y[2*s+1]);p[t]=o.real,c[t]=o.imag}return[p,c,o]}}var Qg=Wg(((e,t)=>e+t)),eA=Jg(((e,t,n,a)=>({real:e+n,imag:t+a}))),tA=Yg(Qe,Qg,eA),nA={kernelName:Qe,backendName:"cpu",kernelFunc:tA};function aA(e,t,n,a,r){let i=Tr.sizeFromShape(a),s=Tr.makeZerosTypedArray(r,n);for(let n=0;n<e.length;n++){let a=e[n];if(a<0)throw new Error("Input x must be non-negative!");a>=r||(s[a]+=i>0?t[n]:1)}return s}function rA(e,t,n,a=!1){let r=e.shape[0],i=e.shape[1],s=js([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<i;r++){let i=e.get(o,r);if(i<0)throw new Error("Input x must be non-negative!");i>=n||(a?s.set(1,o,i):t.size>0?s.set(s.get(o,i)+t.get(o,r),o,i):s.set(s.get(o,i)+1,o,i))}return s}var iA=Wg(((e,t)=>e&t)),sA=Yg(gt,iA),oA={kernelName:gt,backendName:"cpu",kernelFunc:sA};function lA(e){return(t,n,a)=>{let r=Tr.getArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],a);return r}}function uA(e,t,n){return dA(e,lA(t),n)}function dA(e,t,n){return({inputs:a,attrs:r,backend:i})=>{let{x:s}=a;Fg(s,e);let o,l=i,u=l.data.get(s.dataId).values;if("string"===s.dtype){if(!Array.isArray(u))throw new Error("String tensor's value was not an instance of Array");o=Bf.fromUint8ToStringArray(u)}else o=u;let d=n||s.dtype,p=t(o,d,r);return l.makeTensorInfo(s.shape,d,p)}}var pA=lA((e=>Math.ceil(e))),cA=dA(vt,pA),hA={kernelName:vt,backendName:"cpu",kernelFunc:cA};function fA(e,t,n,a){let r=Tr.getArrayFromDType(n,Tr.sizeFromShape(t));if(a&&"string"!==n){let t=0;e.forEach((e=>{let n=Tr.sizeFromShape(e.shape);r.set(e.vals,t),t+=n}))}else{let a=0;e.forEach((e=>{let i="string"===n?Bf.fromUint8ToStringArray(e.vals):e.vals,s=0;for(let n=0;n<e.shape[0];++n){let o=n*t[1]+a;for(let t=0;t<e.shape[1];++t)r[o+t]=i[s++]}a+=e.shape[1]}))}return r}var mA=Wg(((e,t)=>e===t?1:0)),yA=Yg(Jt,mA,null,"bool"),gA={kernelName:Jt,backendName:"cpu",kernelFunc:yA},AA=lA((e=>Math.exp(e))),xA=dA(Qt,AA,"float32"),bA={kernelName:Qt,backendName:"cpu",kernelFunc:xA},vA=lA((e=>Math.expm1(e))),wA=dA(tn,vA),kA={kernelName:tn,backendName:"cpu",kernelFunc:wA},IA=lA((e=>Math.floor(e))),SA=dA(sn,IA),NA={kernelName:sn,backendName:"cpu",kernelFunc:SA},CA=Wg(((e,t)=>Math.floor(e/t))),TA=Yg(on,CA,null,"int32"),EA={kernelName:on,backendName:"cpu",kernelFunc:TA};function RA(e,t,n,a,r,i,s,o,l){let u=js([a,i],n);for(let n=0;n<a;n++){let a=[],d=0;for(let t=0;t<r;t++){let i=e[n*r+t];d+=i*s[t],a.push(i)}if(d<0||d>=l/i)throw new Error(`Invalid indices: ${a} does not index into ${o}`);for(let e=0;e<i;e++)u.values[n*i+e]=t.get(...t.indexToLoc(d*i+e))}return u}function $A(e,t,n){let a=js(n,e.dtype);for(let n=0;n<a.size;++n){let r=a.indexToLoc(n).slice(),i=r[0],s=r[2],o=t.locToIndex([i,s]);r[2]=t.values[o];let l=e.locToIndex(r);0<=l&&l<e.values.length&&(a.values[n]=e.values[l])}return a}var MA=Wg(((e,t)=>e>t?1:0)),_A=Yg(pn,MA,null,"bool"),FA={kernelName:pn,backendName:"cpu",kernelFunc:_A},OA=Wg(((e,t)=>e>=t?1:0)),PA=Yg(cn,OA,null,"bool"),DA={kernelName:cn,backendName:"cpu",kernelFunc:PA},zA=Wg(((e,t)=>e<t?1:0)),LA=Yg(bn,zA,null,"bool"),WA={kernelName:bn,backendName:"cpu",kernelFunc:LA},BA=Wg(((e,t)=>e<=t?1:0)),VA=Yg(vn,BA,null,"bool"),UA={kernelName:vn,backendName:"cpu",kernelFunc:VA};function GA(e,t,n){let a=(t-e)/(n-1),r=Tr.makeZerosTypedArray(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+a;return r}var HA=lA((e=>Math.log(e))),jA=dA(kn,HA),qA={kernelName:kn,backendName:"cpu",kernelFunc:jA};function XA(e,t,n,a){let r=Tr.getTypedArrayFromDType(a,Tr.sizeFromShape(n));for(let n=0;n<r.length;++n){let a=n*t,i=e[a];for(let n=0;n<t;++n){let t=e[a+n];(Number.isNaN(t)||t>i)&&(i=t)}r[n]=i}return r}var KA=Wg(((e,t)=>Math.max(e,t))),ZA=Yg(On,KA),YA={kernelName:On,backendName:"cpu",kernelFunc:ZA},JA=Wg(((e,t)=>Math.min(e,t))),QA=Yg(Un,JA),ex={kernelName:Un,backendName:"cpu",kernelFunc:QA},tx=Wg(((e,t)=>e*t)),nx=Jg(((e,t,n,a)=>({real:e*n-t*a,imag:e*a+t*n}))),ax=Yg(qn,tx,nx),rx={kernelName:qn,backendName:"cpu",kernelFunc:ax};function ix(e,t,n){let a=Tr.createScalarValue(-1,n);return tx([],t,a,e,n)}var sx={kernelName:Xn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:a}=t;Fg(a,"neg");let r=n.data.get(a.dataId).values,[i,s]=ix(r,a.shape,a.dtype);return n.makeTensorInfo(s,a.dtype,i)}},ox=Wg(((e,t)=>e!==t?1:0)),lx=Yg(Kn,ox,null,"bool"),ux={kernelName:Kn,backendName:"cpu",kernelFunc:lx};function dx(e,t,n,a,r){let i=t.length,s=Tr.sizeFromShape(t),o=Tr.computeStrides(t),l=Tr.computeStrides(r),u=Tr.getTypedArrayFromDType(n,Tr.sizeFromShape(r));for(let t=0;t<s;++t){let n=Tr.indexToLoc(t,i,o),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[a[e]];u[Tr.locToIndex(r,i,l)]=e[t]}return u}function px(e){let{inputs:t,attrs:n,backend:a}=e,{x:r}=t,{perm:i}=n;Fg(r,"transpose");let s=r.shape.length,o=new Array(s);for(let e=0;e<o.length;e++)o[e]=r.shape[i[e]];let l=dx(a.data.get(r.dataId).values,r.shape,r.dtype,i,o);return{dataId:a.write(l,o,r.dtype),shape:o,dtype:r.dtype}}var cx={kernelName:ar,backendName:"cpu",kernelFunc:px};function hx(e,t,n,a){let[r,i]=Bf.computeOutAndReduceShapes(e,a),s=bi(t,"int32"),o=Tr.makeZerosTypedArray(Tr.sizeFromShape(r),s),l=Tr.sizeFromShape(i);for(let e=0;e<o.length;++e){let t=e*l,a=1;for(let e=0;e<l;++e)a*=n[t+e];o[e]=a}return{outVals:o,outShape:r,outDtype:s}}var fx={kernelName:sa,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,keepDims:s}=a;Fg(r,"prod");let o=r.shape.length,l=Tr.parseAxisParam(i,r.shape),u=Bf.getAxesPermutation(l,o),d=l,p=r,c=[];null!=u&&(p=px({inputs:{x:r},backend:n,attrs:{perm:u}}),c.push(p),d=Bf.getInnerMostAxes(d.length,o));let h=n.data.get(p.dataId).values,{outVals:f,outShape:m,outDtype:y}=hx(p.shape,p.dtype,h,d),g=m;return s&&(g=Bf.expandShapeToKeepDim(m,l)),c.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(g,y,f)}};function mx(e,t){let n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let a=t;a<e.length;a++)n[t-1]*=e[a];return n}function yx(e,t,n,a,r,i,s,o){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,a)=>{if(e<0||e>=n){let r=Tr.indexToLoc(a,t.length,Tr.computeStrides(t)).join(",");throw new Error(`indices[${r}] = ${e} is not in [0, ${n})`)}}))}(i,s,t[0][0]-1),0===a.length)throw new Error("params.rank must be nonzero");let l=a[0],{outSplits:u,valueSlices:d,numValues:p}=function(e,t,n,a){let r=[],i=0,s=t.length-1+n.length,o=new Array(s).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){let a=e[n],r=n===e.length-1?t:e[n+1].length;if(0===a.length)throw new Error("Ragged splits may not be empty");if(a[0]<0)throw new Error("Ragged splits must be non-negative");if(a[a.length-1]>r)throw new Error("Ragged splits must not point past values");for(let e=1;e<a.length;++e)if(a[e-1]>a[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,a);let l=1;for(let e=0;e<t.length-1;++e){l*=t[e];let n=t[e+1];for(let t=1;t<l+1;++t)o[e].push(t*n)}for(let a=0;a<e.length;++a){let s=e[a],l=e[a]+1;for(let e=0;e<n.length;++e){let a=n[e],r=e+t.length-1;if(r>=0){let e=o[r],t=e[e.length-1]-a[s];for(let e=s;e<l;++e)o[r].push(a[e+1]+t)}s=a[s],l=a[l]}l!==s&&(r.push([s,l]),i+=l-s)}return{outSplits:o,valueSlices:r,numValues:i}}(i,s,e,l),c=function(e){let t=[];for(let n=0;n<e.length;++n){let a=e[n].length,r=Tr.getArrayFromDType("int32",a);t.push(r),e[n].forEach(((e,t)=>r[t]=e))}return t}(u),h=function(e,t,n,a,r){let i=t.slice();i[0]=r;let s=Tr.getArrayFromDType(n,Tr.sizeFromShape(i)),o=e.length;return function(e,t,n,a,r,i){let s=mx(t,2)[1],o=mx(i,2)[1],l=0;for(let t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<a;++t)r[l*o+t]=e[n*s+t];++l}}(e,t,a,0===o?0:o/t[0],s,i),[s,i]}(n,a,r,d,p);return[c,h[0],h[1]]}var gx=2147483647;function Ax(e,t,n,a,r,i,s){if(t.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(s.length>1)throw new Error("deltas must be a scalar or vector");let o=0===t.length,l=0===r.length,u=0===s.length,d=[];o||d.push(t[0]),l||d.push(r[0]),u||d.push(s[0]);for(let e=1;e<d.length;++e)if(d[e]!==d[e-1])throw new Error("starts, limits, and deltas must have the same shape");let p=0===d.length?1:d[0],c=Tr.getArrayFromDType("int32",p+1);c[0]=0;for(let t=0;t<p;++t){let n,r=o?e[0]:e[t],s=l?a[0]:a[t],d=u?i[0]:i[t];if(0===d)throw new Error("Requires delta != 0");if(d>0&&s<r||d<0&&s>r)n=0;else if(n=Math.ceil(Math.abs((s-r)/d)),n>gx)throw new Error(`Requires ((limit - start) / delta) <= ${gx}`);c[t+1]=c[t]+n}let h=c[p],f=Tr.getArrayFromDType(n,h),m=0;for(let t=0;t<p;++t){let n=c[t+1]-c[t],a=o?e[0]:e[t],r=u?i[0]:i[t];for(let e=0;e<n;++e)f[m++]=a,a+=r}return[c,f]}var xx=Bf.RowPartitionType,bx=class{constructor(e,t,n,a,r,i,s,o,l,u){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=a,this.valuesDType=r,this.defaultValue=i,this.defaultValueShape=s,this.rowPartitionValues=o,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=Bf.getRowPartitionTypesHelper(u),this.raggedRank=Bf.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===xx.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===xx.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){let t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case xx.VALUE_ROWIDS:return bx.getMaxWidthValueRowID(t);case xx.ROW_SPLITS:return bx.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${xx[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){let t=e.length;if(0===t||1===t)return 0;let n=0;for(let a=0;a<t-1;++a){let t=e[a+1]-e[a];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){let t=e.length;if(0===t)return 0;let n=0,a=e[0],r=0;for(let i=1;i<t;++i){let t=e[i];t!==a&&(a=t,r=Math.max(i-n,r),n=i)}return Math.max(t-n,r)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return wx(e,n)}calculateOutputSize(e){let t=this.valuesShape,n=this.defaultValueShape;Bf.validateDefaultValueShape(n,t);let a=this.tensorShapeFromTensor(this.shape,this.shapeShape),r=Bf.combineRaggedTensorToTensorShapes(this.raggedRank,a,t);r[0]<0&&(r[0]=e);for(let e=1;e<=this.raggedRank;++e)r[e]<0&&(r[e]=this.getMaxWidth(e));return r}calculateFirstParentOutputIndex(e,t,n){let a=Math.min(e,n),r=[],i=0;for(let e=0;e<a;++e,i+=t)r.push(i);for(let t=a;t<e;++t)r.push(-1);return Tr.assert(r.length===e,(()=>"Final length of result must be equal to firstDimension.")),r}calculateOutputIndexRowSplit(e,t,n,a){let r=e.length,i=[];for(let s=0;s<r-1;++s){let r=e[s+1]-e[s],o=Math.min(a,r),l=t[s];-1===l&&(o=0);for(let e=0;e<o;++e)i.push(l),l+=n;for(let e=0;e<r-o;++e)i.push(-1)}if(r>0&&i.length!==e[r-1])throw new Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(e,t,n,a){let r=e.length,i=[];if(0===r)return[];let s=0,o=e[0];if(o>=t.length)throw new Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let l=t[o];i.push(l);for(let u=1;u<r;++u){let r=e[u];if(r===o)l>=0&&(++s,s<a?l+=n:l=-1);else{if(s=0,o=r,r>=t.length)throw new Error(`Got nextValueRowId=${r} which is not less than ${t.length}`);l=t[r]}i.push(l)}if(i.length!==e.length)throw new Error("Invalid row ids.");return i}calculateOutputIndex(e,t,n,a){let r=this.getRowPartitionTensor(e),i=this.getRowPartitionTypeByDimension(e);switch(i){case xx.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(r,t,n,a);case xx.ROW_SPLITS:if(r.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${r.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(r,t,n,a);default:throw new Error(`Unsupported partition type: ${xx[i]}`)}}getFirstDimensionSize(){let e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");let t=this.rowPartitionTypes[0];switch(t){case xx.FIRST_DIM_SIZE:return e[0];case xx.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case xx.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${xx[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");let e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];let a=wx(t,!1),r=Tr.getArrayFromDType(this.valuesDType,Tr.sizeFromShape(a));if(n[0]*t[0]>0){let i=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e)i=this.calculateOutputIndex(e-1,i,n[e],t[e]);this.setOutput(this.raggedRank,i,r,a)}return[a,r]}setOutput(e,t,n,a){if(0===n.length)return;let r=this.values,i=n,s=a.slice();s=s.slice(e+1);let o=Tr.sizeFromShape(s),l=t.length,u=this.defaultValue;if(u.length!==o&&1!==u.length){let e=this.defaultValueShape;ro((()=>{let t=Zo(u,e);u=fl(t,s).dataSync()}))}let d=0,p=0,c=0;for(let e=0;e<=l;++e){let a=e<l?t[e]:-1;if(a!==c){if(p<c){let e=r.subarray(d*o);vx(i.subarray(p*o),e,(c-p)*o)}if(e>=l){let e=n.length;a=Math.floor(e/o)}if(a>c)if(1===this.defaultValue.length)i.subarray(c*o,a*o).fill(this.defaultValue[0]),c=a;else for(;a>c;)vx(i.slice(c*o),u,o),++c;a<0?(d=e+1,p=c):(d=e,p=c,c=p+1)}else++c}}};function vx(e,t,n){for(let a=0;a<n;a++)e[a]=t[a]}function wx(e,t){let n=[];for(let a of e){if(a<0){if(!t)throw new Error(`Dimension ${a} must be >= 0`);if(a<-1)throw new Error(`Dimension ${a} must be >= -1`);a=-1}n.push(a)}return n}function kx(e,t,n,a,r,i,s,o,l,u){return new bx(e,t,n,a,r,i,s,o,l,u).compute()}function Ix(e,t,n,a){if(e===t||e<t&&n<0||t<e&&n>1)return Tr.makeZerosTypedArray(0,a);let r=Math.abs(Math.ceil((t-e)/n)),i=Tr.makeZerosTypedArray(r,a);t<e&&1===n&&(n=-1),i[0]=e;for(let e=1;e<i.length;e++)i[e]=i[e-1]+n;return i}var Sx=lA((e=>1/Math.sqrt(e))),Nx=dA(wa,Sx),Cx={kernelName:wa,backendName:"cpu",kernelFunc:Nx};function Tx(e,t,n,a,r,i,s,o,l,u){let d=[a/r,r],p=e.values,c=t.values;if(0===a)return js(n,t.dtype);let h=l instanceof oi?l:js(d,t.dtype);"string"==typeof l||"number"==typeof l?h.values.fill(l):"boolean"==typeof l&&h.values.fill(+l);for(let e=0;e<i;e++){let i=[],l=0;for(let t=0;t<s;t++){let n=p[e*s+t];i.push(n),l+=n*o[t]}if(l<0||l>=a/r)throw new Error(`Invalid indices: ${i} does not index into ${n}`);for(let n=0;n<r;n++)u?h.values[l*r+n]+=c[e*r+n]:h.values[l*r+n]=0===t.rank?c[0]:c[e*r+n]}return h}var Ex=lA((e=>1/(1+Math.exp(-e)))),Rx=uA(Ma,(e=>1/(1+Math.exp(-e)))),$x={kernelName:Ma,backendName:"cpu",kernelFunc:Rx};function Mx(e,t,n,a,r){let i=mf.isSliceContinous(a,t,n),s=Tr.sizeFromShape(n),o=Tr.computeStrides(a);if(i){let n=mf.computeFlatOffset(t,o);return"string"===r?e.slice(n,n+s):e.subarray(n,n+s)}let l=js(a,r,"string"===r?Bf.fromUint8ToStringArray(e):e),u=js(n,r);for(let e=0;e<u.size;++e){let n=u.indexToLoc(e),a=n.map(((e,n)=>e+t[n]));u.set(l.get(...a),...n)}return"string"===r?Bf.fromStringArrayToUint8(u.values):u.values}function _x(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{begin:i,size:s}=a;Fg(r,"slice");let[o,l]=mf.parseSliceParams(r,i,s);mf.assertParamsValid(r,o,l);let u=Mx(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}var Fx={kernelName:Ta,backendName:"cpu",kernelFunc:_x};function Ox(e,t,n,a,r,i,s){let o=t[0],l=i[0],u=new Array(l),d=new Array(o),p=t[1];if(0===l){if(0!==o)throw new Error(Bf.getSparseFillEmptyRowsIndicesDenseShapeMismatch(o));return[Tr.getArrayFromDType(n,0),[0,p],Tr.getArrayFromDType(r,0),u,d]}let c=!0,h=0,f=new Array(l).fill(0);for(let t=0;t<o;++t){let n=e[t*p];if(n<0)throw new Error(Bf.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=l)throw new Error(Bf.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,l));++f[n],c=c&&n>=h,h=n}let m=!0;for(let e=0;e<l;++e){let t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&c){let t=e,n=a;for(let e=0;e<o;++e)d[e]=e;return[t,[o,p],n,u,d]}{let t=f[l-1],i=Tr.getArrayFromDType(n,t*p),c=Tr.getArrayFromDType(r,t),h=new Array(l).fill(0);for(let t=0;t<o;++t){let n=e[t*p],r=h[n],s=(0===n?0:f[n-1])+r;h[n]++;for(let n=0;n<p;++n)i[s*p+n]=e[t*p+n];c[s]=a[t],d[t]=s}for(let e=0;e<l;++e)if(0===h[e]){let t=0===e?0:f[e-1];i[t*p+0]=e;for(let e=1;e<p;++e)i[t*p+e]=0;c[t]=s}return[i,[t,p],c,u,d]}}function Px(e,t,n,a,r){let i=Tr.sizeFromShape(a),s=t[0],o=r.length,l=[],u=1,d=-1;for(let e=0;e<o;++e){let t=r[e];if(-1===t){if(-1!==d)throw new Error(Bf.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(d,e));d=e,l.push(1)}else{if(t<0)throw new Error(Bf.getSparseReshapeNegativeOutputDimErrorMessage(e,t));u*=t,l.push(t)}}if(-1!==d){if(u<=0)throw new Error(Bf.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let e=Math.trunc(i/u);if(u*e!==i)throw new Error(Bf.getSparseReshapeInputOutputMultipleErrorMessage(a,l));l[d]=e}if(Tr.sizeFromShape(l)!==i)throw new Error(Bf.getSparseReshapeInputOutputMismatchErrorMessage(a,l));let p=a.length,c=[];if(p>0){c[p-1]=1;for(let e=p-2;e>=0;--e)c[e]=c[e+1]*a[e+1]}let h=[];if(o>0){h[o-1]=1;for(let e=o-2;e>=0;--e)h[e]=h[e+1]*l[e+1]}let f=Tr.getArrayFromDType(n,s*o);for(let t=0;t<s;++t){let n=0;for(let a=0;a<p;++a)n+=e[t*p+a]*c[a];for(let e=0;e<o;++e)f[t*o+e]=Math.trunc(n/h[e]),n%=h[e]}return[f,[s,o],l]}function Dx(e,t,n,a,r,i=!1,s=0){let o=a.length,l=[t[0],e.length/t[0]],u=l[1],d=o>0?r[o-1]+1:0;if(d<0)throw new Error(Bf.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let p=t.slice();p[0]=d;let c=p.reduce(((e,t)=>e*t),1),h=Tr.getArrayFromDType(n,c);if(0===o)return d>0&&h.fill(s),[h,p];if(d<=0)throw new Error(Bf.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,m=1,y=0,g=r[f];for(;;){let t=0;if(m<o){if(t=r[m],g===t){++m;continue}if(g>=t)throw new Error(Bf.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(g<0||g>=d)throw new Error(Bf.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(g,d));g>y&&h.fill(s,y*u,g*u);for(let t=f;t<m;++t){let n=a[t];if(n<0||n>=l[0])throw new Error(Bf.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,a[t],l[0]));for(let t=0;t<u;t++)h[g*u+t]+=e[n*u+t]}if(i)for(let e=0;e<u;e++)h[g*u+e]/=m-f;if(f=m,++m,y=g+1,g=t,m>o)break}return y<d&&h.fill(s,y*u,d*u),[h,p]}var zx=lA((e=>Math.sqrt(e))),Lx=uA(Fa,(e=>Math.sqrt(e))),Wx={kernelName:Fa,backendName:"cpu",kernelFunc:Lx},Bx=Wg(((e,t)=>{let n=e-t;return n*n})),Vx=Yg(Ga,Bx),Ux={kernelName:Ga,backendName:"cpu",kernelFunc:Vx},Gx=lA(((e,t)=>{let{pattern:n,replaceGlobal:a,rewrite:r}=t;return e.replace(new RegExp(n,a?"g":""),r)})),Hx=dA(ja,Gx),jx={kernelName:ja,backendName:"cpu",kernelFunc:Hx};function qx(e,t,n,a){let r=js(e,t.dtype);for(let e=0;e<r.size;e++){let i=r.indexToLoc(e),s=new Array(i.length);for(let e=0;e<s.length;e++)s[e]=i[e]*n[e]+a[e];r.set(t.get(...s),...i)}return r}var Xx=class{constructor(e,t,n,a,r,i){this.separator=Tr.encodeString(e),this.nGramWidths=t,this.leftPad=Tr.encodeString(n),this.rightPad=Tr.encodeString(a),this.padWidth=r,this.preserveShort=i}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){let n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,a,r,i){for(let s=0;s<r;++s){let o=this.getPadWidth(i),l=Math.max(0,o-s),u=Math.max(0,o-(r-(s+1))),d=i-(l+u),p=t+(l>0?0:s-o),c=0;c+=l*this.leftPad.length;for(let t=0;t<d;++t)c+=e[p+t].length;c+=u*this.rightPad.length,c+=(l+u+d-1)*this.separator.length,n[a+s]=new Uint8Array(c);let h=n[a+s],f=0,m=e=>e.forEach((e=>h[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<d-1;++t)m(e[p+t]),m(this.separator);if(d>0){m(e[p+d-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){let n=e.length,a=t.length;if(a>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<a;++r){let a=t[r]>=e;if(a=a&&t[r]<=n,!a)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}let r=a-1,i=Tr.getArrayFromDType("int32",a);if(0===n||0===a){let e=new Array(n);for(let e=0;e<=r;++e)i[e]=0;return[e,i]}i[0]=0;for(let e=1;e<=r;++e){let n=t[e]-t[e-1],a=0;this.nGramWidths.forEach((e=>{a+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===a&&(a=1),i[e]=i[e-1]+a}let s=new Array(i[r]);for(let n=0;n<r;++n){let a=t[n],r=i[n];if(this.nGramWidths.forEach((i=>{let o=t[n+1]-t[n],l=this.getNumNGrams(o,i);this.createNGrams(e,a,s,r,l,i),r+=l})),this.preserveShort&&r===i[n]){let i=t[n+1]-t[n];if(0===i)continue;let o=i+2*this.padWidth,l=1;this.createNGrams(e,a,s,r,l,o)}}return[s,i]}};function Kx(e,t,n,a,r,i,s,o){return new Xx(n,a,r,i,s,o).compute(e,t)}function Zx(e,t,n,a){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)a.push(e.subarray(t,t+1));return}if(1===t.length){let r=t[0],i=e.indexOf(r);for(;-1!==i;){let t=e.subarray(0,i);(!n||0!==t.length)&&a.push(t),i=(e=e.subarray(i+1)).indexOf(r)}return void((!n||0!==e.length)&&a.push(e))}let r=0;for(let i=0;i<e.length+1;i++)if(i===e.length||-1!==t.indexOf(e[i])){let t=e.subarray(r,i);(!n||0!==t.length)&&a.push(t),r=i+1}}function Yx(e,t,n){let a=e.length,r=[],i=0,s=0,o=new Array(a);for(let l=0;l<a;++l){let a=r.length;Zx(e[l],t,n,r);let u=r.length-a;o[l]=u,i+=u,s=Math.max(s,u)}let l=Tr.getArrayFromDType("int32",2*i),u=new Array(i),d=[a,s],p=0;for(let e=0;e<a;++e)for(let t=0;t<o[e];++t)l[2*p]=e,l[2*p+1]=t,u[p]=r[p],++p;return[l,u,d]}function Jx(e,t){let n=Tr.getArrayFromDType("int32",e.length);for(let a=0;a<e.length;++a)n[a]=Tr.fingerPrint64(e[a]).modulo(t).getLowBitsUnsigned();return n}var Qx=Wg(((e,t)=>e-t)),eb=Jg(((e,t,n,a)=>({real:e-n,imag:t-a}))),tb=Yg(Ya,Qx,eb),nb={kernelName:Ya,backendName:"cpu",kernelFunc:tb};function ab(e,t){let n=new Array(e.rank);for(let a=0;a<n.length;a++)n[a]=e.shape[a]*t[a];let a=js(n,e.dtype);for(let t=0;t<a.values.length;++t){let n=a.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];let i=e.locToIndex(r);a.values[t]=e.values[i]}return a}var rb=(e,t)=>{let n=t.value-e.value;return 0===n?e.index-t.index:n};function ib(e,t,n=0,a=e.length-1){for(;a>n;){if(a-n>600){let r=a-n+1,i=t-n+1,s=Math.log(r),o=.5*Math.exp(2*s/3),l=.5*Math.sqrt(s*o*(r-o)/r)*Math.sign(i-r/2);ib(e,t,Math.max(n,Math.floor(t-i*o/r+l)),Math.min(a,Math.floor(t+(r-i)*o/r+l)))}let r=e[t],i=n,s=a;for(Tr.swap(e,n,t),rb(e[a],r)>0&&Tr.swap(e,n,a);i<s;){for(Tr.swap(e,i,s),i++,s--;rb(e[i],r)<0;)i+=1;for(;rb(e[s],r)>0;)s-=1}0===rb(e[n],r)?Tr.swap(e,n,s):(s+=1,Tr.swap(e,s,a)),s<=t&&(n=s+1),t<=s&&(a=s-1)}}function sb(e,t,n,a,r){let i=t[t.length-1],[s,o]=[e.length/i,i],l=Tr.getTypedArrayFromDType(n,s*a),u=Tr.getTypedArrayFromDType("int32",s*a);for(let t=0;t<s;t++){let n=t*o,i=e.subarray(n,n+o),s=new Array(i.length);i.forEach(((e,t)=>s[t]={value:e,index:t})),a<s.length&&(ib(s,a),s=s.slice(0,a)),r&&s.sort(rb);let d=t*a,p=l.subarray(d,d+a),c=u.subarray(d,d+a);for(let e=0;e<a;e++)p[e]=s[e].value,c[e]=s[e].index}let d=t.slice();return d[d.length-1]=a,[js(d,n,l),js(d,"int32",u)]}function ob(e,t,n,a){let r=Tr.parseAxisParam(t,n)[0],i=[1,n[0],1];for(let e=0;e<r;e++)i[0]*=n[e];i[1]=n[r];for(let e=r+1;e<n.length;e++)i[2]*=n[e];let s=new Map,o=new Int32Array(n[r]),l=new oi(i,a,e),u=[],d=1===i[0]&&1===i[2];for(let t=0;t<n[r];t++){let n;if(d)n=e[t].toString();else{let e=[];for(let n=0;n<i[0];n++)for(let a=0;a<i[2];a++)e.push(l.get(n,t,a));n=e.join(",")}let a=s.get(n);if(null!=a)o[t]=a;else{let e=s.size;s.set(n,e),o[t]=e,u.push(t)}}let p=i.slice();p[1]=s.size;let c=new oi(p,a);u.forEach(((e,t)=>{for(let n=0;n<i[0];n++)for(let a=0;a<i[2];a++)c.set(l.get(n,e,a),n,t,a)}));let h=n.slice();return h[r]=p[1],{outputValues:c.values,outputShape:h,indices:o}}var lb="4.7.0";mo("cpu",(()=>new Pg),1);var ub=uA(Kt,(e=>e>=0?e:Math.exp(e)-1)),db={kernelName:Kt,backendName:"cpu",kernelFunc:ub};function pb(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{alpha:i}=a;Fg([r],"leakyRelu");let s=Tr.sizeFromShape(r.shape),o=n.data.get(r.dataId).values,l=Tr.getTypedArrayFromDType("float32",s);for(let e=0;e<o.length;e++)l[e]=o[e]<0?i*o[e]:o[e];return n.makeTensorInfo(r.shape,"float32",l)}var cb={kernelName:xn,backendName:"cpu",kernelFunc:pb},hb=Wg(((e,t)=>e<0?t*e:e));function fb(e){let{inputs:t,backend:n}=e,{x:a,alpha:r}=t;Fg([a,r],"prelu");let i=n.data.get(a.dataId).values,s=n.data.get(r.dataId).values,[o,l]=hb(a.shape,r.shape,i,s,"float32");return n.makeTensorInfo(l,"float32",o)}var mb={kernelName:ia,backendName:"cpu",kernelFunc:fb},yb=uA(ha,(e=>Math.max(0,e))),gb={kernelName:ha,backendName:"cpu",kernelFunc:yb},Ab=uA(xa,(e=>Math.min(Math.max(0,e),6))),xb={kernelName:xa,backendName:"cpu",kernelFunc:Ab};function bb(e,t,n,a,r){if("linear"===n)return Gg({inputs:{x:t},backend:e});if("relu"===n)return yb({inputs:{x:t},backend:e});if("elu"===n)return ub({inputs:{x:t},backend:e});if("relu6"===n)return Ab({inputs:{x:t},backend:e});if("prelu"===n)return fb({inputs:{x:t,alpha:a},backend:e});if("leakyrelu"===n)return pb({inputs:{x:t},backend:e,attrs:{alpha:r}});if("sigmoid"===n)return Rx({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function vb(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{shape:i}=a,s=Tr.sizeFromShape(r.shape),o=Tr.inferFromImplicitShape(i,s),l=Tr.sizeFromShape(o);Tr.assert(s===l,(()=>`The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${s} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);let u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){let e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}var wb={kernelName:fa,backendName:"cpu",kernelFunc:vb};function kb(e){let{inputs:t,backend:n,attrs:a}=e,{a:r,b:i}=t,{transposeA:s,transposeB:o}=a;Fg([r,i],"matMul");let l=r.shape.length,u=i.shape.length,d=s?r.shape[l-2]:r.shape[l-1],p=o?i.shape[u-1]:i.shape[u-2],c=s?r.shape[l-1]:r.shape[l-2],h=o?i.shape[u-2]:i.shape[u-1],f=r.shape.slice(0,-2),m=i.shape.slice(0,-2),y=Tr.sizeFromShape(f),g=Tr.sizeFromShape(m),A=zl.assertAndGetBroadcastShape(r.shape.slice(0,-2),i.shape.slice(0,-2)).concat([c,h]);Tr.assert(d===p,(()=>`Error in matMul: inner shapes (${d}) and (${p}) of Tensors with shapes ${r.shape} and ${i.shape} and transposeA=${s} and transposeB=${o} must match.`));let x=o?[g,h,p]:[g,p,h],b=vb({inputs:{x:r},backend:n,attrs:{shape:s?[y,d,c]:[y,c,d]}}),v=vb({inputs:{x:i},backend:n,attrs:{shape:x}}),w=s?b.shape[1]:b.shape[2],k=s?b.shape[2]:b.shape[1],I=o?v.shape[1]:v.shape[2],S=Math.max(y,g),N=n.data.get(b.dataId).values,C=n.data.get(v.dataId).values,T=Tr.computeStrides(b.shape),E=Tr.computeStrides(v.shape),[R,$,M]=s?[T[0],1,T[1]]:[T[0],T[1],1],[_,F,O]=o?[1,E[1],E[0]]:[E[1],1,E[0]],P=k*I,D=js([S,k,I],b.dtype),z=D.values,L=n.blockSize;for(let e=0;e<S;e++){let t=e%y,n=e%g;for(let a=0;a<k;a+=L){let r=Math.min(a+L,k);for(let i=0;i<I;i+=L){let s=Math.min(i+L,I);for(let o=0;o<w;o+=L){let l=Math.min(o+L,w);for(let u=a;u<r;u++)for(let a=i;a<s;a++){let r=0;for(let e=o;e<l;e++)r+=N[t*R+u*$+e*M]*C[e*_+a*F+n*O];z[e*P+(u*I+a)]+=r}}}}}return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(A,D.dtype,D.values)}var Ib={kernelName:ft,backendName:"cpu",kernelFunc:kb},Sb={kernelName:cr,backendName:"cpu",kernelFunc:function(e){let t,n,a,{inputs:r,backend:i,attrs:s}=e,{a:o,b:l,bias:u,preluActivationWeights:d}=r,{transposeA:p,transposeB:c,activation:h,leakyreluAlpha:f}=s,m=[];t=kb({inputs:{a:o,b:l},attrs:{transposeA:p,transposeB:c},backend:i}),u&&(n=tA({inputs:{a:t,b:u},backend:i}),m.push(t),t=n),h&&(a=bb(i,t,h,d,f),m.push(t),t=a);for(let e of m)i.disposeIntermediateTensorInfo(e);return t}},Nb=uA(Ye,(e=>Math.acos(e))),Cb={kernelName:Ye,backendName:"cpu",kernelFunc:Nb},Tb=uA(Je,(e=>Math.acosh(e))),Eb={kernelName:Je,backendName:"cpu",kernelFunc:Tb},Rb={kernelName:et,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,a=t;Fg(t,"addN");let r=a.map((e=>n.data.get(e.dataId).values)),i=js(a[0].shape,a[0].dtype),s=i.values;for(let e=0;e<a.length;e++){let t=r[e];for(let e=0;e<s.length;e++)s[e]+=t[e]}return n.makeTensorInfo(i.shape,i.dtype,i.values)}},$b={kernelName:tt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,keepDims:s}=a;Fg(r,"all");let o=Tr.parseAxisParam(i,r.shape),l=o,u=Bf.getAxesPermutation(l,r.shape.length),d=r;null!=u&&(d=px({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Bf.getInnerMostAxes(l.length,r.shape.length)),Bf.assertAxesAreInnerMostDims("all",l,d.shape.length);let[p,c]=Bf.computeOutAndReduceShapes(d.shape,l),h=Tr.sizeFromShape(c),f=Tr.makeZerosTypedArray(Tr.sizeFromShape(p),d.dtype),m=n.data.get(d.dataId).values;for(let e=0;e<f.length;++e){let t=e*h,n=m[t];for(let e=0;e<h;++e){let a=m[t+e];n=n&&a}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(d);let y=n.makeTensorInfo(p,d.dtype,f);if(s){let e=vb({inputs:{x:y},backend:n,attrs:{shape:Bf.expandShapeToKeepDim(p,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}},Mb={kernelName:nt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,keepDims:s}=a;Fg(r,"any");let o=Tr.parseAxisParam(i,r.shape),l=o,u=Bf.getAxesPermutation(l,r.shape.length),d=r;null!=u&&(d=px({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Bf.getInnerMostAxes(l.length,r.shape.length)),Bf.assertAxesAreInnerMostDims("any",l,d.shape.length);let[p,c]=Bf.computeOutAndReduceShapes(d.shape,l),h=Tr.sizeFromShape(c),f=Tr.makeZerosTypedArray(Tr.sizeFromShape(p),d.dtype),m=n.data.get(d.dataId).values;for(let e=0;e<f.length;++e){let t=e*h,n=m[t];for(let e=0;e<h;++e){let a=m[t+e];n=n||a}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(d);let y=n.makeTensorInfo(p,d.dtype,f);if(s){let e=vb({inputs:{x:y},backend:n,attrs:{shape:Bf.expandShapeToKeepDim(p,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}},_b={kernelName:at,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i}=a;Fg(r,"argMax");let s=Tr.parseAxisParam(i,r.shape),o=Bf.getAxesPermutation(s,r.shape.length),l=r,u=[];null!=o&&(l=px({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),s=Bf.getInnerMostAxes(s.length,l.shape.length)),s=[s[0]],Bf.assertAxesAreInnerMostDims("argMax",s,l.shape.length);let[d,p]=Bf.computeOutAndReduceShapes(l.shape,s),c=Tr.sizeFromShape(d),h=Tr.makeZerosTypedArray(c,"int32"),f=Tr.sizeFromShape(p),m=n.data.get(l.dataId).values;for(let e=0;e<h.length;++e){let t=e*f,n=m[t],a=0;for(let e=0;e<f;++e){let r=m[t+e];r>n&&(n=r,a=e)}h[e]=a}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(d,"int32",h)}},Fb={kernelName:rt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i}=a;Fg(r,"argMin");let s=Tr.parseAxisParam(i,r.shape),o=Bf.getAxesPermutation(s,r.shape.length),l=r,u=[];null!=o&&(l=px({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),s=Bf.getInnerMostAxes(s.length,l.shape.length)),s=[s[0]],Bf.assertAxesAreInnerMostDims("argMin",s,l.shape.length);let[d,p]=Bf.computeOutAndReduceShapes(l.shape,s),c=Tr.sizeFromShape(d),h=Tr.makeZerosTypedArray(c,"int32"),f=Tr.sizeFromShape(p),m=n.data.get(l.dataId).values;for(let e=0;e<h.length;++e){let t=e*f,n=m[t],a=0;for(let e=0;e<f;++e){let r=m[t+e];r<n&&(n=r,a=e)}h[e]=a}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(d,"int32",h)}},Ob=uA(it,(e=>Math.asin(e))),Pb={kernelName:it,backendName:"cpu",kernelFunc:Ob},Db=uA(st,(e=>Math.asinh(e))),zb={kernelName:st,backendName:"cpu",kernelFunc:Db},Lb=uA(ot,(e=>Math.atan(e))),Wb={kernelName:ot,backendName:"cpu",kernelFunc:Lb},Bb=Wg(((e,t)=>Math.atan2(e,t))),Vb=Yg(ut,Bb),Ub={kernelName:ut,backendName:"cpu",kernelFunc:Vb},Gb=uA(lt,(e=>Math.atanh(e))),Hb={kernelName:lt,backendName:"cpu",kernelFunc:Gb};function jb(e,t,n,a,r,i){let s=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,d=r.effectiveFilterHeight,p=r.effectiveFilterWidth,c=r.padInfo.top,h=r.padInfo.left,f="max"===i?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=js(r.outShape,n),y=m.values,g=r.outShape[1]*r.outShape[2]*r.outShape[3],A=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let t=0;t<r.batchSize;++t){let n=t*g,m=t*a[0];for(let t=0;t<r.inChannels;++t)for(let g=0;g<r.outHeight;++g){let b=g*s-c,v=Math.max(0,b),w=Math.min(r.inHeight,d+b),k=n+g*A;for(let n=0;n<r.outWidth;++n){let s=n*o-h,d=Math.max(0,s),c=Math.min(r.inWidth,p+s),g=f,A=0,b=0;for(let n=v;n<w;n+=l){let r=m+n*a[1];for(let n=d;n<c;n+=u){let s=e[r+n*a[2]+t];"max"===i&&s>g?g=s:"avg"===i&&(A+=s,b++)}if(isNaN(g))break}y[k+n*x+t]="avg"===i?A/b:g}}}return m}function qb(e,t,n,a,r=!1,i=!1){let s=js(a.outShape,"int32"),o=a.strideHeight,l=a.strideWidth,u=a.dilationHeight,d=a.dilationWidth,p=a.effectiveFilterHeight,c=a.effectiveFilterWidth,h=a.padInfo.top,f=a.padInfo.left,m=js(t,n,e);for(let e=0;e<a.batchSize;++e)for(let t=0;t<a.inChannels;++t)for(let n=0;n<a.outHeight;++n){let y=n*o-h,g=y;for(;g<0;)g+=u;let A=Math.min(a.inHeight,p+y);for(let o=0;o<a.outWidth;++o){let p=o*l-f,h=p;for(;h<0;)h+=d;let x=Math.min(a.inWidth,c+p),b=Number.NEGATIVE_INFINITY,v=-1;for(let n=g;n<A;n+=u){let s=n-y;for(let o=h;o<x;o+=d){let l=o-p,u=m.get(e,n,o,t);u>b&&(b=u,v=r?i?((e*a.inHeight+n)*a.inWidth+o)*a.inChannels+t:(n*a.inWidth+o)*a.inChannels+t:s*c+l)}}s.set(v,e,n,o,t)}}return s}function Xb(e,t,n,a,r,i){let s=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,d=r.dilationHeight,p=r.dilationWidth,c=r.effectiveFilterDepth,h=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,y=r.padInfo.top,g=r.padInfo.left,A="max"===i?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=js(r.outShape,n),b=x.values,v=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],w=r.outShape[2]*r.outShape[3]*r.outShape[4],k=r.outShape[3]*r.outShape[4],I=r.outShape[4];for(let t=0;t<r.batchSize;++t){let n=t*v,x=t*a[0];for(let t=0;t<r.inChannels;++t)for(let v=0;v<r.outDepth;++v){let S=v*s-m,N=S;for(;N<0;)N+=u;let C=Math.min(r.inDepth,c+S),T=n+v*w;for(let n=0;n<r.outHeight;++n){let s=n*o-y,c=s;for(;c<0;)c+=d;let m=Math.min(r.inHeight,h+s),v=T+n*k;for(let n=0;n<r.outWidth;++n){let s=n*l-g,o=s;for(;o<0;)o+=p;let h=Math.min(r.inWidth,f+s),y=v+n*I,w=A,k=0,S=0;for(let n=N;n<C;n+=u){let r=x+n*a[1];for(let n=c;n<m;n+=d){let s=r+n*a[2];for(let n=o;n<h;n+=p){let r=e[s+n*a[3]+t];if("max"===i&&r>w?w=r:"avg"===i&&(k+=r,S++),isNaN(w))break}if(isNaN(w))break}if(isNaN(w))break}b[y+t]="avg"===i?k/Math.max(S,1):w}}}}return x}var Kb={kernelName:dt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t;Fg(r,"avgPool");let{filterSize:i,strides:s,pad:o,dimRoundingMode:l}=a;Tr.assert(Bf.eitherStridesOrDilationsAreOne(s,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${s} and dilations '1'`));let u,d=Bf.computePool2DInfo(r.shape,i,s,1,o,l);if(1===d.filterWidth&&1===d.filterHeight&&Tr.arraysEqual(d.inShape,d.outShape))u=Gg({inputs:{x:r},backend:n});else{let e=n.data.get(r.dataId).values,t=Tr.computeStrides(r.shape),a=jb(e,r.shape,r.dtype,t,d,"avg");u=n.makeTensorInfo(d.outShape,r.dtype,a.values)}return u}},Zb={kernelName:ct,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:i,strides:s,pad:o,dimRoundingMode:l,dataFormat:u}=a;Fg(r,"avgPool3d");let d=Bf.computePool3DInfo(r.shape,i,s,1,o,l,u),p=Xb(n.data.get(r.dataId).values,r.shape,r.dtype,Tr.computeStrides(r.shape),d,"avg");return n.makeTensorInfo(p.shape,"float32",p.values)}},Yb={kernelName:ht,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,input:i}=t,{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=a;Fg([r,i],"avgPool3DGrad");let d=Bf.computePool3DInfo(i.shape,s,o,1,l,u),p=d.strideDepth,c=d.strideHeight,h=d.strideWidth,f=d.filterDepth,m=d.filterHeight,y=d.filterWidth,g=d.dilationDepth,A=d.dilationHeight,x=d.dilationWidth,b=d.effectiveFilterDepth,v=d.effectiveFilterHeight,w=d.effectiveFilterWidth,k=b-1-d.padInfo.front,I=w-1-d.padInfo.left,S=v-1-d.padInfo.top,N=js(i.shape,"float32"),C=1/(f*m*y),T=n.bufferSync(r);for(let e=0;e<d.batchSize;++e)for(let t=0;t<d.inChannels;++t)for(let n=0;n<d.inDepth;++n)for(let a=0;a<d.inHeight;++a)for(let r=0;r<d.inWidth;++r){let i=n-k,s=a-S,o=r-I,l=0;for(let n=0;n<b;n+=g){let a=(i+n)/p;if(!(a<0||a>=d.outDepth||Math.floor(a)!==a))for(let n=0;n<v;n+=A){let r=(s+n)/c;if(!(r<0||r>=d.outHeight||Math.floor(r)!==r))for(let n=0;n<w;n+=x){let i=(o+n)/h;i<0||i>=d.outWidth||Math.floor(i)!==i||(l+=T.get(e,a,r,i,t))}}}N.set(l*C,e,n,a,r,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},Jb={kernelName:pt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,input:i}=t,s=i;Fg([r,i],"avgPoolGrad");let{filterSize:o,strides:l,pad:u}=a,d=Bf.computePool2DInfo(s.shape,o,l,1,u),p=d.strideHeight,c=d.strideWidth,h=d.filterHeight,f=d.filterWidth,m=d.dilationHeight,y=d.dilationWidth,g=d.effectiveFilterHeight,A=d.effectiveFilterWidth,x=A-1-d.padInfo.left,b=g-1-d.padInfo.top,v=js(s.shape,"float32"),w=1/(h*f),k=n.data.get(r.dataId).values,I=js(r.shape,"float32",k);for(let e=0;e<d.batchSize;++e)for(let t=0;t<d.inChannels;++t)for(let n=0;n<d.inHeight;++n)for(let a=0;a<d.inWidth;++a){let r=n-b,i=a-x,s=0;for(let n=0;n<g;n+=m){let a=(r+n)/p;if(!(a<0||a>=d.outHeight||Math.floor(a)!==a))for(let n=0;n<A;n+=y){let r=(i+n)/c;r<0||r>=d.outWidth||Math.floor(r)!==r||(s+=I.get(e,a,r,t))}}v.set(s*w,e,n,a,t)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},Qb={kernelName:ln,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,scale:i,offset:s,mean:o,variance:l}=t;Tr.assert(o.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Tr.assert(null==s||o.shape.length===s.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Tr.assert(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),Fg([r,o,l,i,s],"batchNorm");let{varianceEpsilon:u}=a;null==u&&(u=.001);let d=n.data.get(r.dataId).values,p=n.data.get(o.dataId).values,c=n.data.get(l.dataId).values,h=i?n.data.get(i.dataId).values:new Float32Array([1]),f=s?n.data.get(s.dataId).values:new Float32Array([0]),m=new Float32Array(d.length),y=f.length,g=h.length,A=c.length,x=p.length,b=0,v=0,w=0,k=0;for(let e=0;e<d.length;++e)m[e]=f[b++]+(d[e]-p[v++])*h[w++]/Math.sqrt(c[k++]+u),b>=y&&(b=0),v>=x&&(v=0),w>=g&&(w=0),k>=A&&(k=0);return n.makeTensorInfo(r.shape,r.dtype,m)}},ev={kernelName:mt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:i,crops:s}=a;Fg([r],"batchToSpaceND");let o=i.reduce(((e,t)=>e*t)),l=Bf.getReshaped(r.shape,i,o),u=Bf.getPermuted(l.length,i.length),d=Bf.getReshapedPermuted(r.shape,i,o),p=Bf.getSliceBeginCoords(s,i.length),c=Bf.getSliceSize(d,s,i.length),h=vb({inputs:{x:r},backend:n,attrs:{shape:l}}),f=px({inputs:{x:h},backend:n,attrs:{perm:u}}),m=vb({inputs:{x:f},backend:n,attrs:{shape:d}}),y=_x({inputs:{x:m},backend:n,attrs:{begin:p,size:c}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),y}},tv={kernelName:yt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,weights:i}=t,{size:s}=a,o=aA(n.data.get(r.dataId).values,n.data.get(i.dataId).values,i.dtype,i.shape,s);return n.makeTensorInfo([s],i.dtype,o)}},nv={kernelName:xt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{s0:a,s1:r}=t,i=n.data.get(a.dataId).values,s=n.data.get(r.dataId).values,o=Bf.assertAndGetBroadcastShape(Array.from(i),Array.from(s));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},av=uA(wt,((e,t)=>{let n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),rv={kernelName:wt,backendName:"cpu",kernelFunc:av},iv={kernelName:It,backendName:"cpu",kernelFunc:e=>{let{x:t}=e.inputs,n=e.backend,a=new Float32Array(Tr.sizeFromShape(t.shape)),r=n.data.get(t.dataId),i=r.complexTensorInfos.real,s=r.complexTensorInfos.imag,o=n.data.get(i.dataId).values,l=n.data.get(s.dataId).values;for(let e=0;e<o.length;e++){let t=o[e],n=l[e];a[e]=Math.hypot(t,n)}return n.makeOutput(a,t.shape,"float32")}};function sv(e){let{inputs:t,backend:n}=e,{input:a}=t,r=n.data.get(a.dataId).complexTensorInfos.imag,i=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,i)}var ov={kernelName:mn,backendName:"cpu",kernelFunc:sv};function lv(e){let{inputs:t,backend:n,attrs:a}=e,{axis:r}=a,i=Tr.parseAxisParam(r,t[0].shape)[0],s=t.map((e=>e.shape));Bf.assertParamsConsistent(s,i);let o=Bf.computeOutShape(t.map((e=>e.shape)),i);if(0===Tr.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);let l=t.filter((e=>Tr.sizeFromShape(e.shape)>0));if(1===l.length)return Gg({inputs:{x:l[0]},backend:n});if("complex64"===l[0].dtype){let e=l.map((e=>jg({inputs:{input:e},backend:n}))),t=l.map((e=>sv({inputs:{input:e},backend:n}))),a=lv({inputs:e,backend:n,attrs:{axis:i}}),r=lv({inputs:t,backend:n,attrs:{axis:i}}),s=Bg({inputs:{real:a,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),s}let u=l.map((e=>{let t=[-1,Tr.sizeFromShape(e.shape.slice(i))];return vb({inputs:{x:e},backend:n,attrs:{shape:t}})})),d=u.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));o=Bf.computeOutShape(u.map((e=>e.shape)),1);let p=1===u[0].shape[0],c=fA(d,o,t[0].dtype,p),h=Bf.computeOutShape(l.map((e=>e.shape)),i),f=n.makeTensorInfo(h,t[0].dtype,c);return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}var uv={kernelName:St,backendName:"cpu",kernelFunc:lv};function dv(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i}=t,{strides:s,pad:o,dataFormat:l,dilations:u,dimRoundingMode:d}=a;Fg([r,i],"conv2d");let p=Bf.convertConv2DDataFormat(l),c=Bf.computeConv2DInfo(r.shape,i.shape,s,u,o,d,!1,p),h=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,y=c.dilationWidth,g=c.padInfo.left,A=c.padInfo.top,x="channelsLast"===c.dataFormat,b=new oi(c.outShape,r.dtype),v=Tr.computeStrides(r.shape),w=Tr.computeStrides(i.shape),k=v[0],I=x?v[1]:v[2],S=x?v[2]:1,N=x?1:v[1],C=b.strides[0],T=x?b.strides[1]:b.strides[2],E=x?b.strides[2]:1,R=x?1:b.strides[1],$=n.data.get(r.dataId).values,M=n.data.get(i.dataId).values,_=b.values;for(let e=0;e<c.batchSize;++e){let t=e*k,n=e*C;for(let e=0;e<c.outHeight;++e){let a=n+e*T,r=e*c.strideHeight-A;for(let e=0;e<h;++e){let n=r+e*m;if(n<0||n>=c.inHeight)continue;let i=e*w[0],s=t+n*I;for(let e=0;e<c.outWidth;++e){let t=a+e*E,n=e*c.strideWidth-g;for(let e=0;e<f;++e){let a=n+e*y;if(a<0||a>=c.inWidth)continue;let r=s+a*S,o=i+e*w[1];for(let e=0;e<c.inChannels;++e){let n=$[r+e*N];for(let e=0;e<c.outChannels;++e)_[t+e*R]+=n*M[o+e];o+=c.outChannels}}}}}}return n.makeTensorInfo(b.shape,b.dtype,_)}var pv={kernelName:Nt,backendName:"cpu",kernelFunc:dv},cv={kernelName:Ct,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,dy:i}=t,{strides:s,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:d}=a;Fg([r,i],"conv2dBackpropFilter");let p=Bf.convertConv2DDataFormat(l),c=Bf.computeConv2DInfo(r.shape,d,s,1,o,u,!1,p),{strideHeight:h,strideWidth:f,filterHeight:m,filterWidth:y}=c,g="channelsLast"===c.dataFormat,A=new oi(c.filterShape,"float32"),x=c.padInfo.left,b=c.padInfo.top,v=n.data.get(r.dataId).values,w=n.data.get(i.dataId).values,k=new oi(r.shape,r.dtype,v),I=new oi(i.shape,i.dtype,w);for(let e=0;e<m;++e){let t=Math.max(0,Math.ceil((b-e)/h)),n=Math.min(c.outHeight,(c.inHeight+b-e)/h);for(let a=0;a<y;++a){let r=Math.max(0,Math.ceil((x-a)/f)),i=Math.min(c.outWidth,(c.inWidth+x-a)/f);for(let s=0;s<c.inChannels;++s)for(let o=0;o<c.outChannels;++o){let l=0;for(let u=0;u<c.batchSize;++u)for(let d=t;d<n;++d){let t=e+d*h-b;for(let e=r;e<i;++e){let n=a+e*f-x;l+=g?k.get(u,t,n,s)*I.get(u,d,e,o):k.get(u,s,t,n)*I.get(u,o,d,e)}}A.set(l,e,a,s,o)}}}return n.makeTensorInfo(A.shape,A.dtype,A.values)}},hv={kernelName:Tt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:i}=t,{inputShape:s,strides:o,pad:l,dataFormat:u,dimRoundingMode:d}=a;Fg([r,i],"conv2dBackpropInput");let p=Tr.computeStrides(i.shape),c=Tr.computeStrides(r.shape),h=Bf.convertConv2DDataFormat(u),f=Bf.computeConv2DInfo(s,i.shape,o,1,l,d,!1,h),m=new oi(f.inShape,"float32"),y=m.values,g=n.data.get(r.dataId).values,A=n.data.get(i.dataId).values,[x,b,v]=p,{batchSize:w,filterHeight:k,filterWidth:I,inChannels:S,inHeight:N,inWidth:C,outChannels:T,outHeight:E,outWidth:R,strideHeight:$,strideWidth:M}=f;h=f.dataFormat;let _=k-1-f.padInfo.top,F=I-1-f.padInfo.left,O="channelsLast"===h,P=m.strides[0],D=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,L=O?1:m.strides[1],W=c[0],B=O?c[1]:c[2],V=O?c[2]:1,U=O?1:c[1];for(let e=0;e<w;++e)for(let t=0;t<S;++t)for(let n=0;n<N;++n){let a=n-_,r=Math.max(0,Math.ceil(a/$)),i=Math.min(E,(k+a)/$);for(let s=0;s<C;++s){let o=s-F,l=Math.max(0,Math.ceil(o/M)),u=Math.min(R,(I+o)/M),d=0;for(let n=r;n<i;++n){let r=n*$-a;for(let a=l;a<u;++a){let i=W*e+B*n+V*a,s=x*(k-1-r)+b*(I-1-(a*M-o))+v*t;for(let e=0;e<T;++e)d+=g[i+U*e]*A[s+e]}}y[P*e+D*n+z*s+L*t]=d}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},fv={kernelName:Et,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i}=t,{strides:s,pad:o,dilations:l}=a;Fg([r,i],"conv3d");let u=Bf.computeConv3DInfo(r.shape,i.shape,s,l,o),{filterDepth:d,filterHeight:p,filterWidth:c,dilationDepth:h,dilationHeight:f,dilationWidth:m,padInfo:y}=u,g=y.front,A=y.left,x=y.top,b=new oi(u.outShape,r.dtype),v=n.data.get(r.dataId).values,w=n.data.get(i.dataId).values,k=b.values,I=Tr.computeStrides(r.shape),S=Tr.computeStrides(i.shape);for(let e=0;e<u.batchSize;++e){let t=e*I[0],n=e*b.strides[0];for(let e=0;e<u.outDepth;++e){let a=n+e*b.strides[1],r=e*u.strideDepth-g;for(let e=0;e<d;++e){let n=r+e*h;if(n<0||n>=u.inDepth)continue;let i=e*S[0],s=t+n*I[1];for(let e=0;e<u.outHeight;++e){let t=a+e*b.strides[2],n=e*u.strideHeight-x;for(let e=0;e<p;++e){let a=n+e*f;if(a<0||a>=u.inHeight)continue;let r=i+e*S[1],o=s+a*I[2];for(let e=0;e<u.outWidth;++e){let n=t+e*u.outChannels,a=e*u.strideWidth-A;for(let e=0;e<c;++e){let t=a+e*m;if(t<0||t>=u.inWidth)continue;let i=r+e*S[2],s=o+t*u.inChannels,l=i;for(let e=0;e<u.inChannels;++e){let t=v[s+e];for(let e=0;e<u.outChannels;++e)k[n+e]+=t*w[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},mv={kernelName:Rt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,dy:i}=t,{strides:s,pad:o,filterShape:l}=a;Fg([r,i],"conv3dBackpropFilterV2");let u=Tr.computeStrides(r.shape),d=Tr.computeStrides(i.shape),p=Bf.computeConv3DInfo(r.shape,l,s,1,o),c=p.strideDepth,h=p.strideHeight,f=p.strideWidth,m=p.filterDepth,y=p.filterHeight,g=p.filterWidth,A=new oi(p.filterShape,"float32"),x=A.values,[b,v,w,k]=A.strides,I=n.data.get(i.dataId).values,[S,N,C,T]=d,E=n.data.get(r.dataId).values,[R,$,M,_]=u,F=p.padInfo.front,O=p.padInfo.left,P=p.padInfo.top;for(let e=0;e<m;++e){let t=Math.max(0,Math.ceil((F-e)/c)),n=Math.min(p.outDepth,(p.inDepth+F-e)/c),a=e*b;for(let r=0;r<y;++r){let i=Math.max(0,Math.ceil((P-r)/h)),s=Math.min(p.outHeight,(p.inHeight+P-r)/h),o=r*v+a;for(let a=0;a<g;++a){let l=Math.max(0,Math.ceil((O-a)/f)),u=Math.min(p.outWidth,(p.inWidth+O-a)/f),d=a*w+o;for(let o=0;o<p.inChannels;++o){let m=o*k+d;for(let d=0;d<p.outChannels;++d){let y=0;for(let m=0;m<p.batchSize;++m){let p=m*R,g=m*S;for(let m=t;m<n;++m){let t=(e+m*c-F)*$+p,n=m*N+g;for(let e=i;e<s;++e){let i=(r+e*h-P)*M+t,s=e*C+n;for(let e=l;e<u;++e){let t=e*T+s;y+=E[(a+e*f-O)*_+i+o]*I[t+d]}}}}x[m+d]=y}}}}}return n.makeTensorInfo(A.shape,A.dtype,A.values)}},yv={kernelName:$t,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:i}=t,{pad:s,strides:o,inputShape:l}=a;Fg([r],"conv3dBackpropInputV2");let u=Tr.computeStrides(r.shape),d=Tr.computeStrides(i.shape),p=Bf.computeConv3DInfo(l,i.shape,o,1,s),c=new oi(p.inShape,"float32"),h=c.values,[f,m,y,g]=c.strides,A=n.data.get(r.dataId).values,[x,b,v,w]=u,k=n.data.get(i.dataId).values,[I,S,N,C]=d,{batchSize:T,filterDepth:E,filterHeight:R,filterWidth:$,inChannels:M,inDepth:_,inHeight:F,inWidth:O,outChannels:P,outDepth:D,outHeight:z,outWidth:L,strideDepth:W,strideHeight:B,strideWidth:V}=p,U=E-1-p.padInfo.front,G=R-1-p.padInfo.top,H=$-1-p.padInfo.left;for(let e=0;e<T;++e)for(let t=0;t<M;++t)for(let n=0;n<_;++n){let a=n-U,r=Math.max(0,Math.ceil(a/W)),i=Math.min(D,(E+a)/W);for(let s=0;s<F;++s){let o=s-G,l=Math.max(0,Math.ceil(o/B)),u=Math.min(z,(R+o)/B);for(let d=0;d<O;++d){let p=d-H,c=Math.max(0,Math.ceil(p/V)),T=Math.min(L,($+p)/V),M=0;for(let n=r;n<i;++n){let r=n*W-a;for(let a=l;a<u;++a){let i=a*B-o;for(let s=c;s<T;++s){let o=x*e+b*n+v*a+w*s,l=I*(E-1-r)+S*(R-1-i)+N*($-1-(s*V-p))+C*t;for(let e=0;e<P;++e)M+=A[o+e]*k[l+e]}}}h[f*e+m*n+y*s+g*d+t]=M}}}return n.makeTensorInfo(c.shape,c.dtype,c.values)}},gv=uA(Mt,(e=>Math.cos(e))),Av={kernelName:Mt,backendName:"cpu",kernelFunc:gv},xv=uA(_t,(e=>Math.cosh(e))),bv={kernelName:_t,backendName:"cpu",kernelFunc:xv},vv={kernelName:Pt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{image:r,boxes:i,boxInd:s}=t,{cropSize:o,method:l,extrapolationValue:u}=a,[d,p,c,h]=r.shape,f=i.shape[0],[m,y]=o,g=js([f,m,y,h],"float32"),A=n.data.get(i.dataId).values,x=n.data.get(s.dataId).values,b=n.data.get(r.dataId).values,v=Tr.computeStrides(r.shape),w=Tr.computeStrides(g.shape);for(let e=0;e<f;e++){let t=4*e,n=A[t],a=A[t+1],r=A[t+2],i=A[t+3],s=x[e];if(s>=d)continue;let o=m>1?(r-n)*(p-1)/(m-1):0,f=y>1?(i-a)*(c-1)/(y-1):0;for(let t=0;t<m;t++){let d=m>1?n*(p-1)+t*o:.5*(n+r)*(p-1);if(d<0||d>p-1)for(let n=0;n<y;n++)for(let a=0;a<h;a++){let r=a+n*w[2]+t*w[1]+e*w[0];g.values[r]=u}else if("bilinear"===l){let n=Math.floor(d),r=Math.ceil(d),o=d-n;for(let l=0;l<y;l++){let d=y>1?a*(c-1)+l*f:.5*(a+i)*(c-1);if(d<0||d>c-1){for(let n=0;n<h;n++){let a=n+l*w[2]+t*w[1]+e*w[0];g.values[a]=u}continue}let p=Math.floor(d),m=Math.ceil(d),A=d-p;for(let a=0;a<h;a++){let i=a+p*v[2]+n*v[1]+s*v[0],u=b[i];i=a+m*v[2]+n*v[1]+s*v[0];let d=b[i];i=a+p*v[2]+r*v[1]+s*v[0];let c=b[i];i=a+m*v[2]+r*v[1]+s*v[0];let h=u+(d-u)*A,f=c+(b[i]-c)*A;i=a+l*w[2]+t*w[1]+e*w[0],g.values[i]=h+(f-h)*o}}}else for(let n=0;n<y;++n){let r=y>1?a*(c-1)+n*f:.5*(a+i)*(c-1);if(r<0||r>c-1){for(let a=0;a<h;a++){let r=a+n*w[2]+t*w[1]+e*w[0];g.values[r]=u}continue}let o=Math.round(r),l=Math.round(d);for(let a=0;a<h;a++){let r=a+o*v[2]+l*v[1]+s*v[0],i=a+n*w[2]+t*w[1]+e*w[0];g.values[i]=b[r]}}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},wv={kernelName:Ft,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,exclusive:s,reverse:o}=a;Fg(r,"cumprod");let l=Bf.getAxesPermutation([i],r.shape.length),u=r;null!=l&&(u=px({inputs:{x:r},backend:n,attrs:{perm:l}}));let d=Bf.getInnerMostAxes(1,r.shape.length)[0];if(d!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${d}`);let p=bi(u.dtype,"int32"),c=Tr.makeOnesTypedArray(Tr.sizeFromShape(u.shape),p),h=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<h.length;e+=f)for(let t=0;t<f;t++){let n=m(e,t);if(0===t)c[n]=s?1:h[n];else{let a=m(e,t-1);c[n]=s?h[a]*c[a]:h[n]*c[a]}}let y=n.makeTensorInfo(u.shape,p,c);if(null!=l){let e=px({inputs:{x:y},backend:n,attrs:{perm:Bf.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(u),e}return y}},kv={kernelName:Ot,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,exclusive:s,reverse:o}=a;Fg(r,"cumsum");let l=Bf.getAxesPermutation([i],r.shape.length),u=r;null!=l&&(u=px({inputs:{x:r},backend:n,attrs:{perm:l}}));let d=Bf.getInnerMostAxes(1,r.shape.length)[0];if(d!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${d}`);let p=bi(u.dtype,"int32"),c=Tr.makeZerosTypedArray(Tr.sizeFromShape(u.shape),p),h=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<h.length;e+=f)for(let t=0;t<f;t++){let n=m(e,t);if(0===t)c[n]=s?0:h[n];else{let a=m(e,t-1);c[n]=s?h[a]+c[a]:h[n]+c[a]}}let y=n.makeTensorInfo(u.shape,p,c);if(null!=l){let e=px({inputs:{x:y},backend:n,attrs:{perm:Bf.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(u),e}return y}},Iv={kernelName:Dt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,weights:i}=t,{size:s,binaryOutput:o}=a;if(1===r.shape.length){let e=aA(n.data.get(r.dataId).values,n.data.get(i.dataId).values,i.dtype,i.shape,s);return n.makeTensorInfo([s],i.dtype,e)}if(2===r.shape.length){let e=rA(n.bufferSync(r),n.bufferSync(i),s,o);return n.makeTensorInfo(e.shape,i.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},Sv={kernelName:zt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockSize:i,dataFormat:s}=a;Tr.assert("NHWC"===s,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${s}`));let o=r.shape[0],l=r.shape[1],u=r.shape[2],d=r.shape[3],p=l*i,c=u*i,h=d/(i*i),f=n.data.get(r.dataId).values,m=new Float32Array(o*p*c*h),y=0;for(let e=0;e<o;++e)for(let t=0;t<p;++t){let n=Math.floor(t/i),a=t%i;for(let t=0;t<c;++t){let r=Math.floor(t/i),s=(a*i+t%i)*h;for(let t=0;t<h;++t){let a=t+s+d*(r+u*(n+l*e));m[y++]=f[a]}}}return n.makeTensorInfo([o,p,c,h],r.dtype,m)}};function Nv(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i}=t,{strides:s,pad:o,dilations:l,dimRoundingMode:u}=a;Fg([r,i],"depthwiseConv2DNative");let d=Tr.computeStrides(r.shape),p=Tr.computeStrides(i.shape),c=l;null==c&&(c=[1,1]),Tr.assert(Bf.eitherStridesOrDilationsAreOne(s,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${s} and dilations '${c}'`));let h=Bf.computeConv2DInfo(r.shape,i.shape,s,c,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:y,dilationWidth:g,padInfo:A}=h,x=A.left,b=A.top,v=h.outChannels/h.inChannels,w=new oi(h.outShape,r.dtype),k=n.data.get(r.dataId).values,I=n.data.get(i.dataId).values,S=w.values;for(let e=0;e<h.batchSize;++e){let t=e*d[0],n=e*w.strides[0];for(let e=0;e<h.outHeight;++e){let a=n+e*w.strides[1],r=e*h.strideHeight-b;for(let e=0;e<f;++e){let n=r+e*y;if(n<0||n>=h.inHeight)continue;let i=e*p[0],s=t+n*d[1];for(let e=0;e<h.outWidth;++e){let t=a+e*w.strides[2],n=e*h.strideWidth-x;for(let e=0;e<m;++e){let a=n+e*g;if(a<0||a>=h.inWidth)continue;let r=i+e*p[1],o=s+a*h.inChannels,l=t,u=r;for(let e=0;e<h.inChannels;++e){let t=k[o+e];for(let e=0;e<v;++e)S[l+e]+=t*I[u+e];l+=v,u+=v}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}var Cv={kernelName:Lt,backendName:"cpu",kernelFunc:Nv},Tv={kernelName:Wt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,dy:i}=t,{strides:s,dilations:o,pad:l,dimRoundingMode:u,filterShape:d}=a;Fg([r,i],"depthwiseConv2dNativeBackpropFilter");let p=Bf.computeConv2DInfo(r.shape,d,s,o,l,u,!0),{strideHeight:c,strideWidth:h,filterHeight:f,filterWidth:m}=p,y=new oi(p.filterShape,"float32"),g=p.padInfo.left,A=p.padInfo.top,x=p.outChannels/p.inChannels,b=n.data.get(r.dataId).values,v=new oi(r.shape,r.dtype,b),w=n.data.get(i.dataId).values,k=new oi(i.shape,i.dtype,w);for(let e=0;e<f;++e){let t=Math.max(0,Math.ceil((A-e)/c)),n=Math.min(p.outHeight,(p.inHeight+A-e)/c);for(let a=0;a<m;++a){let r=Math.max(0,Math.ceil((g-a)/h)),i=Math.min(p.outWidth,(p.inWidth+g-a)/h);for(let s=0;s<p.outChannels;++s){let o=Math.trunc(s/x),l=s%x,u=0;for(let l=0;l<p.batchSize;++l)for(let d=t;d<n;++d){let t=e+d*c-A;for(let e=r;e<i;++e){let n=a+e*h-g;u+=v.get(l,t,n,o)*k.get(l,d,e,s)}}y.set(u,e,a,o,l)}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},Ev={kernelName:Bt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:i}=t,{strides:s,dilations:o,pad:l,dimRoundingMode:u,inputShape:d}=a;Fg([r,i],"depthwiseConv2DNativeBackpropInput");let p=Tr.computeStrides(r.shape),c=Tr.computeStrides(i.shape),h=Bf.computeConv2DInfo(d,i.shape,s,o,l,u,!0),f=new oi(h.inShape,"float32"),m=f.values,[y,g,A]=f.strides,x=n.data.get(r.dataId).values,[b,v,w]=p,k=n.data.get(i.dataId).values,[I,S,N]=c,{batchSize:C,filterHeight:T,filterWidth:E,inChannels:R,inHeight:$,inWidth:M,outChannels:_,outHeight:F,outWidth:O,strideHeight:P,strideWidth:D}=h,z=T-1-h.padInfo.top,L=E-1-h.padInfo.left,W=_/R;for(let e=0;e<C;++e)for(let t=0;t<R;++t)for(let n=0;n<$;++n){let a=n-z,r=Math.max(0,Math.ceil(a/P)),i=Math.min(F,(T+a)/P);for(let s=0;s<M;++s){let o=s-L,l=Math.max(0,Math.ceil(o/D)),u=Math.min(O,(E+o)/D),d=0;for(let n=r;n<i;++n){let r=n*P-a;for(let a=l;a<u;++a){let i=b*e+v*n+w*a,s=I*(T-1-r)+S*(E-1-(a*D-o))+N*t;for(let e=0;e<W;++e)d+=x[i+(t*W+e)]*k[s+e]}}m[y*e+g*n+A*s+t]=d}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},Rv={kernelName:Vt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:a}=t,r=Tr.sizeFromShape(a.shape),i=n.data.get(a.dataId).values,s=js([r,r],a.dtype),o=s.values;for(let e=0;e<i.length;e++)o[e*r+e]=i[e];let l=[...a.shape,...a.shape];return n.makeTensorInfo(l,s.dtype,s.values)}},$v={kernelName:Ut,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{let{x:a,filter:r}=e,{strides:i,pad:s,dilations:o}=n,l=t,u=l.data.get(a.dataId).values,d=a.shape.length,p=l.data.get(r.dataId).values,c=r.shape.length,{batchSize:h,inHeight:f,inWidth:m,inChannels:y,outHeight:g,outWidth:A,padInfo:x,strideHeight:b,strideWidth:v,filterHeight:w,filterWidth:k,dilationHeight:I,dilationWidth:S,outShape:N}=Bf.computeDilation2DInfo(a.shape,r.shape,i,s,"NHWC",o),C=Tr.sizeFromShape(N),T=N.length,E=Tr.getArrayFromDType(a.dtype,C);for(let e=0;e<h;++e)for(let t=0;t<g;++t){let n=t*b-x.top;for(let i=0;i<A;++i){let s=i*v-x.left;for(let o=0;o<y;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<w;++t){let i=n+t*I;if(i>=0&&i<f)for(let n=0;n<k;++n){let h=s+n*S;if(h>=0&&h<m){let s=Tr.locToIndex([e,i,h,o],d,Tr.computeStrides(a.shape)),f=Tr.locToIndex([t,n,o],c,Tr.computeStrides(r.shape)),m=u[s]+p[f];m>l&&(l=m)}}}E[Tr.locToIndex([e,t,i,o],T,Tr.computeStrides(N))]=l}}}return{dataId:l.write(Tr.toTypedArray(E,a.dtype),N,a.dtype),shape:N,dtype:a.dtype}}},Mv={kernelName:Ht,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{let{x:a,filter:r,dy:i}=e,{strides:s,pad:o,dilations:l}=n,u=t,d=Tr.toNestedArray(a.shape,u.data.get(a.dataId).values),p=Tr.toNestedArray(r.shape,u.data.get(r.dataId).values),{batchSize:c,inHeight:h,inWidth:f,inChannels:m,outHeight:y,outWidth:g,padInfo:A,strideHeight:x,strideWidth:b,filterHeight:v,filterWidth:w,dilationHeight:k,dilationWidth:I,outShape:S}=Bf.computeDilation2DInfo(a.shape,r.shape,s,o,"NHWC",l);Tr.assert(i.rank===S.length,(()=>`Error in ${Ht}, dy must have the same rank as output ${S.length}, but got ${i.rank}`));let N=Tr.toNestedArray(S,u.data.get(i.dataId).values),C=Tr.makeZerosNestedTypedArray(r.shape,r.dtype);for(let e=0;e<c;++e)for(let t=0;t<y;++t){let n=t*x-A.top;for(let a=0;a<g;++a){let r=a*b-A.left;for(let i=0;i<m;++i){let s=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<v;++t){let a=n+t*k;if(a>=0&&a<h)for(let n=0;n<w;++n){let u=r+n*I;if(u>=0&&u<f){let r=d[e][a][u][i]+p[t][n][i];r>s&&(s=r,o=t,l=n)}}}C[o][l][i]+=N[e][t][a][i]}}}return{dataId:u.write(Tr.toTypedArray(C,a.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},_v={kernelName:Gt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{let{x:a,filter:r,dy:i}=e,{strides:s,pad:o,dilations:l}=n,u=t,d=Tr.toNestedArray(a.shape,u.data.get(a.dataId).values),p=Tr.toNestedArray(r.shape,u.data.get(r.dataId).values),{batchSize:c,inHeight:h,inWidth:f,inChannels:m,outHeight:y,outWidth:g,padInfo:A,strideHeight:x,strideWidth:b,filterHeight:v,filterWidth:w,dilationHeight:k,dilationWidth:I,outShape:S}=Bf.computeDilation2DInfo(a.shape,r.shape,s,o,"NHWC",l);Tr.assert(i.rank===S.length,(()=>`Error in ${Gt}, dy must have the same rank as output ${S.length}, but got ${i.rank}`));let N=Tr.toNestedArray(S,u.data.get(i.dataId).values),C=Tr.makeZerosNestedTypedArray(a.shape,a.dtype);for(let e=0;e<c;++e)for(let t=0;t<y;++t){let n=t*x-A.top;for(let a=0;a<g;++a){let r=a*b-A.left;for(let i=0;i<m;++i){let s=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=r<0?0:r;for(let t=0;t<v;++t){let a=n+t*k;if(a>=0&&a<h)for(let n=0;n<w;++n){let u=r+n*I;if(u>=0&&u<f){let r=d[e][a][u][i]+p[t][n][i];r>s&&(s=r,o=a,l=u)}}}C[e][o][l][i]+=N[e][t][a][i]}}}return{dataId:u.write(Tr.toTypedArray(C,a.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},Fv={kernelName:jt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{image:r}=t,{canvas:i,options:s}=a,{contextOptions:o,imageOptions:l}=s||{},u=(null==l?void 0:l.alpha)||1,d=(null==o?void 0:o.contextType)||"2d";if("2d"!==d)throw new Error(`Context type ${o.contextType} is not supported by the CPU backend.`);let p=i.getContext(d,(null==o?void 0:o.contextAttributes)||{});if(null==p)throw new Error(`Could not get the context with ${d} type.`);let[c,h]=r.shape.slice(0,2),f=2===r.shape.length?1:r.shape[2],m=n.data.get(r.dataId).values,y="float32"===r.dtype?255:1,g=new Uint8ClampedArray(h*c*4);for(let e=0;e<c*h;++e){let t=[0,0,0,255*u];for(let n=0;n<f;n++){let a=m[e*f+n];if("float32"===r.dtype){if(a<0||a>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${a}.`)}else if("int32"===r.dtype&&(a<0||a>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${a}.`);1===f?(t[0]=a*y,t[1]=a*y,t[2]=a*y):t[n]=a*y}let n=4*e;g[n+0]=Math.round(t[0]),g[n+1]=Math.round(t[1]),g[n+2]=Math.round(t[2]),g[n+3]=Math.round(t[3])}i.width=h,i.height=c;let A=new ImageData(g,h,c);return p.putImageData(A,0,0),r}};function Ov(e){let t,{inputs:n,backend:a,attrs:r}=e,{x:i}=n,{axis:s,keepDims:o}=r;Fg(i,"sum"),t="bool"===i.dtype?Kg({inputs:{x:i},backend:a,attrs:{dtype:"int32"}}):Gg({inputs:{x:i},backend:a});let l=t.shape.length,u=Tr.parseAxisParam(s,t.shape),d=Bf.getAxesPermutation(u,l),p=u,c=t;null!=d&&(c=px({inputs:{x:t},backend:a,attrs:{perm:d}}),p=Bf.getInnerMostAxes(p.length,l)),Bf.assertAxesAreInnerMostDims("sum",p,c.shape.length);let[h,f]=Bf.computeOutAndReduceShapes(c.shape,p),m=Ug(a,h,Bf.upcastType(c.dtype,"int32")),y=Tr.sizeFromShape(f),g=a.data.get(m.dataId).values,A=a.data.get(c.dataId).values;for(let e=0;e<g.length;++e){let t=e*y,n=0;for(let e=0;e<y;++e)n+=A[t+e];g[e]=n}if(o){let e=m;m=vb({inputs:{x:m},backend:a,attrs:{shape:Bf.expandShapeToKeepDim(m.shape,u)}}),a.disposeIntermediateTensorInfo(e)}return a.disposeIntermediateTensorInfo(t),null!=d&&a.disposeIntermediateTensorInfo(c),m}var Pv={kernelName:Oa,backendName:"cpu",kernelFunc:Ov},Dv={kernelName:Xt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{equation:r}=a,i=t,{allDims:s,summedDims:o,idDims:l}=Bf.decodeEinsumEquation(r,i.length);Bf.checkEinsumDimSizes(s.length,l,i);let{path:u,steps:d}=Bf.getEinsumComputePath(o,l),p=d.length,c=null,h=s.length,f=[];for(let e=0;e<p;++e){for(let t of d[e]){let e,{permutationIndices:a,expandDims:r}=Bf.getEinsumPermutation(h,l[t]);Bf.isIdentityPermutation(a)?e=i[t]:(e=px({inputs:{x:i[t]},backend:n,attrs:{perm:a}}),f.push(e));let s=e.shape.slice();for(let e=0;e<r.length;++e)s.splice(r[e],0,1);Tr.arraysEqual(e.shape,s)||(e=vb({inputs:{x:e},backend:n,attrs:{shape:s}}),f.push(e)),null===c?c=e:(c=ax({inputs:{a:e,b:c},backend:n}),f.push(c))}e<p-1&&(u[e]>=0&&(c=Ov({inputs:{x:c},backend:n,attrs:{axis:u[e]-(s.length-h),keepDims:!1}}),f.push(c)),h--)}for(let e of f)e!==c&&n.disposeIntermediateTensorInfo(e);return c}},zv={kernelName:Zt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{dy:a,y:r}=t;Fg([a,r],"eluGrad");let i=new Float32Array(Tr.sizeFromShape(r.shape)),s=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values;for(let e=0;e<s.length;++e){let t=s[e];i[e]=t>=0?o[e]:o[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",i)}},Lv=Bf.ERF_P,Wv=Bf.ERF_A1,Bv=Bf.ERF_A2,Vv=Bf.ERF_A3,Uv=Bf.ERF_A4,Gv=Bf.ERF_A5,Hv=uA(Yt,(e=>{let t=Math.sign(e),n=Math.abs(e),a=1/(1+Lv*n);return t*(1-((((Gv*a+Uv)*a+Vv)*a+Bv)*a+Wv)*a*Math.exp(-n*n))})),jv={kernelName:Yt,backendName:"cpu",kernelFunc:Hv};function qv(e){let{inputs:t,backend:n,attrs:a}=e,{input:r}=t,{dim:i}=a,s=r.shape.length,o=r.shape.slice(),l=i;return i<0&&(Tr.assert(-(s+1)<=i,(()=>`Axis must be in the interval [${-(s+1)}, ${s}]`)),l=s+i+1),o.splice(l,0,1),vb({inputs:{x:r},backend:n,attrs:{shape:o}})}var Xv={kernelName:en,backendName:"cpu",kernelFunc:qv},Kv=Wg(((e,t)=>e/t)),Zv=Yg(qt,Kv),Yv={kernelName:qt,backendName:"cpu",kernelFunc:Zv};function Jv(e,t,n){let a=e.shape,r=a[0],i=a[1],s=n.data.get(e.dataId),o=s.complexTensorInfos.real,l=s.complexTensorInfos.imag,u=[r,i],d=Tr.sizeFromShape(u),p=Tr.getTypedArrayFromDType("float32",d),c=Tr.getTypedArrayFromDType("float32",d);for(let e=0;e<r;e++){let a=_x({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,i]}}),r=_x({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,i]}}),s=Bg({inputs:{real:a,imag:r},backend:n}),{real:u,imag:d}=Qv(s,t,n),h=Bf.mergeRealAndImagArrays(u,d);for(let t=0;t<i;t++){let n=Bf.getComplexWithIndex(h,t);p[e*i+t]=n.real,c[e*i+t]=n.imag}n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s)}let h=n.makeTensorInfo(u,"float32",p),f=n.makeTensorInfo(u,"float32",c),m=Bg({inputs:{real:h,imag:f},backend:n});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),m}function Qv(e,t,n){let a=Tr.sizeFromShape(e.shape),r=n.data.get(e.dataId),i=n.data.get(r.complexTensorInfos.real.dataId).values,s=n.data.get(r.complexTensorInfos.imag.dataId).values;if(function(e){return 0==(e&e-1)}(a)){let r=ew(i,s,a,t,n),o=[e.shape[0],e.shape[1]];if(t){let e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),i=n.makeTensorInfo([],"float32",Tr.createScalarValue(a,"float32")),s=Gg({inputs:{x:i},backend:n}),l=Yv.kernelFunc({inputs:{a:e,b:i},backend:n}),u=Yv.kernelFunc({inputs:{a:t,b:s},backend:n}),d=n.data.get(l.dataId).values,p=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:d,imag:p}}return r}{let e=function(e,t,n){let a=new Float32Array(2*t);for(let r=0;r<t;r++){let i=0,s=0;for(let a=0;a<t;a++){let o=Bf.exponent(r*a,t,n),l=Bf.getComplexWithIndex(e,a);i+=l.real*o.real-l.imag*o.imag,s+=l.real*o.imag+l.imag*o.real}n&&(i/=t,s/=t),Bf.assignToTypedArray(a,i,s,r)}return a}(Bf.mergeRealAndImagArrays(i,s),a,t);return Bf.splitRealAndImagArrays(e)}}function ew(e,t,n,a,r){if(1===n)return{real:e,imag:t};let i=Bf.mergeRealAndImagArrays(e,t),s=n/2,o=Bf.complexWithEvenIndex(i),l=o.real,u=o.imag,d=[l.length],p=r.makeTensorInfo(d,"float32",l),c=r.makeTensorInfo(d,"float32",u),h=Bg({inputs:{real:p,imag:c},backend:r}),f=Bf.complexWithOddIndex(i),m=f.real,y=f.imag,g=[m.length],A=r.makeTensorInfo(g,"float32",m),x=r.makeTensorInfo(g,"float32",y),b=Bg({inputs:{real:A,imag:x},backend:r}),v=ew(l,u,s,a,r),w=v.real,k=v.imag,I=[w.length],S=r.makeTensorInfo(I,"float32",w),N=r.makeTensorInfo(I,"float32",k),C=Bg({inputs:{real:S,imag:N},backend:r}),T=ew(m,y,s,a,r),E=T.real,R=T.imag,$=[E.length],M=r.makeTensorInfo($,"float32",E),_=r.makeTensorInfo($,"float32",R),F=Bg({inputs:{real:M,imag:_},backend:r}),O=Bf.exponents(n,a),P=[O.real.length],D=r.makeTensorInfo(P,"float32",O.real),z=r.makeTensorInfo(P,"float32",O.imag),L=Bg({inputs:{real:D,imag:z},backend:r}),W=ax({inputs:{a:L,b:F},backend:r}),B=tA({inputs:{a:C,b:W},backend:r}),V=tb({inputs:{a:C,b:W},backend:r}),U=jg({inputs:{input:B},backend:r}),G=jg({inputs:{input:V},backend:r}),H=sv({inputs:{input:B},backend:r}),j=sv({inputs:{input:V},backend:r}),q=lv({inputs:[U,G],backend:r,attrs:{axis:0}}),X=lv({inputs:[H,j],backend:r,attrs:{axis:0}}),K=r.data.get(q.dataId).values,Z=r.data.get(X.dataId).values;return r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(A),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(S),r.disposeIntermediateTensorInfo(N),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(M),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(X),{real:K,imag:Z}}var tw={kernelName:nn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{input:a}=t,r=Tr.sizeFromShape(a.shape),i=a.shape[a.shape.length-1],s=vb({inputs:{x:a},backend:n,attrs:{shape:[r/i,i]}}),o=Jv(s,!1,n),l=vb({inputs:{x:o},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),l}};function nw(e){let{backend:t,attrs:n}=e,{shape:a,value:r,dtype:i}=n,s=i||Tr.inferDtype(r),o=Tr.getArrayFromDType(s,Tr.sizeFromShape(a));return function(e,t,n){e.fill(t)}(o,r),t.makeTensorInfo(a,s,o)}var aw={kernelName:an,backendName:"cpu",kernelFunc:nw},rw={kernelName:rn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{image:a}=e,r=n,i=Tr.getTypedArrayFromDType(a.dtype,Tr.sizeFromShape(a.shape)),[s,o,l,u]=a.shape,d=r.data.get(a.dataId).values;for(let e=0;e<s;e++){let t=e*l*o*u;for(let e=0;e<o;e++){let n=e*(l*u);for(let e=0;e<l;e++){let a=e*u;for(let r=0;r<u;r++){let s=Math.round(l-e-1),o=t+n+a+r,p=d[o];s>=0&&s<l&&(p=d[t+n+s*u+r]),i[o]=p}}}}return{dataId:r.write(i,a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},iw={kernelName:hr,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i,bias:s,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:d,dilations:p,dimRoundingMode:c,activation:h,leakyreluAlpha:f}=a,m=dv({inputs:{x:r,filter:i},backend:n,attrs:{strides:l,pad:u,dataFormat:d,dilations:p,dimRoundingMode:c}});if(s){let e=m;if("NCHW"===d&&1===s.shape.length&&1!==s.shape[0]){let e=vb({inputs:{x:s},backend:n,attrs:{shape:[s.shape[0],1,1]}});m=tA({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=tA({inputs:{a:m,b:s},backend:n});n.disposeIntermediateTensorInfo(e)}if(h){let e=m;if("NCHW"===d&&"prelu"===h&&1===o.shape.length&&1!==o.shape[0]){let e=vb({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=bb(n,m,h,e,f),n.disposeIntermediateTensorInfo(e)}else m=bb(n,m,h,o,f);n.disposeIntermediateTensorInfo(e)}return m}},sw={kernelName:fr,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i,bias:s,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:d,dilations:p,dimRoundingMode:c,activation:h,leakyreluAlpha:f}=a,m=Nv({inputs:{x:r,filter:i},backend:n,attrs:{strides:l,pad:u,dataFormat:d,dilations:p,dimRoundingMode:c}});if(s){let e=m;m=tA({inputs:{a:m,b:s},backend:n}),n.disposeIntermediateTensorInfo(e)}if(h){let e=m;m=bb(n,m,h,o,f),n.disposeIntermediateTensorInfo(e)}return m}},ow={kernelName:dn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{params:a,indices:r}=t,i=Tr.sizeFromShape(a.shape),s=r.shape,o=s[s.length-1],[l,u,d,p]=Bf.prepareAndValidate(a,r);if(0===u)return n.makeTensorInfo(l,a.dtype,[]);let c=RA(n.data.get(r.dataId).values,n.bufferSync(a),a.dtype,u,o,d,p,a.shape,i);return n.makeTensorInfo(l,a.dtype,c.values)}},lw={kernelName:un,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,indices:i}=t,{axis:s,batchDims:o}=a;Fg([r,i],"gatherV2");let l=Tr.parseAxisParam(s,r.shape)[0],u=n.data.get(i.dataId).values,d=r.shape[l];for(let e=0;e<u.length;++e){let t=u[e];Tr.assert(t<=d-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${d-1}]`))}let p=o;null==o&&(p=0);let c=Tr.sizeFromShape(i.shape),h=Bf.segment_util.collectGatherOpShapeInfo(r,i,l,p),f=vb({inputs:{x:r},backend:n,attrs:{shape:[h.batchSize,h.outerSize,h.dimSize,h.sliceSize]}}),m=vb({inputs:{x:i},backend:n,attrs:{shape:[h.batchSize,c/h.batchSize]}}),y=[h.batchSize,h.outerSize,c/h.batchSize,h.sliceSize],g=n.bufferSync(m),A=$A(n.bufferSync(f),g,y);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(h.outputShape,A.dtype,A.values)}},uw={kernelName:fn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{input:a}=t,r=Tr.sizeFromShape(a.shape),i=a.shape[a.shape.length-1],s=vb({inputs:{x:a},backend:n,attrs:{shape:[r/i,i]}}),o=Jv(s,!0,n),l=vb({inputs:{x:o},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),l}},dw=uA(yn,(e=>Number.isFinite(e)?1:0),"bool"),pw={kernelName:yn,backendName:"cpu",kernelFunc:dw},cw=uA(gn,(e=>Math.abs(e)===1/0?1:0),"bool"),hw={kernelName:gn,backendName:"cpu",kernelFunc:cw},fw=uA(An,(e=>Number.isNaN(e)?1:0),"bool"),mw={kernelName:An,backendName:"cpu",kernelFunc:fw},yw={kernelName:wn,backendName:"cpu",kernelFunc:function(e){let{backend:t,attrs:n}=e,{start:a,stop:r,num:i}=n,s=GA(a,r,i);return t.makeTensorInfo([s.length],"float32",s)}},gw=uA(In,(e=>Math.log1p(e))),Aw={kernelName:In,backendName:"cpu",kernelFunc:gw},xw=Wg(((e,t)=>e&&t)),bw=Yg(Sn,xw,null,"bool"),vw={kernelName:Sn,backendName:"cpu",kernelFunc:bw},ww=uA(Nn,(e=>e?0:1),"bool"),kw={kernelName:Nn,backendName:"cpu",kernelFunc:ww},Iw=Wg(((e,t)=>e||t)),Sw=Yg(Cn,Iw,null,"bool"),Nw={kernelName:Cn,backendName:"cpu",kernelFunc:Sw},Cw={kernelName:$n,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{depthRadius:i,bias:s,alpha:o,beta:l}=a;Fg(r,"LRN");let u=r.shape[3],d=u-1,p=n.data.get(r.dataId).values,c=Tr.sizeFromShape(r.shape),h=new Float32Array(c);function f(e){let t=e%u,n=e-t+Math.max(0,t-i),a=e-t+Math.min(t+i,d),r=0;for(;n<=a;n++){let e=p[n];r+=e*e}return r}for(let e=0;e<c;e++){let t=f(e),n=p[e]*Math.pow(s+o*t,-l);h[e]=n}return n.makeTensorInfo(r.shape,r.dtype,h)}},Tw={kernelName:Mn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,y:i,dy:s}=t,{depthRadius:o,bias:l,alpha:u,beta:d}=a;Fg(s,"LRNGrad");let p=Tr.sizeFromShape(s.shape),c=s.shape[3],h=n.data.get(s.dataId).values,f=n.data.get(r.dataId).values,m=n.data.get(i.dataId).values,y=new Float32Array(p),g=p;for(let e=0;e<g;e++){let t=e%c,n=e-t+Math.max(0,t-o),a=e-t+Math.min(c,t+o+1),r=0;for(let e=n;e<a;e++)r+=Math.pow(f[e],2);r=u*r+l;for(let t=n;t<a;t++){let n=-2*u*d*f[t]*m[e]/r;e===t&&(n+=Math.pow(r,-d)),n*=h[e],y[t]+=n}}return n.makeTensorInfo(s.shape,r.dtype,y)}};function Ew(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{reductionIndices:i,keepDims:s}=a,o=n,l=r.shape,u=l.length,d=Tr.parseAxisParam(i,l),p=d,c=Bf.getAxesPermutation(p,u),h=o.data.get(r.dataId).values;if(null!=c){let e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[c[t]];h=dx(h,l,r.dtype,c,e),p=Bf.getInnerMostAxes(p.length,u),l=e}Fg(r,"max"),Bf.assertAxesAreInnerMostDims("max",p,u);let[f,m]=Bf.computeOutAndReduceShapes(l,p),y=XA(h,Tr.sizeFromShape(m),f,r.dtype),g=o.write(y,f,r.dtype),A=f;return s&&(A=Bf.expandShapeToKeepDim(f,d)),{dataId:g,shape:A,dtype:r.dtype}}var Rw={kernelName:Fn,backendName:"cpu",kernelFunc:Ew},$w={kernelName:Pn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t;Fg(r,"maxPool");let{filterSize:i,strides:s,pad:o,dimRoundingMode:l}=a;Tr.assert(Bf.eitherStridesOrDilationsAreOne(s,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '1'`));let u,d=Bf.computePool2DInfo(r.shape,i,s,1,o,l);if(1===d.filterWidth&&1===d.filterHeight&&Tr.arraysEqual(d.inShape,d.outShape))u=Gg({inputs:{x:r},backend:n});else{let e=n.data.get(r.dataId).values,t=Tr.computeStrides(r.shape),a=jb(e,r.shape,r.dtype,t,d,"max");u=n.makeTensorInfo(d.outShape,r.dtype,a.values)}return u}},Mw={kernelName:zn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:i,strides:s,pad:o,dimRoundingMode:l,dataFormat:u}=a;Fg(r,"maxPool3d");let d=Bf.computePool3DInfo(r.shape,i,s,1,o,l,u),p=Xb(n.data.get(r.dataId).values,r.shape,r.dtype,Tr.computeStrides(r.shape),d,"max");return n.makeTensorInfo(p.shape,"float32",p.values)}},_w={kernelName:Ln,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,input:i}=t,{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=a;Fg([r,i],"maxPool3DGrad");let d=Bf.computePool3DInfo(i.shape,s,o,1,l,u),p=function(e,t){let n=js(t.outShape,"int32"),a=t.strideDepth,r=t.strideHeight,i=t.strideWidth,s=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,d=t.effectiveFilterHeight,p=t.effectiveFilterWidth,c=t.padInfo.front,h=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let y=0;y<t.inChannels;++y)for(let g=0;g<t.outDepth;++g){let A=g*a-c,x=A;for(;x<0;)x+=s;let b=Math.min(t.inDepth,u+A);for(let a=0;a<t.outHeight;++a){let u=a*r-h,c=u;for(;c<0;)c+=o;let v=Math.min(t.inHeight,d+u);for(let r=0;r<t.outWidth;++r){let h=r*i-f,w=h;for(;w<0;)w+=l;let k=Math.min(t.inWidth,p+h),I=Number.NEGATIVE_INFINITY,S=-1;for(let t=x;t<b;t+=s){let n=t-A;for(let a=c;a<v;a+=o){let r=a-u;for(let i=w;i<k;i+=l){let s=i-h,o=e.get(m,t,a,i,y);o>=I&&(I=o,S=n*d*p+r*d+s)}}}n.set(S,m,g,a,r,y)}}}return n}(n.bufferSync(i),d),c=d.strideDepth,h=d.strideHeight,f=d.strideWidth,m=d.dilationDepth,y=d.dilationHeight,g=d.dilationWidth,A=d.effectiveFilterDepth,x=d.effectiveFilterHeight,b=d.effectiveFilterWidth,v=A-1-d.padInfo.front,w=b-1-d.padInfo.left,k=x-1-d.padInfo.top,I=js(i.shape,"float32"),S=n.bufferSync(r);for(let e=0;e<d.batchSize;++e)for(let t=0;t<d.inChannels;++t)for(let n=0;n<d.inDepth;++n)for(let a=0;a<d.inHeight;++a)for(let r=0;r<d.inWidth;++r){let i=n-v,s=a-k,o=r-w,l=0;for(let n=0;n<A;n+=m){let a=(i+n)/c;if(!(a<0||a>=d.outDepth||Math.floor(a)!==a))for(let r=0;r<x;r+=y){let i=(s+r)/h;if(!(i<0||i>=d.outHeight||Math.floor(i)!==i))for(let s=0;s<b;s+=g){let u=(o+s)/f;if(u<0||u>=d.outWidth||Math.floor(u)!==u)continue;let c=A*x*b-1-p.get(e,a,i,u,t)===n*x*b+r*b+s?1:0;0!==c&&(l+=S.get(e,a,i,u,t)*c)}}}I.set(l,e,n,a,r,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},Fw={kernelName:Dn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,input:i,output:s}=t,o=i;Fg([i,s],"maxPoolGrad");let{filterSize:l,strides:u,pad:d,dimRoundingMode:p}=a,c=Bf.computePool2DInfo(o.shape,l,u,1,d,p),h=n.data.get(o.dataId).values,f=js(c.outShape,o.dtype,qb(h,o.shape,o.dtype,c).values),m=c.strideHeight,y=c.strideWidth,g=c.dilationHeight,A=c.dilationWidth,x=c.effectiveFilterHeight,b=c.effectiveFilterWidth,v=b-1-c.padInfo.left,w=x-1-c.padInfo.top,k=js(o.shape,"float32"),I=n.data.get(r.dataId).values,S=js(r.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let a=0;a<c.inWidth;++a){let r=n-w,i=a-v,s=0;for(let n=0;n<x;n+=g){let a=(r+n)/m;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let r=0;r<b;r+=A){let o=(i+r)/y;if(o<0||o>=c.outWidth||Math.floor(o)!==o)continue;let l=x*b-1-f.get(e,a,o,t)===n*b+r?1:0;0!==l&&(s+=S.get(e,a,o,t)*l)}}k.set(s,e,n,a,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},Ow={kernelName:Wn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{x:a}=e,{filterSize:r,strides:i,pad:s,includeBatchInIndex:o}=t,l=n;Fg(a,"MaxPoolWithArgmax");let u=l.data.get(a.dataId).values,d=Bf.computePool2DInfo(a.shape,r,i,[1,1],s),[p,c]=function(e,t,n,a,r){let i=jb(e,0,n,Tr.computeStrides(t),r,"max"),s=qb(e,t,n,r,!0,a);return[i.values,s.values]}(u,a.shape,a.dtype,o,d),h=l.write(p,d.outShape,a.dtype),f=l.write(c,d.outShape,a.dtype);return[{dataId:h,shape:d.outShape,dtype:a.dtype},{dataId:f,shape:d.outShape,dtype:"int32"}]}},Pw={kernelName:Bn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,keepDims:s}=a,o=Tr.parseAxisParam(i,r.shape),l=Bf.computeOutAndReduceShapes(r.shape,o)[1],u=Tr.sizeFromShape(l),d=[],p=n.makeTensorInfo([],"float32",new Float32Array([u]));d.push(p);let c=Kg({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});d.push(c);let h=Zv({inputs:{a:c,b:p},backend:n});d.push(h);let f=Ov({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:s}});return d.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}},Dw={kernelName:Vn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,keepDims:s}=a;Fg(r,"min");let o=Tr.parseAxisParam(i,r.shape),l=o,u=Bf.getAxesPermutation(l,r.shape.length),d=r;null!=u&&(d=px({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Bf.getInnerMostAxes(l.length,r.shape.length)),Bf.assertAxesAreInnerMostDims("min",l,d.shape.length);let[p,c]=Bf.computeOutAndReduceShapes(d.shape,l),h=Tr.sizeFromShape(c),f=Tr.makeZerosTypedArray(Tr.sizeFromShape(p),d.dtype),m=n.data.get(d.dataId).values;for(let e=0;e<f.length;++e){let t=e*h,n=m[t];for(let e=0;e<h;++e){let a=m[t+e];(Number.isNaN(a)||a<n)&&(n=a)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(d);let y=n.makeTensorInfo(p,d.dtype,f);if(s){let e=vb({inputs:{x:y},backend:n,attrs:{shape:Bf.expandShapeToKeepDim(p,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}},zw={kernelName:Gn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{paddings:i,mode:s}=a;Fg(r,"mirrorPad");let o=i.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=i.map((e=>e[0])),u=i.map(((e,t)=>e[0]+r.shape[t])),d="reflect"===s?0:1,p=n.data.get(r.dataId).values,c=r.shape.length,h=Tr.computeStrides(r.shape),f=Tr.sizeFromShape(o),m=o.length,y=Tr.computeStrides(o),g=Tr.getTypedArrayFromDType(r.dtype,f);for(let e=0;e<f;e++){let t=Tr.indexToLoc(e,m,y);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-d:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+d);t=t.map(((e,t)=>e-l[t]));let n=Tr.locToIndex(t,c,h);g[e]=p[n]}return{dataId:n.write(g,o,r.dtype),shape:o,dtype:r.dtype}}},Lw=Wg(((e,t)=>{let n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),Ww=Yg(Hn,Lw),Bw={kernelName:Hn,backendName:"cpu",kernelFunc:Ww},Vw=I(P());function Uw(e){let{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{dim:i}=a,s=r.shape.length,o=i;if(-1===o&&(o=s-1),o!==s-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${s} and dim was ${o}`);let l=Tr.parseAxisParam([o],r.shape),u=Ew({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),d=Bf.expandShapeToKeepDim(u.shape,l),p=vb({inputs:{x:u},backend:n,attrs:{shape:d}}),c=tb({inputs:{a:r,b:p},backend:n}),h=xA({inputs:{x:c},backend:n}),f=Ov({inputs:{x:h},backend:n,attrs:{axis:l,keepDims:!1}}),m=vb({inputs:{x:f},backend:n,attrs:{shape:d}}),y=Zv({inputs:{a:h,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),y}var Gw={kernelName:za,backendName:"cpu",kernelFunc:Uw},Hw={kernelName:jn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{numSamples:i,seed:s,normalized:o}=a;Fg(r,"multinomial");let l=o?r:Uw({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],d=l.shape[1],p=n.data.get(l.dataId).values,c=[u,i],h=Tr.makeZerosTypedArray(Tr.sizeFromShape(c),"int32");for(let e=0;e<u;++e){let t=e*d,n=new Float32Array(d-1);n[0]=p[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+p[t+e];let a=Vw.alea(s.toString()),r=e*i;for(let e=0;e<i;++e){let t=a();h[r+e]=n.length;for(let a=0;a<n.length;a++)if(t<n[a]){h[r+e]=a;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(c,"int32",h)}},jw=Km.nonMaxSuppressionV3Impl,qw={kernelName:Zn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l}=a;Fg(r,"NonMaxSuppression");let u=n.data.get(r.dataId).values,d=n.data.get(i.dataId).values,{selectedIndices:p}=jw(u,d,s,o,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},Xw=Km.nonMaxSuppressionV4Impl,Kw={kernelName:Yn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=a;Fg(r,"NonMaxSuppressionPadded");let d=n.data.get(r.dataId).values,p=n.data.get(i.dataId).values,{selectedIndices:c,validOutputs:h}=Xw(d,p,s,o,l,u);return[n.makeTensorInfo([c.length],"int32",new Int32Array(c)),n.makeTensorInfo([],"int32",new Int32Array([h]))]}},Zw=Km.nonMaxSuppressionV5Impl,Yw={kernelName:Jn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=a;Fg(r,"NonMaxSuppressionWithScore");let d=n.data.get(r.dataId).values,p=n.data.get(i.dataId).values,c=s,h=o,f=l,m=u,{selectedIndices:y,selectedScores:g}=Zw(d,p,c,h,f,m);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([g.length],"float32",new Float32Array(g))]}},Jw={kernelName:ea,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{indices:r}=t,{dtype:i,depth:s,onValue:o,offValue:l}=a;Fg(r,"oneHot");let u=Tr.sizeFromShape(r.shape),d=new Float32Array(u*s);d.fill(l);let p=n.data.get(r.dataId).values;for(let e=0;e<u;++e)p[e]>=0&&p[e]<s&&(d[e*s+p[e]]=o);return n.makeTensorInfo([...r.shape,s],i,d)}};function Qw(e){let{inputs:t,backend:n}=e,{x:a}=t;if("string"===a.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===a.dtype){let e=jg({inputs:{input:a},backend:n}),t=Qw({inputs:{x:e},backend:n}),r=sv({inputs:{input:a},backend:n}),i=Qw({inputs:{x:r},backend:n}),s=Bg({inputs:{real:t,imag:i},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i),s}return nw({backend:n,attrs:{shape:a.shape,value:0,dtype:a.dtype}})}var ek={kernelName:lr,backendName:"cpu",kernelFunc:Qw},tk={kernelName:Qn,backendName:"cpu",kernelFunc:function e(t){let{inputs:n,backend:a}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){let t=jg({inputs:{input:r},backend:a}),n=e({inputs:{x:t},backend:a}),i=sv({inputs:{input:r},backend:a}),s=Qw({inputs:{x:i},backend:a}),o=Bg({inputs:{real:n,imag:s},backend:a});return a.disposeIntermediateTensorInfo(t),a.disposeIntermediateTensorInfo(n),a.disposeIntermediateTensorInfo(i),a.disposeIntermediateTensorInfo(s),o}return nw({backend:a,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function nk(e){let{inputs:t,backend:n,attrs:a}=e,{axis:r}=a;if(1===t.length)return qv({inputs:{input:t[0]},backend:n,attrs:{dim:r}});let i=t[0].shape,s=t[0].dtype;t.forEach((e=>{Tr.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),Tr.assert(s===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));let o=[],l=lv({inputs:t.map((e=>{let t=qv({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}var ak={kernelName:ta,backendName:"cpu",kernelFunc:nk},rk={kernelName:na,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{paddings:i,constantValue:s}=a;Fg(r,"pad");let o=i.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=i.map((e=>e[0])),u=n.data.get(r.dataId).values,d=Tr.sizeFromShape(r.shape),p=r.shape.length,c=Tr.computeStrides(r.shape),h=Tr.sizeFromShape(o),f=o.length,m=Tr.computeStrides(o),y=Tr.getTypedArrayFromDType(r.dtype,h);0!==s&&y.fill(s);for(let e=0;e<d;e++){let t=Tr.indexToLoc(e,p,c).map(((e,t)=>e+l[t]));y[Tr.locToIndex(t,f,m)]=u[e]}return{dataId:n.write(y,o,r.dtype),shape:o,dtype:r.dtype}}},ik=Wg(((e,t)=>Math.pow(e,t))),sk=Yg(ra,ik),ok={kernelName:ra,backendName:"cpu",kernelFunc:sk},lk={kernelName:oa,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{paramsNestedSplits:r,paramsDenseValues:i,indices:s}=t,{outputRaggedRank:o}=a,l=r.map((e=>n.data.get(e.dataId).values)),u=r.map((e=>e.shape)),d=n.data.get(i.dataId).values,p=n.data.get(s.dataId).values,[c,h,f]=yx(l,u,d,i.shape,i.dtype,p,s.shape),m=c.map((e=>n.makeTensorInfo([e.length],"int32",e))),y=n.makeTensorInfo(f,i.dtype,h);return m.concat([y])}},uk={kernelName:la,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{starts:a,limits:r,deltas:i}=t,s=n.data.get(a.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(i.dataId).values,[u,d]=Ax(s,a.shape,a.dtype,o,r.shape,l,i.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([d.length],a.dtype,d)]}},dk={kernelName:ua,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{shape:r,values:i,defaultValue:s,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=a,u=n.data.get(r.dataId).values,d=n.data.get(i.dataId).values,p=n.data.get(s.dataId).values,c=o.map((e=>n.data.get(e.dataId).values)),h=o.map((e=>e.shape)),[f,m]=kx(u,r.shape,d,i.shape,i.dtype,p,s.shape,c,h,l);return n.makeTensorInfo(f,i.dtype,m)}},pk={kernelName:da,backendName:"cpu",kernelFunc:function(e){let{backend:t,attrs:n}=e,{start:a,stop:r,dtype:i,step:s}=n,o=Ix(a,r,s,i);return t.makeTensorInfo([o.length],i,o)}},ck=uA(ca,(e=>1/e)),hk={kernelName:ca,backendName:"cpu",kernelFunc:ck},fk={kernelName:ga,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{images:r}=t,{alignCorners:i,halfPixelCenters:s,size:o}=a;Fg(r,"resizeBilinear");let l=Tr.computeStrides(r.shape),[u,d]=o,[p,c,h,f]=r.shape,m=n.data.get(r.dataId).values,y=new Float32Array(Tr.sizeFromShape([p,u,d,f])),g=[i&&u>1?c-1:c,i&&d>1?h-1:h],A=[i&&u>1?u-1:u,i&&d>1?d-1:d],x=0,b=g[0]/A[0],v=g[1]/A[1];for(let e=0;e<p;e++)for(let t=0;t<u;t++){let n;n=s?b*(t+.5)-.5:b*t;let a=Math.max(0,Math.floor(n)),r=n-a,i=Math.min(c-1,Math.ceil(n)),o=e*l[0]+a*l[1],u=e*l[0]+i*l[1];for(let e=0;e<d;e++){let t;t=s?v*(e+.5)-.5:v*e;let n=Math.max(0,Math.floor(t)),a=t-n,i=Math.min(h-1,Math.ceil(t)),d=o+n*l[2],p=u+n*l[2],c=o+i*l[2],g=u+i*l[2];for(let e=0;e<f;e++){let t=m[d+e],n=m[p+e],i=t+(m[c+e]-t)*a,s=i+(n+(m[g+e]-n)*a-i)*r;y[x++]=s}}}return n.makeTensorInfo([p,u,d,f],"float32",y)}},mk={kernelName:Aa,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{images:r,dy:i}=t,{alignCorners:s}=a;Fg([i,r],"resizeBilinearGrad");let o=Tr.computeStrides(r.shape),[l,u,d,p]=r.shape,[,c,h]=i.shape,f=new Float32Array(l*u*d*p),m=[s&&c>1?u-1:u,s&&h>1?d-1:d],y=[s&&c>1?c-1:c,s&&h>1?h-1:h],g=m[0]/y[0],A=m[1]/y[1],x=n.data.get(i.dataId).values,b=0;for(let e=0;e<l;e++){let t=e*o[0];for(let e=0;e<c;e++){let n=e*g,a=Math.floor(n),r=Math.min(Math.ceil(n),u-1),i=t+a*o[1],s=t+r*o[1],l=n-a,c=1-l;for(let e=0;e<h;e++){let t=e*A,n=Math.floor(t),a=Math.min(Math.ceil(t),d-1),r=t-n,u=1-r,h=i+n*o[2],m=i+a*o[2],y=s+n*o[2],g=s+a*o[2],v=c*u,w=c*r,k=l*u,I=l*r;for(let e=0;e<p;e++){let t=x[b++];f[h+e]+=t*v,f[m+e]+=t*w,f[y+e]+=t*k,f[g+e]+=t*I}}}}return n.makeTensorInfo([l,d,u,p],"float32",f)}},yk={kernelName:ma,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{images:r}=t,{alignCorners:i,halfPixelCenters:s,size:o}=a;Fg(r,"resizeNearestNeighbor");let l=Tr.computeStrides(r.shape),[u,d]=o,[p,c,h,f]=r.shape,m=n.data.get(r.dataId).values,y=new Float32Array(p*u*d*f),g=[i&&u>1?c-1:c,i&&d>1?h-1:h],A=[i&&u>1?u-1:u,i&&d>1?d-1:d],x=g[0]/A[0],b=g[1]/A[1],v=0;for(let e=0;e<p;e++){let t=e*l[0];for(let e=0;e<u;e++){let n=s?x*(e+.5):x*e,a=Math.min(c-1,i?Math.round(n):Math.floor(n));s&&(a=Math.max(0,a));let r=t+a*l[1];for(let e=0;e<d;e++){let t=s?b*(e+.5):b*e,n=Math.min(h-1,i?Math.round(t):Math.floor(t));s&&(n=Math.max(0,n));let a=r+n*l[2];for(let e=0;e<f;e++){let t=m[a+e];y[v++]=t}}}}return n.makeTensorInfo([p,u,d,f],r.dtype,y)}},gk={kernelName:ya,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{images:r,dy:i}=t,{alignCorners:s}=a;Fg([i,r],"resizeNearestNeighborGrad");let o=Tr.computeStrides(r.shape),l=Tr.computeStrides(i.shape),[u,d,p,c]=r.shape,[,h,f]=i.shape,m=new Float32Array(u*d*p*c),y=n.data.get(i.dataId).values,g=[s&&h>1?d-1:d,s&&f>1?p-1:p],A=[s&&h>1?h-1:h,s&&f>1?f-1:f],x=g[0]/A[0],b=g[1]/A[1],v=1/x,w=1/b,k=2*Math.ceil(v)+2,I=2*Math.ceil(w)+2;for(let e=0;e<u;e++){let t=e*o[0];for(let e=0;e<d;e++){let n=t+e*o[1],a=Math.floor(e*v),r=Math.floor(a-k/2);for(let a=0;a<p;a++){let i=n+a*o[2],u=Math.floor(a*w),g=Math.floor(u-I/2);for(let n=0;n<c;n++){let o=0;for(let i=0;i<k;i++){let u=i+r;if(u<0||u>=h)continue;let c=t+u*l[1],m=u*x;if(e===Math.min(d-1,s?Math.round(m):Math.floor(m)))for(let e=0;e<I;e++){let t=e+g;if(t<0||t>=f)continue;let r=c+t*l[2],i=t*b;a===Math.min(p-1,s?Math.round(i):Math.floor(i))&&(o+=y[r+n])}}m[i+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}},Ak={kernelName:ba,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{dims:i}=a;Fg(r,"reverse");let s=r.shape.length,o=Tr.parseAxisParam(i,r.shape);if(0===s)return Gg({inputs:{x:r},backend:n});let l=new oi(r.shape,r.dtype),u=n.bufferSync(r);for(let e=0;e<l.size;e++){let t=l.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=r.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},xk={kernelName:pr,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{image:a}=e,{radians:r,fillValue:i,center:s}=t,o=n,l=Tr.getTypedArrayFromDType(a.dtype,Tr.sizeFromShape(a.shape)),[u,d,p,c]=a.shape,[h,f]=Bf.getImageCenter(s,d,p),m=Math.sin(r),y=Math.cos(r),g=o.data.get(a.dataId).values;for(let e=0;e<u;e++){let t=e*p*d*c;for(let e=0;e<d;e++){let n=e*(p*c);for(let a=0;a<p;a++){let r=a*c;for(let s=0;s<c;s++){let o=[u,e,a,s],A=o[2],x=o[1],b=(A-h)*y-(x-f)*m,v=(A-h)*m+(x-f)*y;b=Math.round(b+h),v=Math.round(v+f);let w=i;"number"!=typeof i&&(w=3===s?255:i[s]),b>=0&&b<p&&v>=0&&v<d&&(w=g[t+v*(p*c)+b*c+s]),l[t+n+r+s]=w}}}}return{dataId:o.write(l,a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},bk=uA(va,(e=>{let t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),vk={kernelName:va,backendName:"cpu",kernelFunc:bk},wk={kernelName:ka,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{indices:r,updates:i}=t,{shape:s}=a,{sliceRank:o,numUpdates:l,sliceSize:u,strides:d,outputSize:p}=Bf.calculateShapes(i,r,s),c=Tx(n.bufferSync(r),n.bufferSync(i),s,p,u,l,o,d,0,!0);return n.makeTensorInfo(s,c.dtype,c.values)}};function kk(e,t){let n=0,a=e.length,r=0;for(;n<a;)r=Math.floor((n+a)/2),e[r]<t?n=r+1:a=r;return a}function Ik(e,t){let n=0,a=e.length,r=0;for(;n<a;)r=Math.floor((n+a)/2),e[r]<=t?n=r+1:a=r;return a}var Sk={kernelName:Sa,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{sortedSequence:r,values:i}=t,{side:s}=a,o=function(e,t,n,a,r,i){let s=Tr.getArrayFromDType("int32",n*r);for(let o=0;o<n;++o){let n=e.slice(o*a,(o+1)*a),l=o*r;for(let e=0;e<r;++e)s[l+e]="left"===i?kk(n,t[e+l]):Ik(n,t[e+l])}return s}(n.data.get(r.dataId).values,n.data.get(i.dataId).values,r.shape[0],r.shape[1],i.shape[1],s);return n.makeTensorInfo(i.shape,"int32",o)}},Nk={kernelName:Na,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{condition:a,t:r,e:i}=t;Fg([a,r,i],"select");let s=a.shape.length,o=n.data.get(a.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(i.dataId).values,d=bi(r.dtype,i.dtype),p=Tr.makeZerosTypedArray(Tr.sizeFromShape(r.shape),d),c=0,h=0===s||s>1||1===r.shape.length?1:Tr.sizeFromShape(r.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<h;t++)1===o[e]?p[c++]=l[e]:p[c++]=u[e];return n.makeTensorInfo(r.shape,d,p)}},Ck=Bf.SELU_SCALEALPHA,Tk=Bf.SELU_SCALE,Ek=uA(Ca,(e=>e>=0?Tk*e:Ck*(Math.exp(e)-1))),Rk={kernelName:Ca,backendName:"cpu",kernelFunc:Ek},$k=uA($a,(e=>e<0?-1:e>0?1:0)),Mk={kernelName:$a,backendName:"cpu",kernelFunc:$k},_k=uA(Ea,(e=>Math.sin(e))),Fk={kernelName:Ea,backendName:"cpu",kernelFunc:_k},Ok=uA(Ra,(e=>Math.sinh(e))),Pk={kernelName:Ra,backendName:"cpu",kernelFunc:Ok},Dk=Math.log(1.1920928955078125e-7)+2,zk=uA(_a,(e=>{let t,n=e>-Dk,a=e<Dk,r=Math.exp(e);return t=a?r:n?e:Math.log(1+r),t})),Lk={kernelName:_a,backendName:"cpu",kernelFunc:zk},Wk={kernelName:Pa,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:i,paddings:s}=a;Fg([r],"spaceToBatchND");let o=Tr.sizeFromShape(i),l=[[0,0]];l.push(...s);for(let e=1+i.length;e<r.shape.length;++e)l.push([0,0]);let u=rk.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),d=Bf.getReshaped(u.shape,i,o,!1),p=Bf.getPermuted(d.length,i.length,!1),c=Bf.getReshapedPermuted(u.shape,i,o,!1),h=vb({inputs:{x:u},backend:n,attrs:{shape:d}}),f=px({inputs:{x:h},backend:n,attrs:{perm:p}}),m=vb({inputs:{x:f},backend:n,attrs:{shape:c}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),m}},Bk={kernelName:La,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{indices:a,values:r,denseShape:i,defaultValue:s}=t;if(1!==i.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${i.shape}`);if(2!==a.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${a.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==s.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${s.shape}`);let o=n.data.get(a.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(i.dataId).values,d=n.data.get(s.dataId).values[0],[p,c,h,f,m]=Ox(o,a.shape,a.dtype,l,r.dtype,u,d);return[n.makeTensorInfo(c,a.dtype,p),n.makeTensorInfo([c[0]],r.dtype,h),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],a.dtype,new Int32Array(m))]}},Vk={kernelName:Wa,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{inputIndices:a,inputShape:r,newShape:i}=t;if(2!==a.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${a.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==i.shape.length)throw new Error(`Target shape should be a vector but received shape ${i.shape}`);let s=Array.from(n.data.get(r.dataId).values),o=n.data.get(a.dataId).values,l=Array.from(n.data.get(i.dataId).values),[u,d,p]=Px(o,a.shape,a.dtype,s,l);return[n.makeTensorInfo(d,a.dtype,u),n.makeTensorInfo([p.length],i.dtype,new Int32Array(p))]}},Uk={kernelName:Ba,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{data:a,indices:r,segmentIds:i}=t;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==i.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${i.shape}`);if(r.shape[0]!==i.shape[0])throw new Error("segmentIds and indices should have same size.");let s=n.data.get(a.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(i.dataId).values,[u,d]=Dx(s,a.shape,a.dtype,o,l,!0);return n.makeTensorInfo(d,a.dtype,u)}},Gk={kernelName:Va,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{data:a,indices:r,segmentIds:i}=t;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==i.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${i.shape}`);if(r.shape[0]!==i.shape[0])throw new Error("segmentIds and indices should have same size.");let s=n.data.get(a.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(i.dataId).values,[u,d]=Dx(s,a.shape,a.dtype,o,l);return n.makeTensorInfo(d,a.dtype,u)}},Hk={kernelName:Ua,backendName:"cpu",kernelFunc:function(e){let t,{inputs:n,backend:a,attrs:r}=e,{sparseIndices:i,sparseValues:s,defaultValue:o}=n,{outputShape:l}=r,{sliceRank:u,numUpdates:d,sliceSize:p,strides:c,outputSize:h}=Bf.calculateShapes(s,i,l),f=!1,m=a.bufferSync(i);switch(s.dtype){case"bool":t=Tx(m,a.bufferSync(s),l,h,p,d,u,c,!!a.data.get(o.dataId).values[0],f);break;case"float32":case"int32":t=Tx(m,a.bufferSync(s),l,h,p,d,u,c,a.data.get(o.dataId).values[0],f);break;case"string":t=Tx(m,a.bufferSync(s),l,h,p,d,u,c,Tr.decodeString(a.data.get(o.dataId).values[0]),f);break;default:throw new Error(`Unsupported type ${s.dtype}`)}return a.makeTensorInfo(l,t.dtype,t.values)}},jk={kernelName:Da,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{numOrSizeSplits:i,axis:s}=a,o=Tr.parseAxisParam(s,r.shape)[0],l=Bf.prepareSplitSize(r,i,o),u=new Array(r.shape.length).fill(0),d=r.shape.slice();return l.map((e=>{let t=[...d];t[o]=e;let a=_x({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,a}))}},qk={kernelName:Ha,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{let{x:n}=e,a=t;Fg(n,"square");let r=a.data.get(n.dataId).values,i=new Float32Array(r.length);for(let e=0;e<r.length;++e){let t=r[e];i[e]=t*t}return{dataId:a.write(i,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Xk=uA(ur,((e,t)=>{let n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),Kk={kernelName:ur,backendName:"cpu",kernelFunc:Xk},Zk={kernelName:qa,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{begin:i,end:s,strides:o,beginMask:l,endMask:u,ellipsisMask:d,newAxisMask:p,shrinkAxisMask:c}=a;Fg(r,"stridedSlice");let h,{finalShapeSparse:f,finalShape:m,isIdentity:y,sliceDim0:g,isSimpleSlice:A,begin:x,end:b,strides:v}=mf.sliceInfo(r.shape,i,s,o,l,u,d,p,c);if(y)h=vb({inputs:{x:r},backend:n,attrs:{shape:m}});else if(g||A){Tr.assert(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));let e=mf.computeOutShape(x,b,v),t=_x({inputs:{x:r},backend:n,attrs:{begin:x,size:e}});h=vb({inputs:{x:t},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(t)}else{let e=qx(f,n.bufferSync(r),v,x);h=n.makeTensorInfo(m,e.dtype,e.values)}return h}},Yk={kernelName:Xa,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{separator:r,nGramWidths:i,leftPad:s,rightPad:o,padWidth:l,preserveShortSequences:u}=a,{data:d,dataSplits:p}=t,c=n.data.get(d.dataId).values,h=n.data.get(p.dataId).values,[f,m]=Kx(c,h,r,i,s,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}},Jk={kernelName:Ka,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{skipEmpty:r}=a,{input:i,delimiter:s}=t;if("string"!==i.dtype)throw new Error("Input must be of datatype string");if(1!==i.shape.length)throw new Error(`Input must be a vector, got shape: ${i.shape}`);if(0!==s.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${s.shape}`);let o=n.data.get(i.dataId).values,l=n.data.get(s.dataId).values[0],[u,d,p]=Yx(o,l,r),c=d.length;return[n.makeTensorInfo([c,2],"int32",u),n.makeTensorInfo([c],"string",d),n.makeTensorInfo([2],"int32",new Int32Array(p))]}},Qk={kernelName:Za,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{numBuckets:r}=a,{input:i}=t;if("string"!==i.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");let s=Jx(n.data.get(i.dataId).values,r);return n.makeTensorInfo(i.shape,"int32",s)}},eI=uA(Ja,(e=>Math.tan(e))),tI={kernelName:Ja,backendName:"cpu",kernelFunc:eI},nI=uA(Qa,(e=>Math.tanh(e))),aI={kernelName:Ia,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{tensor:a,indices:r,updates:i}=t,{sliceRank:s,numUpdates:o,sliceSize:l,strides:u,outputSize:d}=Bf.calculateShapes(i,r,a.shape),p=n.bufferSync(r),c=n.bufferSync(i),h=n.bufferSync(a),f=Tx(p,c,a.shape,d,l,o,s,u,h,!1);return n.makeTensorInfo(a.shape,f.dtype,f.values)}},rI={kernelName:er,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{reps:i}=a;Fg(r,"tile");let s=ab(n.bufferSync(r),i);return n.makeTensorInfo(s.shape,s.dtype,s.values)}},iI={kernelName:tr,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{k:i,sorted:s}=a;Fg(r,"topk");let o=n.data.get(r.dataId).values,[l,u]=sb(o,r.shape,r.dtype,i,s);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},sI={kernelName:nr,backendName:"cpu",kernelFunc:function(e){let{inputs:t,attrs:n,backend:a}=e,{image:r,transforms:i}=t,{interpolation:s,fillMode:o,fillValue:l,outputShape:u}=n,[d,p,c,h]=r.shape,[f,m]=null!=u?u:[p,c],y=[d,f,m,h],g=Tr.computeStrides(r.shape),A=g[0],x=g[1],b=g[2],v=Tr.computeStrides(y),w=v[0],k=v[1],I=v[2],S=Tr.getTypedArrayFromDType(r.dtype,Tr.sizeFromShape(y));S.fill(l);let N=a.data.get(r.dataId).values,C=a.data.get(i.dataId).values;for(let e=0;e<d;++e){let t=1===i.shape[0]?C:C.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let a=0;a<m;++a)for(let r=0;r<h;++r){let i,u=t[6]*a+t[7]*n+1;if(0===u)continue;let d=(t[0]*a+t[1]*n+t[2])/u,h=(t[3]*a+t[4]*n+t[5])/u,f=oI(d,c,o),m=oI(h,p,o);switch(s){case"nearest":i=uI(N,p,c,A,x,b,e,m,f,r,l);break;case"bilinear":i=dI(N,p,c,A,x,b,e,m,f,r,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${s}`)}S[e*w+n*k+a*I+r]=i}return a.makeTensorInfo(y,r.dtype,S)}return{dataId:a.write(S,y,r.dtype),shape:r.shape,dtype:r.dtype}}};function oI(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{let e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{let e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return Tr.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{let e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{let e=t-1;n-=t*Math.trunc(n/e)}return Tr.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return Tr.clamp(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function lI(e,t,n,a,r,i,s,o,l,u,d){return 0<=o&&o<t&&0<=l&&l<n?e[s*a+o*r+l*i+u]:d}function uI(e,t,n,a,r,i,s,o,l,u,d){return lI(e,t,n,a,r,i,s,Math.round(o),Math.round(l),u,d)}function dI(e,t,n,a,r,i,s,o,l,u,d){let p=Math.floor(o),c=Math.floor(l),h=p+1,f=c+1;return(h-o)*((f-l)*lI(e,t,n,a,r,i,s,p,c,u,d)+(l-c)*lI(e,t,n,a,r,i,s,p,f,u,d))+(o-p)*((f-l)*lI(e,t,n,a,r,i,s,h,c,u,d)+(l-c)*lI(e,t,n,a,r,i,s,h,f,u,d))}var pI={kernelName:rr,backendName:"cpu",kernelFunc:function(e){let{inputs:t,attrs:n,backend:a}=e,{axis:r}=n,{x:i}=t;Fg(i,"unique");let s=a.data.get(i.dataId).values,{outputValues:o,outputShape:l,indices:u}=ob(s,r,i.shape,i.dtype);return[a.makeTensorInfo(l,i.dtype,o),a.makeTensorInfo([u.length],"int32",u)]}},cI={kernelName:ir,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{value:r}=t,{axis:i}=a;i<0&&(i+=r.shape.length);let s=r.shape.length,o=r.shape[i],l=new Array(s-1),u=0;for(let e=0;e<s;e++)e!==i&&(l[u++]=r.shape[e]);let d=new Array(s).fill(0),p=r.shape.slice();p[i]=1;let c=new Array(o);for(let e=0;e<c.length;e++){d[i]=e;let t=_x({inputs:{x:r},backend:n,attrs:{begin:d,size:p}});c[e]=vb({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return c}},hI={kernelName:sr,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,segmentIds:i}=t,{numSegments:s}=a;Fg(r,"unsortedSegmentSum");let o=[],l=[],u=r.shape.length-i.shape.length,d=i;for(let e=0;e<u;++e){let t=qv({inputs:{input:d},backend:n,attrs:{dim:e+1}});d=t,l.push(t)}for(let e=0;e<s;++e){let t=Tr.createScalarValue(e,"int32"),a=n.makeTensorInfo([],"int32",t),i=yA({inputs:{a,b:d},backend:n}),s=Kg({inputs:{x:i},backend:n,attrs:{dtype:"float32"}}),u=ax({inputs:{a:s,b:r},backend:n}),p=Ov({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(p),l.push(a),l.push(i),l.push(s),l.push(u),l.push(p)}let p=nk({inputs:o,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},fI=[Sb,Lg,Cb,Eb,nA,Rb,$b,Mb,_b,Fb,Pb,zb,Wb,Ub,Hb,Kb,Zb,Yb,Jb,Ib,Qb,ev,tv,oA,nv,Zg,hA,rv,Vg,iv,uv,pv,cv,hv,fv,mv,yv,Av,bv,vv,wv,kv,Iv,Sv,Cv,Tv,Ev,Rv,$v,Mv,_v,Fv,Dv,db,zv,gA,jv,bA,Xv,kA,tw,aw,rw,NA,EA,iw,sw,ow,lw,FA,DA,Hg,uw,ov,pw,hw,mw,cb,WA,UA,yw,qA,Aw,vw,kw,Nw,Cw,Tw,Rw,YA,$w,Mw,_w,Fw,Ow,Pw,Dw,ex,zw,Bw,Hw,rx,sx,qw,Kw,Yw,ux,Jw,tk,ak,rk,ok,mb,fx,lk,uk,dk,pk,qg,Yv,hk,gb,xb,wb,fk,mk,yk,gk,Ak,xk,vk,Cx,wk,Sk,Nk,Rk,$x,Mk,Fk,Pk,Fx,Gw,Lk,Wk,Bk,Vk,Uk,Gk,Hk,jk,Wx,qk,Ux,jx,Kk,Zk,Yk,Jk,Qk,nb,Pv,tI,{kernelName:Qa,backendName:"cpu",kernelFunc:nI},aI,rI,iI,sI,cx,pI,cI,hI,ek];for(let e of fI)wr(e);var mI={};k(mI,{assertNotComplex:()=>IS,bindCanvasToFramebuffer:()=>eS,bindColorTextureToFramebuffer:()=>tS,bindTextureToProgramUniformSampler:()=>QI,bindTextureUnit:()=>KI,bindVertexBufferToProgramAttribute:()=>XI,callAndCheck:()=>CI,canBeRepresented:()=>RI,createFragmentShader:()=>FI,createFramebuffer:()=>qI,createProgram:()=>LI,createStaticIndexBuffer:()=>UI,createStaticVertexBuffer:()=>VI,createTexture:()=>HI,createVertexShader:()=>_I,getBatchDim:()=>oS,getExtensionOrThrow:()=>MI,getFramebufferErrorMessage:()=>rS,getMaxTexturesInShader:()=>yS,getNumChannels:()=>GI,getProgramUniformLocation:()=>JI,getProgramUniformLocationOrThrow:()=>YI,getRowsCols:()=>lS,getShapeAs3D:()=>uS,getTextureShapeFromLogicalShape:()=>dS,getWebGLDisjointQueryTimerVersion:()=>gS,getWebGLErrorMessage:()=>$I,getWebGLMaxTextureSize:()=>hS,hasExtension:()=>AS,isCapableOfRenderingToFloatTexture:()=>bS,isDownloadFloatTextureEnabled:()=>vS,isReshapeFree:()=>cS,isWebGLFenceEnabled:()=>kS,isWebGLVersionEnabled:()=>xS,linkProgram:()=>WI,logShaderSourceAndInfoLog:()=>zI,resetMaxTextureSize:()=>fS,resetMaxTexturesInShader:()=>mS,unbindColorTextureFromFramebuffer:()=>nS,unbindTextureUnit:()=>ZI,validateFramebuffer:()=>aS,validateProgram:()=>BI,validateTextureSize:()=>jI});var yI,gI,AI,xI={},bI={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function vI(e,t){xI[e]=t}function wI(e,t){if(!(e in xI)||null!=t){let n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");let n=null==t?function(e){if(!He().getBool("IS_SAFARI")&&"undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;return n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete xI[e]}),!1),He().getBool("SOFTWARE_WEBGL_ENABLED")&&(bI.failIfMajorPerformanceCaveat=!1),1===e?n.getContext("webgl",bI)||n.getContext("experimental-webgl",bI):n.getContext("webgl2",bI)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;xI[e]=n}let n=xI[e];return null==n||n.isContextLost()?(delete xI[e],wI(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),xI[e])}function kI(e,t){return[t,e]}function II(e){let t=Tr.sizeFromShape(e),n=Math.ceil(t/4);return Tr.sizeToSquarishShape(n)}function SI(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function NI(e,t){let n,a,r,i,s,o,l,u,d,p,c=e;return 2===He().getNumber("WEBGL_VERSION")?(n=c.R32F,a=c.R16F,r=c.RGBA16F,i=c.RGBA32F,s=c.RED,l=4,u=1,d=c.HALF_FLOAT,p=c.FLOAT,o=c.RGBA8):(n=e.RGBA,a=e.RGBA,r=e.RGBA,i=c.RGBA,s=e.RGBA,l=4,u=4,d=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT,o=e.RGBA),{internalFormatFloat:n,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:r,internalFormatPackedFloat:i,textureFormatFloat:s,downloadTextureFormat:o,downloadUnpackNumChannels:l,defaultNumChannels:u,textureTypeHalfFloat:d,textureTypeFloat:p}}function CI(e,t){let n=t();return He().getBool("DEBUG")&&function(e){let t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+$I(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(yI||(yI={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(gI||(gI={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(AI||(AI={}));var TI=5.96e-8,EI=65504;function RI(e){return!!(He().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||TI<Math.abs(e)&&Math.abs(e)<EI)}function $I(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}function MI(e,t){return iS(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function _I(e,t){let n=iS(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(CI(e,(()=>e.shaderSource(n,t))),CI(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}function FI(e,t){let n=iS(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(CI(e,(()=>e.shaderSource(n,t))),CI(e,(()=>e.compileShader(n))),He().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw zI(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}var OI,PI,DI=/ERROR: [0-9]+:([0-9]+):/g;function zI(e,t){let n=DI.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);let a=+n[1],r=e.split("\n"),i=r.length.toString().length+2,s=r.map(((e,t)=>Tr.rightPad((t+1).toString(),i)+e)),o=0;for(let e=0;e<s.length;e++)o=Math.max(s[e].length,o);let l=s.slice(0,a-1),u=s.slice(a-1,a),d=s.slice(a);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${Tr.rightPad(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(d.join("\n"))}function LI(e){return iS(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}function WI(e,t){if(CI(e,(()=>e.linkProgram(t))),!He().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function BI(e,t){if(CI(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function VI(e,t){let n=iS(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return CI(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),CI(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}function UI(e,t){let n=iS(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return CI(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),CI(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}function GI(){return 2===He().getNumber("WEBGL_VERSION")?1:4}function HI(e){return iS(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}function jI(e,t){let n=He().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}function qI(e){return iS(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}function XI(e,t,n,a,r,i,s){let o=e.getAttribLocation(t,n);return-1!==o&&(CI(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,a))),CI(e,(()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,i,s))),CI(e,(()=>e.enableVertexAttribArray(o))),!0)}function KI(e,t,n){sS(e,n),CI(e,(()=>e.activeTexture(e.TEXTURE0+n))),CI(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}function ZI(e,t){sS(e,t),CI(e,(()=>e.activeTexture(e.TEXTURE0+t))),CI(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function YI(e,t,n){return iS(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}function JI(e,t,n){return e.getUniformLocation(t,n)}function QI(e,t,n,a){CI(e,(()=>KI(e,t,a))),CI(e,(()=>e.uniform1i(n,a)))}function eS(e){CI(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),CI(e,(()=>e.viewport(0,0,e.canvas.width,e.canvas.height))),CI(e,(()=>e.scissor(0,0,e.canvas.width,e.canvas.height)))}function tS(e,t,n){CI(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),CI(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function nS(e,t){CI(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),CI(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function aS(e){let t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+rS(e,t))}function rS(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}function iS(e,t,n){let a=CI(e,(()=>t()));if(null==a)throw new Error(n);return a}function sS(e,t){let n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,a=t+e.TEXTURE0;if(a<e.TEXTURE0||a>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)}function oS(e,t=2){return Tr.sizeFromShape(e.slice(0,e.length-t))}function lS(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function uS(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[oS(e),...lS(e)]),t}function dS(e,t=!1){let n=He().getNumber("WEBGL_MAX_TEXTURE_SIZE"),a=He().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");a===1/0&&He().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(a=n/2),t&&(n*=2,a*=2,1===(e=e.map(((t,n)=>n>=e.length-2?Tr.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length&&(e=Tr.squeezeShape(e).newShape);let r=Tr.sizeFromShape(e),i=null;e.length<=1&&r<=n?i=[1,r]:2===e.length&&e[0]<=n&&e[1]<=n?i=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?i=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?i=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?i=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(i=[e[0],e[1]*e[2]*e[3]]);let s=null!=i&&Math.max(...i)>a&&Math.min(...i)<=(t?2:1)&&Math.min(...i)>0;if(null==i||s)if(t){let t=oS(e),n=2,a=2;e.length&&([n,a]=lS(e)),r=t*(n/2)*(a/2),i=Tr.sizeToSquarishShape(r).map((e=>2*e))}else i=Tr.sizeToSquarishShape(r);return i}function pS(e){return e%2==0}function cS(e,t){if(e=e.slice(-2),t=t.slice(-2),Tr.arraysEqual(e,t)||!e.length||!t.length||0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){let n=e[e.length-1],a=t[t.length-1];if(n===a||pS(n)&&pS(a)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&pS(e[0])&&pS(t[0])}function hS(e){if(null==OI){let t=wI(e);OI=t.getParameter(t.MAX_TEXTURE_SIZE)}return OI}function fS(){OI=null}function mS(){PI=null}function yS(e){if(null==PI){let t=wI(e);PI=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,PI)}function gS(e){if(0===e)return 0;let t,n=wI(e);return t=AS(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:AS(n,"EXT_disjoint_timer_query")?1:0,t}function AS(e,t){return null!=e.getExtension(t)}function xS(e){try{if(null!=wI(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function bS(e){if(0===e)return!1;let t=wI(e);if(1===e){if(!AS(t,"OES_texture_float"))return!1}else if(!AS(t,"EXT_color_buffer_float"))return!1;return wS(t)}function vS(e){if(0===e)return!1;let t=wI(e);if(1!==e){if(AS(t,"EXT_color_buffer_float"))return wS(t);let e="EXT_color_buffer_half_float";if(AS(t,e)){let n=t.getExtension(e);return function(e,t){let n=NI(e,t),a=e.createTexture();e.bindTexture(e.TEXTURE_2D,a),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);let r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,a,0);let i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(a),e.deleteFramebuffer(r),i}(t,n)}return!1}return!(!AS(t,"OES_texture_float")||!AS(t,"WEBGL_color_buffer_float"))&&wS(t)}function wS(e){let t=NI(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);let a=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);let r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(a),r}function kS(e){return 2===e&&null!=wI(e).fenceSync}function IS(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Tr.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}var SS=He();function NS(){let e,t,n,a,r,i,s,o,l,u;return 2===He().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",a="in",r="texture",i="outputColor",s="out vec4 outputColor;",o=He().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",a="varying",r="texture2D",i="gl_FragColor",s="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:a,texture2D:r,output:i,defineOutput:s,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function CS(e,t,n="index"){let a=Tr.computeStrides(t);return a.map(((t,r)=>`int ${e[r]} = ${n} / ${t}; ${r===a.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function TS(e,t,n="index"){let a=Tr.computeStrides(t);return a.map(((t,r)=>`int ${e[r]} = ${n} / outShapeStrides[${r}]; ${r===a.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * outShapeStrides[${r}]`:`index -= ${e[r]} * outShapeStrides[${r}]`};`)).join("")}function ES(e){let t=Tr.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}SS.registerFlag("HAS_WEBGL",(()=>SS.getNumber("WEBGL_VERSION")>0)),SS.registerFlag("WEBGL_VERSION",(()=>xS(2)?2:xS(1)?1:0)),SS.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),SS.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===SS.get("WEBGL_VERSION"))),SS.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),SS.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),SS.registerFlag("WEBGL_PACK",(()=>SS.getBool("HAS_WEBGL"))),SS.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>SS.getBool("WEBGL_PACK"))),SS.registerFlag("WEBGL_PACK_CLIP",(()=>SS.getBool("WEBGL_PACK"))),SS.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>SS.getBool("WEBGL_PACK"))),SS.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>SS.getBool("WEBGL_PACK"))),SS.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>SS.getBool("WEBGL_PACK"))),SS.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>SS.getBool("WEBGL_PACK"))),SS.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>SS.getBool("WEBGL_PACK"))),SS.registerFlag("WEBGL_PACK_REDUCE",(()=>SS.getBool("WEBGL_PACK"))),SS.registerFlag("WEBGL_LAZILY_UNPACK",(()=>SS.getBool("WEBGL_PACK"))),SS.registerFlag("WEBGL_CONV_IM2COL",(()=>SS.getBool("WEBGL_PACK"))),SS.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>hS(SS.getNumber("WEBGL_VERSION")))),SS.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>yS(SS.getNumber("WEBGL_VERSION")))),SS.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{let e=SS.getNumber("WEBGL_VERSION");return 0===e?0:gS(e)})),SS.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>SS.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Pi.isMobile())),SS.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>bS(SS.getNumber("WEBGL_VERSION")))),SS.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!SS.getBool("WEBGL_FORCE_F16_TEXTURES")&&SS.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),SS.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>vS(SS.getNumber("WEBGL_VERSION")))),SS.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>kS(SS.getNumber("WEBGL_VERSION")))),SS.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>SS.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),SS.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),SS.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>Pi.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),SS.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),SS.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),SS.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),SS.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),SS.registerFlag("WEBGL_EXP_CONV",(()=>!1)),SS.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>SS.getBool("IS_TEST"))),SS.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),SS.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),SS.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1)),SS.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1));var RS="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:$S}=Bf;function MS(e,t,n){let a=[];if(e.forEach((e=>{let t=Tr.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?a.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(a.push(`uniform sampler2D ${e.name};`),a.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){let{uniformShape:t}=VS(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:a.push(`uniform int ${e.name}Shape;`);break;case 2:a.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:a.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:a.push(`uniform ivec4 ${e.name}Shape;`)}a.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:a.push("uniform int outShape;");break;case 2:a.push("uniform ivec2 outShape;"),a.push("uniform int outShapeStrides;");break;case 3:a.push("uniform ivec3 outShape;"),a.push("uniform ivec2 outShapeStrides;");break;case 4:a.push("uniform ivec4 outShape;"),a.push("uniform ivec3 outShapeStrides;")}a.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{a.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));let r,i,s=a.join("\n"),o=e.map((e=>function(e,t,n=!1,a){let r="";r+=n?FS(e,a):_S(e,a);let i=e.shapeInfo.logicalShape,s=t.logicalShape;return i.length<=s.length&&(r+=n?function(e,t){let n,a=e.name,r=a.charAt(0).toUpperCase()+a.slice(1),i="get"+r+"AtOutCoords",s=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,l=$S(e.shapeInfo.logicalShape,t.logicalShape),u=BS(o),d=o-s,p=["x","y","z","w","u","v"];n=0===s?"":o<2&&l.length>=1?"coords = 0;":l.map((e=>`coords.${p[e+d]} = 0;`)).join("\n");let c="";c=o<2&&s>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+d]}`)).join(", ");let h="return outputValue;",f=1===Tr.sizeFromShape(e.shapeInfo.logicalShape),m=1===Tr.sizeFromShape(t.logicalShape);if(1!==s||f||m){if(f&&!m)h=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(l.length){let e=s-2,t=s-1;l.indexOf(e)>-1&&l.indexOf(t)>-1?h="return vec4(outputValue.x);":l.indexOf(e)>-1?h="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":l.indexOf(t)>-1&&(h="return vec4(outputValue.xx, outputValue.zz);")}}else h="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${i}() {\n      ${u} coords = getOutputCoords();\n      ${n}\n      vec4 outputValue = get${r}(${c});\n      ${h}\n    }\n  `}(e,t):function(e,t){let n=e.name,a=n.charAt(0).toUpperCase()+n.slice(1),r="get"+a+"AtOutCoords",i=t.texShape,s=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&Tr.arraysEqual(s,i))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;let u,d=BS(l),p=$S(e.shapeInfo.logicalShape,t.logicalShape),c=l-o,h=["x","y","z","w","u","v"];u=0===o?"":l<2&&p.length>=1?"coords = 0;":p.map((e=>`coords.${h[e+c]} = 0;`)).join("\n");let f="";return f=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+c]}`)).join(", "),`\n    float ${r}() {\n      ${d} coords = getOutputCoords();\n      ${u}\n      return get${a}(${f});\n    }\n  `}(e,t)),r}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),l=t.texShape,u=NS(),d=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(u),p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${OS}\n    ${PS}\n    ${DS}\n  `}(u);return t.isPacked?(r=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){let a=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===a[0]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${a[1]}.0);\n      }\n    `:1===a[1]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${a[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${a[0]}, ${a[1]}));\n      return 2 * (resTexRC.x * ${a[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){let a=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(Tr.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${a[0]}, ${a[1]}));\n      }\n    `;let r=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${a[0]}, ${a[1]}));\n\n      int index = resTexRC.x * ${a[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";let a=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),i=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${a[0]}, ${a[1]}));\n      int index = resTexRC.x * ${a[1]} + resTexRC.y;\n\n      int b = index / ${i};\n      index -= b * ${i};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";let a=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),i=r*Math.ceil(e[e.length-2]/2),s=i,o="",l="b, r, c";for(let t=2;t<e.length-1;t++)s*=e[e.length-t-1],o=`\n      int b${t} = index / ${s};\n      index -= b${t} * ${s};\n    `+o,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${a[0]}, ${a[1]}));\n      int index = resTexRC.x * ${a[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${i};\n      index -= b * ${i};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,l,n.enableShapeUniforms),i=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(u)):(r=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){return 1===t[0]?n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){return Tr.arraysEqual(e,t)?n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${TS(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`;let a=CS(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${a}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${TS(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `;let a=CS(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${a}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){let n=CS(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){let n=CS(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,l,n.enableShapeUniforms),i=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),n.packedInputs&&(p+=zS),[p,d,i,s,r,o,n.userCode].join("\n")}function _S(e,t=!1){let n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){let n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${a}() {return ${n};}`;let[r,i]=e.shapeInfo.texShape;if(1===r&&1===i)return`\n      float ${a}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;let s=LS(n);if(t)return`\n    float ${a}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${s});\n      return sampleTexture(${n}, uv);\n    }\n  `;let[o,l]=e.shapeInfo.texShape;return`\n    float ${a}() {\n      vec2 uv = uvFromFlat(${o}, ${l}, ${s});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){let n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${a}(int index) {\n        ${WS(e)}\n      }\n    `;let r=e.shapeInfo.texShape,i=r[0],s=r[1];if(1===s&&1===i)return`\n      float ${a}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;let o=LS(n);return 1===s?t?`\n      float ${a}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${a}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${i}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:1===i?t?`\n      float ${a}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${a}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${s}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:t?`\n    float ${a}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${a}(int index) {\n      vec2 uv = uvFromFlat(${i}, ${s}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){let n=e.shapeInfo.logicalShape,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),i=e.shapeInfo.texShape;if(null!=i&&Tr.arraysEqual(n,i)){if(t)return`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `;let e=i[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${i[1]}.0, ${e}.0);\n      return sampleTexture(${a}, uv);\n    }\n  `}let{newShape:s,keptDims:o}=Tr.squeezeShape(n),l=s;if(l.length<n.length){let n=["row","col"];return`\n      ${_S(US(e,l),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${GS(n,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${WS(e)}\n      }\n    `;let u=i[0],d=i[1],p=LS(a);return 1===d?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${a}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${a}TexShape[0]));\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${a}, uv);\n    }\n  `:1===u?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${a}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${a}TexShape[1]), 0.5);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${d}.0, 0.5);\n      return sampleTexture(${a}, uv);\n    }\n  `:t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a}Shape[1] + col + ${p};\n        vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${p};\n    vec2 uv = uvFromFlat(${u}, ${d}, index);\n    return sampleTexture(${a}, uv);\n  }\n`}(e,t);case 3:return function(e,t){let n=e.shapeInfo.logicalShape,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),i=n[1]*n[2],s=n[2],{newShape:o,keptDims:l}=Tr.squeezeShape(n),u=o;if(u.length<n.length){let n=["row","col","depth"];return`\n        ${_S(US(e,u),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${GS(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${i}, ${s}, 1)));\n        ${WS(e)}\n      }\n    `;let d=e.shapeInfo.texShape,p=d[0],c=d[1],h=e.shapeInfo.flatOffset;if(c===i&&null==h)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${a}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${s}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${c}.0, ${p}.0);\n          return sampleTexture(${a}, uv);\n        }\n      `;if(c===s&&null==h)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${a}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}.0, ${p}.0);\n      return sampleTexture(${a}, uv);\n    }\n  `;let f=LS(a);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${a}Shape[1] * ${a}Shape[2];\n      int stride1 = ${a}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);\n      return sampleTexture(${a}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${i} + col * ${s} + depth + ${f};\n        vec2 uv = uvFromFlat(${p}, ${c}, index);\n        return sampleTexture(${a}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){let n=e.shapeInfo.logicalShape,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),i=n[3],s=n[2]*i,o=n[1]*s,{newShape:l,keptDims:u}=Tr.squeezeShape(n);if(l.length<n.length){let n=["row","col","depth","depth2"];return`\n      ${_S(US(e,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${GS(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${s}, ${i}, 1)));\n        ${WS(e)}\n      }\n    `;let d=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,c=p[0],h=p[1],f=`int stride2 = ${a}Shape[3];`,m=`int stride1 = ${a}Shape[2] * stride2;`,y=`int stride0 = ${a}Shape[1] * stride1;`;if(h===o&&null==d)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${s}, ${i}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${h}.0, ${c}.0);\n        return sampleTexture(${a}, uv);\n      }\n    `;if(h===i&&null==d)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${a}Shape[1] * ${a}Shape[2], ${a}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${h}.0, ${c}.0);\n        return sampleTexture(${a}, uv);\n      }\n    `;let g=LS(a);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${y}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index + ${g});\n      return sampleTexture(${a}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${s} +\n          depth * ${i} + depth2;\n      vec2 uv = uvFromFlat(${c}, ${h}, index + ${g});\n      return sampleTexture(${a}, uv);\n    }\n  `}(e,t);case 5:return function(e){let t=e.shapeInfo.logicalShape,n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],i=t[3]*r,s=t[2]*i,o=t[1]*s,{newShape:l,keptDims:u}=Tr.squeezeShape(t);if(l.length<t.length){let t=["row","col","depth","depth2","depth3"];return`\n      ${_S(US(e,l))}\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        return ${a}(${GS(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${s}, ${i}, ${r})) +\n          depth3;\n        ${WS(e)}\n      }\n    `;let d=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,c=p[0],h=p[1];return h===o&&null==d?`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${s}, ${i}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${h}.0, ${c}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:h===r&&null==d?`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${h}.0, ${c}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${s} + depth * ${i} +\n          depth2 * ${r} + depth3 + ${LS(n)};\n      vec2 uv = uvFromFlat(${c}, ${h}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){let t=e.shapeInfo.logicalShape,n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:i}=Tr.squeezeShape(t);if(r.length<t.length){let t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${_S(US(e,r))}\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${a}(${GS(t,i)});\n      }\n    `}let s=t[5],o=t[4]*s,l=t[3]*o,u=t[2]*l,d=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${d}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${s}, 1)));\n        ${WS(e)}\n      }\n    `;let p=e.shapeInfo.flatOffset,c=e.shapeInfo.texShape,h=c[0],f=c[1];return f===d&&null==p?`\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${s})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:f===s&&null==p?`\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${d} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${s} + depth4 + ${LS(n)};\n      vec2 uv = uvFromFlat(${h}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function FS(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){let t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${NS().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){let n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,i=NS();if(t)return`\n    vec4 ${a}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${i.texture2D}(${n}, uv);\n    }\n  `;let s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${a}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${i.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){let n=e.shapeInfo.logicalShape,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),i=e.shapeInfo.texShape,s=i[0],o=i[1],l=NS();if(null!=i&&Tr.arraysEqual(n,i))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);\n\n        return ${l.texture2D}(${a}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${s}.0);\n\n        return ${l.texture2D}(${a}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${a}TexShape[0]) / 2.0), ceil(float(${a}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${a}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${a}, uv);\n    }\n  `;let u=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${a}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){let n=e.shapeInfo.logicalShape,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),i=e.shapeInfo.texShape,s=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];if(1===n[0]){let a=[1,2],i=["b","row","col"];return`\n        ${FS(US(e,n.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${GS(i,a)});\n        }\n      `}let o=NS();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${a}TexShape[0]) / 2.0), ceil(float(${a}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${a}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${a}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${a}, uv);\n    }\n  `;let l=s[0],u=s[1],d=Math.ceil(n[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${d*Math.ceil(n[1]/2)}, ${d}, b, row, col);\n      return ${o.texture2D}(${a}, uv);\n    }\n  `}(e,t);default:return function(e,t){let n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),r=NS();if(t)return`\n    vec4 ${a}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);\n    }\n  `;let i=e.shapeInfo.logicalShape,s=i.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],d=l[1],p=Math.ceil(i[s-1]/2),c=p*Math.ceil(i[s-2]/2),h="int b, int row, int col",f=`b * ${c} + (row / 2) * ${p} + (col / 2)`;for(let e=2;e<s-1;e++)h=`int b${e}, `+h,c*=i[s-e-1],f=`b${e} * ${c} + `+f;return`\n    vec4 ${a}(${h}) {\n      int index = ${f};\n      int texR = index / ${d};\n      int texC = index - texR * ${d};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}, ${u});\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}var OS="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",PS="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",DS="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",zS="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function LS(e){return`offset${e}`}function WS(e){let t=e.name,n=Tr.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function BS(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function VS(e,t,n){let{newShape:a,keptDims:r}=Tr.squeezeShape(t),i=t.length,s=e&&3===i&&1===t[0],o=s?t.slice(1):a,l=!e&&i>1&&!Tr.arraysEqual(t,n)&&a.length<i||s;return{useSqueezeShape:l,uniformShape:l?o:t,keptDims:r}}function US(e,t){let n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function GS(e,t){return t.map((t=>e[t])).join(", ")}function HS(e,t,n){let a,r,i,s=[],o=[],l=null,u=null;u=e.getUniformLocation(n,"NAN",!1),1===He().getNumber("WEBGL_VERSION")&&(l=e.getUniformLocation(n,"INFINITY",!1));let d=!1;for(let a of t.variableNames){let r={name:a,uniform:e.getUniformLocation(n,a,d),offset:e.getUniformLocation(n,`offset${a}`,d)};t.enableShapeUniforms&&(r.shape=e.getUniformLocation(n,`${a}Shape`,d),r.texShape=e.getUniformLocation(n,`${a}TexShape`,d)),s.push(r)}if(t.enableShapeUniforms&&(a=e.getUniformLocation(n,"outShape",d),i=e.getUniformLocation(n,"outShapeStrides",d),r=e.getUniformLocation(n,"outTexShape",d)),t.customUniforms)for(let a of t.customUniforms)o.push(e.getUniformLocation(n,a.name,d));return{variablesLocations:s,customUniformLocations:o,infLoc:l,nanLoc:u,outShapeLocation:a,outShapeStridesLocation:i,outTexShapeLocation:r}}function jS(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{let a=e.logicalShape,r=t[n],i=r.shape;if(!Tr.arraysEqual(a,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${a} and ${i} must match`);if(e.isUniform&&r.isUniform)return;let s=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!Tr.arraysEqual(s,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${s} and ${o} must match`)}))}function qS(e){return He().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}var XS={R:0,G:1,B:2,A:3},KS=class{constructor(e,t=!1,n="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];let a=NS();this.outputShape=e,this.enableShapeUniforms=qS(this.outputShape.length);let r="result";t&&(r="floor(result * 255. + 0.5)");let i="";for(let e=0;e<n.length;e++){let t=n[e];i+=`\n          if(offset == ${e}) {\n            result = values[${XS[t]}];\n          }`}this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":ES(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${n.length});\n\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${a.texture2D}(A, uv);\n          ${i}\n        }\n        ${a.output} = vec4(${r}, 0., 0., 0.);\n      }\n    `}},ZS={};function YS(e){let t=NS();return _I(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function JS(e){return VI(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function QS(e){return UI(e,new Uint16Array([0,1,2,2,1,3]))}function eN(e,t,n,a,r,i){jI(t,n);let s=HI(e),o=e.TEXTURE_2D;return CI(e,(()=>e.bindTexture(o,s))),CI(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),CI(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),CI(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),CI(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===He().getNumber("WEBGL_VERSION")?CI(e,(()=>e.texImage2D(o,0,a,t,n,0,r,i,null))):CI(e,(()=>e.texStorage2D(o,1,a,t,n))),CI(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:s,texShape:[n,t]}}function tN(e){return e.internalFormatFloat}function nN(e,t,n,a){let[r,i]=kI(t,n);return eN(e,r,i,tN(a),a.textureFormatFloat,e.FLOAT)}function aN(e){return e.internalFormatHalfFloat}function rN(e,t,n,a){let[r,i]=kI(t,n);return eN(e,r,i,aN(a),a.textureFormatFloat,a.textureTypeHalfFloat)}function iN(e){return e.downloadTextureFormat}function sN(e,t,n,a){let[r,i]=kI(t,n);return eN(e,r,i,iN(a),e.RGBA,e.UNSIGNED_BYTE)}function oN(e){return e.internalFormatPackedFloat}function lN(e,t,n,a){let[r,i]=SI(t,n);return eN(e,r,i,oN(a),e.RGBA,e.FLOAT)}function uN(e){return e.internalFormatPackedHalfFloat}function dN(e,t,n,a){let[r,i]=SI(t,n);return eN(e,r,i,uN(a),e.RGBA,a.textureTypeHalfFloat)}function pN(e,t,n){return CI(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),XI(e,t,"clipSpacePos",n,3,20,0)&&XI(e,t,"uv",n,2,20,12)}function cN(e,t,n,a,r,i){let s,o,l;CI(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(s=new Uint8Array(n*a*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(s=new Float32Array(n*a*4),o=e.FLOAT,l=i.internalFormatPackedFloat),s.set(r),2===He().getNumber("WEBGL_VERSION")?CI(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,a,e.RGBA,o,s))):CI(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,a,0,e.RGBA,o,s))),CI(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function hN(e,t,n){CI(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===He().getNumber("WEBGL_VERSION")?CI(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):CI(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===He().getNumber("WEBGL_VERSION")?CI(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):CI(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),CI(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function fN(e,t,n,a){let r=e.createBuffer();CI(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));let i=16*t*n;return CI(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,i,e.STREAM_READ))),CI(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),CI(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}function mN(e,t,n){let a=e,r=new Float32Array(n);return a.bindBuffer(a.PIXEL_PACK_BUFFER,t),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,r),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),r}function yN(e,t,n,a){let[r,i]=kI(t,n),s=new Uint8Array(function(e,t){return 4*e}(t*n));return CI(e,(()=>e.readPixels(0,0,r,i,a.downloadTextureFormat,e.UNSIGNED_BYTE,s))),new Float32Array(s.buffer)}function gN(e,t,n,a,r,i,s,o){let l=e,u=new Float32Array(function(e,t){let[n,a]=SI(e,t);return n*a*4}(i,s));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}function AN(e,t,n){let a=new Float32Array(t*n*4);return CI(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,a))),a}k(ZS,{bindVertexProgramAttributeStreams:()=>pN,createBufferFromOutputTexture:()=>fN,createFloat16MatrixTexture:()=>rN,createFloat16PackedMatrixTexture:()=>dN,createFloat32MatrixTexture:()=>nN,createIndexBuffer:()=>QS,createPackedMatrixTexture:()=>lN,createUnsignedBytesMatrixTexture:()=>sN,createVertexBuffer:()=>JS,createVertexShader:()=>YS,downloadByteEncodedFloatMatrixFromOutputTexture:()=>yN,downloadFloat32MatrixFromBuffer:()=>mN,downloadMatrixFromPackedOutputTexture:()=>AN,downloadPackedMatrixFromBuffer:()=>gN,getInternalFormatForFloat16MatrixTexture:()=>aN,getInternalFormatForFloat16PackedMatrixTexture:()=>uN,getInternalFormatForFloat32MatrixTexture:()=>tN,getInternalFormatForPackedMatrixTexture:()=>oN,getInternalFormatForUnsignedBytesMatrixTexture:()=>iN,uploadDenseMatrixToTexture:()=>cN,uploadPixelDataToTexture:()=>hN});var xN=class{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];let t=He().getNumber("WEBGL_VERSION");if(null!=e?(this.gl=e,vI(t,e)):this.gl=wI(t),e=this.gl,2===He().getNumber("WEBGL_VERSION")){let t=e;this.createVertexArray=()=>CI(t,(()=>t.createVertexArray())),this.bindVertexArray=e=>CI(t,(()=>t.bindVertexArray(e))),this.deleteVertexArray=e=>CI(t,(()=>t.deleteVertexArray(e))),this.getVertexArray=()=>CI(t,(()=>t.getParameter(t.VERTEX_ARRAY_BINDING)))}else if(null!=e){let t=e.getExtension("OES_vertex_array_object");if(null==t)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>CI(e,(()=>t.createVertexArrayOES())),this.bindVertexArray=n=>CI(e,(()=>t.bindVertexArrayOES(n))),this.deleteVertexArray=n=>CI(e,(()=>t.deleteVertexArrayOES(n))),this.getVertexArray=()=>CI(e,(()=>e.getParameter(t.VERTEX_ARRAY_BINDING_OES)))}let n="WEBGL_color_buffer_float",a="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===He().getNumber("WEBGL_VERSION")){let e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=MI(this.gl,e),AS(this.gl,t))this.textureHalfFloatExtension=MI(this.gl,t);else if(He().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),AS(this.gl,a))this.colorBufferHalfFloatExtension=MI(this.gl,a);else if(He().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",AS(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!AS(this.gl,a))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(a)}this.vertexBuffer=JS(this.gl),this.indexBuffer=QS(this.gl),this.framebuffer=qI(this.gl),this.textureConfig=NI(this.gl,this.textureHalfFloatExtension)}get debug(){return He().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");let e=this.gl;CI(e,(()=>e.finish())),CI(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),CI(e,(()=>e.deleteFramebuffer(this.framebuffer))),CI(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),CI(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),CI(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),nN(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),rN(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),sN(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),hN(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,a){this.throwIfDisposed(),cN(this.gl,e,t,n,a,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),dN(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),lN(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(nS(this.gl,this.framebuffer),this.outputTexture=null),CI(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>yN(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,a,r,i){return gN(this.gl,e,0,0,0,r,i,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return mN(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);let a=fN(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),a}createAndWaitForFence(){let e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(He().getBool("WEBGL_FENCE_API_ENABLED")){let a=e,r=a.fenceSync(a.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{let e=a.clientWaitSync(r,0,0);return e===a.ALREADY_SIGNALED||e===a.CONDITION_SATISFIED},t=r}else He().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,He().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>AN(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();let t=this.gl;null==this.vertexShader&&(this.vertexShader=YS(t));let n=LI(t);CI(t,(()=>t.attachShader(n,this.vertexShader))),CI(t,(()=>t.attachShader(n,e))),WI(t,n);let a=Object.assign(n,{vao:this.createVertexArray()});return this.debug&&BI(t,a),a}buildVao(e){this.setProgram(e),this.bindVertexArray(e.vao);let t=this.gl;CI(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer))),pN(t,e,this.vertexBuffer)}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&(CI(this.gl,(()=>this.gl.deleteProgram(e))),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&BI(this.gl,this.program),CI(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?YI(this.gl,e,t):JI(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),CI(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),QI(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();let[a,r]=SI(t,n);this.setOutputMatrixTextureDriver(e,a,r)}setOutputMatrixWriteRegion(e,t,n,a){this.setOutputMatrixWriteRegionDriver(n,e,a,t)}setOutputPackedMatrixWriteRegion(e,t,n,a){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&BI(this.gl,this.program),aS(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();let e=this.gl;if(this.debug){let e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}CI(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),CI(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=MI(this.gl,2===He().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===He().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){let e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}let e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===He().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){let e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}let e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await Tr.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,He().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,He().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){let t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{let t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){let t=this.gl,n=this.getQueryTimerExtensionWebGL2(),a=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),a&&!this.disjoint}{let t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){let e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){let{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in He().platform&&(n=He().platform.setTimeoutCustom.bind(He().platform)),Tr.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),tS(this.gl,e,this.framebuffer),this.debug&&aS(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(tS(this.gl,this.outputTexture,this.framebuffer),this.debug&&aS(this.gl)):nS(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);let n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();let a=this.gl;tS(a,e,this.framebuffer),this.debug&&aS(a),this.outputTexture=e,CI(a,(()=>a.viewport(0,0,t,n))),CI(a,(()=>a.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,a){this.throwIfDisposed(),CI(this.gl,(()=>this.gl.scissor(e,t,n,a)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}},{addImpl:bN,bincountImpl:vN,bincountReduceImpl:wN,bitwiseAndImpl:kN,castImpl:IN,ceilImpl:SN,concatImpl:NN,equalImpl:CN,expImpl:TN,expm1Impl:EN,floorImpl:RN,gatherNdImpl:$N,gatherV2Impl:MN,greaterImpl:_N,greaterEqualImpl:FN,lessImpl:ON,lessEqualImpl:PN,linSpaceImpl:DN,logImpl:zN,maxImpl:LN,maximumImpl:WN,minimumImpl:BN,multiplyImpl:VN,negImpl:UN,notEqualImpl:GN,prodImpl:HN,raggedGatherImpl:jN,raggedRangeImpl:qN,raggedTensorToTensorImpl:XN,rangeImpl:KN,rsqrtImpl:ZN,scatterImpl:YN,sigmoidImpl:JN,simpleAbsImpl:QN,sliceImpl:eC,sparseFillEmptyRowsImpl:tC,sparseReshapeImpl:nC,sparseSegmentReductionImpl:aC,sqrtImpl:rC,staticRegexReplaceImpl:iC,stridedSliceImpl:sC,stringNGramsImpl:oC,stringSplitImpl:lC,stringToHashBucketFastImpl:uC,subImpl:dC,tileImpl:pC,topKImpl:cC,transposeImpl:hC,uniqueImpl:fC}=Dg;function mC(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function yC(e,t){return 1===t?[e]:mC(e,t)}var gC=class{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=qS(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}this.userCode=`\n      ${function(e,t){return`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${t?function(e,t,n="index"){let a=function(e,t){let n=e.length,a=e.map((e=>`${t}[${e}]`)),r=new Array(n-1);r[n-2]=a[n-1];for(let e=n-3;e>=0;--e)r[e]=`(${r[e+1]} * ${a[e+1]})`;return r}(e.map(((e,t)=>t)),t);return a.map(((t,r)=>`int ${e[r]} = ${n} / ${a[r]}; ${r===a.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${a[r]}`:`index -= ${e[r]} * ${a[r]}`};`)).join("")}(["r","c","d"],"inputShape"):CS(["r","c","d"],e)}\n      return ivec3(r, c, d);\n    }\n  `}(t,this.enableShapeUniforms)}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":ES(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}};function AC(e,t,n,a,r){let i,s=function(e,t){switch(e){case AI.PACKED_2X2_FLOAT32:return oN(t);case AI.PACKED_2X2_FLOAT16:return uN(t);case AI.UNPACKED_FLOAT32:return tN(t);case AI.UNPACKED_FLOAT16:return aN(t);case AI.PACKED_4X1_UNSIGNED_BYTE:return iN(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,a);if(r){let[t,n]=SI(e[0],e[1]);i=t*n}else{let[t,n]=kI(e[0],e[1]);i=t*n}let o=function(e,t){let n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,s);return i*o}function xC(e,t){if(e===gI.UPLOAD)return AI.PACKED_2X2_FLOAT32;if(e===gI.RENDER||null==e)return function(e){return He().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?AI.PACKED_2X2_FLOAT32:AI.UNPACKED_FLOAT32:e?AI.PACKED_2X2_FLOAT16:AI.UNPACKED_FLOAT16}(t);if(e===gI.DOWNLOAD||e===gI.PIXELS)return AI.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function bC(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}var vC=class{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=qS(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}},wC="if (isnan(x)) return x;",kC="return x;",IC="return abs(x);",SC="return (x >= 0.0) ? x : (exp(x) - 1.0);",NC=wC+"\n  return (x < 0.0) ? 0.0 : x;\n",CC=wC+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",TC="return x;",EC="return 1.0 / (1.0 + exp(-1.0 * x));",RC="return x;",$C="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",MC="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",_C="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",FC="return 1.0 / (1.0 + exp(-1.0 * x));",OC=class{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=qS(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}},PC=Km.whereImpl,DC={},zC=He().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"),LC=class extends j{nextDataId(){return LC.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!He().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof xN)t=e;else{let n=wI(He().getNumber("WEBGL_VERSION"),e);t=new xN(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{let e=wI(He().getNumber("WEBGL_VERSION"));t=new xN(e),this.binaryCache=function(e){return e in DC||(DC[e]={}),DC[e]}(He().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new class{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,t,n){let a=xC(t,n),r=bC(e,a,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);let i,s=AC(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=s,this.log();let e=this.freeTextures[r].pop();return this.usedTextures[r].push(e),e}return a===AI.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):a===AI.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):a===AI.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):a===AI.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):a===AI.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=s,this.log(),i}releaseTexture(e,t,n,a){if(null==this.freeTextures)return;let r=xC(n,a),i=bC(t,r,a);i in this.freeTextures||(this.freeTextures[i]=[]);let s=AC(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,a),o=He().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=s):(this.freeTextures[i].push(e),this.numFreeTextures++,this._numBytesFree+=s),this.numUsedTextures--;let l=this.usedTextures[i],u=l&&l.indexOf(e);if(null==u||u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l[u]=l[l.length-1],l.pop(),this.log()}log(){if(!this.logEnabled)return;let e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);let t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(let e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(let e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}(this.gpgpu),this.numMBBeforeWarning=null==He().global.screen?1024:He().global.screen.height*He().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new H(this,to())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,a,r,i){let s=this.makeTensorInfo(t,n),o=this.texData.get(s.dataId);o.isPacked=!1,o.texture={texture:e,texShape:[a,r]},o.texShape=[a,r];let l=uS(t),u=new KS(l,!1,i),d=this.runWebGLProgram(u,[s],n,[[a,r]]);return d.shape=t,o.texture=null,this.disposeIntermediateTensorInfo(s),d.dataId}write(e,t,n){if((He().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||He().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let a={id:this.nextDataId()};return this.texData.set(a,{shape:t,dtype:n,values:e,usage:gI.UPLOAD,refCount:1}),a}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,a,r){if(He().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===a)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:a,values:t,usage:gI.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){let t=this.texData.get(e),{values:n,dtype:a,complexTensorInfos:r,slice:i,shape:s,isPacked:o}=t;if(null!=i){let t;t=o?new OC(s,TC):new vC(s,TC);let n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===a)return n;let l,u,d=null!=this.activeTimers;if(d&&(l=Tr.now()),"complex64"===a){let e=this.readSync(r.real.dataId),t=this.readSync(r.imag.dataId);u=Bf.mergeRealAndImagArrays(e,t)}else u=this.getValuesFromTexture(e);return d&&(this.downloadWaitMs+=Tr.now()-l),this.convertAndCacheOnCPU(e,u)}async read(e){if(this.pendingRead.has(e)){let t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}let t=this.texData.get(e),{values:n,shape:a,slice:r,dtype:i,complexTensorInfos:s,isPacked:o}=t;if(null!=r){let t;t=o?new OC(a,TC):new vC(a,TC);let n=this.runWebGLProgram(t,[{dataId:e,shape:a,dtype:i}],i),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(He().getBool("DEBUG")&&!He().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===He().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,d=null;if("complex64"!==i&&He().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);let t=this.texData.get(l.dataId);d=this.gpgpu.createBufferFromTexture(t.texture.texture,...II(a))}if(this.pendingRead.set(e,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){let e=await Promise.all([this.read(s.real.dataId),this.read(s.imag.dataId)]),t=e[0],n=e[1];u=Bf.mergeRealAndImagArrays(t,n)}else if(null==d)u=this.getValuesFromTexture(e);else{let e=Tr.sizeFromShape(a);u=this.gpgpu.downloadFloat32MatrixFromBuffer(d,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=d){let e=this.gpgpu.gl;CI(e,(()=>e.deleteBuffer(d)))}let p=this.convertAndCacheOnCPU(e,u),c=this.pendingRead.get(e);return this.pendingRead.delete(e),c.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&to().removeDataId(e,this),this.pendingDeletes--),p}readToGPU(e,t={}){let n=this.texData.get(e),{values:a,shape:r,slice:i,dtype:s,isPacked:o,texture:l}=n;if("complex64"===s)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=i){let n;n=o?new OC(r,TC):new vC(r,TC);let a=this.runWebGLProgram(n,[{dataId:e,shape:r,dtype:s}],s),i=this.readToGPU(a,t);return this.disposeIntermediateTensorInfo(a),i}if(null==l)throw null!=a?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");let u=this.decode(e,t.customTexShape),d=to().makeTensorFromTensorInfo(u),p=this.texData.get(u.dataId);return Object.assign({tensorRef:d},p.texture)}bufferSync(e){let t=this.readSync(e.dataId);if("string"===e.dtype)try{let n=t.map((e=>Tr.decodeString(e)));return js(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return js(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){let n=e[t];if(!RI(n))throw He().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${n} cannot be represented on this device.`)}}getValuesFromTexture(e){let{shape:t,dtype:n,isPacked:a}=this.texData.get(e),r=Tr.sizeFromShape(t);if(He().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){let n=this.decode(e),a=this.texData.get(n.dataId),i=this.gpgpu.downloadMatrixFromPackedTexture(a.texture.texture,...II(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),i}let i=He().getBool("WEBGL_PACK")&&!0===a,s=i?uS(t):t,o=i?new class{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=gI.DOWNLOAD;let t=NS();this.outputShape=e,this.userCode=`\n      ${RS}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}(s):new class{constructor(e){this.variableNames=["A"],this.outTexUsage=gI.DOWNLOAD;let t=NS();this.outputShape=e,this.userCode=`\n      ${RS}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}(s),l=this.runWebGLProgram(o,[{shape:s,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),d=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),d}timerAvailable(){return He().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){let t=this.activeTimers,n=[],a=!1;null==this.programTimersStack?(this.programTimersStack=n,a=!0):this.activeTimers.push(n),this.activeTimers=n,e();let r=Tr.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),i=Tr.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,a&&(this.programTimersStack=null);let s={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(He().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){let e=await Promise.all(r);s.kernelMs=Tr.sum(e),s.getExtraProfileInfo=()=>e.map(((e,t)=>({name:i[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else s.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,s})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return He().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Tr.now(),endMs:null}}endTimer(e){return He().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Tr.now(),e)}async getQueryTime(e){if(He().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);let t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);let{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){let{texture:t,dtype:n,texShape:a,usage:r,isPacked:i,slice:s}=this.texData.get(e),o=s&&s.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(a,n),this.textureManager.releaseTexture(t,a,r,i)));let u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=zC){return He().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&Tr.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){Bf.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");let t=e.dataSync();return PC(e.shape,t)}packedUnaryOp(e,t,n){let a=new OC(e.shape,t),r=this.compileAndRun(a,[e],n);return to().makeTensorFromTensorInfo(r)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){let t=QN(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(He().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,IC,e.dtype);let t=new vC(e.shape,IC),n=this.compileAndRun(t,[e]);return to().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let a;if("string"===t&&null!=n&&n.length>0&&Tr.isString(n[0])){let r=n.map((e=>Tr.encodeString(e)));a=this.write(r,e,t)}else a=this.write(n,e,t);return this.texData.get(a).usage=null,{dataId:a,shape:e,dtype:t}}makeOutput(e,t,n){return to().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){let t=new class{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=qS(this.outputShape.length);let t=e.length,n=yC("rc",t),a=BS(t),r=function(e,t){if(1===e)return"rc";let n="";for(let a=0;a<e;a++)n+=t[a],a<e-1&&(n+=",");return n}(t,n),i=n.slice(-2),s=t<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`\n      void main() {\n        ${a} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${s}));\n      }\n    `}}(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){let t=new class{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=qS(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{let e=yC("rc",this.rank),t=BS(this.rank),n=this.getOutOfBoundsCondition(e),a=this.getSetup(e),r=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${r}));\n          }\n        }\n      `}}getSourceCoordsArr(e){let t=[];for(let n=0;n<=1;n++)for(let a=0;a<=1;a++){let r=`${0===n?"r":"rp1"}, ${0===a?"c":"cp1"}`;for(let t=2;t<this.rank;t++)r=`${e[e.length-1-t]},`+r;t.push(r)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";let t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],a=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${a};\n    `}getOutput(e){let t=this.getSourceCoordsArr(e);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){let n=[oS(e.shape),...lS(e.shape)],a={dtype:e.dtype,shape:n,dataId:e.dataId},r=[oS(t),...lS(t)],i=new gC(r,n),s=[n],o=this.runWebGLProgram(i,[a],e.dtype,s,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e,t){let n=this.texData.get(e),{isPacked:a,shape:r,dtype:i}=n;if(null!=t){let e=Tr.sizeFromShape(r),n=t[0]*t[1]*4;Tr.assert(e<=n,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}let s,o=uS(r);s=a?new class{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=yI.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=NS();this.outputShape=e,this.enableShapeUniforms=qS(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?TS(["r","c","d"],e):CS(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}(o):new class{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=yI.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=NS();this.outputShape=e,this.enableShapeUniforms=qS(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?TS(["r","c","d"],e):CS(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}(o);let l=[null!=t?t:II(o)];return{dtype:i,shape:r,dataId:this.runWebGLProgram(s,[{shape:o,dtype:i,dataId:e}],i,l,!0,t).dataId}}runWebGLProgram(e,t,n,a,r=!1,i){let s=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(s.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===yI.DENSE){let t=null!=i?i:II(e.outputShape);o.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===Tr.sizeFromShape(s.shape))return o.values=Tr.getTypedArrayFromDType(s.dtype,0),s;let l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&Tr.sizeFromShape(t.shape)<=He().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!cS(n.shape,t.shape)){let e=t,a=t.shape;t.shape=n.shape,t=this.packedReshape(t,a),l.push(t),n=this.texData.get(t.dataId),e.shape=a}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(s.dataId);let d,p={shape:s.shape,texData:o,isUniform:!1},c=function(e,t,n){let a="";t.concat(n).forEach((t=>{let r=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){let i=t.texData.texShape,{useSqueezeShape:s,uniformShape:o,keptDims:l}=VS(e.packedInputs,t.shape,i),u="",d="",p="";if(1===o.length&&e.packedInputs){let e=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){let e=Tr.computeStrides(o);p=`${e[0]===i[1]}_${e[e.length-1]===i[1]}`}}else d=`${o[0]>1}_${o[1]>1}`;let c=t.shape.length,h=2===o.length&&Tr.arraysEqual(t.shape,i),f=1===Tr.sizeFromShape(t.shape),m=Bf.getBroadcastDims(t.shape,n.shape),y=!e.packedInputs&&c===n.shape.length&&Tr.arraysEqual(i,n.texData.texShape),g=e.packedInputs||o.length>2?"":`${i[0]>1}_${i[1]>1}`;a+=`${c}_${y}_${s?l:""}_${o.length}_${f}_${m}_${h}_${u}_${d}_${p}_${g}_${r}`}else{let e=t.isUniform?"uniform":t.texData.texShape;a+=`${t.shape}_${e}_${r}`}}));let r=e.userCode,i=e.constructor.name;return i+="_"+a+"_"+r+`${He().getNumber("WEBGL_VERSION")}`,i}(e,u,p),h=this.getAndSaveBinary(c,(()=>function(e,t,n,a){let r=n.map(((e,n)=>{let a={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(a.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:a}})),i=r.map((e=>e.shapeInfo)),s={logicalShape:a.shape,texShape:a.texData.texShape,isUniform:!1,isPacked:a.texData.isPacked,flatOffset:null},o=MS(r,s,t),l=FI(e.gl,o),u=e.createProgram(l);return He().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:i,outShapeInfo:s,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(e.buildVao(u),Object.assign({program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:i,outShapeInfo:s},HS(e,t,u)))}(this.gpgpu,e,u,p))),f=null!=this.activeTimers;f&&(d=this.startTimer()),He().get("ENGINE_COMPILE_ONLY")||function(e,t,n,a,r){t.program.enableShapeUniforms||(jS(t.inShapeInfos,n),jS([t.outShapeInfo],[a]));let i=a.texData.texture,s=a.texData.texShape;a.texData.isPacked?e.setOutputPackedMatrixTexture(i.texture,s[0],s[1]):e.setOutputMatrixTexture(i.texture,s[0],s[1]),e.setProgram(t.webGLProgram),e.bindVertexArray(t.webGLProgram.vao),1===He().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN);for(let a=0;a<n.length;++a){let r=n[a],{uniform:i,offset:s,shape:o,texShape:l}=t.variablesLocations[a];if(o){let{uniformShape:n}=VS(t.program.packedInputs,r.shape,r.texData.texShape);switch(n.length){case 1:e.gl.uniform1iv(o,new Int32Array(n));break;case 2:e.gl.uniform2iv(o,new Int32Array(n));break;case 3:e.gl.uniform3iv(o,new Int32Array(n));break;case 4:e.gl.uniform4iv(o,new Int32Array(n))}}if(l&&e.gl.uniform2i(l,r.texData.texShape[0],r.texData.texShape[1]),null!=i){if(r.isUniform){if(Tr.sizeFromShape(r.shape)<2)e.gl.uniform1f(i,r.uniformValues[0]);else{let t=r.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(i,t)}continue}null!=r.texData.slice&&null!=s&&e.gl.uniform1i(s,r.texData.slice.flatOffset),e.setInputMatrixTexture(r.texData.texture.texture,i,a)}}let o=t.outShapeLocation;if(o)switch(a.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(a.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(a.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(a.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(a.shape))}if(t.outShapeStridesLocation){let n=Tr.computeStrides(a.shape);switch(a.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}if(t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,a.texData.texShape[0],a.texData.texShape[1]),t.program.customUniforms&&r)for(let n=0;n<t.program.customUniforms.length;++n){let a=t.program.customUniforms[n],i=t.customUniformLocations[n],s=r[n];if("float"===a.type)e.gl.uniform1fv(i,s);else if("vec2"===a.type)e.gl.uniform2fv(i,s);else if("vec3"===a.type)e.gl.uniform3fv(i,s);else if("vec4"===a.type)e.gl.uniform4fv(i,s);else if("int"===a.type)e.gl.uniform1iv(i,s);else if("ivec2"===a.type)e.gl.uniform2iv(i,s);else if("ivec3"===a.type)e.gl.uniform3iv(i,s);else{if("ivec4"!==a.type)throw Error(`uniform type ${a.type} is not supported yet.`);e.gl.uniform4iv(i,s)}}e.executeProgram()}(this.gpgpu,h,u,p,a),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),f&&(d=this.endTimer(d),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(d)}));let m=He().get("WEBGL_FLUSH_THRESHOLD");if(m>0){let e=Tr.now();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!He().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===r){let e=this.unpackTensor(s);return this.disposeIntermediateTensorInfo(s),e}return s}compileAndRun(e,t,n,a,r=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,a,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(He().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=ro((()=>{if(!He().get("WEBGL_RENDER_FLOAT32_ENABLED")){let e=He().getBool("DEBUG");He().set("DEBUG",!1);let t=this.abs(lu(1e-8)).dataSync()[0];if(He().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){let t=this.texData.get(e),{shape:n,dtype:a,values:r,texture:i,usage:s,isPacked:o}=t;if(null!=i)return;let l,u=null!=this.activeTimers;u&&(l=Tr.now());let d=t.texShape;if(null==d&&(d=dS(n,o),t.texShape=d),null!=r){let e,i=uS(n),s=d[1],p=d[0],c=r instanceof Uint8Array||r instanceof Uint8ClampedArray;(o||!c)&&([s,p]=SI(d[0],d[1])),e=o?new class{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];let n=NS();this.outputShape=e,this.enableShapeUniforms=qS(this.outputShape.length);let a="",r="result";t&&(r="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let r=0;r<=1;r++){let i=2*t+r;a+=`\n          localCoords = coords;\n          if(localCoords[2] + ${r} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${r};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${i}] = values[0];\n            } else if (offset == 1) {\n              result[${i}] = values[1];\n            } else if (offset == 2) {\n              result[${i}] = values[2];\n            } else {\n              result[${i}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":ES(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${a}\n\n          ${n.output} = ${r};\n        }\n    `}}(i,c):new KS(i,c);let h=c?[p,s]:d,f=this.makeTensorInfo(h,a),m=this.texData.get(f.dataId);m.usage=c?gI.PIXELS:gI.UPLOAD,m.texShape=h,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),s,p,r);let y=[[p,s]],g=!0,A=this.runWebGLProgram(e,[f],a,y,g),x=this.texData.get(A.dataId);t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,He().get("ENGINE_COMPILE_ONLY")?this.disposeData(A.dataId):(t.texture=x.texture,t.values=null,this.texData.delete(A.dataId)),this.disposeIntermediateTensorInfo(f),u&&(this.uploadWaitMs+=Tr.now()-l)}else{let e=this.acquireTexture(d,s,a,o);t.texture=e}}convertAndCacheOnCPU(e,t){let n=this.texData.get(e),{dtype:a}=n;return null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){let n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,a)),n.values}acquireTexture(e,t,n,a){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){let e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,a)}computeBytes(e,t){return e[0]*e[1]*Tr.bytesPerElement(t)}checkCompileCompletion(){for(let[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){let e=[];if(this.gpgpu.parallelCompilationExtension){for(let[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(let[,t]of Object.entries(this.binaryCache)){let n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await Lf(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS))throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)?(zI(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(let e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);let{variablesLocations:t,customUniformLocations:n,infLoc:a,nanLoc:r,outShapeLocation:i,outShapeStridesLocation:s,outTexShapeLocation:o}=HS(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=t,e.customUniformLocations=n,e.infLoc=a,e.nanLoc=r,e.outShapeLocation=i,e.outShapeStridesLocation=s,e.outTexShapeLocation=o}}createTensorFromGPUData(e,t,n){e.channels=e.channels||"RGBA";let{texture:a,height:r,width:i,channels:s}=e,o=to().backend;if(!o.gpgpu.gl.isTexture(a))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");let l=o.writeTexture(a,t,n,r,i,s);return to().makeTensorFromDataId(l,t,n,o)}};LC.nextDataId=0;var WC="4.7.0";function BC(){He().set("WEBGL_FORCE_F16_TEXTURES",!0)}Pi.isBrowser()&&mo("webgl",(()=>new LC),2);var VC={forceHalfFloat:BC},UC="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n",GC=class{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Bf.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=qS(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}},HC="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n",jC=class{constructor(e,t,n,a=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Bf.assertAndGetBroadcastShape(t,n);let r=this.outputShape.length;this.enableShapeUniforms=qS(r);let i="";if(a)if(0===r||1===Tr.sizeFromShape(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i=`\n          ${BS(r)} coords = getOutputCoords();\n        `,1===r)this.enableShapeUniforms?i+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":i+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{let e=yC("coords",r);this.enableShapeUniforms?i+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= outShape[${r} - 2];\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= outShape[${r} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:i+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}};function qC(e){let{inputs:t,backend:n}=e,{x:a}=t;return n.incRef(a.dataId),{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}var XC={kernelName:hn,backendName:"webgl",kernelFunc:qC};function KC(e){let{inputs:t,backend:n}=e,{real:a,imag:r}=t,i=n.makeTensorInfo(a.shape,"complex64"),s=n.texData.get(i.dataId),o=qC({inputs:{x:a},backend:n}),l=qC({inputs:{x:r},backend:n});return s.complexTensorInfos={real:o,imag:l},i}var ZC={kernelName:kt,backendName:"webgl",kernelFunc:KC},YC="return (a < 0.) ? b * a : a;",JC="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",QC={kernelName:xn,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{alpha:i}=a,s=n.makeTensorInfo([],"float32",Tr.createScalarValue(i,"float32")),o=He().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new jC(JC,r.shape,s.shape):new GC(YC,r.shape,s.shape),l=n.runWebGLProgram(o,[r,s],"float32");return n.disposeIntermediateTensorInfo(s),l}},eT="return (a < 0.) ? b * a : a;",tT="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",nT={kernelName:ia,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:a,alpha:r}=t,i=He().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new jC(tT,a.shape,r.shape):new GC(eT,a.shape,r.shape);return n.runWebGLProgram(i,[a,r],"float32")}},aT="if (isnan(x)) return x;";function rT({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:a}){return({inputs:r,backend:i})=>{let s,{x:o}=r,l=i,u=a||o.dtype;if(l.shouldExecuteOnCPU([o])&&null!=n){let e=l.texData.get(o.dataId),t=n(e.values,u);return l.makeTensorInfo(o.shape,u,t)}return s=He().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new OC(o.shape,t):new vC(o.shape,e),l.runWebGLProgram(s,[o],u)}}function iT({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:a=!1,cpuKernelImpl:r,dtype:i}){return({inputs:s,backend:o})=>{let{a:l,b:u}=s,d=o;if(a&&"complex64"===l.dtype){let t=d.texData.get(l.dataId),n=d.texData.get(u.dataId),[a,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{let[n,a]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},i={dataId:a.dataId,dtype:a.dtype,shape:u.shape},s=new GC(e,l.shape,u.shape);return d.runWebGLProgram(s,[r,i],bi(n.dtype,a.dtype))})),i=KC({inputs:{real:a,imag:r},backend:d});return d.disposeIntermediateTensorInfo(a),d.disposeIntermediateTensorInfo(r),i}let p,c=i||bi(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||d.shouldExecuteOnCPU([l,u]))&&null!=r){let e=d.texData.get(l.dataId).values,t=d.texData.get(u.dataId).values,n="string"===l.dtype?Bf.fromUint8ToStringArray(e):e,a="string"===l.dtype?Bf.fromUint8ToStringArray(t):t,[i,s]=r(l.shape,u.shape,n,a,c),o=d.makeTensorInfo(s,c);return d.texData.get(o.dataId).values=i,o}return p=He().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new jC(t,l.shape,u.shape,n):new GC(e,l.shape,u.shape),d.runWebGLProgram(p,[l,u],c)}}function sT(e,t=!1){if("linear"===e)return t?RC:kC;if("relu"===e)return t?MC:NC;if("elu"===e)return t?$C:SC;if("relu6"===e)return t?_C:CC;if("prelu"===e)return t?tT:eT;if("leakyrelu"===e)return t?JC:YC;if("sigmoid"===e)return t?FC:EC;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}var oT=class{constructor(e,t,n,a=!1,r=!1,i=!1,s=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=qS(this.outputShape.length);let u=a?e[1]:e[2],d=Math.ceil(u/2),p=a?"i * 2, rc.y":"rc.y, i * 2",c=r?"rc.z, i * 2":"i * 2, rc.z",h=a?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],m="",y="";s&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`vec4 activation(vec4 x) {\n          ${s}\n        }`,y="result = activation(result);");let g=i?"result += getBiasAtOutCoords();":"";i&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let A="rc.x",x="rc.x";e[0]<t[0]?A=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(x=`imod(rc.x, ${t[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${d}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${A};\n        int batchB = ${x};\n        for (int i = 0; i < ${d}; i++) {\n          vec4 a = getMatrixA(batchA, ${p});\n          vec4 b = getMatrixB(batchB, ${c});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${f[0]});\n          result += (${h[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${g}\n\n        ${y}\n\n        setOutput(result);\n      }\n    `}},lT={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"},uT=class{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Bf.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}},dT="return a * b;";function pT(e){let t,{inputs:n,backend:a}=e,{a:r,b:i}=n,s=Bf.upcastType(r.dtype,i.dtype);if("complex64"===r.dtype){let e=a.texData.get(r.dataId),t=a.texData.get(i.dataId),n=new uT(lT.REAL,r.shape,i.shape),s=new uT(lT.IMAG,r.shape,i.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:i.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:i.shape}],l=a.runWebGLProgram(n,o,"float32"),u=a.runWebGLProgram(s,o,"float32"),d=KC({inputs:{real:l,imag:u},backend:a});return a.disposeIntermediateTensorInfo(l),a.disposeIntermediateTensorInfo(u),d}if(a.shouldExecuteOnCPU([r,i])){let e=a.texData.get(r.dataId),t=a.texData.get(i.dataId),[n,o]=VN(r.shape,i.shape,e.values,t.values,s),l=a.makeTensorInfo(o,s);return a.texData.get(l.dataId).values=n,l}return t=He().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new jC(dT,r.shape,i.shape):new GC(dT,r.shape,i.shape),a.runWebGLProgram(t,[r,i],s)}var cT={kernelName:qn,backendName:"webgl",kernelFunc:pT};function hT(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{shape:i}=a,s=n,o=Tr.sizeFromShape(r.shape),l=Tr.inferFromImplicitShape(i,o),u=Tr.sizeFromShape(l);Tr.assert(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));let d=s.texData.get(r.dataId);return!d.isPacked||cS(r.shape,l)||null!==d.texture&&cS(d.shape,l)?(s.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){let a=[oS(e.shape),...lS(e.shape)],r={dtype:e.dtype,shape:a,dataId:e.dataId},i=[oS(t),...lS(t)],s=new gC(i,a),o=[a],l=n.runWebGLProgram(s,[r],e.dtype,o,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(r,l,s)}var fT={kernelName:fa,backendName:"webgl",kernelFunc:hT},mT=class{constructor(e,t){this.variableNames=["x"];let{windowSize:n,batchSize:a,inSize:r,outSize:i}=e;this.outputShape=[a,i];let s=4*Math.floor(n/4),o=n%4,l="sumValue += dot(values, ones);";if(null!=t){let e=1/t;l=`sumValue += dot(values * ${Tr.isInt(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${s}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${s};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}},yT=class{constructor(e,t){this.variableNames=["x"];let{windowSize:n,batchSize:a,inSize:r,outSize:i}=e;this.outputShape=[a,i];let s="0.0",o="";"prod"===t?s="1.0":"min"===t?(s="1.0 / 1e-20",o="min"):"max"===t&&(s="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");let u=4*Math.floor(n/4),d=n%4,p=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,c="vec4";"all"===t?(s="1.0",p="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",c="bvec4"):"any"===t&&(s="0.0",p="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",c="bvec4");let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${s};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${h}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${s});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${c} values = ${c}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${p}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===d}) {\n          ${c} values = ${c}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${2===d}) {\n          ${c} values = ${c}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${3===d}) {\n          ${c} values = ${c}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${p}\n        }\n        setOutput(${l});\n      }\n    `}};function gT(e,t,n,a){let r=function(e){let t=[];for(;0===t.length||1!==t[t.length-1].outSize;){let n=t.length?t[t.length-1].outSize:e[1],a=Bf.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:a,outSize:Math.ceil(n/a)})}return t}(e.shape),i=e;for(let s=0;s<r.length;s++){let o,l,{inSize:u,windowSize:d,outSize:p}=r[s];o="mean"===n?0===s?new mT({windowSize:d,inSize:u,batchSize:e.shape[0],outSize:p},u):new mT({windowSize:d,inSize:u,batchSize:e.shape[0],outSize:p}):new yT({windowSize:d,inSize:u,batchSize:e.shape[0],outSize:p},n),l=i,i=a.runWebGLProgram(o,[i],t),l.dataId!==e.dataId&&a.disposeIntermediateTensorInfo(l)}return i}var AT=class{constructor(e,t){this.variableNames=["A"];let n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];this.outputShape=n,this.rank=n.length;let a=BS(this.rank),r=function(e){let t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],a=new Array(t);for(let t=0;t<e.length;t++)a[e[t]]=n[t];return a.join()}(t);this.userCode=`\n    void main() {\n      ${a} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}},xT=class{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;let n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);let a=BS(this.rank),r=mC("rc",this.rank),i=new Array(this.rank);for(let e=0;e<t.length;e++)i[t[e]]=r[e];let s=`vec2(${i.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${i.join()}), ${s})`;this.userCode=`\n    void main() {\n      ${a} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}};function bT(e,t,n){let a=He().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new xT(e.shape,t):new AT(e.shape,t);return n.runWebGLProgram(a,[e],e.dtype)}function vT(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,keepDims:s}=a;return function(e,t,n,a){let r=t,i=e.shape.length,s=Tr.parseAxisParam(r,e.shape),o=s,l=Bf.getAxesPermutation(o,i),u=null!=l,d=e;u&&(d=bT(e,l,a),o=Bf.getInnerMostAxes(o.length,i)),Bf.assertAxesAreInnerMostDims("sum",o,i);let[p,c]=Bf.computeOutAndReduceShapes(d.shape,o),h=p;n&&(h=Bf.expandShapeToKeepDim(p,s));let f=Tr.sizeFromShape(c),m=hT({inputs:{x:d},attrs:{shape:[Tr.sizeFromShape(e.shape)/f,f]},backend:a}),y=gT(m,vi(e.dtype),"sum",a),g=hT({inputs:{x:y},attrs:{shape:h},backend:a});return a.disposeIntermediateTensorInfo(m),a.disposeIntermediateTensorInfo(y),u&&a.disposeIntermediateTensorInfo(d),g}(r,i,s,n)}var wT={kernelName:Oa,backendName:"webgl",kernelFunc:vT};function kT(e){let t,{inputs:n,backend:a,attrs:r}=e,{x:i}=n,{perm:s}=r,o=a,l=i.shape.length,u=new Array(l);for(let e=0;e<u.length;e++)u[e]=i.shape[s[e]];if(o.shouldExecuteOnCPU([i])){let e=o.texData.get(i.dataId).values,n=hC(e,i.shape,i.dtype,s,u);t=o.makeTensorInfo(u,i.dtype),o.texData.get(t.dataId).values=n}else t=bT(i,s,o);return t}var IT={kernelName:ar,backendName:"webgl",kernelFunc:kT},ST=1e3;function NT({a:e,b:t,transposeA:n,transposeB:a,backend:r,bias:i=null,preluActivationWeights:s=null,leakyreluAlpha:o=0,activation:l=null}){let u=e.shape.length,d=t.shape.length,p=n?e.shape[u-2]:e.shape[u-1],c=a?t.shape[d-1]:t.shape[d-2],h=n?e.shape[u-1]:e.shape[u-2],f=a?t.shape[d-2]:t.shape[d-1],m=e.shape.slice(0,-2),y=t.shape.slice(0,-2),g=Tr.sizeFromShape(m),A=Tr.sizeFromShape(y),x=zl.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([h,f]);Tr.assert(p===c,(()=>`Error in matMul: inner shapes (${p}) and (${c}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${a} must match.`));let b,v=n?[g,p,h]:[g,h,p],w=a?[A,f,c]:[A,c,f],k=hT({inputs:{x:e},backend:r,attrs:{shape:v}}),I=hT({inputs:{x:t},backend:r,attrs:{shape:w}}),S=[k,I],N=Math.max(g,A),C=n?k.shape[1]:k.shape[2],T=null!=i,E=null!=s,R="leakyrelu"===l,$=null!=l?sT(l,!0):null;if((1===h||1===f)&&C>ST&&!1===(T||E||R||null!=$)){let e=k,t=I;n&&(e=kT({inputs:{x:k},backend:r,attrs:{perm:[0,2,1]}}),S.push(e)),a&&(t=kT({inputs:{x:I},backend:r,attrs:{perm:[0,2,1]}}),S.push(t));let i=1===f,s=e;1!==f&&(s=hT({inputs:{x:e},backend:r,attrs:{shape:[N,C,1]}}),S.push(s));let o=1===f?2:1,l=t;i&&(l=hT({inputs:{x:t},backend:r,attrs:{shape:[N,1,C]}}),S.push(l));let u=pT({inputs:{a:s,b:l},backend:r});b=vT({inputs:{x:u},backend:r,attrs:{axis:o,keepDims:!0}}),S.push(u)}else{let l=bi(e.dtype,t.dtype),u=new oT(v,w,[N,h,f],n,a,T,$,E,R),d=[k,I];if(null!=i&&d.push(i),E&&d.push(s),R){let e=r.makeTensorInfo([],"float32",Tr.createScalarValue(o,"float32"));d.push(e),S.push(e)}b=r.runWebGLProgram(u,d,l)}let M=hT({inputs:{x:b},backend:r,attrs:{shape:x}});S.push(b);for(let e of S)r.disposeIntermediateTensorInfo(e);return M}var CT={kernelName:cr,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{a:r,b:i,bias:s,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:d,leakyreluAlpha:p}=a;return NT({a:r,b:i,transposeA:l,transposeB:u,backend:n,bias:s,preluActivationWeights:o,leakyreluAlpha:p,activation:d})}},TT="return abs(x);",ET={kernelName:Ze,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:a}=e,{x:r}=n;if(a.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){let e=a.texData.get(r.dataId),t=QN(e.values);return a.makeTensorInfo(r.shape,r.dtype,t)}return t=He().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new OC(r.shape,TT):new vC(r.shape,TT),a.runWebGLProgram(t,[r],r.dtype)}},RT=rT({opSnippet:wC+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),$T={kernelName:Ye,backendName:"webgl",kernelFunc:RT},MT=rT({opSnippet:wC+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),_T={kernelName:Je,backendName:"webgl",kernelFunc:MT},FT="return a + b;",OT=iT({opSnippet:FT,packedOpSnippet:FT,supportsComplex:!0,cpuKernelImpl:bN}),PT={kernelName:Qe,backendName:"webgl",kernelFunc:OT},DT={kernelName:et,backendName:"webgl",kernelFunc:function e(t){let{inputs:n,backend:a}=t,r=n;if(1===r.length)return qC({inputs:{x:r[0]},backend:a});if(r.length>He().get("WEBGL_MAX_TEXTURES_IN_SHADER")){let t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:a}),i=e({inputs:r.slice(t),backend:a});return e({inputs:[n,i],backend:a})}let i=r.map((e=>e.dtype)).reduce(((e,t)=>bi(e,t))),s=r.map((e=>e.shape)),o=He().getBool("WEBGL_PACK")?new class{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));let n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));let a=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${a};\n        setOutput(result);\n      }\n    `}}(r[0].shape,s):new class{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));let n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));let a=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${a};\n        setOutput(result);\n      }\n    `}}(r[0].shape,s);return a.runWebGLProgram(o,r,i)}},zT={kernelName:tt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,keepDims:s}=a,o=r.shape.length,l=Tr.parseAxisParam(i,r.shape),u=l,d=Bf.getAxesPermutation(u,o),p=r;null!=d&&(p=kT({inputs:{x:r},backend:n,attrs:{perm:d}}),u=Bf.getInnerMostAxes(u.length,o)),Bf.assertAxesAreInnerMostDims("all",u,o);let c,[h,f]=Bf.computeOutAndReduceShapes(p.shape,u),m=hT({inputs:{x:p},backend:n,attrs:{shape:[-1,Tr.sizeFromShape(f)]}}),y=gT(m,m.dtype,"all",n);return c=hT(s?{inputs:{x:y},backend:n,attrs:{shape:Bf.expandShapeToKeepDim(h,l)}}:{inputs:{x:y},backend:n,attrs:{shape:h}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(y),null!=d&&n.disposeIntermediateTensorInfo(p),c}},LT={kernelName:nt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,keepDims:s}=a,o=r.shape.length,l=Tr.parseAxisParam(i,r.shape),u=l,d=Bf.getAxesPermutation(u,o),p=r;null!=d&&(p=kT({inputs:{x:r},backend:n,attrs:{perm:d}}),u=Bf.getInnerMostAxes(u.length,o)),Bf.assertAxesAreInnerMostDims("any",u,o);let c,[h,f]=Bf.computeOutAndReduceShapes(p.shape,u),m=hT({inputs:{x:p},backend:n,attrs:{shape:[-1,Tr.sizeFromShape(f)]}}),y=gT(m,m.dtype,"any",n);return c=hT(s?{inputs:{x:y},backend:n,attrs:{shape:Bf.expandShapeToKeepDim(h,l)}}:{inputs:{x:y},backend:n,attrs:{shape:h}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(y),null!=d&&n.disposeIntermediateTensorInfo(p),c}},WT=class{constructor(e,t,n){this.variableNames=["A"];let{windowSize:a,batchSize:r,outSize:i}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,i];let s="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${a};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${a}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${s} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}},BT=class{constructor(e,t,n,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,Tr.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));let r=e[e.length-1],i=Math.ceil(r/t);this.outputShape=e.slice(0,-1),i>1&&this.outputShape.push(i),a||this.variableNames.push("bestIndicesA");let s,o,l=this.outputShape,u=l.length,d=BS(u),p=yC("coords",u);if(1===i){o=u+1;let e=BS(o);s=`\n        ${e} sourceLocR = ${e}(${p.join()}, 0);\n        ++${p[u-1]};\n        ${e} sourceLocG = ${e}(${p.join()}, 0);\n        ++${p[u-2]};\n        ${e} sourceLocA = ${e}(${p.join()}, 0);\n        --${p[u-1]};\n        ${e} sourceLocB = ${e}(${p.join()}, 0);\n        --${p[u-2]};`}else o=u,s=`\n        ${d} sourceLocR = coords;\n        ++${p[u-1]};\n        ${d} sourceLocG = coords;\n        ++${p[u-2]};\n        ${d} sourceLocA = coords;\n        --${p[u-1]};\n        ${d} sourceLocB = coords;\n        --${p[u-2]};`;let c=["x","y","z","w","u","v"].slice(0,o),h="."+c[o-1],f=c.map((e=>"int "+e)),m=yC("sourceLocR",o-1).concat("inIdx.r"),y=yC("sourceLocG",o-1).concat("inIdx.g"),g=yC("sourceLocB",o-1).concat("inIdx.b"),A=yC("sourceLocA",o-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",b=a?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${A.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${g.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${A.join()}) : 0.)`,w=a?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${c.join()}),\n                                          vec2(${c.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${c.join()}),\n                               vec2(${c.slice(-2).join()}));\n      }\n      ${w}\n      void main() {\n        ${d} coords = getOutputCoords();\n        bool hasNextCol = ${p[u-1]} < ${l[u-1]-1};\n        bool hasNextRow = ${p[u-2]} < ${l[u-2]-1};\n        ${s}\n        ivec4 srcIdx = ivec4(sourceLocR${h}, sourceLocG${h},\n          sourceLocB${h}, sourceLocA${h}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${b}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}};function VT(e,t,n,a=null){let r=t.shape[0],i=t.shape[1];null!=a&&(r=a.shape[0],i=a.shape[1]);let s=Bf.computeOptimalWindowSize(i),o={windowSize:s,inSize:i,batchSize:r,outSize:Math.ceil(i/s)},l=new WT(o,n,null==a),u=[t];null!=a&&u.push(a);let d=e.runWebGLProgram(l,u,"int32");if(1===d.shape[1])return d;let p=VT(e,t,n,d);return e.disposeIntermediateTensorInfo(d),p}function UT(e,t,n,a=null){let r=null!=a?a.shape:t.shape,i=r[r.length-1],s=Bf.computeOptimalWindowSize(i),o=new BT(r,s,n,null==a),l=null==a?[t]:[t,a],u=e.runWebGLProgram(o,l,"int32");if(u.shape.length===t.shape.length){let a=UT(e,t,n,u);return e.disposeIntermediateTensorInfo(u),a}return u}function GT(e,t,n,a){let r=[n];if(Bf.assertAxesAreInnerMostDims("arg"+a.charAt(0).toUpperCase()+a.slice(1),r,t.shape.length),!He().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){let n=[],i=e.texData.get(t.dataId),s=t;null!==i&&i.isPacked&&(s=e.unpackTensor(t),n.push(s));let[o,l]=Bf.computeOutAndReduceShapes(s.shape,r),u=Tr.sizeFromShape(l),d=hT({inputs:{x:s},backend:e,attrs:{shape:[-1,u]}});n.push(d);let p=VT(e,d,a);n.push(p);let c=hT({inputs:{x:p},backend:e,attrs:{shape:o}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),c}return UT(e,t,a)}var HT={kernelName:at,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i}=a,s=Tr.parseAxisParam(i,r.shape),o=Bf.getAxesPermutation(s,r.shape.length),l=r,u=[];null!=o&&(l=kT({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),s=Bf.getInnerMostAxes(s.length,l.shape.length)),Bf.assertAxesAreInnerMostDims("argMax",[s[0]],l.shape.length);let d=GT(n,l,s[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},jT={kernelName:rt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i}=a,s=Tr.parseAxisParam(i,r.shape),o=Bf.getAxesPermutation(s,r.shape.length),l=r,u=[];null!=o&&(l=kT({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),s=Bf.getInnerMostAxes(s.length,l.shape.length)),Bf.assertAxesAreInnerMostDims("argMin",[s[0]],l.shape.length);let d=GT(n,l,s[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},qT=rT({opSnippet:wC+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),XT={kernelName:it,backendName:"webgl",kernelFunc:qT},KT=rT({opSnippet:wC+"return log(x + sqrt(x * x + 1.0));"}),ZT={kernelName:st,backendName:"webgl",kernelFunc:KT},YT=rT({opSnippet:wC+"\n  return atan(x);\n"}),JT={kernelName:ot,backendName:"webgl",kernelFunc:YT},QT=iT({opSnippet:UC+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+HC+"\n  return result;\n"}),eE={kernelName:ut,backendName:"webgl",kernelFunc:QT},tE=rT({opSnippet:wC+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),nE={kernelName:lt,backendName:"webgl",kernelFunc:tE},aE=class{constructor(e,t,n,a=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");let i=e.filterWidth,s=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,d=e.effectiveFilterHeight,p=e.effectiveFilterWidth,c=e.padInfo.top,h=e.padInfo.left;this.outputShape=e.outShape;let f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,y=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`,g="0.0";if(f||(g="-1.0 / 1e-20"),n){let t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${s}, ${o});\n        const ivec2 pads = ivec2(${c}, ${h});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${d};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${a?r?m:y:`wR * ${p} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let A=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(A="avgValue / max(count, 1.0)");let x=4*Math.floor(i/4),b=i%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${o});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float initializationValue = ${g};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${g});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${d};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${A});\n      }\n    `}},rE=class{constructor(e,t,n,a=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");let i=e.filterWidth,s=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,d=e.dilationHeight,p=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,y=e.padInfo.top,g=e.padInfo.left;this.outputShape=e.outShape;let A="avg"===t,x="0.0";if(A||(x="-1.0 / 1e-20"),n){let t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${s}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${y}, ${g});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${c};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${h};\n                wR += ${d}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${p}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${a?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${h} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / max(count, 1.0)");let v=4*Math.floor(i/4),w=i%4,k=`\n      if (${A}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${s}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${y}, ${g});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h};\n            wR += ${d}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${p};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${p}, ch)\n              );\n\n              ${k}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${k}\n            } else if (${2===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${k}\n            } else if (${3===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                initializationValue\n              );\n\n              ${k}\n            }\n          }\n        }\n        setOutput(${b});\n      }\n    `}},iE={kernelName:dt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t;IS(r,"avgPool");let{filterSize:i,strides:s,pad:o,dimRoundingMode:l}=a;Tr.assert(Bf.eitherStridesOrDilationsAreOne(s,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${s} and dilations '1'`));let u=Bf.computePool2DInfo(r.shape,i,s,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&Tr.arraysEqual(u.inShape,u.outShape))return qC({inputs:{x:r},backend:n});let d=new aE(u,"avg",!1);return n.runWebGLProgram(d,[r],"float32")}},sE={kernelName:ct,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:i,strides:s,pad:o,dimRoundingMode:l,dataFormat:u}=a,d=Bf.computePool3DInfo(r.shape,i,s,[1,1,1],o,l,u),p=new rE(d,"avg",!1);return n.runWebGLProgram(p,[r],"float32")}},oE={kernelName:ht,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,input:i}=t,s=i,{filterSize:o,strides:l,pad:u,dimRoundingMode:d}=a,p=Bf.computePool3DInfo(s.shape,o,l,[1,1,1],u,d),c=new class{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterDepth,n=e.filterHeight,a=e.filterWidth,r=e.strideDepth,i=e.strideHeight,s=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,d=e.effectiveFilterDepth,p=e.effectiveFilterHeight,c=e.effectiveFilterWidth,h=d-1-e.padInfo.front,f=p-1-e.padInfo.top,m=c-1-e.padInfo.left,y=1/(t*n*a);this.userCode=`\n      const ivec3 pads = ivec3(${h}, ${f}, ${m});\n      const float avgMultiplier = float(${y});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${p};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${i}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${c};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}(p);return n.runWebGLProgram(c,[r],s.dtype)}},lE={kernelName:pt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,input:i}=t,s=i;IS([r,i],"avgPoolGrad");let{filterSize:o,strides:l,pad:u}=a,d=Bf.computePool2DInfo(s.shape,o,l,1,u),p=new class{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterHeight,n=e.filterWidth,a=e.strideHeight,r=e.strideWidth,i=e.dilationHeight,s=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,d=l-1-e.padInfo.left,p=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${d});\n      const float avgMultiplier = float(${p});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${i}) {\n          float dyR = float(dyRCorner + wR) / ${a}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${s}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}(d);return n.runWebGLProgram(p,[r],s.dtype)}},uE={kernelName:ft,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{a:r,b:i}=t,{transposeA:s,transposeB:o}=a;return NT({a:r,b:i,transposeA:s,transposeB:o,backend:n})}},dE={kernelName:ln,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{let{x:a,mean:r,variance:i,offset:s,scale:o}=e;Tr.assert(r.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Tr.assert(null==s||r.shape.length===s.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Tr.assert(null==o||r.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);let u=[a,r,i],d=null;null!=s&&(d=s.shape,u.push(s));let p=null;null!=o&&(p=o.shape,u.push(o));let c=He().getBool("WEBGL_PACK_NORMALIZATION")?new class{constructor(e,t,n,a,r,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Bf.assertAndGetBroadcastShape(e,t),Bf.assertAndGetBroadcastShape(e,n);let s="vec4(0.0)";null!=a&&(Bf.assertAndGetBroadcastShape(e,a),this.variableNames.push("offset"),s="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(Bf.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${s};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${i}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}(a.shape,r.shape,i.shape,d,p,l):new class{constructor(e,t,n,a,r,i){this.outputShape=[],this.variableNames=["x","mean","variance"],Bf.assertAndGetBroadcastShape(e,t),Bf.assertAndGetBroadcastShape(e,n);let s="0.0";null!=a&&(Bf.assertAndGetBroadcastShape(e,a),this.variableNames.push("offset"),s="getOffsetAtOutCoords()");let o="1.0";null!=r&&(Bf.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${s};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${i}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}(a.shape,r.shape,i.shape,d,p,l);return t.runWebGLProgram(c,u,u[0].dtype)}},pE=["x","y","z","w","u","v"];function cE(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{begin:i,size:s}=a,[o,l]=mf.parseSliceParams(r,i,s);if(mf.assertParamsValid(r,o,l),0===Tr.sizeFromShape(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){let e=n.texData.get(r.dataId),t=eC(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}let{isPacked:u}=n.texData.get(r.dataId),d=mf.isSliceContinous(r.shape,o,l);if(u||!d){let e=He().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new class{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let t=BS(this.rank),n=yC("coords",this.rank),a=yC("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${a.slice(-2).join()})`,i=`getChannel(getSource(${a.join()}), ${r})`,s=`\n      result.x = ${i};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${a[this.rank-1]};\n        result.y = ${i};\n        --${a[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${a[this.rank-2]};\n        result.z = ${i};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${a[this.rank-1]};\n          result.w = ${i};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${a[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${s}\n        ${o}\n        setOutput(result);\n      }\n    `}}(l):new class{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;let t=BS(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let n,a=function(e){if(1===e)return"sourceLoc";if(e<=6)return pE.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);n=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${pE[t]} = start[${t}] + coords.${pE[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${n}\n        setOutput(getSource(${a}));\n      }\n    `}}(l),t=[o];return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,a){let r=a.texData.get(e.dataId),i=a.makeTensorInfo(n,e.dtype),s=a.texData.get(i.dataId);Object.assign(s,r),s.refCount=1,s.shape=n,s.dtype=e.dtype;let o=mf.computeFlatOffset(t,Tr.computeStrides(e.shape));r.slice&&(o+=r.slice.flatOffset),s.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};let l=a.dataRefCount.get(s.slice.origDataId)||1;return a.dataRefCount.set(s.slice.origDataId,l+1),i}(r,o,l,n)}var hE={kernelName:Ta,backendName:"webgl",kernelFunc:cE},fE={kernelName:mt,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:i,crops:s}=a;Tr.assert(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));let o=i.reduce(((e,t)=>e*t)),l=Bf.getReshaped(r.shape,i,o),u=Bf.getPermuted(l.length,i.length),d=Bf.getReshapedPermuted(r.shape,i,o),p=Bf.getSliceBeginCoords(s,i.length),c=Bf.getSliceSize(d,s,i.length),h=[],f=hT({inputs:{x:r},backend:n,attrs:{shape:l}}),m=kT({inputs:{x:f},backend:n,attrs:{perm:u}}),y=hT({inputs:{x:m},backend:n,attrs:{shape:d}}),g=cE({inputs:{x:y},backend:n,attrs:{begin:p,size:c}});return h.push(f),h.push(m),h.push(y),h.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}},mE={kernelName:yt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,weights:i}=t,{size:s}=a,o=n.readSync(r.dataId),l=n.readSync(i.dataId),u=vN(o,l,i.dtype,i.shape,s);return n.makeTensorInfo([s],i.dtype,u)}},yE={kernelName:gt,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:a}=e,{a:r,b:i}=n,s=He().getBool("WEBGL_PACK_BINARY_OPERATIONS"),o=He().getNumber("WEBGL_VERSION");if(a.shouldExecuteOnCPU([r,i])||1===o){let e=a.texData.get(r.dataId).values,t=a.texData.get(i.dataId).values,[n,s]=kN(r.shape,i.shape,e,t,r.dtype),o=a.makeTensorInfo(s,r.dtype);return a.texData.get(o.dataId).values=n,o}return t=s?new jC("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",r.shape,i.shape,!1):new GC("\n  return float(int(a.r) & int(b.r));\n",r.shape,i.shape),a.runWebGLProgram(t,[r,i],r.dtype)}},gE={kernelName:xt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{s0:a,s1:r}=t,i=n.readSync(a.dataId),s=n.readSync(r.dataId),o=Bf.assertAndGetBroadcastShape(Array.from(i),Array.from(s));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},AE=iT({opSnippet:"return float(a != b);",cpuKernelImpl:GN,dtype:"bool"}),xE={kernelName:Kn,backendName:"webgl",kernelFunc:AE};function bE(e){let{inputs:t,backend:n}=e,{input:a}=t;return qC({inputs:{x:n.texData.get(a.dataId).complexTensorInfos.real},backend:n})}var vE={kernelName:pa,backendName:"webgl",kernelFunc:bE},wE={kernelName:bt,backendName:"webgl",kernelFunc:function e(t){let{inputs:n,backend:a,attrs:r}=t,{x:i}=n,{dtype:s}=r;if("complex64"===s){if("complex64"===i.dtype)return qC({inputs:{x:i},backend:a});let t=sd(i.shape),n=e({inputs:{x:i},backend:a,attrs:{dtype:"float32"}}),r=KC({inputs:{real:n,imag:t},backend:a});return t.dispose(),a.disposeIntermediateTensorInfo(n),r}if("complex64"===i.dtype){let t=bE({inputs:{input:i},backend:a}),n=e({inputs:{x:t},backend:a,attrs:{dtype:s}});return a.disposeIntermediateTensorInfo(t),n}if(!Tr.hasEncodingLoss(i.dtype,s)){let e=qC({inputs:{x:i},backend:a});return{dataId:e.dataId,shape:e.shape,dtype:s}}if(a.shouldExecuteOnCPU([i])){let e=a.texData.get(i.dataId).values,[t,n,r]=IN(e,i.shape,i.dtype,s);return a.makeTensorInfo(t,n,r)}if("int32"===s)return function(e,t){let n=new vC(e.shape,"return float(int(x));"),a=t.runWebGLProgram(n,[e],"int32");return{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}(i,a);if("bool"===s){let e=a.makeTensorInfo([],"bool",Tr.getTypedArrayFromDType("bool",1)),t=AE({inputs:{a:i,b:e},backend:a});return a.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${i.dtype} to ${s}`)}},kE="return ceil(x);",IE=rT({opSnippet:kE,packedOpSnippet:kE,cpuKernelImpl:SN}),SE={kernelName:vt,backendName:"webgl",kernelFunc:IE},NE={kernelName:wt,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:a,attrs:r}=e,{x:i}=n,{clipValueMin:s,clipValueMax:o}=r;t=He().getBool("WEBGL_PACK_CLIP")?new class{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}(i.shape):new class{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}(i.shape);let l=[[s],[o]];return a.runWebGLProgram(t,[i],i.dtype,l)}};function CE(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}var TE={kernelName:It,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:a}=t,r=n.texData.get(a.dataId),i=new class{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}(a.shape),s=[CE(a,r.complexTensorInfos.real),CE(a,r.complexTensorInfos.imag)];return n.runWebGLProgram(i,s,s[0].dtype)}},EE=class{constructor(e){this.outputShape=[],this.outputShape=Bf.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));let t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];let n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){let a=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${a}));`)}let a=t.length,r=t[t.length-1];n.push(`else setOutput(getT${a}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}},RE=class{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Bf.computeOutShape(e,t);let n=this.outputShape,a=n.length,r=BS(a),i=yC("coords",a),s=["x","y","z","w","u","v"].slice(0,a);this.variableNames=e.map(((e,t)=>`T${t}`));let o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];let l=s[t],u=s.slice(-2),d=s.join(),p=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${d}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){let t=o[e-1];p+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${$E(s,l,t)}),\n            vec2(${$E(u,l,t)}));\n        }`}let c=o.length,h=o[o.length-1];p+=`\n        return getChannel(\n          getT${c}(${$E(s,l,h)}),\n          vec2(${$E(u,l,h)}));`,this.userCode=`\n      float getValue(${s.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${i}), 0., 0., 0.);\n\n        ${i[a-1]} = ${i[a-1]} + 1;\n        if (${i[a-1]} < ${n[a-1]}) {\n          result.g = getValue(${i});\n        }\n\n        ${i[a-2]} = ${i[a-2]} + 1;\n        if (${i[a-2]} < ${n[a-2]}) {\n          result.a = getValue(${i});\n        }\n\n        ${i[a-1]} = ${i[a-1]} - 1;\n        if (${i[a-2]} < ${n[a-2]} &&\n            ${i[a-1]} < ${n[a-1]}) {\n          result.b = getValue(${i});\n        }\n        setOutput(result);\n      }\n    `}};function $E(e,t,n){let a=e.indexOf(t);return e.map(((e,t)=>t===a?`${e} - ${n}`:e)).join()}function ME(e){let{inputs:t,backend:n}=e,{input:a}=t;return qC({inputs:{x:n.texData.get(a.dataId).complexTensorInfos.imag},backend:n})}var _E={kernelName:mn,backendName:"webgl",kernelFunc:ME};function FE(e,t,n){let a=e[0].dtype;if("complex64"===a){let a=e.map((e=>bE({inputs:{input:e},backend:n}))),r=e.map((e=>ME({inputs:{input:e},backend:n}))),i=FE(a,t,n),s=FE(r,t,n),o=KC({inputs:{real:i,imag:s},backend:n});return a.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(s),o}let r=n.shouldExecuteOnCPU(e);if("string"===a&&(r=!0),r){let r=e.map((e=>{let a=[-1,Tr.sizeFromShape(e.shape.slice(t))];return hT({inputs:{x:e},backend:n,attrs:{shape:a}})})),i=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),s=Bf.computeOutShape(r.map((e=>e.shape)),1),o=1===r[0].shape[0],l=NN(i,s,a,o),u=Bf.computeOutShape(e.map((e=>e.shape)),t),d=n.makeTensorInfo(u,a,l);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}let i=e.filter((e=>Tr.sizeFromShape(e.shape)>0)),s=He().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&i[0].shape.length>1;if(1===i.length){let t=s?new vC(e[0].shape,TC):new OC(e[0].shape,TC);return n.runWebGLProgram(t,e,a)}let o=He().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(i.length>o){let e=[];for(let a=0;a<i.length;a+=o){let r=i.slice(a,a+o);e.push(FE(r,t,n))}let a=FE(e,t,n);for(let t of e)n.disposeIntermediateTensorInfo(t);return a}if(s){let e=new RE(i.map((e=>e.shape)),t);return n.runWebGLProgram(e,i,a)}let{tensors2D:l,outShape:u}=function(e,t,n){let a=Bf.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>hT({inputs:{x:e},attrs:{shape:[-1,Tr.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:a}}(i,t,n),d=new EE(l.map((e=>e.shape))),p=n.runWebGLProgram(d,l,a);l.forEach((e=>n.disposeIntermediateTensorInfo(e)));let c=hT({inputs:{x:p},attrs:{shape:u},backend:n});return n.disposeIntermediateTensorInfo(p),c}function OE(e){let{inputs:t,backend:n,attrs:a}=e,{axis:r}=a,i=Tr.parseAxisParam(r,t[0].shape)[0],s=t.map((e=>e.shape));Bf.assertParamsConsistent(s,i);let o=Bf.computeOutShape(t.map((e=>e.shape)),i);if(0===Tr.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);let l=t.filter((e=>Tr.sizeFromShape(e.shape)>0));return 1===l.length?qC({inputs:{x:l[0]},backend:n}):FE(l,i,n)}var PE={kernelName:St,backendName:"webgl",kernelFunc:OE},DE=class{constructor(e,t=!1,n=null,a=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;let i=e.padInfo.top,s=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,d=e.dilationWidth,p=e.filterHeight,c=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,y=m?1:2,g=m?2:3,A=m?3:1,x="",b="";n&&(x=a?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,b="result = activation(result);");let v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${i}, ${s});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${A}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${y}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${c}; wC++) {\n            int xC = xCCorner + wC * ${d};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${h}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${h}) *\n                    getW(wR, wC, ${h}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${h}, xR, xC) *\n                    getW(wR, wC, ${h}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2),\n                getW(wR, wC, ${h} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1),\n                  getX(batch, xR, xC, ${h} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC),\n                  getX(batch, ${h} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${v}\n        ${b}\n        setOutput(result);\n      }\n    `}},zE=class{constructor(e,t=!1,n=null,a=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=qS(this.outputShape.length);let i=e.padInfo.left,s=e.strideWidth,o=e.dilationWidth,l=e.filterHeight,u=e.filterWidth,d=u,p="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<u;e++)p+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;p+=`\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<u;e++)p+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;p+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(d+1)/2;t++){let n=2*t;if(p+=`\n           xC = xCCorner + ${n*o};\n           `,1===s){if(n<u&&(i%2==1?(p+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,p+=1===o&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):p+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<u)){let e=i%2==0?Tr.nearestLargerEven(o):o;o%2==0&&i%2==1||o%2!=0&&i%2!=1?(p+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,p+=o>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):p+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<u&&(i%2==1?(p+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<u&&(p+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(p+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<u&&(p+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<u&&(p+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<u&&(p+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}p+="\n     }\n   ",p+="\n     }\n   ",p+="\n     }\n   ";let c="",h="";n&&(c=a?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:r?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,h="result = activation(result);");let f=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${c}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${p}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${f}\n         ${h}\n         setOutput(result);\n       }\n     `}};function LE(e,t){let n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function WE({x:e,filter:t,convInfo:n,backend:a,bias:r=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:o=null}){let l,u=e.shape,d=a.texData.get(e.dataId),p=n.inChannels,c=u[0]*u[1]*u[2],h=n.outChannels,f="channelsLast"===n.dataFormat,m=[];if(null!=i){let e=LE(i.shape,f);null!=e&&(i=hT({inputs:{x:i},backend:a,attrs:{shape:e}}),m.push(i))}if(null!=r){let e=LE(r.shape,f);null!=e&&(r=hT({inputs:{x:r},backend:a,attrs:{shape:e}}),m.push(r))}if((1!==c&&1!==h||!(p>ST))&&d.isPacked&&f&&null!=d.texture&&u[2]%2!=0&&Tr.arraysEqual(d.shape.slice(-3),u.slice(-3))){let p=u[0]*u[1]*(u[2]+1),c={dataId:e.dataId,shape:[1,p,n.inChannels],dtype:e.dtype},h=d.shape;d.shape=d.shape.slice(),d.shape[d.shape.length-2]++,Tr.assert(cS(d.shape,c.shape),(()=>`packed reshape ${d.shape} to ${c.shape} isn't free`));let f=hT({inputs:{x:t},backend:a,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(f);let y=NT({a:c,b:f,backend:a,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:i,leakyreluAlpha:s}),g=a.texData.get(y.dataId);Tr.assert(g.isPacked,(()=>"batchMatMul result is expected to be packed")),d.shape=h,g.shape=n.outShape,l=qC({inputs:{x:y},backend:a}),l.shape=n.outShape,m.push(y)}else{let u=n.outHeight*n.outWidth,d=hT({inputs:{x:e},backend:a,attrs:{shape:f?[n.batchSize,u,n.inChannels]:[n.batchSize,n.inChannels,u]}}),p=hT({inputs:{x:t},backend:a,attrs:{shape:[1,n.inChannels,n.outChannels]}}),c=NT({a:f?d:p,b:f?p:d,transposeA:!f,transposeB:!1,backend:a,bias:r,activation:o,preluActivationWeights:i,leakyreluAlpha:s});l=hT({inputs:{x:c},backend:a,attrs:{shape:n.outShape}}),m.push(d),m.push(p),m.push(c)}for(let e of m)a.disposeIntermediateTensorInfo(e);return l}function BE({x:e,filter:t,convInfo:n,backend:a,bias:r=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:o=null}){let{filterWidth:l,filterHeight:u,inChannels:d,outWidth:p,outHeight:c,dataFormat:h}=n,f="channelsLast"===h,m=l*u*d,y=c*p,g=[n.batchSize,m,y],A=[];if(null!=i){let e=LE(i.shape,f);null!=e&&(i=hT({inputs:{x:i},backend:a,attrs:{shape:e}}),A.push(i))}if(null!=r){let e=LE(r.shape,f);null!=e&&(r=hT({inputs:{x:r},backend:a,attrs:{shape:e}}),A.push(r))}let x=hT({inputs:{x:t},backend:a,attrs:{shape:[1,m,Tr.sizeFromShape(t.shape)/m]}});A.push(x);let b=new class{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=qS(this.outputShape.length);let{dataFormat:n}=t,a=NS(),r="channelsLast"===n,i=r?1:2,s=r?2:3,o=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`,l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${i}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${s}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${r}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${a.output} = result;\n      }\n    `}}(g,n),v=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],w=a.runWebGLProgram(b,[e],"float32",v),k=hT({inputs:{x:w},backend:a,attrs:{shape:g}});A.push(w),A.push(k);let I=null!=r,S=null!=i,N="leakyrelu"===o,C=o?sT(o,!0):null,T=new oT(f?k.shape:x.shape,f?x.shape:k.shape,f?[n.batchSize,y,n.outChannels]:[n.batchSize,n.outChannels,y],!0,!1,I,C,S,N),E=f?[k,x]:[x,k];if(r&&E.push(r),S&&E.push(i),N){let e=a.makeTensorInfo([],"float32",Tr.createScalarValue(s,"float32"));E.push(e),A.push(e)}let R=a.runWebGLProgram(T,E,"float32"),$=hT({inputs:{x:R},backend:a,attrs:{shape:n.outShape}});A.push(R);for(let e of A)a.disposeIntermediateTensorInfo(e);return $}var VE,UE={kernelName:Nt,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:a,attrs:r}=e,{x:i,filter:s}=n,{strides:o,pad:l,dataFormat:u,dilations:d,dimRoundingMode:p}=r,c=Bf.convertConv2DDataFormat(u),h=Bf.computeConv2DInfo(i.shape,s.shape,o,d,l,p,!1,c);if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)if(h.strideWidth<=2&&"channelsLast"===c&&He().getBool("WEBGL_EXP_CONV")){let e=new zE(h),n=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];t=a.runWebGLProgram(e,[i,s],"float32",n)}else if(He().getBool("WEBGL_CONV_IM2COL"))t=BE({x:i,filter:s,convInfo:h,backend:a});else{let e=new DE(h);t=a.runWebGLProgram(e,[i,s],"float32")}else t=WE({x:i,filter:s,convInfo:h,backend:a});let f=hT({inputs:{x:t},backend:a,attrs:{shape:h.outShape}});return a.disposeIntermediateTensorInfo(t),f}},GE={kernelName:Ct,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,dy:i}=t,{strides:s,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:d}=a,p=Bf.convertConv2DDataFormat(l),c=Bf.computeConv2DInfo(r.shape,d,s,1,o,u,!1,p),h=new class{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,n=e.strideWidth,a=e.padInfo.top,r=e.padInfo.left,i="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${a};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              ${i?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}(c);return n.runWebGLProgram(h,[r,i],"float32")}},HE={kernelName:Tt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:i}=t,{inputShape:s,strides:o,pad:l,dataFormat:u,dimRoundingMode:d}=a,p=Bf.convertConv2DDataFormat(u),c=Bf.computeConv2DInfo(s,i.shape,o,1,l,d,!1,p);if(He().getBool("WEBGL_PACK")&&"channelsLast"===p){let e=[[c.strideHeight,c.strideWidth]],t=new class{constructor(e){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=e.inShape,this.enableShapeUniforms=qS(this.outputShape.length);let t=e.filterHeight,n=e.filterWidth,a=t-1-e.padInfo.top,r=n-1-e.padInfo.left;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${r});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            int wCPerm = ${n} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}(c);return n.runWebGLProgram(t,[r,i],"float32",e)}{let e=new class{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,n=e.filterWidth,a=e.strideHeight,r=e.strideWidth,i="channelsLast"===e.dataFormat,s=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=i?1:2,u=i?2:3,d=i?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${d}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${a}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${i}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}(c);return n.runWebGLProgram(e,[r,i],"float32")}}},jE={kernelName:Et,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i}=t,{strides:s,pad:o,dilations:l}=a,u=Bf.computeConv3DInfo(r.shape,i.shape,s,l,o),d=new class{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let t=e.padInfo.front,n=e.padInfo.top,a=e.padInfo.left,r=e.strideDepth,i=e.strideHeight,s=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,d=e.filterDepth,p=e.filterHeight,c=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${i}, ${s});\n      const ivec3 pads = ivec3(${t}, ${n}, ${a});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${d}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${c}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${h}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${h}) *\n                  getW(wF, wR, wC, ${h}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1),\n                  getX(batch, xF, xR, xC, ${h} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2),\n                  getW(wF, wR, wC, ${h} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}(u);return n.runWebGLProgram(d,[r,i],"float32")}},qE={kernelName:Rt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,dy:i}=t,{strides:s,pad:o,filterShape:l}=a,u=Bf.computeConv3DInfo(r.shape,l,s,1,o),d=new class{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideDepth,n=e.strideHeight,a=e.strideWidth,r=e.padInfo.front,i=e.padInfo.top,s=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${i};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${a} - ${s};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}(u);return n.runWebGLProgram(d,[r,i],"float32")}},XE={kernelName:$t,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:i}=t,{pad:s,strides:o,inputShape:l}=a,u=Bf.computeConv3DInfo(l,i.shape,o,1,s),d=new class{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterDepth,n=e.filterHeight,a=e.filterWidth,r=e.strideDepth,i=e.strideHeight,s=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=a-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${i}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${a}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${a} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}(u);return n.runWebGLProgram(d,[r,i],"float32")}},KE=rT({opSnippet:aT+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${HC}\n  return result;\n`}),ZE={kernelName:Mt,backendName:"webgl",kernelFunc:KE},YE=rT({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),JE={kernelName:_t,backendName:"webgl",kernelFunc:YE},QE={kernelName:Pt,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:a}=e,{image:r,boxes:i,boxInd:s}=t,{cropSize:o,method:l,extrapolationValue:u}=a,d=new class{constructor(e,t,n,a,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];let[i,s,o,l]=e,[u]=t,[d,p]=n;this.outputShape=[u,d,p,l];let c="bilinear"===a?1:0,[h,f]=[s-1+".0",o-1+".0"],[m,y,g]=d>1?[""+(s-1)/(d-1),"(y2-y1) * height_ratio",`y1*${h} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${h}`],[A,x,b]=p>1?[""+(o-1)/(p-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${A});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${i}) {\n          return;\n        }\n\n        float height_scale = ${y};\n        float width_scale = ${x};\n\n        float in_y = ${g};\n        if( in_y < 0.0 || in_y > ${h} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${b};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${c} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}(r.shape,i.shape,o,l,u);return n.runWebGLProgram(d,[r,i,s],"float32")}};!function(e){e.Prod="*",e.Sum="+"}(VE||(VE={}));var eR=class{constructor(e,t,n,a){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];let r=this.outputShape.length,i=this.op===VE.Prod?"1.0":"0.0",s=n?i:`getX(${tR(r,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1],l="",u="";n?(l=a?"end != "+(o-1):"end != 0",u=a?"end + 1":"end - 1"):(l=a?`end + pow2 < ${o}`:"end >= pow2",u=a?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${BS(r)} coords = getOutputCoords();\n        int end = ${nR(r,"coords",this.op)};\n        float val = ${s};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${u};\n          ${nR(r,"coords",this.op)} = idx;\n          val ${this.op}= getX(${tR(r,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}};function tR(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function nR(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function aR(e,t,n,a,r,i){let s=t.shape.length,o=Bf.getAxesPermutation([a],s),l=t;null!=o&&(l=kT({inputs:{x:t},backend:n,attrs:{perm:o}}));let u=Bf.getInnerMostAxes(1,s)[0];if(u!==s-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${a}`);let d=l.shape[u],p=qC({inputs:{x:l},backend:n});for(let t=0;t<=Math.ceil(Math.log2(d))-1;t++){let a=new eR(e,l.shape,!1,i),r=[[t]],s=p;p=n.runWebGLProgram(a,[p],p.dtype,r),n.disposeIntermediateTensorInfo(s)}if(r){let t=new eR(e,l.shape,r,i),a=p;p=n.runWebGLProgram(t,[p],p.dtype),n.disposeIntermediateTensorInfo(a)}if(null!=o){let e=kT({inputs:{x:p},backend:n,attrs:{perm:Bf.getUndoAxesPermutation(o)}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(l),e}return p}var rR={kernelName:Ft,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,exclusive:s,reverse:o}=a;return aR(VE.Prod,r,n,i,s,o)}},iR={kernelName:Ot,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,exclusive:s,reverse:o}=a;return aR(VE.Sum,r,n,i,s,o)}},sR={kernelName:Dt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,weights:i}=t,{size:s,binaryOutput:o}=a;if(1===r.shape.length){let e=n.readSync(r.dataId),t=n.readSync(i.dataId),a=vN(e,t,i.dtype,i.shape,s);return n.makeTensorInfo([s],i.dtype,a)}if(2===r.shape.length){let e=n.bufferSync(r),t=n.bufferSync(i),a=wN(e,t,s,o);return n.makeTensorInfo(a.shape,i.dtype,a.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},oR={kernelName:zt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockSize:i,dataFormat:s}=a,o=r.shape[0],l=("NHWC"===s?r.shape[1]:r.shape[2])*i,u=("NHWC"===s?r.shape[2]:r.shape[3])*i,d=("NHWC"===s?r.shape[3]:r.shape[1])/(i*i),p="NHWC"===s?[o,l,u,d]:[o,d,l,u],c=new class{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}(p,i,s);return n.runWebGLProgram(c,[r],r.dtype)}},lR=class{constructor(e,t=!1,n=null,a=!1,r=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=qS(this.outputShape.length);let i=e.filterHeight,s=e.filterWidth,o=e.outChannels/e.inChannels,l="",u="";n&&(l=a?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");let d=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${i}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${d}\n        ${u}\n        setOutput(result);\n      }\n    `}},uR=class{constructor(e,t=!1,n=null,a=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=qS(this.outputShape.length);let i=e.outChannels/e.inChannels,s=e.padInfo.left,o=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,d=e.filterWidth,p=d,c="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<d;e++)c+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;c+=`\n    for (int r = 0; r < ${u}; r++) {\n      `;for(let e=0;e<d;e++)c+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;c+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(p+1)/2;e++){let t=2*e;if(c+=`\n          xC = xCCorner + ${t*l};\n          `,1===o){if(t<d&&(s%2==1?(c+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,c+=1===l&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):c+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<d)){let e=s%2==0?Tr.nearestLargerEven(l):l;l%2==0&&s%2==1||l%2!=0&&s%2!=1?(c+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,c+=l>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):c+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<d&&(s%2==1?(c+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<d&&(c+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(c+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<d&&(c+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<d&&(c+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<d&&(c+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}c+="\n    }\n  ",c+="\n      }\n    ";let h="",f="";n&&(h=a?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");let m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${h}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${c}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}},dR={kernelName:Lt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i}=t,{strides:s,pad:o,dilations:l,dimRoundingMode:u}=a,d=l;null==d&&(d=[1,1]),Tr.assert(Bf.eitherStridesOrDilationsAreOne(s,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${s} and dilations '${d}'`));let p,c=Bf.computeConv2DInfo(r.shape,i.shape,s,d,o,u,!0);p=He().getBool("WEBGL_PACK_DEPTHWISECONV")&&c.strideWidth<=2&&c.outChannels/c.inChannels==1?new uR(c):new lR(c);let h=[[c.padInfo.top,c.padInfo.left],[c.strideHeight,c.strideWidth],[c.dilationHeight,c.dilationWidth],[c.inHeight,c.inWidth]];return n.runWebGLProgram(p,[r,i],"float32",h)}},pR={kernelName:Wt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,dy:i}=t,{strides:s,dilations:o,pad:l,dimRoundingMode:u,filterShape:d}=a,p=Bf.computeConv2DInfo(r.shape,d,s,o,l,u,!0),c=new class{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,n=e.strideWidth,a=e.padInfo.top,r=e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${i} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${a};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}(p);return n.runWebGLProgram(c,[r,i],"float32")}},cR={kernelName:Bt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:i}=t,{strides:s,dilations:o,pad:l,dimRoundingMode:u,inputShape:d}=a,p=Bf.computeConv2DInfo(d,i.shape,s,o,l,u,!0),c=new class{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,n=e.filterWidth,a=e.strideHeight,r=e.strideWidth,i=t-1-e.padInfo.top,s=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${s});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${a}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}(p);return n.runWebGLProgram(c,[r,i],"float32")}},hR={kernelName:Vt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:a}=t,r=[...a.shape,...a.shape],i=Tr.sizeFromShape(a.shape),s=hT({inputs:{x:a},backend:n,attrs:{shape:[i]}}),o=new class{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}(i),l=n.runWebGLProgram(o,[s],s.dtype),u=hT({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(l),u}},fR={kernelName:Ut,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:a,attrs:r}=e,{x:i,filter:s}=n,{strides:o,pad:l,dilations:u}=r,d=Bf.computeDilation2DInfo(i.shape,s.shape,o,l,"NHWC",u),p=new class{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let{inHeight:t,inWidth:n,padInfo:a,strideHeight:r,strideWidth:i,filterHeight:s,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:d,left:p}=a;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${i});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${s}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}(d);t=a.runWebGLProgram(p,[i,s],"float32");let c=hT({inputs:{x:t},backend:a,attrs:{shape:d.outShape}});return a.disposeIntermediateTensorInfo(t),c}},mR={kernelName:Xt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{equation:r}=a,i=t,{allDims:s,summedDims:o,idDims:l}=Bf.decodeEinsumEquation(r,i.length);Bf.checkEinsumDimSizes(s.length,l,i);let{path:u,steps:d}=Bf.getEinsumComputePath(o,l),p=d.length,c=null,h=s.length,f=[];for(let e=0;e<p;++e){for(let t of d[e]){let e,{permutationIndices:a,expandDims:r}=Bf.getEinsumPermutation(h,l[t]);Bf.isIdentityPermutation(a)?e=i[t]:(e=kT({inputs:{x:i[t]},backend:n,attrs:{perm:a}}),f.push(e));let s=e.shape.slice();for(let e=0;e<r.length;++e)s.splice(r[e],0,1);Tr.arraysEqual(e.shape,s)||(e=hT({inputs:{x:e},backend:n,attrs:{shape:s}}),f.push(e)),null===c?c=e:(c=pT({inputs:{a:e,b:c},backend:n}),f.push(c))}e<p-1&&(u[e]>=0&&(c=vT({inputs:{x:c},backend:n,attrs:{axis:u[e]-(s.length-h),keepDims:!1}}),f.push(c)),h--)}for(let e of f)e!==c&&n.disposeIntermediateTensorInfo(e);return c}},yR=rT({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),gR={kernelName:Kt,backendName:"webgl",kernelFunc:yR},AR={kernelName:Zt,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n}=e,{dy:a,y:r}=t,i=He().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new jC("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",a.shape,r.shape):new GC("return (b >= 0.0) ? a : a * (b + 1.0);",a.shape,r.shape);return n.runWebGLProgram(i,[a,r],a.dtype)}},xR=iT({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:CN}),bR={kernelName:Jt,backendName:"webgl",kernelFunc:xR},vR=rT({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Bf.ERF_P};\n  float a1 = ${Bf.ERF_A1};\n  float a2 = ${Bf.ERF_A2};\n  float a3 = ${Bf.ERF_A3};\n  float a4 = ${Bf.ERF_A4};\n  float a5 = ${Bf.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),wR={kernelName:Yt,backendName:"webgl",kernelFunc:vR},kR=rT({opSnippet:aT+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:TN,dtype:"float32"}),IR={kernelName:Qt,backendName:"webgl",kernelFunc:kR};function SR(e){let{inputs:t,attrs:n,backend:a}=e,{dim:r}=n,{input:i}=t,s=i.shape.length,o=i.shape.slice(),l=r;return r<0&&(Tr.assert(-(s+1)<=r,(()=>`Axis must be in the interval [${-(s+1)}, ${s}]`)),l=s+r+1),o.splice(l,0,1),hT({inputs:{x:i},backend:a,attrs:{shape:o}})}var NR={kernelName:en,backendName:"webgl",kernelFunc:SR},CR="return exp(x) - 1.0;",TR=rT({opSnippet:CR,packedOpSnippet:CR,cpuKernelImpl:EN}),ER={kernelName:tn,backendName:"webgl",kernelFunc:TR},RR=class{constructor(e,t,n){this.variableNames=["real","imag"];let a=t[1];this.outputShape=t;let r,i=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,s=n?`${a}.0`:"1.0";if("real"===e)r="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);r="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${i};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${r}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${a});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${a}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${s};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}};function $R(e,t,n){let a=n.texData.get(e.dataId),r=Tr.sizeFromShape(e.shape),i=e.shape[e.shape.length-1],s=hT({inputs:{x:e},backend:n,attrs:{shape:[r/i,i]}}),o=s.shape,l=new RR("real",o,t),u=new RR("imag",o,t),d=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:o},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:o}],p=n.runWebGLProgram(l,d,"float32"),c=n.runWebGLProgram(u,d,"float32"),h=KC({inputs:{real:p,imag:c},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(c);let f=hT({inputs:{x:h},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(h),f}var MR={kernelName:nn,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{input:a}=t;return $R(a,!1,n)}},_R=class{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}};function FR(e){let{backend:t,attrs:n}=e,{shape:a,value:r}=n,{dtype:i}=n;if(i=i||Tr.inferDtype(r),"string"===i){let e=Tr.getArrayFromDType(i,Tr.sizeFromShape(a));return e.fill(r),t.makeTensorInfo(a,i,e)}{let e=new _R(a,r),n=[[r]];return t.runWebGLProgram(e,[],i,n)}}var OR,PR={kernelName:an,backendName:"webgl",kernelFunc:FR},DR={kernelName:rn,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{let{image:n}=e,a=t,r=new class{constructor(e){this.variableNames=["Image"],this.outputShape=[];let t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}(n.shape);return a.runWebGLProgram(r,[n],n.dtype)}},zR="return floor(x);",LR=rT({opSnippet:zR,packedOpSnippet:zR,cpuKernelImpl:RN}),WR={kernelName:sn,backendName:"webgl",kernelFunc:LR},BR=iT({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),VR={kernelName:on,backendName:"webgl",kernelFunc:BR},UR={kernelName:dr,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{pixels:r}=t,{numChannels:i}=a,s="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=s?[r.videoWidth,r.videoHeight]:[r.width,r.height],d=[u,l],p=[u,l,i];if(o||s){let e=He().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==OR||e!==GR)&&(GR=e,OR=document.createElement("canvas").getContext("2d",{willReadFrequently:GR})),OR.canvas.width=l,OR.canvas.height=u,OR.drawImage(r,0,0,l,u),r=OR.canvas}let c=n.makeTensorInfo(d,"int32");n.texData.get(c.dataId).usage=gI.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(c.dataId),r);let h=He().getBool("WEBGL_PACK")?new class{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;let t=NS(),[n,a]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${a}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}(p):new class{constructor(e){this.variableNames=["A"];let t=NS(),[n,a]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}(p),f=n.runWebGLProgram(h,[c],"int32");return n.disposeData(c.dataId),f}},GR=He().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU"),HR={kernelName:hr,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:a,attrs:r}=e,{x:i,filter:s,bias:o,preluActivationWeights:l}=n,{strides:u,pad:d,dataFormat:p,dilations:c,dimRoundingMode:h,activation:f,leakyreluAlpha:m}=r,y=Bf.convertConv2DDataFormat(p),g=Bf.computeConv2DInfo(i.shape,s.shape,u,c,d,h,!1,y),A=[],x=null!=o,b=null!=l,v="leakyrelu"===f,w=()=>{let e=[i,s],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){let t=hT({inputs:{x:e},backend:a,attrs:{shape:[e.shape[0],1,1]}});return A.push(t),t}return e};if(x&&e.push(t(o,p)),b&&e.push(t(l,p)),v){let t=a.makeTensorInfo([],"float32",Tr.createScalarValue(m,"float32"));e.push(t),A.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===y&&He().getBool("WEBGL_EXP_CONV")){let e=f?sT(f,!0):null,n=new zE(g,x,e,b,v),r=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],i=w();t=a.runWebGLProgram(n,i,"float32",r)}else if(He().getBool("WEBGL_CONV_IM2COL"))t=BE({x:i,filter:s,convInfo:g,backend:a,bias:o,activation:f,preluActivationWeights:l,leakyreluAlpha:m});else{let e=f?sT(f,!1):null,n=new DE(g,x,e,b,v),r=w();t=a.runWebGLProgram(n,r,"float32")}else t=WE({x:i,filter:s,convInfo:g,backend:a,bias:o,activation:f,preluActivationWeights:l,leakyreluAlpha:m});let k=hT({inputs:{x:t},backend:a,attrs:{shape:g.outShape}});return A.push(t),A.forEach((e=>a.disposeIntermediateTensorInfo(e))),k}},jR={kernelName:fr,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i,bias:s,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:d,dimRoundingMode:p,activation:c,leakyreluAlpha:h}=a,f=[],m=d;null==m&&(m=[1,1]),Tr.assert(Bf.eitherStridesOrDilationsAreOne(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));let y,g=Bf.computeConv2DInfo(r.shape,i.shape,l,m,u,p,!0),A=He().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,x=c?sT(c,A):null,b=[r,i],v=null!=s,w=null!=o,k="leakyrelu"===c;if(v&&b.push(s),w&&b.push(o),k){let e=n.makeTensorInfo([],"float32",Tr.createScalarValue(h,"float32"));b.push(e),f.push(e)}y=A?new uR(g,v,x,w,k):new lR(g,v,x,w,k);let I=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],S=n.runWebGLProgram(y,b,"float32",I);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}},qR={kernelName:dn,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{params:a,indices:r}=t,i=r.shape,s=i[i.length-1],o=Tr.sizeFromShape(a.shape),[l,u,d,p]=Bf.prepareAndValidate(a,r),c=hT({inputs:{x:r},backend:n,attrs:{shape:[u,s]}}),h=hT({inputs:{x:a},backend:n,attrs:{shape:[Tr.sizeFromShape(a.shape)/d,d]}});if(n.shouldExecuteOnCPU([a,r])||"string"===a.dtype){let e=n.readSync(r.dataId),t=n.bufferSync(a),i=$N(e,t,a.dtype,u,s,d,p,a.shape,o);return n.makeTensorInfo(l,a.dtype,i.values)}let f=new class{constructor(e,t,n,a){this.sliceDim=e,this.strides=t,this.paramsShape=a,this.variableNames=["x","indices"],this.outputShape=n;let r=BS(n.length),i="\n    int index;";for(let e=0;e<this.sliceDim;e++)i+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${i}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}(s,p,[u,d],a.shape),m=n.runWebGLProgram(f,[h,c],h.dtype),y=hT({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(m),y}};function XR(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,indices:i}=t,{axis:s,batchDims:o}=a,l=Tr.parseAxisParam(s,r.shape)[0];if(He().get("DEBUG")){let e=n.readSync(i.dataId),t=r.shape[l];for(let n=0;n<e.length;++n){let a=e[n];Tr.assert(a<=t-1&&a>=0,(()=>`GatherV2: the index value ${a} is not in [0, ${t-1}]`))}}let u=Bf.segment_util.collectGatherOpShapeInfo(r,i,l,o),d=Tr.sizeFromShape(i.shape),p=[],c=hT({inputs:{x:r},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),h=hT({inputs:{x:i},backend:n,attrs:{shape:[u.batchSize,d/u.batchSize]}});p.push(c),p.push(h);let f=[u.batchSize,u.outerSize,d/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([r,i])||"string"===r.dtype){let e=n.bufferSync(h),t=n.bufferSync(c),a=MN(t,e,f);return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,a.dtype,a.values)}let m=new class{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;let n=BS(this.rank),a=function(e,t){let n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[];for(let t=0;t<e.length;t++)2===t?a.push("index"):a.push(`${n[t]}`);return a.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${a}));\n      }\n    `}}(c.shape,f),y=n.runWebGLProgram(m,[c,h],c.dtype);p.push(y);let g=hT({inputs:{x:y},backend:n,attrs:{shape:u.outputShape}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}var KR={kernelName:un,backendName:"webgl",kernelFunc:XR},ZR=iT({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:_N,dtype:"bool"}),YR={kernelName:pn,backendName:"webgl",kernelFunc:ZR},JR=iT({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:FN}),QR={kernelName:cn,backendName:"webgl",kernelFunc:JR},e$={kernelName:fn,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{input:a}=t;return $R(a,!0,n)}},t$=rT({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),n$={kernelName:yn,backendName:"webgl",kernelFunc:t$},a$=rT({opSnippet:"return float(isinf(x));",dtype:"bool"}),r$={kernelName:gn,backendName:"webgl",kernelFunc:a$},i$=rT({opSnippet:"return float(isnan(x));",dtype:"bool"}),s$={kernelName:An,backendName:"webgl",kernelFunc:i$},o$=iT({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:ON,dtype:"bool"}),l$={kernelName:bn,backendName:"webgl",kernelFunc:o$},u$=iT({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:PN,dtype:"bool"}),d$={kernelName:vn,backendName:"webgl",kernelFunc:u$},p$={kernelName:wn,backendName:"webgl",kernelFunc:function(e){let{backend:t,attrs:n}=e,{start:a,stop:r,num:i}=n,s=DN(a,r,i);return t.makeTensorInfo([s.length],"float32",s)}},c$=rT({opSnippet:aT+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:zN}),h$={kernelName:kn,backendName:"webgl",kernelFunc:c$},f$=rT({opSnippet:aT+"\n  return log(1.0 + x);\n"}),m$={kernelName:In,backendName:"webgl",kernelFunc:f$},y$=iT({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),g$={kernelName:Sn,backendName:"webgl",kernelFunc:y$},A$=rT({opSnippet:"return float(!(x >= 1.0));"}),x$={kernelName:Nn,backendName:"webgl",kernelFunc:A$},b$=iT({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),v$={kernelName:Cn,backendName:"webgl",kernelFunc:b$},w$={kernelName:$n,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{depthRadius:i,bias:s,alpha:o,beta:l}=a,u=He().getBool("WEBGL_PACK_NORMALIZATION")?new class{constructor(e,t,n,a,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;let i=t,s=e[3]-1;this.outputShape=e;let o,l=`float(${n}) + float(${a}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${i};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${i}; j <= ${i}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${s}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}(r.shape,i,s,o,l):new class{constructor(e,t,n,a,r){this.variableNames=["x"],this.outputShape=[];let i=t,s=e[3]-1;this.outputShape=e;let o,l=`float(${n}) + float(${a}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${i}; j <= ${i}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${s}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}(r.shape,i,s,o,l);return n.runWebGLProgram(u,[r],r.dtype)}},k$={kernelName:Mn,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:a}=e,{x:r,y:i,dy:s}=t,{depthRadius:o,bias:l,alpha:u,beta:d}=a,p=new class{constructor(e,t,n,a,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=a,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${a}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${a})\n                * float(${r})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}(r.shape,o,l,u,d);return n.runWebGLProgram(p,[r,i,s],r.dtype)}};function I$(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{reductionIndices:i,keepDims:s}=a,o=r.shape.length,l=Tr.parseAxisParam(i,r.shape),u=l,d=Bf.getAxesPermutation(u,o),p=null!=d,c=n.shouldExecuteOnCPU([r]),h=r;if(p){if(c){let e=n.texData.get(h.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[d[e]];let a=hC(e,r.shape,r.dtype,d,t);h=n.makeTensorInfo(t,r.dtype),n.texData.get(h.dataId).values=a}else h=bT(r,d,n);u=Bf.getInnerMostAxes(u.length,o)}Bf.assertAxesAreInnerMostDims("max",u,o);let f,[m,y]=Bf.computeOutAndReduceShapes(h.shape,u),g=m;if(s&&(g=Bf.expandShapeToKeepDim(m,l)),c){let e=n.texData.get(h.dataId).values,t=LN(e,Tr.sizeFromShape(y),g,r.dtype);f=n.makeTensorInfo(g,r.dtype),n.texData.get(f.dataId).values=t}else f=function(e,t,n,a){let r=Tr.sizeFromShape(t),i=hT({inputs:{x:e},attrs:{shape:[Tr.sizeFromShape(e.shape)/r,r]},backend:a}),s=gT(i,e.dtype,"max",a),o=hT({inputs:{x:s},attrs:{shape:n},backend:a});return a.disposeIntermediateTensorInfo(i),a.disposeIntermediateTensorInfo(s),o}(h,y,g,n);return p&&n.disposeIntermediateTensorInfo(h),f}var S$={kernelName:Fn,backendName:"webgl",kernelFunc:I$},N$=iT({opSnippet:UC+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+HC+"\n  return result;\n",cpuKernelImpl:WN}),C$={kernelName:On,backendName:"webgl",kernelFunc:N$},T$={kernelName:Pn,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t;IS(r,"maxPool");let{filterSize:i,strides:s,pad:o,dimRoundingMode:l}=a;Tr.assert(Bf.eitherStridesOrDilationsAreOne(s,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '1'`));let u=Bf.computePool2DInfo(r.shape,i,s,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&Tr.arraysEqual(u.inShape,u.outShape))return qC({inputs:{x:r},backend:n});let d=new aE(u,"max",!1);return n.runWebGLProgram(d,[r],r.dtype)}},E$={kernelName:zn,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:i,strides:s,pad:o,dataFormat:l,dimRoundingMode:u}=a,d=Bf.computePool3DInfo(r.shape,i,s,[1,1,1],o,u,l),p=new rE(d,"max",!1);return n.runWebGLProgram(p,[r],r.dtype)}},R$={kernelName:Ln,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,input:i}=t,s=i,{filterSize:o,strides:l,pad:u,dimRoundingMode:d}=a,p=Bf.computePool3DInfo(s.shape,o,l,[1,1,1],u,d),c=new rE(p,"max",!0),h=n.runWebGLProgram(c,[s],s.dtype),f=new class{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideDepth,n=e.strideHeight,a=e.strideWidth,r=e.dilationDepth,i=e.dilationHeight,s=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,d=o-1-e.padInfo.front,p=l-1-e.padInfo.top,c=u-1-e.padInfo.left,h=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${p}, ${c});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${i}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${s}) {\n              float dyC = float(dyCCorner + wC) / ${a}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${h} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}(p),m=n.runWebGLProgram(f,[r,h],s.dtype);return n.disposeIntermediateTensorInfo(h),m}},$$={kernelName:Dn,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,input:i,output:s}=t,o=i;IS([i,s],"maxPoolGrad");let{filterSize:l,strides:u,pad:d,dimRoundingMode:p}=a,c=Bf.computePool2DInfo(o.shape,l,u,1,d,p),h=new aE(c,"max",!0),f=n.runWebGLProgram(h,[o],o.dtype),m=new class{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideHeight,n=e.strideWidth,a=e.dilationHeight,r=e.effectiveFilterHeight,i=e.effectiveFilterWidth,s=r-1-e.padInfo.top,o=i-1-e.padInfo.left,l=r*i-1;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${i} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}(c),y=n.runWebGLProgram(m,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),y}},M$={kernelName:Wn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{x:a}=e,{filterSize:r,strides:i,pad:s,includeBatchInIndex:o}=t,l=n;Tr.assert(4===a.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${a.shape.length}.`));let u=[1,1];Tr.assert(Bf.eitherStridesOrDilationsAreOne(i,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`));let d=Bf.computePool2DInfo(a.shape,r,i,u,s),[p,c]=function(e,t,n,a){let r=new aE(n,"max",!1),i=a.runWebGLProgram(r,[e],"float32");return r=new aE(n,"max",!0,!0,t),[i,a.runWebGLProgram(r,[e],"float32")]}(a,o,d,l);return[p,c]}},_$={kernelName:Bn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{x:a}=e,{keepDims:r,axis:i}=t,s=n,o=a.shape.length,l=Tr.parseAxisParam(i,a.shape),u=l,d=Bf.getAxesPermutation(u,o),p=null!=d,c=s.shouldExecuteOnCPU([a]),h=[],f=a;if(p){if(c){let e=s.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=a.shape[d[e]];let n=hC(e,a.shape,a.dtype,d,t);f=s.makeTensorInfo(t,a.dtype),s.texData.get(f.dataId).values=n}else f=bT(a,d,s);h.push(f),u=Bf.getInnerMostAxes(u.length,o)}Bf.assertAxesAreInnerMostDims("sum",u,o);let[m,y]=Bf.computeOutAndReduceShapes(f.shape,u),g=m;r&&(g=Bf.expandShapeToKeepDim(m,l));let A=function(e,t,n,a){let r=Tr.sizeFromShape(t),i=hT({inputs:{x:e},attrs:{shape:[Tr.sizeFromShape(e.shape)/r,r]},backend:a}),s=gT(i,"float32","mean",a),o=hT({inputs:{x:s},attrs:{shape:n},backend:a});return a.disposeIntermediateTensorInfo(i),a.disposeIntermediateTensorInfo(s),o}(f,y,g,s);for(let e of h)s.disposeIntermediateTensorInfo(e);return A}},F$={kernelName:Vn,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,keepDims:s}=a,o=r.shape.length,l=Tr.parseAxisParam(i,r.shape),u=l,d=Bf.getAxesPermutation(u,o),p=r;null!=d&&(p=kT({inputs:{x:r},backend:n,attrs:{perm:d}}),u=Bf.getInnerMostAxes(u.length,r.shape.length)),Bf.assertAxesAreInnerMostDims("min",u,o);let c,[h,f]=Bf.computeOutAndReduceShapes(p.shape,u),m=hT({inputs:{x:p},backend:n,attrs:{shape:[-1,Tr.sizeFromShape(f)]}}),y=gT(m,m.dtype,"min",n);return c=hT(s?{inputs:{x:y},backend:n,attrs:{shape:Bf.expandShapeToKeepDim(h,l)}}:{inputs:{x:y},backend:n,attrs:{shape:h}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(y),null!=d&&n.disposeIntermediateTensorInfo(p),c}},O$=iT({opSnippet:UC+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+HC+"\n  return result;\n",cpuKernelImpl:BN}),P$={kernelName:Un,backendName:"webgl",kernelFunc:O$},D$={kernelName:Gn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{let{x:a}=e,{paddings:r,mode:i}=n,s=He().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new class{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));let a=e.length,r=BS(a),i=t.map((e=>e[0])).join(","),s=t.map(((t,n)=>t[0]+e[n])).join(","),o=yC("rc",a),l=yC("source",a),u=`${o[a-1]} < ${this.outputShape[a-1]}`,d=1===a?"source":`vec2(${l.slice(-2).join()})`,p="reflect"===n?0:1,c="";if(1===a){let e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${p};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${p};\n        }\n        source -= start;\n      `;c=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${d});\n        ${o[a-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${d});\n        }\n      `}else{let e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${p}) +\n                gte * ((end - 1) * 2 - source + ${p});\n        source -= start;\n      `;c=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${d});\n        ${o[a-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${d});\n        }\n        rc = outputLoc;\n        ${o[a-2]} += 1;\n        if(${o[a-2]} < ${this.outputShape[a-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${d});\n          ${o[a-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${d});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${i});\n      const ${r} end = ${r}(${s});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${c}\n        setOutput(result);\n      }\n    `}}(a.shape,r,i):new class{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));let a=e.length,r=BS(a),i=t.map((e=>e[0])).join(","),s=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,a),l="reflect"===n?0:1;this.userCode=1!==a?`\n      ${r} start = ${r}(${i});\n      ${r} end = ${r}(${s});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${a}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${i};\n        int end = ${s};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}(a.shape,r,i);return t.runWebGLProgram(s,[a],a.dtype)}},z$=iT({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+HC+"\n  return result;\n"}),L$={kernelName:Hn,backendName:"webgl",kernelFunc:z$},W$=iT({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),B$={kernelName:qt,backendName:"webgl",kernelFunc:W$},V$="return a - b;",U$=iT({opSnippet:V$,packedOpSnippet:V$,supportsComplex:!0,cpuKernelImpl:dC}),G$={kernelName:Ya,backendName:"webgl",kernelFunc:U$};function H$(e){let{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{dim:i}=a,s=Tr.parseAxisParam([i],r.shape),o=I$({inputs:{x:r},backend:n,attrs:{reductionIndices:s,keepDims:!1}}),l=Bf.expandShapeToKeepDim(o.shape,s),u=hT({inputs:{x:o},backend:n,attrs:{shape:l}}),d=U$({inputs:{a:r,b:u},backend:n}),p=kR({inputs:{x:d},backend:n}),c=vT({inputs:{x:p},backend:n,attrs:{axis:s,keepDims:!1}}),h=hT({inputs:{x:c},backend:n,attrs:{shape:l}}),f=W$({inputs:{a:p,b:h},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),f}var j$={kernelName:za,backendName:"webgl",kernelFunc:H$},q$={kernelName:jn,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{numSamples:i,seed:s,normalized:o}=a,l=o?r:H$({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],d=l.shape[1],p=new class{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}(u,d,i),c=[[s]],h=n.runWebGLProgram(p,[l],"int32",c);return o||n.disposeIntermediateTensorInfo(l),h}},X$=wC+"\n  return -x;\n",K$={kernelName:Xn,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:a}=e,{x:r}=n;if(a.shouldExecuteOnCPU([r])){let e=a.texData.get(r.dataId),[t,n]=UN(e.values,r.shape,r.dtype);return a.makeTensorInfo(n,r.dtype,t)}return t=He().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new OC(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new vC(r.shape,X$),a.runWebGLProgram(t,[r],r.dtype)}},Z$=Km.nonMaxSuppressionV3Impl,Y$={kernelName:Zn,backendName:"webgl",kernelFunc:function(e){Bf.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l}=a,u=n.readSync(r.dataId),d=n.readSync(i.dataId),{selectedIndices:p}=Z$(u,d,s,o,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},J$=Km.nonMaxSuppressionV4Impl,Q$={kernelName:Yn,backendName:"webgl",kernelFunc:function(e){Bf.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=a,d=n.readSync(r.dataId),p=n.readSync(i.dataId),{selectedIndices:c,validOutputs:h}=J$(d,p,s,o,l,u);return[n.makeTensorInfo([c.length],"int32",new Int32Array(c)),n.makeTensorInfo([],"int32",new Int32Array([h]))]}},eM=Km.nonMaxSuppressionV5Impl,tM={kernelName:Jn,backendName:"webgl",kernelFunc:function(e){Bf.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=a,d=n.readSync(r.dataId),p=n.readSync(i.dataId),c=s,h=o,f=l,m=u,{selectedIndices:y,selectedScores:g}=eM(d,p,c,h,f,m);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([g.length],"float32",new Float32Array(g))]}},nM={kernelName:ea,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:a}=e,{indices:r}=t,{dtype:i,depth:s,onValue:o,offValue:l}=a,u=Tr.sizeFromShape(r.shape),d=new class{constructor(e,t,n,a){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${a}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}(u,s,o,l),p=hT({inputs:{x:r},backend:n,attrs:{shape:[u]}}),c=n.runWebGLProgram(d,[p],i);n.disposeIntermediateTensorInfo(p);let h=hT({inputs:{x:c},backend:n,attrs:{shape:[...r.shape,s]}});return n.disposeIntermediateTensorInfo(c),h}};function aM(e){let{inputs:t,backend:n}=e,{x:a}=t;if("complex64"===a.dtype){let e=bE({inputs:{input:a},backend:n}),t=aM({inputs:{x:e},backend:n}),r=ME({inputs:{input:a},backend:n}),i=aM({inputs:{x:r},backend:n}),s=KC({inputs:{real:t,imag:i},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i),s}return FR({attrs:{shape:a.shape,dtype:a.dtype,value:"string"===a.dtype?"":0},backend:n})}var rM={kernelName:lr,backendName:"webgl",kernelFunc:aM},iM={kernelName:Qn,backendName:"webgl",kernelFunc:function e(t){let{inputs:n,backend:a}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){let t=bE({inputs:{input:r},backend:a}),n=e({inputs:{x:t},backend:a}),i=ME({inputs:{input:r},backend:a}),s=aM({inputs:{x:i},backend:a}),o=KC({inputs:{real:n,imag:s},backend:a});return a.disposeIntermediateTensorInfo(t),a.disposeIntermediateTensorInfo(n),a.disposeIntermediateTensorInfo(i),a.disposeIntermediateTensorInfo(s),o}return FR({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:a})}},sM={kernelName:ta,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{axis:r}=a;if(1===t.length)return SR({inputs:{input:t[0]},backend:n,attrs:{dim:r}});let i=t[0].shape,s=t[0].dtype;t.forEach((e=>{Tr.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),Tr.assert(s===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));let o=[],l=OE({inputs:t.map((e=>{let t=SR({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}},oM=e=>{let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{paddings:i,constantValue:s}=a;if(0===Tr.sizeFromShape(r.shape))return FR({backend:n,attrs:{shape:i.map(((e,t)=>e[0]+r.shape[t]+e[1])),value:s,dtype:r.dtype}});let o=He().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new class{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));let a=e.length,r=BS(a),i=t.map((e=>e[0])).join(","),s=t.map(((t,n)=>t[0]+e[n])).join(","),o=yC("rc",a),l=yC("source",a),u=`${o[a-1]} < ${this.outputShape[a-1]}`,d=1===a?"source":`vec2(${l.slice(-2).join()})`,p=[`${r} rc = outputLoc;`,`${o[a-1]} += 1;\n       if(${u}) {\n      `,1===a?"":`}\n       rc = outputLoc;\n       ${o[a-2]} += 1;\n       if(${o[a-2]} < ${this.outputShape[a-2]}) {`,1===a?"":`  ${o[a-1]} += 1;\n         if(${u}) {`],c=1===a?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",h="";for(let e=0,t=1===a?2:4;e<t;e++)h+=`\n        ${p[e]}\n        if (${c}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${d});\n        }\n      `;h+=1===a?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${i});\n      const ${r} end = ${r}(${s});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}}(r.shape,i,s):new class{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));let a=e.length,r=BS(a),i=t.map((e=>e[0])).join(","),s=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,a);this.userCode=1!==a?`\n      ${r} start = ${r}(${i});\n      ${r} end = ${r}(${s});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${i};\n        int end = ${s};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}(r.shape,i,s),l=[[s]];return n.runWebGLProgram(o,[r],r.dtype,l)},lM={kernelName:na,backendName:"webgl",kernelFunc:oM},uM=iT({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+HC+"\n  return result;\n"}),dM={kernelName:ra,backendName:"webgl",kernelFunc:uM},pM={kernelName:sa,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:a,attrs:r}=e,{x:i}=n,{axis:s,keepDims:o}=r,l=i.shape.length,u=[],d=Tr.parseAxisParam(s,i.shape),p=d,c=Bf.getAxesPermutation(p,l),h=i;if(null!=c&&(h=kT({inputs:{x:i},backend:a,attrs:{perm:c}}),p=Bf.getInnerMostAxes(p.length,l),u.push(h)),Bf.assertAxesAreInnerMostDims("prod",p,l),a.shouldExecuteOnCPU([h])){let e=a.texData.get(h.dataId).values,{outVals:n,outShape:r,outDtype:i}=HN(h.shape,h.dtype,e,p);t=a.makeTensorInfo(r,i,n)}else{let[e,n]=Bf.computeOutAndReduceShapes(h.shape,p),r=Tr.sizeFromShape(n),s=hT({inputs:{x:h},backend:a,attrs:{shape:[-1,r]}}),o=gT(s,vi(i.dtype),"prod",a);t=hT({inputs:{x:o},backend:a,attrs:{shape:e}}),u.push(s),u.push(o)}if(o){u.push(t);let e=Bf.expandShapeToKeepDim(t.shape,d);t=hT({inputs:{x:t},backend:a,attrs:{shape:e}})}return u.forEach((e=>a.disposeIntermediateTensorInfo(e))),t}},cM={kernelName:oa,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{paramsNestedSplits:r,paramsDenseValues:i,indices:s}=t,{outputRaggedRank:o}=a,l=r.map((e=>n.readSync(e.dataId))),u=r.map((e=>e.shape)),d=n.readSync(i.dataId),p=n.readSync(s.dataId),[c,h,f]=jN(l,u,d,i.shape,i.dtype,p,s.shape,o),m=c.map((e=>n.makeTensorInfo([e.length],"int32",e))),y=n.makeTensorInfo(f,i.dtype,h);return m.concat([y])}},hM={kernelName:la,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{starts:a,limits:r,deltas:i}=t,s=n.readSync(a.dataId),o=n.readSync(r.dataId),l=n.readSync(i.dataId),[u,d]=qN(s,a.shape,a.dtype,o,r.shape,l,i.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([d.length],a.dtype,d)]}},fM={kernelName:ua,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{shape:r,values:i,defaultValue:s,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=a,u=n.readSync(r.dataId),d=n.readSync(i.dataId),p=n.readSync(s.dataId),c=o.map((e=>n.readSync(e.dataId))),h=o.map((e=>e.shape)),[f,m]=XN(u,r.shape,d,i.shape,i.dtype,p,s.shape,c,h,l);return n.makeTensorInfo(f,i.dtype,m)}},mM=e=>{let{backend:t,attrs:n}=e,{start:a,stop:r,step:i,dtype:s}=n,o=KN(a,r,i,s);return t.makeTensorInfo([o.length],s,o)},yM={kernelName:da,backendName:"webgl",kernelFunc:mM},gM=rT({opSnippet:"return 1.0 / x;"}),AM={kernelName:ca,backendName:"webgl",kernelFunc:gM},xM=rT({opSnippet:wC+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),bM={kernelName:ha,backendName:"webgl",kernelFunc:xM},vM=rT({opSnippet:wC+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),wM={kernelName:xa,backendName:"webgl",kernelFunc:vM},kM={kernelName:ga,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{images:r}=t,{alignCorners:i,halfPixelCenters:s,size:o}=a,[l,u]=o,d=He().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new class{constructor(e,t,n,a,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,s,o,l]=e;this.outputShape=[i,t,n,l];let u,d=[a&&t>1?s-1:s,a&&n>1?o-1:o],p=[a&&t>1?t-1:t,a&&n>1?n-1:n];u=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${d[0]/p[0]},\n          ${d[1]/p[1]},\n          ${d[1]/p[1]});\n      const vec3 inputShapeRC = vec3(${s}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${u};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}(r.shape,l,u,i,s):new class{constructor(e,t,n,a,r){this.variableNames=["A"],this.outputShape=[];let[i,s,o,l]=e;this.outputShape=[i,t,n,l];let u,d=[a&&t>1?s-1:s,a&&n>1?o-1:o],p=[a&&t>1?t-1:t,a&&n>1?n-1:n];u=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${d[0]/p[0]},\n          ${d[1]/p[1]});\n      const vec2 inputShapeRC = vec2(${s}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${u};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}(r.shape,l,u,i,s);return n.runWebGLProgram(d,[r],"float32")}},IM={kernelName:Aa,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{images:r,dy:i}=t,{alignCorners:s}=a,o=new class{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,a,r]=t,[,i,s]=e,o=[n&&i>1?a-1:a,n&&s>1?r-1:r],l=[n&&i>1?i-1:i,n&&s>1?s-1:s],u=o[0]/l[0],d=o[1]/l[1],p=1/u,c=1/d,h=2*Math.ceil(p)+2,f=2*Math.ceil(c)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${d});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${c});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${i}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${s}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${a-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}(i.shape,r.shape,s);return n.runWebGLProgram(o,[i],i.dtype)}},SM={kernelName:ma,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{images:r}=t,{alignCorners:i,halfPixelCenters:s,size:o}=a,[l,u]=o,d=He().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new class{constructor(e,t,n,a,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,s,o,l]=e;this.outputShape=[i,t,n,l];let u,d=[a&&t>1?s-1:s,a&&n>1?o-1:o],p=[a&&t>1?t-1:t,a&&n>1?n-1:n],c=a?"0.5":"0.0";u=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${d[0]/p[0]},\n          ${d[1]/p[1]},\n          ${d[1]/p[1]});\n      const vec3 inputShapeRC = vec3(${s}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${u};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}(r.shape,l,u,i,s):new class{constructor(e,t,n,a,r){this.variableNames=["A"],this.outputShape=[];let[i,s,o,l]=e;this.outputShape=[i,t,n,l];let u,d=[a&&t>1?s-1:s,a&&n>1?o-1:o],p=[a&&t>1?t-1:t,a&&n>1?n-1:n],c=a?"0.5":"0.0";u=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${d[0]/p[0]},\n          ${d[1]/p[1]});\n      const vec2 inputShapeRC = vec2(${s}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${u};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}(r.shape,l,u,i,s);return n.runWebGLProgram(d,[r],r.dtype)}},NM={kernelName:ya,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{images:r,dy:i}=t,{alignCorners:s}=a,o=new class{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,a,r]=t,[,i,s]=e,o=[n&&i>1?a-1:a,n&&s>1?r-1:r],l=[n&&i>1?i-1:i,n&&s>1?s-1:s],u=o[0]/l[0],d=o[1]/l[1],p=1/u,c=1/d,h=2*Math.ceil(p)+2,f=2*Math.ceil(c)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${d});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${c});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${i}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${s}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${a}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}(i.shape,r.shape,s);return n.runWebGLProgram(o,[i],i.dtype)}},CM={kernelName:ba,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{dims:i}=a,s=r.shape.length,o=Tr.parseAxisParam(i,r.shape);if(0===s)return qC({inputs:{x:r},backend:n});let l=He().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new class{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;let n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;let a=yC("rc",n),r=`${a[n-1]} + 1 < ${this.outputShape[n-1]}`,i=`${a[n-2]} + 1 < ${this.outputShape[n-2]}`,s=BS(n);var o;function l(n){let a=e.map(((a,r)=>function(n,a){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${a[n]} - 1`:`${a[n]}`}(r,n)));return`getChannel(getX(${a.join(",")}), vec2(${a.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${s} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${o=a.slice(),l(o)};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",l(e)}(a.slice())};\n          }\n          if(${i}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",l(e)}(a.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",l(e)}(a.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}(r.shape,o):new class{constructor(e,t){this.variableNames=["x"];let n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);let a=e.map(((n,a)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(a))).join(","),r=BS(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${a}));\n      }\n    `}}(r.shape,o);return n.runWebGLProgram(l,[r],r.dtype)}},TM={kernelName:pr,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{image:a}=e,{radians:r,fillValue:i,center:s}=t,o=n,l=new class{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];let n=e[1],a=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}(a.shape,i),[u,d]=Bf.getImageCenter(s,a.shape[1],a.shape[2]),p=[[u,d,Math.sin(r),Math.cos(r)]];return o.runWebGLProgram(l,[a],a.dtype,p)}},EM=rT({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),RM={kernelName:va,backendName:"webgl",kernelFunc:EM},$M=rT({opSnippet:"return inversesqrt(x);",cpuKernelImpl:ZN}),MM={kernelName:wa,backendName:"webgl",kernelFunc:$M},_M=class{constructor(e,t,n,a,r,i,s=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;let l=BS(r.length),u=BS(i.length),d="";1===n?d="i":2===n&&(d="i, j");let p=`getIndices(${d})`,c="";1===a?c="i":2===a&&(c="i, coords[1]");let h=`getUpdates(${c})`,f="";o&&(f="coords[0], coords[1]");let m=`getDefaultValue(${f})`,y=t>1?"strides[j]":"strides";this.userCode=`\n        ${l} strides = ${l}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${p});\n              flattenedIndex += index * ${y};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${h};\n              found = true;\n            }\n          }\n          setOutput(mix(${m}, sum, float(found)));\n        }\n      `}},FM={kernelName:ka,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{indices:r,updates:i}=t,{shape:s}=a,{sliceRank:o,numUpdates:l,sliceSize:u,strides:d,outputSize:p}=Bf.calculateShapes(i,r,s),c=[p/u,u];if(0===p)return n.makeTensorInfo(s,r.dtype);let h,f=hT({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),m=hT({inputs:{x:i},backend:n,attrs:{shape:[l,u]}}),y=n.makeTensorInfo([],"float32",new Float32Array([0]));h=He().getBool("WEBGL_PACK")?new class{constructor(e,t,n,a,r,i,s=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=i;let l=BS(r.length),u=BS(i.length),d="";1===n?d="i":2===n&&(d="i, j");let p=`getIndices(${d})`,c="";1===a?c="i":2===a&&(c="i, coords[1]");let h=`getUpdates(${c})`,f="";o&&(f="coords[0], coords[1]");let m=`getDefaultValue(${f})`,y=t>1?"strides[j]":"strides",g=t>1?"strides[j + 1]":"strides";this.userCode=`\n        ${l} strides = ${l}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${e}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${t}; j+=2) {\n              ivec4 index = round(${p});\n              flattenedIndex += index.xz * ${y};\n              if (j + 1 < ${t}) {\n                flattenedIndex += index.yw * ${g};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ${h};\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(${m}, sum, found));\n        }\n      `}}(l,o,f.shape.length,m.shape.length,d,c):new _M(l,o,f.shape.length,m.shape.length,d,c);let g=n.runWebGLProgram(h,[m,f,y],m.dtype),A=hT({inputs:{x:g},backend:n,attrs:{shape:s}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),A}},OM={kernelName:Sa,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{sortedSequence:r,values:i}=t,{side:s}=a,o=new class{constructor(e,t,n,a){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];let r=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,i=2===He().getNumber("WEBGL_VERSION")?"while (left < right) {":r,s="left"===a?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${i}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${s} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}(r.shape[0],r.shape[1],i.shape[1],s),l=[[r.shape[1]]];return n.runWebGLProgram(o,[r,i],"int32",l)}},PM={kernelName:Na,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{condition:a,t:r,e:i}=t,s=new class{constructor(e,t,n){let a,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",a="resRC";else{let n=["resRC.x","resRC.y","resRC.z","resRC.w"],i=[],s=[];for(let a=0;a<t.length;a++)s.push(`${n[a]}`),a<e&&i.push(`${n[a]}`);a=i.join(),r=s.join()}let i=BS(n);this.userCode=`\n      void main() {\n        ${i} resRC = getOutputCoords();\n        float cVal = getC(${a});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}(a.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(s,[a,r,i],bi(r.dtype,i.dtype))}},DM=rT({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Bf.SELU_SCALEALPHA};\n  float scale = ${Bf.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),zM={kernelName:Ca,backendName:"webgl",kernelFunc:DM},LM=rT({opSnippet:aT+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:JN}),WM={kernelName:Ma,backendName:"webgl",kernelFunc:LM},BM=rT({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),VM={kernelName:$a,backendName:"webgl",kernelFunc:BM},UM=rT({opSnippet:aT+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${HC}\n  return result;\n`}),GM={kernelName:Ea,backendName:"webgl",kernelFunc:UM},HM=rT({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),jM={kernelName:Ra,backendName:"webgl",kernelFunc:HM},qM=rT({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),XM={kernelName:_a,backendName:"webgl",kernelFunc:qM},KM={kernelName:Pa,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:i,paddings:s}=a;Tr.assert(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));let o=i.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...s);for(let e=1+i.length;e<r.shape.length;++e)l.push([0,0]);let u=[],d=oM({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),p=Bf.getReshaped(d.shape,i,o,!1),c=Bf.getPermuted(p.length,i.length,!1),h=Bf.getReshapedPermuted(d.shape,i,o,!1),f=hT({inputs:{x:d},backend:n,attrs:{shape:p}}),m=kT({inputs:{x:f},backend:n,attrs:{perm:c}}),y=hT({inputs:{x:m},backend:n,attrs:{shape:h}});return u.push(d),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},ZM={kernelName:La,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{indices:a,values:r,denseShape:i,defaultValue:s}=t;if(1!==i.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${i.shape}`);if(2!==a.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${a.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==s.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${s.shape}`);let o=n.readSync(a.dataId),l=n.readSync(r.dataId),u=n.readSync(i.dataId),d=n.readSync(s.dataId)[0],[p,c,h,f,m]=tC(o,a.shape,a.dtype,l,r.dtype,u,d);return[n.makeTensorInfo(c,a.dtype,p),n.makeTensorInfo([c[0]],r.dtype,h),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],a.dtype,new Int32Array(m))]}},YM={kernelName:Wa,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{inputIndices:a,inputShape:r,newShape:i}=t;if(2!==a.shape.length)throw new Error(`Input indices should be a matrix but received shape ${a.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==i.shape.length)throw new Error(`Target shape should be a vector but received shape ${i.shape}`);let s=Array.from(n.readSync(r.dataId)),o=n.readSync(a.dataId),l=Array.from(n.readSync(i.dataId)),[u,d,p]=nC(o,a.shape,a.dtype,s,l);return[n.makeTensorInfo(d,a.dtype,u),n.makeTensorInfo([p.length],i.dtype,new Int32Array(p))]}},JM={kernelName:Ba,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{data:a,indices:r,segmentIds:i}=t;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==i.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${i.shape}`);let s=n.readSync(a.dataId),o=n.readSync(r.dataId),l=n.readSync(i.dataId),[u,d]=aC(s,a.shape,a.dtype,o,l,!0);return n.makeTensorInfo(d,a.dtype,u)}},QM={kernelName:Va,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{data:a,indices:r,segmentIds:i}=t;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==i.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${i.shape}`);let s=n.readSync(a.dataId),o=n.readSync(r.dataId),l=n.readSync(i.dataId),[u,d]=aC(s,a.shape,a.dtype,o,l);return n.makeTensorInfo(d,a.dtype,u)}},e_={kernelName:Ua,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{sparseIndices:r,sparseValues:i,defaultValue:s}=t,{outputShape:o}=a,{sliceRank:l,numUpdates:u,sliceSize:d,strides:p,outputSize:c}=Bf.calculateShapes(i,r,o);if("string"===i.dtype){let e=n.bufferSync(r),t=n.bufferSync(i),a=Tr.decodeString(n.readSync(s.dataId)[0]),h=YN(e,t,o,c,d,u,l,p,a,!1);return n.makeTensorInfo(o,h.dtype,h.values)}let h=new _M(u,l,r.shape.length,i.shape.length,p,[c,1],!1),f=n.runWebGLProgram(h,[i,r,s],i.dtype),m=hT({inputs:{x:f},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(f),m}},t_={kernelName:Da,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{numOrSizeSplits:i,axis:s}=a,o=Tr.parseAxisParam(s,r.shape)[0],l=Bf.prepareSplitSize(r,i,o),u=r.shape.length,d=new Array(u).fill(0),p=r.shape.slice();return l.map((e=>{let t=[...p];t[o]=e;let a=cE({inputs:{x:r},backend:n,attrs:{begin:d,size:t}});return d[o]+=e,a}))}},n_="return sqrt(x);",a_=rT({opSnippet:n_,packedOpSnippet:n_,cpuKernelImpl:rC}),r_={kernelName:Fa,backendName:"webgl",kernelFunc:a_},i_=rT({opSnippet:"return x * x;"}),s_={kernelName:Ha,backendName:"webgl",kernelFunc:i_},o_="return (a - b) * (a - b);",l_=iT({opSnippet:o_,packedOpSnippet:o_}),u_={kernelName:Ga,backendName:"webgl",kernelFunc:l_},d_={kernelName:ja,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");let i=n.readSync(r.dataId),s=Bf.fromUint8ToStringArray(i),o=iC(s,"string",a);return n.makeTensorInfo(r.shape,"string",o)}},p_={kernelName:ur,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){let{x:a}=e,r=wC+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,i=new vC(a.shape,r);return n.runWebGLProgram(i,[a],a.dtype)}},c_={kernelName:qa,backendName:"webgl",kernelFunc:function(e){let t,{inputs:n,backend:a,attrs:r}=e,{x:i}=n,{begin:s,end:o,strides:l,beginMask:u,endMask:d,ellipsisMask:p,newAxisMask:c,shrinkAxisMask:h}=r,{finalShapeSparse:f,finalShape:m,isIdentity:y,sliceDim0:g,isSimpleSlice:A,begin:x,end:b,strides:v}=mf.sliceInfo(i.shape,s,o,l,u,d,p,c,h);if(y)t=hT({inputs:{x:i},backend:a,attrs:{shape:m}});else if(g||A){Tr.assert(i.shape.length>=1,(()=>`Input must have rank at least 1, got: ${i.shape.length}`));let e=mf.computeOutShape(x,b,v),n=cE({inputs:{x:i},backend:a,attrs:{begin:x,size:e}});t=hT({inputs:{x:n},backend:a,attrs:{shape:m}}),a.disposeIntermediateTensorInfo(n)}else if(a.shouldExecuteOnCPU([i])){let e=a.readSync(i.dataId),n=js(i.shape,i.dtype,e),r=sC(f,n,v,x);t=a.makeTensorInfo(m,i.dtype,r.values)}else{let e=new class{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;let a=n.length,r=BS(n.length),i=BS(n.length),s="";if(1===a)s="coords * strides + begin";else{let e=0;s=n.map(((t,a)=>(e++,1===n.length?`coords * strides[${a}] + begin[${a}]`:`coords[${e-1}] * strides[${a}] + begin[${a}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${i} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}(x,v,f);t=a.runWebGLProgram(e,[i],i.dtype)}let w=hT({inputs:{x:t},backend:a,attrs:{shape:m}});return a.disposeIntermediateTensorInfo(t),w}},h_={kernelName:Xa,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{separator:r,nGramWidths:i,leftPad:s,rightPad:o,padWidth:l,preserveShortSequences:u}=a,{data:d,dataSplits:p}=t,c=n.readSync(d.dataId),h=n.readSync(p.dataId),[f,m]=oC(c,h,r,i,s,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}},f_={kernelName:Ka,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{skipEmpty:r}=a,{input:i,delimiter:s}=t;if("string"!==i.dtype)throw new Error("Input must be of datatype string");if(1!==i.shape.length)throw new Error(`Input must be a vector, got shape: ${i.shape}`);if(0!==s.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${s.shape}`);let o=n.readSync(i.dataId),l=n.readSync(s.dataId)[0],[u,d,p]=lC(o,l,r),c=d.length;return[n.makeTensorInfo([c,2],"int32",u),n.makeTensorInfo([c],"string",d),n.makeTensorInfo([2],"int32",new Int32Array(p))]}},m_={kernelName:Za,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{numBuckets:r}=a,{input:i}=t;if("string"!==i.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");let s=n.readSync(i.dataId),o=uC(s,r);return n.makeTensorInfo(i.shape,"int32",o)}},y_=rT({opSnippet:"return tan(x);"}),g_={kernelName:Ja,backendName:"webgl",kernelFunc:y_},A_=rT({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),x_={kernelName:Qa,backendName:"webgl",kernelFunc:A_},b_={kernelName:Ia,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{tensor:r,indices:i,updates:s}=t,{}=a,{sliceRank:o,numUpdates:l,sliceSize:u,strides:d,outputSize:p}=Bf.calculateShapes(s,i,r.shape),c=[p/u,u];if(0===p)return n.makeTensorInfo(r.shape,i.dtype);let h=hT({inputs:{x:i},backend:n,attrs:{shape:[l,o]}}),f=hT({inputs:{x:s},backend:n,attrs:{shape:[l,u]}}),m=hT({inputs:{x:r},backend:n,attrs:{shape:c}}),y=new _M(l,o,h.shape.length,f.shape.length,d,c,!1,!0),g=n.runWebGLProgram(y,[f,h,m],m.dtype),A=hT({inputs:{x:g},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),A}};function v_(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{reps:i}=a;if("string"===r.dtype||r.shape.length>5){let e=n.readSync(r.dataId),t="string"===r.dtype?e.map((e=>Tr.decodeString(e))):e,a=js(r.shape,r.dtype,t),s=pC(a,i);return n.makeTensorInfo(s.shape,s.dtype,s.values)}let s=new class{constructor(e,t){this.variableNames=["A"];let n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[a]*t[a];this.outputShape=n,this.rank=n.length;let a=BS(this.rank),r=function(e){let t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;let n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],a=[];for(let t=0;t<e.length;t++)a.push(`imod(${n[t]}, ${e[t]})`);return a.join()}(e);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}(r.shape,i);return n.runWebGLProgram(s,[r],r.dtype)}var w_={kernelName:er,backendName:"webgl",kernelFunc:v_},k_=class{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}};function I_(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function S_(e){let t=1;for(;t<e;)t*=2;return t}var N_,C_,T_,E_={kernelName:tr,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{k:i,sorted:s}=a,o=He().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=He().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,d=u[u.length-1];if(n.shouldExecuteOnCPU([r])||d<o||i>l){let e=n.readSync(r.dataId),[t,a]=cC(e,u,r.dtype,i,s);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(a.shape,a.dtype,a.values)]}if(0===i)return u[u.length-1]=0,[n.makeTensorInfo(u,r.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===d)return[r,FR({attrs:{shape:u,dtype:"int32",value:0},backend:n})];let p=n.texData.get(r.dataId),c=null!==p&&p.isPacked,h=c?n.unpackTensor(r):r,f=Tr.sizeFromShape(u)/d,m=hT({inputs:{x:h},attrs:{shape:[f,d]},backend:n});c&&I_(n,h);let y=S_(i),g=S_(d),A=null,x=()=>null===A?[m,m]:[m,A],b=(e,t,a)=>{let r=x(),i=new class{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}(a),s=[[d],[null===A?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=A;A=n.runWebGLProgram(i,r,"int32",s),I_(n,o)};for(let e=1;e<y;e*=2){let t=2*e;for(let n=e;n>=1;n/=2)b(t,n,[f,g])}for(let e=g;e>y;e/=2){let t=x(),a=new k_([f,e/2]),r=[[d],[null===A?1:0],[y]],i=A;A=n.runWebGLProgram(a,t,"int32",r),I_(n,i);let s=y/2,o=2*s;for(let e=s;e>=1;e/=2)b(o,e,A.shape)}let v=A;A=cE({inputs:{x:A},backend:n,attrs:{begin:0,size:[f,i]}}),I_(n,v);let w=XR({inputs:{x:m,indices:A},backend:n,attrs:{axis:1,batchDims:1}});I_(n,m);let k=u.slice(0,-1);k.push(i),v=A,A=hT({inputs:{x:A},attrs:{shape:k},backend:n}),I_(n,v);let I=w;return w=hT({inputs:{x:w},attrs:{shape:k},backend:n}),I_(n,I),[w,A]}},R_={kernelName:nr,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{image:r,transforms:i}=t,{interpolation:s,fillMode:o,fillValue:l,outputShape:u}=a,[d,p,c,h]=r.shape,[f,m]=null!=u?u:[p,c],y=[d,f,m,h],g=new class{constructor(e,t,n,a,r,i){this.variableNames=["Image","Transforms"],this.outputShape=i;let s,o="nearest"===n?1:2;switch(a){case"constant":default:s=1;break;case"reflect":s=2;break;case"wrap":s=3;break;case"nearest":s=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${s} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${s} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${s} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${o} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}(p,c,s,o,l,y);return n.runWebGLProgram(g,[r,i],"float32")}},$_={kernelName:rr,backendName:"webgl",kernelFunc:function(e){let{inputs:t,attrs:n,backend:a}=e,{axis:r}=n,{x:i}=t;IS(i,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");let s=a.readSync(i.dataId),{outputValues:o,outputShape:l,indices:u}=fC(s,r,i.shape,i.dtype);return[a.makeTensorInfo(l,i.dtype,o),a.makeTensorInfo([u.length],"int32",u)]}},M_={kernelName:ir,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{value:r}=t,{axis:i}=a;i<0&&(i+=r.shape.length);let s=r,o=s.shape.length,l=r.shape[i],u=new Array(o-1),d=0;for(let e=0;e<o;e++)e!==i&&(u[d++]=s.shape[e]);let p=[],c=new Array(o).fill(0),h=s.shape.slice();h[i]=1;let f=new Array(l);for(let e=0;e<f.length;e++){c[i]=e;let t=cE({inputs:{x:s},backend:n,attrs:{begin:c,size:h}}),a=hT({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=a,p.push(t)}return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}},__={kernelName:sr,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,segmentIds:i}=t,{numSegments:s}=a,o=r.shape.length,l=[],u=0,d=Bf.getAxesPermutation([u],o),p=r;null!=d&&(p=kT({inputs:{x:r},backend:n,attrs:{perm:d}}),l.push(p),u=Bf.getInnerMostAxes(1,o)[0]);let c=Bf.segment_util.computeOutShape(p.shape,u,s),h=Tr.sizeFromShape([p.shape[u]]),f=hT({inputs:{x:p},backend:n,attrs:{shape:[-1,h]}});l.push(f);let m=vi(r.dtype),y=(e,t,a,r,i)=>{let s=e.shape[0],o=e.shape[1],u=Bf.segment_util.segOpComputeOptimalWindowSize(o,i),d={windowSize:u,inSize:o,batchSize:s,numSegments:i},p=new class{constructor(e,t){this.variableNames=["x","segmentIds"];let n=e.windowSize,a=e.batchSize,r=e.inSize,i=e.numSegments,s=i*Math.ceil(r/n);this.outputShape=[a,s];let o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ",d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let p="";r%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${p}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${i})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${i})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}(d,t),c=n.compileAndRun(p,[e,a],r);if(l.push(c),c.shape[1]===i)return c;let h=mM({backend:n,attrs:{start:0,stop:i,step:1,dtype:"float32"}}),f=v_({inputs:{x:h},backend:n,attrs:{reps:[o/u]}});return l.push(h),l.push(f),y(c,t,f,r,i)},g=hT({inputs:{x:y(f,"unsortedSegmentSum",i,m,s)},backend:n,attrs:{shape:c}}),A=g;if(null!=d){l.push(g);let e=Bf.getUndoAxesPermutation(d);A=kT({inputs:{x:A},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),A}},F_=[CT,ET,$T,_T,PT,DT,zT,LT,HT,jT,XT,ZT,JT,eE,nE,iE,sE,oE,lE,uE,dE,fE,mE,yE,gE,wE,SE,NE,ZC,TE,PE,UE,GE,HE,jE,qE,XE,ZE,JE,QE,rR,iR,sR,oR,dR,pR,cR,hR,fR,mR,gR,AR,bR,wR,IR,NR,ER,MR,PR,DR,WR,VR,UR,HR,jR,qR,KR,YR,QR,XC,e$,_E,n$,r$,s$,QC,l$,d$,p$,h$,m$,g$,x$,v$,w$,k$,S$,C$,T$,E$,R$,$$,M$,_$,F$,P$,D$,L$,q$,cT,K$,Y$,Q$,tM,xE,nM,iM,sM,lM,dM,nT,pM,cM,hM,fM,yM,vE,B$,AM,bM,wM,fT,kM,IM,SM,NM,CM,TM,RM,MM,FM,OM,PM,zM,WM,VM,GM,jM,hE,j$,XM,KM,ZM,YM,JM,QM,e_,t_,r_,s_,u_,d_,p_,c_,h_,f_,m_,G$,wT,g_,x_,b_,w_,E_,R_,IT,$_,M_,__,rM];for(let e of F_)wr(e);!function(e){e[e.float32=0]="float32",e[e.int32=1]="int32",e[e.bool=2]="bool",e[e.string=3]="string",e[e.complex64=4]="complex64"}(N_||(N_={})),function(e){e[e.linear=0]="linear",e[e.relu=1]="relu",e[e.relu6=2]="relu6",e[e.prelu=3]="prelu",e[e.leakyrelu=4]="leakyrelu",e[e.sigmoid=5]="sigmoid",e[e.elu=6]="elu"}(C_||(C_={}));var O_={kernelName:cr,backendName:"wasm",setupFunc:function(e){T_=e.wasm.cwrap(cr,null,["number","array","number","number","array","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{a:r,b:i,bias:s,preluActivationWeights:o}=t;if("float32"!==r.dtype||"float32"!==i.dtype)throw new Error("_FusedMatMul for non non-float32 tensors not yet supported.");let{transposeA:l,transposeB:u,activation:d,leakyreluAlpha:p}=a,c=n.dataIdMap.get(r.dataId).id,h=n.dataIdMap.get(i.dataId).id,f=0;if(null!=s){let e=n.dataIdMap.get(s.dataId);if(1!==e.shape.length)throw new Error(`_FusedMatMul only supports rank-1 bias but got rank ${e.shape.length}.`);f=e.id}let m=null==o?0:n.dataIdMap.get(o.dataId).id,y=C_[d];if(null==y)throw new Error(`${d} activation not yet supported for FusedConv2D in the wasm backend.`);let g=l?r.shape[2]:r.shape[1],A=u?i.shape[1]:i.shape[2],x=zl.assertAndGetBroadcastShape(r.shape.slice(0,-2),i.shape.slice(0,-2)),b=n.makeOutput([...x,g,A],r.dtype),v=n.dataIdMap.get(b.dataId).id,w=new Uint8Array(new Int32Array(r.shape).buffer),k=new Uint8Array(new Int32Array(i.shape).buffer);return T_(c,w,r.shape.length,h,k,i.shape.length,l,u,y,f,m,p||0,v),b}};function P_(e,t){let n;return{kernelName:e,backendName:"wasm",setupFunc:function(t){n=t.wasm.cwrap(e,null,["number","number","number"])},kernelFunc:function(e){let{backend:a,inputs:{x:r}}=e,i=a.dataIdMap.get(r.dataId).id,s=a.makeOutput(r.shape,t||r.dtype),o=a.dataIdMap.get(s.dataId).id;return 0===Tr.sizeFromShape(s.shape)||n(i,N_[r.dtype],o),s}}}var D_=P_(Ze),z_=P_(Ye),L_=P_(Je);function W_(e,t,n){let a;return{kernelName:e,backendName:"wasm",setupFunc:function(t){a=t.wasm.cwrap(e,null,["number","array","number","number","array","number","number","number"])},kernelFunc:function(e){let{backend:t,inputs:r}=e,{a:i,b:s}=r,o=t.dataIdMap.get(i.dataId).id,l=t.dataIdMap.get(s.dataId).id,u=null!=n?n:i.dtype,d=Bf.assertAndGetBroadcastShape(i.shape,s.shape),p=t.makeOutput(d,u);if(0===Tr.sizeFromShape(d))return p;let c=new Uint8Array(new Int32Array(i.shape).buffer),h=new Uint8Array(new Int32Array(s.shape).buffer),f=t.dataIdMap.get(p.dataId).id;return a(o,c,i.shape.length,l,h,s.shape.length,N_[i.dtype],f),p}}}var B_,V_=W_(Qe),U_={kernelName:et,backendName:"wasm",setupFunc:function(e){B_=e.wasm.cwrap(et,null,["array","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n}=e,a=n.makeOutput(t[0].shape,t[0].dtype);if(0===Tr.sizeFromShape(a.shape))return a;let r=t.map((e=>n.dataIdMap.get(e.dataId).id)),i=new Uint8Array(new Int32Array(r).buffer),s=n.dataIdMap.get(a.dataId).id;return B_(i,r.length,N_[a.dtype],s),a}};function G_(e){let{inputs:{x:t},backend:n}=e;if("string"===t.dtype)return Zi(n.readSync(t.dataId),t.shape,t.dtype);let a=n.makeOutput(t.shape,t.dtype),r=n.typedArrayFromHeap(t);return n.typedArrayFromHeap(a).set(r),a}var H_,j_={kernelName:hn,backendName:"wasm",kernelFunc:G_};function q_(e){let{inputs:t,backend:n,attrs:a}=e,[r,i]=function(e,t){let n=[],a=[];for(let r=0;r<e.length;++r)1!==e[r]&&n.push(e[r]),1!==e[t[r]]&&a.push(t[r]);for(let e=0;e<a.length;++e){let t=-1;for(let n=0;n<a.length;++n)a[n]>=e&&(-1===t||a[t]>a[n])&&(t=n);a[t]=e}return[n,a]}(t.x.shape,a.perm),s=!0;for(let e=0;e<i.length;e++)i[e]!==e&&(s=!1);let o=function(e,t){let n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];return n}(t.x.shape,a.perm),l={dataId:t.x.dataId,shape:r,dtype:t.x.dtype};if(s){let e=G_({inputs:t,backend:n});return e.shape=o,e}let u=n.makeOutput(o,l.dtype),d=n.dataIdMap.get(l.dataId).id,p=n.dataIdMap.get(u.dataId).id,c=new Uint8Array(new Int32Array(i).buffer),h=new Uint8Array(new Int32Array(l.shape).buffer);return H_(d,h,l.shape.length,N_[l.dtype],p,c,i.length),u}var X_,K_={kernelName:ar,backendName:"wasm",kernelFunc:q_,setupFunc:function(e){H_=e.wasm.cwrap(ar,null,["number","array","number","number","number","array","number"])}};function Z_(e,t,n){let a=e.shape,r=e.shape.length,i=Tr.parseAxisParam(t,a),s=i,o=Bf.getAxesPermutation(s,r),l=null,u=!1;if(null!=o){let t=new Array(r);for(let e=0;e<t.length;e++)t[e]=a[o[e]];s=Bf.getInnerMostAxes(s.length,r),l=q_({inputs:{x:e},attrs:{perm:o},backend:n});let i=n.dataIdMap.get(e.dataId).id;n.dataIdMap.get(l.dataId).id!==i&&(u=!0)}return{transposed:l,originalAxes:i,axes:s,inputWasTransposed:u}}var Y_,J_={kernelName:tt,backendName:"wasm",setupFunc:function(e){X_=e.wasm.cwrap(tt,null,["number, number, number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{axis:r,keepDims:i}=a,{x:s}=n,o=t.dataIdMap.get(s.dataId).id,l=s,{transposed:u,axes:d,originalAxes:p,inputWasTransposed:c}=Z_(s,r,t);c&&(l=u,o=t.dataIdMap.get(u.dataId).id);let h=l.shape.length;Bf.assertAxesAreInnerMostDims("all",d,h);let[f,m]=Bf.computeOutAndReduceShapes(l.shape,d),y=Tr.sizeFromShape(m),g=t.makeOutput(f,s.dtype);if(0!==Tr.sizeFromShape(l.shape)){let e=t.dataIdMap.get(g.dataId).id;X_(o,y,e)}if(c&&t.disposeData(u.dataId),i){let e=Bf.expandShapeToKeepDim(g.shape,p);g.shape=e}return g}},Q_={kernelName:nt,backendName:"wasm",setupFunc:function(e){Y_=e.wasm.cwrap(nt,null,["number, number, number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{axis:r,keepDims:i}=a,{x:s}=n,o=t.dataIdMap.get(s.dataId).id,l=s,{transposed:u,axes:d,originalAxes:p,inputWasTransposed:c}=Z_(s,r,t);c&&(l=u,o=t.dataIdMap.get(u.dataId).id);let h=l.shape.length;Bf.assertAxesAreInnerMostDims("any",d,h);let[f,m]=Bf.computeOutAndReduceShapes(l.shape,d),y=Tr.sizeFromShape(m),g=t.makeOutput(f,s.dtype);if(0!==Tr.sizeFromShape(l.shape)){let e=t.dataIdMap.get(g.dataId).id;Y_(o,y,e)}if(c&&t.disposeData(u.dataId),i){let e=Bf.expandShapeToKeepDim(g.shape,p);g.shape=e}return g}};function eF(e){let t;return{kernelName:e,backendName:"wasm",setupFunc:function(n){t=n.wasm.cwrap(e,null,["number","number","number","number","number"])},kernelFunc:function(e){let{backend:n,inputs:a,attrs:r}=e,{axis:i}=r,{x:s}=a,o=n.dataIdMap.get(s.dataId).id,l=o,u=s,{transposed:d,axes:p,inputWasTransposed:c}=Z_(s,i,n);if(c){let e=n.dataIdMap.get(d.dataId).id;e!==o&&(u=d,l=e)}let h=u.shape.slice(0,-1),f=n.makeOutput(h,"int32"),m=n.dataIdMap.get(f.dataId).id,y=Tr.sizeFromShape(f.shape),g=u.shape[p[0]];return t(l,N_[u.dtype],y,g,m),c&&n.disposeData(d.dataId),f}}}var tF,nF,aF,rF,iF=eF(at),sF=eF(rt),oF=P_(it),lF=P_(st),uF=P_(ot),dF=W_(ut),pF=P_(lt),cF={kernelName:dt,backendName:"wasm",setupFunc:function(e){tF=e.wasm.cwrap(dt,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,attrs:n,backend:a}=e,r=t.x,i=a.dataIdMap.get(r.dataId).id,{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=n,d=Bf.computePool2DInfo(r.shape,s,o,1,l,u),p=d.filterHeight,c=d.filterWidth,h=d.padInfo.top,f=d.padInfo.right,m=d.padInfo.bottom,y=d.padInfo.left,g=d.strideHeight,A=d.strideWidth,x=d.inChannels;if("channelsLast"!==d.dataFormat)throw new Error(`wasm backend does not support dataFormat:'${d.dataFormat}'. Please use 'channelsLast'.`);if(1!==d.dilationWidth||1!==d.dilationHeight)throw new Error(`was backend only supports average pooling with dilation = [1, 1], got [${d.dilationHeight}, ${d.dilationWidth}].`);let b=a.makeOutput(d.outShape,"float32"),v=a.dataIdMap.get(b.dataId).id;return tF(i,r.shape[0],r.shape[1],r.shape[2],p,c,h,f,m,y,g,A,x,v),b}},hF={kernelName:ct,backendName:"wasm",setupFunc:function(e){nF=e.wasm.cwrap("AvgPool3D",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:i,strides:s,pad:o,dimRoundingMode:l,dataFormat:u}=a,d=Bf.computePool3DInfo(r.shape,i,s,1,o,l,u),p=n.makeOutput(d.outShape,r.dtype);return nF(n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(p.dataId).id,d.batchSize,d.inChannels,d.inDepth,d.inHeight,d.inWidth,d.outDepth,d.outHeight,d.outWidth,d.strideDepth,d.strideHeight,d.strideWidth,d.dilationDepth,d.dilationHeight,d.dilationWidth,d.effectiveFilterDepth,d.effectiveFilterHeight,d.effectiveFilterWidth,d.padInfo.front,d.padInfo.top,d.padInfo.left),p}},fF={kernelName:ht,backendName:"wasm",setupFunc:function(e){aF=e.wasm.cwrap("AvgPool3DGrad",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,input:i}=t,{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=a,d=Bf.computePool3DInfo(i.shape,s,o,1,l,u),p=n.makeOutput(i.shape,i.dtype);return aF(n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(p.dataId).id,d.batchSize,d.inChannels,d.inDepth,d.inHeight,d.inWidth,d.outDepth,d.outHeight,d.outWidth,d.strideDepth,d.strideHeight,d.strideWidth,d.dilationDepth,d.dilationHeight,d.dilationWidth,d.effectiveFilterDepth,d.effectiveFilterHeight,d.effectiveFilterWidth,d.padInfo.front,d.padInfo.top,d.padInfo.left,d.filterDepth,d.filterHeight,d.filterWidth),p}},mF={kernelName:pt,backendName:"wasm",setupFunc:function(e){rF=e.wasm.cwrap("AvgPoolGrad",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,input:i}=t,{filterSize:s,strides:o,pad:l}=a,u=Bf.computePool2DInfo(i.shape,s,o,1,l),d=n.makeOutput(i.shape,i.dtype);return rF(n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(d.dataId).id,u.batchSize,u.inChannels,u.inHeight,u.inWidth,u.outHeight,u.outWidth,u.strideHeight,u.strideWidth,u.dilationHeight,u.dilationWidth,u.effectiveFilterHeight,u.effectiveFilterWidth,u.padInfo.top,u.padInfo.left,u.filterHeight,u.filterWidth),d}};function yF(e){let{inputs:t,attrs:n}=e,{x:a}=t,{shape:r}=n,i=Tr.sizeFromShape(a.shape),s=Tr.inferFromImplicitShape(r,i);return Tr.assert(i===Tr.sizeFromShape(s),(()=>`new shape: ${s}, old shape: ${a.shape}. New shape and old shape must have the same number of elements.`)),e.backend.incRef(a.dataId),{dataId:a.dataId,shape:s,dtype:a.dtype}}var gF,AF={kernelName:fa,backendName:"wasm",kernelFunc:yF},xF={kernelName:ft,backendName:"wasm",setupFunc:function(e){gF=e.wasm.cwrap(ft,null,["number","array","number","number","array","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{a:r,b:i}=t,{transposeA:s,transposeB:o}=a;if("float32"!==r.dtype||"float32"!==i.dtype)throw new Error("BatchMatMul for non non-float32 tensors not yet supported.");let l=r.shape.length,u=i.shape.length,d=s?r.shape[l-2]:r.shape[l-1],p=o?i.shape[u-1]:i.shape[u-2],c=s?r.shape[l-1]:r.shape[l-2],h=o?i.shape[u-2]:i.shape[u-1],f=r.shape.slice(0,-2),m=i.shape.slice(0,-2),y=Tr.sizeFromShape(f),g=Tr.sizeFromShape(m),A=zl.assertAndGetBroadcastShape(r.shape.slice(0,-2),i.shape.slice(0,-2)).concat([c,h]);Tr.assert(d===p,(()=>`Error in matMul: inner shapes (${d}) and (${p}) of Tensors with shapes ${r.shape} and ${i.shape} and transposeA=${s} and transposeB=${o} must match.`));let x=o?[g,h,p]:[g,p,h],b=yF({inputs:{x:r},backend:n,attrs:{shape:s?[y,d,c]:[y,c,d]}}),v=yF({inputs:{x:i},backend:n,attrs:{shape:x}}),w=n.dataIdMap.get(b.dataId).id,k=n.dataIdMap.get(v.dataId).id,I=s?b.shape[2]:b.shape[1],S=o?v.shape[1]:v.shape[2],N=Math.max(y,g),C=n.makeOutput([N,I,S],b.dtype),T=n.dataIdMap.get(C.dataId).id,E=new Uint8Array(new Int32Array(b.shape).buffer),R=new Uint8Array(new Int32Array(v.shape).buffer);return gF(w,E,b.shape.length,k,R,v.shape.length,s,o,T),n.disposeData(b.dataId),n.disposeData(v.dataId),C.shape=A,C}};function bF(e){let{inputs:{x:t},attrs:{begin:n,size:a},backend:r}=e,[i,s]=mf.parseSliceParams(t,n,a),o=mf.isSliceContinous(t.shape,i,s),l=r.readSync(t.dataId),u=r.makeOutput(s,t.dtype),d=Tr.computeStrides(t.shape),p=r.dataIdMap.get(u.dataId);if(o){let e=mf.computeFlatOffset(i,d);return"string"===t.dtype?p.stringBytes=l.slice(e,e+Tr.sizeFromShape(s)):r.typedArrayFromHeap(u).set(l.subarray(e,e+Tr.sizeFromShape(s))),u}if("string"===t.dtype){let e=Mx(l,i,s,t.shape,t.dtype);return p.stringBytes=e,u}let c=r.typedArrayFromHeap(u),h=t.shape.length;if(2===h)!function(e,t,n,a,r){let i=0,s=a[0],o=a[1],l=s+r[0];for(let a=s;a<l;a++){let s=a*t+o;n.set(e.subarray(s,s+r[1]),i),i+=r[1]}}(l,d[0],c,i,s);else if(3===h)!function(e,t,n,a,r,i){let s=0,o=r[0],l=r[1],u=r[2],d=o+i[0],p=l+i[1];for(let r=o;r<d;r++)for(let o=l;o<p;o++){let l=r*t+o*n+u;a.set(e.subarray(l,l+i[2]),s),s+=i[2]}}(l,d[0],d[1],c,i,s);else if(4===h)!function(e,t,n,a,r,i,s){let o=0,l=i[0],u=i[1],d=i[2],p=l+s[0],c=u+s[1],h=d+s[2],f=i[3];for(let i=l;i<p;i++)for(let l=u;l<c;l++)for(let u=d;u<h;u++){let d=i*t+l*n+u*a+f;r.set(e.subarray(d,d+s[3]),o),o+=s[3]}}(l,d[0],d[1],d[2],c,i,s);else{let e=Mx(l,i,s,t.shape,t.dtype);c.set(e)}return u}var vF,wF={kernelName:Ta,backendName:"wasm",kernelFunc:bF},kF={kernelName:mt,backendName:"wasm",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:i,crops:s}=a,o=i.reduce(((e,t)=>e*t)),l=Bf.getReshaped(r.shape,i,o),u=Bf.getPermuted(l.length,i.length),d=Bf.getReshapedPermuted(r.shape,i,o),p=Bf.getSliceBeginCoords(s,i.length),c=Bf.getSliceSize(d,s,i.length),h=yF({inputs:{x:r},backend:n,attrs:{shape:l}}),f=q_({inputs:{x:h},backend:n,attrs:{perm:u}}),m=bF({inputs:{x:yF({inputs:{x:f},backend:n,attrs:{shape:d}})},backend:n,attrs:{begin:p,size:c}});return n.disposeData(h.dataId),n.disposeData(f.dataId),n.disposeData(h.dataId),m}},IF={kernelName:yt,backendName:"wasm",setupFunc:function(e){vF=e.wasm.cwrap(yt,null,["number","number","boolean","number","number","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{x:r,weights:i}=n,{size:s}=a,o=0!==i.shape.reduce(((e,t)=>e*t),1),l=1===r.shape.length?[s]:[r.shape[0],s],u=t.makeOutput(l,i.dtype);function d(e){return t.dataIdMap.get(e.dataId).id}return vF(d(r),s,o,d(i),N_[i.dtype],d(u)),u}},SF=W_(gt),NF={kernelName:xt,backendName:"wasm",kernelFunc:function(e){let{inputs:t,backend:n}=e,{s0:a,s1:r}=t,i=n.typedArrayFromHeap(a),s=n.typedArrayFromHeap(r),o=Bf.assertAndGetBroadcastShape(Array.from(i),Array.from(s));return n.makeOutput([o.length],"int32",void 0,new Int32Array(o))}};function CF(e){let{inputs:{x:t},attrs:{dtype:n},backend:a}=e,r=a.makeOutput(t.shape,n),i=a.typedArrayFromHeap(t);return a.typedArrayFromHeap(r).set(i),r}var TF,EF={kernelName:bt,backendName:"wasm",kernelFunc:CF},RF=P_(vt),$F={kernelName:wt,backendName:"wasm",setupFunc:function(e){TF=e.wasm.cwrap(wt,null,["number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{clipValueMin:i,clipValueMax:s}=a,o=n.dataIdMap.get(r.dataId).id,l=n.makeOutput(r.shape,r.dtype),u=n.dataIdMap.get(l.dataId).id;return TF(o,i,s,u),l}};function MF(e){let{inputs:t,backend:n}=e,a=Tr.parseAxisParam(e.attrs.axis,t[0].shape)[0],r=t.map((e=>e.shape));Bf.assertParamsConsistent(r,a);let i=Bf.computeOutShape(t.map((e=>e.shape)),a),s=t.filter((e=>Tr.sizeFromShape(e.shape)>0));if(1===s.length)return G_({inputs:{x:s[0]},backend:n});let o=n.makeOutput(i,t[0].dtype);if(0===Tr.sizeFromShape(i))return o;if("string"===s[0].dtype){let e=s.map((e=>{let t=[-1,Tr.sizeFromShape(e.shape.slice(a))];return yF({inputs:{x:e},backend:n,attrs:{shape:t}})})),r=e.map((e=>({vals:n.readSync(e.dataId),shape:e.shape})));i=Bf.computeOutShape(e.map((e=>e.shape)),1);let l=1===e[0].shape[0],u=fA(r,i,t[0].dtype,l),d=Bf.computeOutShape(s.map((e=>e.shape)),a);return o.shape=d,n.dataIdMap.get(o.dataId).stringBytes=Bf.fromStringArrayToUint8(u),e.forEach((e=>n.disposeData(e.dataId))),o}let l=Tr.sizeFromShape(s[0].shape.slice(0,a)),u=0,d=s.map((e=>{let t=Tr.sizeFromShape(e.shape.slice(a));return u+=t,t})),p=s.map((e=>n.typedArrayFromHeap(e))),c=n.typedArrayFromHeap(o);for(let e=0;e<l;e++){let t=e*u;for(let n=0;n<p.length;n++){let a=d[n],r=e*a,i=p[n].subarray(r,r+a);c.set(i,t),t+=a}}return o}var _F,FF,OF,PF,DF,zF,LF,WF={kernelName:St,backendName:"wasm",kernelFunc:MF},BF={kernelName:Nt,backendName:"wasm",setupFunc:function(e){_F=e.wasm.cwrap(Nt,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,attrs:n,backend:a}=e,{x:r,filter:i}=t,s=a.dataIdMap.get(r.dataId).id,o=a.dataIdMap.get(i.dataId).id,{strides:l,dilations:u,pad:d,dimRoundingMode:p,dataFormat:c}=n,h=Bf.convertConv2DDataFormat(c),f=Bf.computeConv2DInfo(r.shape,i.shape,l,u,d,p,!1,h),m=f.filterHeight,y=f.filterWidth,g=f.padInfo.top,A=f.padInfo.right,x=f.padInfo.bottom,b=f.padInfo.left,v=f.dilationHeight,w=f.dilationWidth,k=f.strideHeight,I=f.strideWidth,S=f.inChannels,N=f.outChannels,C="SAME"===f.padInfo.type?1:0;if("channelsLast"!==f.dataFormat)throw new Error(`wasm backend Conv2D does not support dataFormat:'${f.dataFormat}'. Please use 'channelsLast'.`);let T=a.makeOutput(f.outShape,"float32"),E=a.dataIdMap.get(T.dataId).id;return _F(s,r.shape[0],r.shape[1],r.shape[2],o,m,y,g,A,x,b,C,v,w,k,I,S,N,E),T}},VF={kernelName:Tt,backendName:"wasm",setupFunc:function(e){FF=e.wasm.cwrap(Tt,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{dy:r,filter:i}=n,{strides:s,pad:o,dataFormat:l,dimRoundingMode:u,inputShape:d}=a,p=Bf.convertConv2DDataFormat(l),c=Bf.computeConv2DInfo(d,i.shape,s,1,o,u,!1,p),{batchSize:h,filterHeight:f,filterWidth:m,inChannels:y,inHeight:g,inWidth:A,outChannels:x,outHeight:b,outWidth:v,strideHeight:w,strideWidth:k}=c,I=f-1-c.padInfo.top,S=m-1-c.padInfo.left,N="channelsLast"===c.dataFormat,C=Tr.computeStrides(c.inShape),T=Tr.computeStrides(r.shape),[E,R,$]=Tr.computeStrides(i.shape),M=C[0],_=N?C[1]:C[2],F=N?C[2]:1,O=N?1:C[1],P=T[0],D=N?T[1]:T[2],z=N?T[2]:1,L=N?1:T[1],W=t.makeOutput(c.inShape,"float32"),B=t.dataIdMap.get(W.dataId).id,V=t.dataIdMap.get(r.dataId).id,U=t.dataIdMap.get(i.dataId).id;return FF(V,U,h,f,m,g,A,y,b,v,x,w,k,I,S,E,R,$,M,_,F,O,P,D,z,L,B),W}},UF={kernelName:Et,backendName:"wasm",setupFunc:function(e){OF=e.wasm.cwrap(Et,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i}=t,{strides:s,pad:o,dilations:l}=a;if("float32"!==r.dtype)throw new Error(`Tensor x must have dtype float32, got ${r.dtype}`);if("float32"!==i.dtype)throw new Error(`Tensor filter must have dtype float32, got ${i.dtype}`);let u=Bf.computeConv3DInfo(r.shape,i.shape,s,l,o),d=n.makeOutput(u.outShape,r.dtype);return OF(n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(i.dataId).id,n.dataIdMap.get(d.dataId).id,u.batchSize,u.inDepth,u.inHeight,u.inWidth,u.inChannels,u.outDepth,u.outHeight,u.outWidth,u.outChannels,u.strideDepth,u.strideHeight,u.strideWidth,u.dilationDepth,u.dilationHeight,u.dilationWidth,u.filterDepth,u.filterHeight,u.filterWidth,u.padInfo.front,u.padInfo.top,u.padInfo.left),d}},GF={kernelName:Rt,backendName:"wasm",setupFunc:function(e){PF=e.wasm.cwrap(Rt,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,dy:i}=t,{strides:s,pad:o,filterShape:l}=a;if("float32"!==r.dtype)throw new Error(`Tensor dy must have dtype float32, got ${r.dtype}`);if("float32"!==i.dtype)throw new Error(`Tensor filter must have dtype float32, got ${i.dtype}`);let u=Bf.computeConv3DInfo(r.shape,l,s,1,o),d=n.makeOutput(u.filterShape,i.dtype);return PF(n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(i.dataId).id,n.dataIdMap.get(d.dataId).id,u.batchSize,u.inDepth,u.inHeight,u.inWidth,u.inChannels,u.outDepth,u.outHeight,u.outWidth,u.outChannels,u.strideDepth,u.strideHeight,u.strideWidth,u.dilationDepth,u.dilationHeight,u.dilationWidth,u.filterDepth,u.filterHeight,u.filterWidth,u.padInfo.front,u.padInfo.top,u.padInfo.left),d}},HF={kernelName:$t,backendName:"wasm",setupFunc:function(e){DF=e.wasm.cwrap($t,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:i}=t,{pad:s,strides:o,inputShape:l}=a;if("float32"!==r.dtype)throw new Error(`Tensor dy must have dtype float32, got ${r.dtype}`);if("float32"!==i.dtype)throw new Error(`Tensor filter must have dtype float32, got ${i.dtype}`);let u=Bf.computeConv3DInfo(l,i.shape,o,1,s),d=n.makeOutput(u.inShape,r.dtype);return DF(n.dataIdMap.get(i.dataId).id,n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(d.dataId).id,u.batchSize,u.inDepth,u.inHeight,u.inWidth,u.inChannels,u.outDepth,u.outHeight,u.outWidth,u.outChannels,u.strideDepth,u.strideHeight,u.strideWidth,u.dilationDepth,u.dilationHeight,u.dilationWidth,u.filterDepth,u.filterHeight,u.filterWidth,u.padInfo.front,u.padInfo.top,u.padInfo.left),d}},jF=P_(Mt),qF=P_(_t);!function(e){e[e.bilinear=0]="bilinear",e[e.nearest=1]="nearest"}(zF||(zF={}));var XF,KF,ZF,YF,JF,QF,eO,tO,nO,aO,rO={kernelName:Pt,backendName:"wasm",setupFunc:function(e){LF=e.wasm.cwrap(Pt,null,["number","number","number","number","array","number","number","number","number","number"])},kernelFunc:function(e){let t,{backend:n,inputs:a,attrs:r}=e,{method:i,extrapolationValue:s,cropSize:o}=r,{image:l,boxes:u,boxInd:d}=a,p=u.shape[0],[c,h]=o,f=[p,c,h,l.shape[3]],m=n.dataIdMap.get(l.dataId);"float32"!==l.dtype&&(t=CF({backend:n,inputs:{x:l},attrs:{dtype:"float32"}}),m=n.dataIdMap.get(t.dataId));let y=m.id,g=n.dataIdMap.get(u.dataId).id,A=n.dataIdMap.get(d.dataId).id,x=n.makeOutput(f,"float32"),b=n.dataIdMap.get(x.dataId).id,v=new Uint8Array(new Int32Array(l.shape).buffer);return LF(y,g,A,p,v,c,h,zF[i],s,b),null!=t&&n.disposeData(t.dataId),x}},iO={kernelName:Ft,backendName:"wasm",setupFunc:function(e){XF=e.wasm.cwrap(Ft,null,["number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,exclusive:s,reverse:o}=a,l=r.shape.length;Tr.assert("float32"===r.dtype||"int32"===r.dtype,(()=>`cumprod does not support ${r.dtype} tensors in the WASM backend`));let u=Bf.getAxesPermutation([i],l),d=r;null!==u&&(d=q_({inputs:{x:r},attrs:{perm:u},backend:n}));let p=Bf.getInnerMostAxes(1,l)[0];Bf.assertAxesAreInnerMostDims("cumprod",[p],l);let c=n.makeOutput(d.shape,d.dtype),h=d.shape[p],f=n.dataIdMap.get(d.dataId).id,m=n.dataIdMap.get(c.dataId).id;XF(f,s?1:0,o?1:0,h,m,N_[r.dtype]);let y=c;return null!==u&&(y=q_({inputs:{x:c},attrs:{perm:Bf.getUndoAxesPermutation(u)},backend:n}),n.disposeData(d.dataId),n.disposeData(c.dataId)),y}},sO={kernelName:Ot,backendName:"wasm",setupFunc:function(e){KF=e.wasm.cwrap(Ot,null,["number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,exclusive:s,reverse:o}=a,l=r.shape.length;Tr.assert("float32"===r.dtype||"int32"===r.dtype,(()=>`cumsum does not support ${r.dtype} tensors in the WASM backend`));let u=Bf.getAxesPermutation([i],l),d=r;null!==u&&(d=q_({inputs:{x:r},attrs:{perm:u},backend:n}));let p=Bf.getInnerMostAxes(1,l)[0];Bf.assertAxesAreInnerMostDims("cumsum",[p],l);let c=n.makeOutput(d.shape,d.dtype),h=d.shape[p],f=n.dataIdMap.get(d.dataId).id,m=n.dataIdMap.get(c.dataId).id;KF(f,s?1:0,o?1:0,h,m,N_[r.dtype]);let y=c;return null!==u&&(y=q_({inputs:{x:c},attrs:{perm:Bf.getUndoAxesPermutation(u)},backend:n}),n.disposeData(d.dataId),n.disposeData(c.dataId)),y}},oO={kernelName:Dt,backendName:"wasm",setupFunc:function(e){ZF=e.wasm.cwrap("DenseBincount",null,["number","array","number","number","boolean","number","number","boolean","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{x:r,weights:i}=n,{size:s,binaryOutput:o}=a,l=0!==i.shape.reduce(((e,t)=>e*t),1),u=1===r.shape.length?[s]:[r.shape[0],s],d=t.makeOutput(u,i.dtype);function p(e){return t.dataIdMap.get(e.dataId).id}return ZF(p(r),new Uint8Array(new Int32Array(r.shape).buffer),r.shape.length,s,l,p(i),N_[i.dtype],o,p(d)),d}},lO={kernelName:zt,backendName:"wasm",setupFunc:function(e){YF=e.wasm.cwrap(zt,null,["number","number","number","array","number","array","array","number","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{x:r}=n,{blockSize:i,dataFormat:s}=a,o=r.shape[0],l=("NHWC"===s?r.shape[1]:r.shape[2])*i,u=("NHWC"===s?r.shape[2]:r.shape[3])*i,d=("NHWC"===s?r.shape[3]:r.shape[1])/(i*i),p="NHWC"===s?[o,l,u,d]:[o,d,l,u],c=t.makeOutput(p,"float32"),h=t.dataIdMap.get(r.dataId).id,f=new Uint8Array(new Int32Array(Tr.computeStrides(r.shape)).buffer),m=new Uint8Array(new Int32Array(p).buffer),y=new Uint8Array(new Int32Array(Tr.computeStrides(p)).buffer),g=t.dataIdMap.get(c.dataId).id;return YF(h,i,"NHWC"===s?1:0,f,r.shape.length-1,m,y,p.length,g),c}},uO={kernelName:Lt,backendName:"wasm",setupFunc:function(e){JF=e.wasm.cwrap(Lt,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,attrs:n,backend:a}=e,{x:r,filter:i}=t,s=a.dataIdMap.get(r.dataId).id,o=a.dataIdMap.get(i.dataId).id,{strides:l,dilations:u,pad:d,dimRoundingMode:p}=n,c=null==u?[1,1]:u,h=Bf.computeConv2DInfo(r.shape,i.shape,l,c,d,p,!0),f=h.filterHeight,m=h.filterWidth,y=h.padInfo.top,g=h.padInfo.right,A=h.padInfo.bottom,x=h.padInfo.left,b=h.dilationHeight,v=h.dilationWidth,w=h.strideHeight,k=h.strideWidth,I=h.inChannels,S=h.outChannels,N="SAME"===h.padInfo.type?1:0;if("channelsLast"!==h.dataFormat)throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'${h.dataFormat}'. Please use 'channelsLast'.`);let C=a.makeOutput(h.outShape,"float32"),T=a.dataIdMap.get(C.dataId).id;return JF(s,r.shape[0],r.shape[1],r.shape[2],o,f,m,y,g,A,x,N,b,v,w,k,I,S,T),C}},dO={kernelName:Vt,backendName:"wasm",setupFunc:function(e){QF=e.wasm.cwrap("Diag",null,["number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:a}=t,r=Tr.sizeFromShape(a.shape),i=n.makeOutput([...a.shape,...a.shape],a.dtype);return QF(n.dataIdMap.get(a.dataId).id,N_[a.dtype],r,n.dataIdMap.get(i.dataId).id),i}},pO={kernelName:Ut,backendName:"wasm",setupFunc:function(e){eO=e.wasm.cwrap(Ut,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i}=t,{strides:s,pad:o,dilations:l}=a;if(r.dtype!==i.dtype)throw new Error(`Dilation2D error: x must have the same dtype as filter. Got ${r.dtype} and ${i.dtype}`);let u=Bf.computeDilation2DInfo(r.shape,i.shape,s,o,"NHWC",l),d=n.makeOutput(u.outShape,r.dtype);return eO(n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(i.dataId).id,n.dataIdMap.get(d.dataId).id,N_[r.dtype],u.batchSize,u.inChannels,u.inHeight,u.inWidth,u.outHeight,u.outWidth,u.strideHeight,u.strideWidth,u.dilationHeight,u.dilationWidth,u.filterHeight,u.filterWidth,u.padInfo.top,u.padInfo.left),d}},cO={kernelName:Ht,backendName:"wasm",setupFunc:function(e){tO=e.wasm.cwrap(Ht,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i,dy:s}=t,{strides:o,pad:l,dilations:u}=a;if(r.dtype!==i.dtype||r.dtype!==s.dtype)throw new Error(`Dilation2DBackpropFilter error: x must have the same dtype as filter and dy. Got ${r.dtype}, ${i.dtype}, and ${s.dtype}`);let d=Bf.computeDilation2DInfo(r.shape,i.shape,o,l,"NHWC",u),p=n.makeOutput(i.shape,i.dtype);return tO(n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(i.dataId).id,n.dataIdMap.get(s.dataId).id,n.dataIdMap.get(p.dataId).id,N_[r.dtype],d.batchSize,d.inChannels,d.inHeight,d.inWidth,d.outHeight,d.outWidth,d.strideHeight,d.strideWidth,d.dilationHeight,d.dilationWidth,d.filterHeight,d.filterWidth,d.padInfo.top,d.padInfo.left),p}},hO={kernelName:Gt,backendName:"wasm",setupFunc:function(e){nO=e.wasm.cwrap(Gt,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i,dy:s}=t,{strides:o,pad:l,dilations:u}=a;if(r.dtype!==i.dtype||r.dtype!==s.dtype)throw new Error(`Dilation2DBackpropInput error: x must have the same dtype as filter and dy. Got ${r.dtype}, ${i.dtype}, and ${s.dtype}`);let d=Bf.computeDilation2DInfo(r.shape,i.shape,o,l,"NHWC",u),p=n.makeOutput(r.shape,r.dtype);return nO(n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(i.dataId).id,n.dataIdMap.get(s.dataId).id,n.dataIdMap.get(p.dataId).id,N_[r.dtype],d.batchSize,d.inChannels,d.inHeight,d.inWidth,d.outHeight,d.outWidth,d.strideHeight,d.strideWidth,d.dilationHeight,d.dilationWidth,d.filterHeight,d.filterWidth,d.padInfo.top,d.padInfo.left),p}},fO=P_(Kt),mO={kernelName:Zt,backendName:"wasm",setupFunc:function(e){aO=e.wasm.cwrap(Zt,null,["number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n}=e,{dy:a,y:r}=t,i=n.makeOutput(r.shape,"float32"),s=e=>n.dataIdMap.get(e.dataId).id;return aO(s(r),s(a),s(i)),i}},yO=W_(Jt,0,"bool"),gO=P_(Yt),AO=P_(Qt,"float32");function xO(e){let{inputs:t,attrs:n,backend:a}=e,{input:r}=t,{dim:i}=n,s=r.shape.length,o=r.shape.slice(),l=i;return i<0&&(Tr.assert(-(s+1)<=i,(()=>`Axis must be in the interval [${-(s+1)}, ${s}]`)),l=s+i+1),o.splice(l,0,1),yF({inputs:{x:r},backend:a,attrs:{shape:o}})}var bO={kernelName:en,backendName:"wasm",kernelFunc:xO},vO=P_(tn,"float32");function wO(e){let{attrs:{shape:t,value:n,dtype:a},backend:r}=e,i=r.makeOutput(t,a);return r.typedArrayFromHeap(i).fill(n),i}var kO,IO,SO,NO,CO,TO,EO,RO,$O,MO,_O,FO,OO,PO,DO,zO,LO,WO,BO,VO,UO={kernelName:an,backendName:"wasm",kernelFunc:wO},GO={kernelName:rn,backendName:"wasm",kernelFunc:function(e){let{inputs:t,backend:n}=e,{image:a}=t,r=n.makeOutput(a.shape,a.dtype),i=n.dataIdMap.get(a.dataId).id,s=n.dataIdMap.get(r.dataId).id,[o,l,u,d]=a.shape;return kO(i,o,l,u,d,s),r},setupFunc:function(e){kO=e.wasm.cwrap(rn,null,["number","number","number","number","number","number"])}},HO=P_(sn),jO=W_(on),qO={kernelName:ln,backendName:"wasm",setupFunc:function(e){IO=e.wasm.cwrap(ln,null,["number","number","number","number","number","number","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{varianceEpsilon:r}=a,{x:i,mean:s,variance:o,offset:l,scale:u}=n,d=t.dataIdMap.get(i.dataId).id,p=t.dataIdMap.get(s.dataId).id,c=t.dataIdMap.get(o.dataId).id,h=null!=l?t.dataIdMap.get(l.dataId).id:0,f=null!=u?t.dataIdMap.get(u.dataId).id:0,m=t.makeOutput(i.shape,i.dtype);if(0===Tr.sizeFromShape(i.shape))return m;let y=t.dataIdMap.get(m.dataId).id;return IO(d,p,c,h,f,r,y),m}},XO={kernelName:hr,backendName:"wasm",setupFunc:function(e){SO=e.wasm.cwrap(hr,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,attrs:n,backend:a}=e,{x:r,filter:i,bias:s,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:d,dataFormat:p,dimRoundingMode:c,activation:h,leakyreluAlpha:f}=n,m=Bf.computeConv2DInfo(r.shape,i.shape,l,d,u,c),y=C_[h];if(null==y)throw new Error(`${h} activation not yet supported for FusedConv2D in the wasm backend.`);let g=a.dataIdMap.get(r.dataId).id,A=a.dataIdMap.get(i.dataId).id,x=m.outChannels,b=0;if(null!=s){let e=a.dataIdMap.get(s.dataId);if(1!==e.shape.length)throw new Error(`FusedConv2D only supports rank-1 bias but got rank ${e.shape.length}.`);if(e.shape[0]!==x)throw new Error(`FusedConv2D bias shape (${e.shape}) does not match the number of output channels (${x})`);b=e.id}let v=m.filterHeight,w=m.filterWidth,k=m.padInfo.top,I=m.padInfo.right,S=m.padInfo.bottom,N=m.padInfo.left,C=m.dilationHeight,T=m.dilationWidth,E=m.strideHeight,R=m.strideWidth,$=m.inChannels,M="SAME"===m.padInfo.type?1:0,_=m.batchSize,F=m.inHeight,O=m.inWidth;if("NHWC"!==p)throw new Error(`wasm backend FusedConv2D does not support dataFormat:'${p}'. Please use 'NHWC'.`);let P=a.makeOutput(m.outShape,"float32"),D=a.dataIdMap.get(P.dataId).id,z=null==o?0:a.dataIdMap.get(o.dataId).id;return SO(g,_,F,O,A,v,w,b,k,I,S,N,M,C,T,E,R,$,x,y,z,f||0,D),P}},KO={kernelName:fr,backendName:"wasm",setupFunc:function(e){NO=e.wasm.cwrap(fr,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,attrs:n,backend:a}=e,{x:r,filter:i,bias:s,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:d,dataFormat:p,dimRoundingMode:c,activation:h,leakyreluAlpha:f}=n,m=Bf.computeConv2DInfo(r.shape,i.shape,l,d,u,c,!0),y=C_[h];if(null==y)throw new Error(`${h} activation not yet supported for FusedDepthwiseConv2D in the wasm backend.`);let g=a.dataIdMap.get(r.dataId).id,A=a.dataIdMap.get(i.dataId).id,x=m.outChannels,b=0;if(null!=s){let e=a.dataIdMap.get(s.dataId);if(1!==e.shape.length)throw new Error(`FusedDepthwiseConv2D only supports rank-1 bias but got rank ${e.shape.length}.`);if(e.shape[0]!==x)throw new Error(`FusedDepthwiseConv2D bias shape (${e.shape}) does not match the number of output channels (${x})`);b=e.id}let v=m.filterHeight,w=m.filterWidth,k=m.padInfo.top,I=m.padInfo.right,S=m.padInfo.bottom,N=m.padInfo.left,C=m.dilationHeight,T=m.dilationWidth,E=m.strideHeight,R=m.strideWidth,$=m.inChannels,M="SAME"===m.padInfo.type?1:0,_=m.batchSize,F=m.inHeight,O=m.inWidth;if("NHWC"!==p)throw new Error(`wasm backend FusedDepthwiseConv2D does not support dataFormat:'${p}'. Please use 'NHWC'.`);let P=a.makeOutput(m.outShape,"float32"),D=a.dataIdMap.get(P.dataId).id,z=null==o?0:a.dataIdMap.get(o.dataId).id;return NO(g,_,F,O,A,v,w,b,k,I,S,N,M,C,T,E,R,$,x,y,z,f||0,D),P}},ZO={kernelName:dn,backendName:"wasm",setupFunc:function(e){CO=e.wasm.cwrap(dn,null,["number","number","number","number","number","number","array","number"])},kernelFunc:function(e){let{backend:t,inputs:n}=e,{params:a,indices:r}=n,[i,s,o,l]=hf.prepareAndValidate(a,r),u=t.makeOutput(i,a.dtype);if(0===s)return u;let d=r.shape,p=d[d.length-1],c=t.dataIdMap.get(a.dataId).id,h=t.dataIdMap.get(r.dataId).id,f=new Uint8Array(new Int32Array(l).buffer),m=t.dataIdMap.get(u.dataId).id;return CO(c,N_[a.dtype],h,s,p,o,f,m),u}},YO={kernelName:un,backendName:"wasm",setupFunc:function(e){TO=e.wasm.cwrap("Gather",null,["number","number","array","number","number","number","array","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{x:r,indices:i}=n,{axis:s,batchDims:o}=a,l=Tr.parseAxisParam(s,r.shape)[0],u=t.readSync(i.dataId),d=r.shape[l];for(let e=0;e<u.length;++e){let t=u[e];Tr.assert(t<=d-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${d-1}]`))}let p=Bf.segment_util.collectGatherOpShapeInfo(r,i,l,o),c=yF({inputs:{x:r},attrs:{shape:[p.batchSize,p.outerSize,p.dimSize,p.sliceSize]},backend:t}),h=Tr.sizeFromShape(i.shape),f=yF({inputs:{x:i},attrs:{shape:[p.batchSize,h/p.batchSize]},backend:t}),m=[p.batchSize,p.outerSize,h/p.batchSize,p.sliceSize],y=t.makeOutput(m,r.dtype);if(0===Tr.sizeFromShape(r.shape))return y;let g=c.shape.length-1,A=t.dataIdMap.get(c.dataId).id,x=t.dataIdMap.get(f.dataId).id,b=t.dataIdMap.get(y.dataId).id,v=new Uint8Array(new Int32Array(Tr.computeStrides(c.shape)).buffer),w=new Uint8Array(new Int32Array(Tr.computeStrides(m)).buffer);return TO(A,N_[r.dtype],v,g,x,p.batchSize,w,b),t.disposeData(c.dataId),t.disposeData(f.dataId),y.shape=p.outputShape,y}},JO=W_(pn,0,"bool"),QO=W_(cn,0,"bool"),eP=P_(yn,"bool"),tP=P_(gn,"bool"),nP=P_(An,"bool"),aP={kernelName:xn,backendName:"wasm",setupFunc:function(e){EO=e.wasm.cwrap(xn,null,["number","number","number","number"])},kernelFunc:function(e){let{inputs:{x:t},attrs:{alpha:n},backend:a}=e,r=a.dataIdMap.get(t.dataId).id,i=a.makeOutput(t.shape,"float32");if(0!==Tr.sizeFromShape(t.shape)){let e=a.dataIdMap.get(i.dataId).id;EO(r,N_[t.dtype],n,e)}return i}},rP=W_(bn,0,"bool"),iP=W_(vn,0,"bool"),sP={kernelName:wn,backendName:"wasm",setupFunc:function(e){RO=e.wasm.cwrap(wn,null,["number","number","number","number"])},kernelFunc:function(e){let{attrs:t,backend:n}=e,{start:a,stop:r,num:i}=t,s=Math.floor(i),o=n.makeOutput([s],"float32");return RO(n.dataIdMap.get(o.dataId).id,a,r,s),o}},oP=P_(kn),lP=P_(In),uP=W_(Sn,0,"bool"),dP=P_(Nn),pP=W_(Cn,0,"bool"),cP=W_(Tn,0,"bool"),hP={kernelName:$n,backendName:"wasm",setupFunc:function(e){$O=e.wasm.cwrap($n,null,["number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{depthRadius:i,bias:s,alpha:o,beta:l}=a;if("float32"!==r.dtype)throw new Error("LRN error: x must have dtype float32");let u=n.makeOutput(r.shape,r.dtype);return $O(n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(u.dataId).id,r.shape[3],i,s,o,l),u}},fP={kernelName:Mn,backendName:"wasm",setupFunc:function(e){MO=e.wasm.cwrap(Mn,null,["number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,y:i,dy:s}=t,{depthRadius:o,bias:l,alpha:u,beta:d}=a;if("float32"!==r.dtype||"float32"!==i.dtype||"float32"!==s.dtype)throw new Error("LRNGrad error: x, y, and dy must have dtype float32");let p=n.makeOutput(r.shape,r.dtype);return MO(n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(i.dataId).id,n.dataIdMap.get(s.dataId).id,n.dataIdMap.get(p.dataId).id,s.shape[3],o,l,u,d),p}},mP={kernelName:Fn,backendName:"wasm",setupFunc:function(e){_O=e.wasm.cwrap(Fn,null,["number","number","number","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{reductionIndices:r,keepDims:i}=a,{x:s}=n,o=t.dataIdMap.get(s.dataId).id,l=s,{transposed:u,axes:d,originalAxes:p,inputWasTransposed:c}=Z_(s,r,t);c&&(l=u,o=t.dataIdMap.get(u.dataId).id);let h=l.shape.length;Bf.assertAxesAreInnerMostDims("max",d,h);let[f,m]=Bf.computeOutAndReduceShapes(l.shape,d),y=Tr.sizeFromShape(m),g=t.makeOutput(f,s.dtype);if(0!==Tr.sizeFromShape(l.shape)){let e=t.dataIdMap.get(g.dataId).id;_O(o,N_[s.dtype],y,e)}if(c&&t.disposeData(u.dataId),i){let e=Bf.expandShapeToKeepDim(g.shape,p);g.shape=e}return g}},yP=W_(On),gP={kernelName:Pn,backendName:"wasm",setupFunc:function(e){FO=e.wasm.cwrap(Pn,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,attrs:n,backend:a}=e,r=t.x,i=a.dataIdMap.get(r.dataId).id;Tr.assert("float32"===r.dtype,(()=>`Error in MaxPool: only float32 input is supported. Got ${r.dtype}.`));let{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=n,d=Bf.computePool2DInfo(r.shape,s,o,1,l,u),p=d.filterHeight,c=d.filterWidth,h=d.padInfo.top,f=d.padInfo.right,m=d.padInfo.bottom,y=d.padInfo.left,g=d.dilationHeight,A=d.dilationWidth,x=d.strideHeight,b=d.strideWidth,v=d.inChannels,w=d.outChannels;if("channelsLast"!==d.dataFormat)throw new Error(`wasm backend does not support dataFormat:'${d.dataFormat}'. Please use 'channelsLast'.`);let k=a.makeOutput(d.outShape,"float32"),I=a.dataIdMap.get(k.dataId).id;return FO(i,r.shape[0],r.shape[1],r.shape[2],p,c,h,f,m,y,g,A,x,b,v,w,I),k}},AP={kernelName:zn,backendName:"wasm",setupFunc:function(e){OO=e.wasm.cwrap("MaxPool3D",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:i,strides:s,pad:o,dimRoundingMode:l,dataFormat:u}=a,d=Bf.computePool3DInfo(r.shape,i,s,1,o,l,u),p=n.makeOutput(d.outShape,r.dtype);return OO(n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(p.dataId).id,d.batchSize,d.inChannels,d.inDepth,d.inHeight,d.inWidth,d.outDepth,d.outHeight,d.outWidth,d.strideDepth,d.strideHeight,d.strideWidth,d.dilationDepth,d.dilationHeight,d.dilationWidth,d.effectiveFilterDepth,d.effectiveFilterHeight,d.effectiveFilterWidth,d.padInfo.front,d.padInfo.top,d.padInfo.left),p}},xP={kernelName:Ln,backendName:"wasm",setupFunc:function(e){PO=e.wasm.cwrap("MaxPool3DGrad",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,input:i}=t,{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=a,d=Bf.computePool3DInfo(i.shape,s,o,1,l,u),p=n.makeOutput(i.shape,i.dtype);return PO(n.dataIdMap.get(i.dataId).id,n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(p.dataId).id,d.batchSize,d.inChannels,d.inDepth,d.inHeight,d.inWidth,d.outDepth,d.outHeight,d.outWidth,d.strideDepth,d.strideHeight,d.strideWidth,d.dilationDepth,d.dilationHeight,d.dilationWidth,d.effectiveFilterDepth,d.effectiveFilterHeight,d.effectiveFilterWidth,d.padInfo.front,d.padInfo.top,d.padInfo.left),p}},bP={kernelName:Dn,backendName:"wasm",setupFunc:function(e){DO=e.wasm.cwrap("MaxPoolGrad",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,input:i}=t,{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=a,d=Bf.computePool2DInfo(i.shape,s,o,1,l,u),p=n.makeOutput(i.shape,i.dtype);return DO(n.dataIdMap.get(i.dataId).id,n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(p.dataId).id,d.batchSize,d.inChannels,d.inHeight,d.inWidth,d.outHeight,d.outWidth,d.strideHeight,d.strideWidth,d.dilationHeight,d.dilationWidth,d.effectiveFilterHeight,d.effectiveFilterWidth,d.padInfo.top,d.padInfo.left),p}},vP={kernelName:Wn,backendName:"wasm",setupFunc:function(e){zO=e.wasm.cwrap("MaxPoolWithArgmax",null,["number","number","number","number","boolean","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:i,strides:s,pad:o,includeBatchInIndex:l}=a;Tr.assert(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));let u=[1,1];Tr.assert(Bf.eitherStridesOrDilationsAreOne(s,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`));let d=Bf.computePool2DInfo(r.shape,i,s,[1,1],o),p=n.makeOutput(d.outShape,r.dtype),c=n.makeOutput(d.outShape,"int32");return zO(n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(p.dataId).id,n.dataIdMap.get(c.dataId).id,N_[r.dtype],l,d.batchSize,d.inChannels,d.inHeight,d.inWidth,d.outHeight,d.outWidth,d.strideHeight,d.strideWidth,d.dilationHeight,d.dilationWidth,d.effectiveFilterHeight,d.effectiveFilterWidth,d.padInfo.top,d.padInfo.left),[p,c]}},wP={kernelName:Bn,backendName:"wasm",setupFunc:function(e){LO=e.wasm.cwrap(Bn,null,["number, number, number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{axis:r,keepDims:i}=a,{x:s}=n,o=t.dataIdMap.get(s.dataId).id,l=o,u=s,{transposed:d,axes:p,originalAxes:c,inputWasTransposed:h}=Z_(s,r,t),f=p;if(h){let e=t.dataIdMap.get(d.dataId).id;e!==o&&(u=d,l=e,f=Bf.getInnerMostAxes(f.length,u.shape.length))}Bf.assertAxesAreInnerMostDims("mean",f,u.shape.length);let[m,y]=Bf.computeOutAndReduceShapes(u.shape,f),g=Tr.sizeFromShape(y),A=u;"float32"!==u.dtype&&(A=CF({backend:t,inputs:{x:u},attrs:{dtype:"float32"}}),l=t.dataIdMap.get(A.dataId).id);let x=t.makeOutput(m,"float32");if(0!==Tr.sizeFromShape(u.shape)){let e=t.dataIdMap.get(x.dataId).id;LO(l,g,e)}if(h&&t.disposeData(d.dataId),i){let e=Bf.expandShapeToKeepDim(x.shape,c);x.shape=e}return"float32"!==u.dtype&&t.disposeData(A.dataId),x}},kP={kernelName:Vn,backendName:"wasm",setupFunc:function(e){WO=e.wasm.cwrap(Vn,null,["number","number","number","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{axis:r,keepDims:i}=a,{x:s}=n,o=t.dataIdMap.get(s.dataId).id,l=o,u=s,{transposed:d,axes:p,originalAxes:c,inputWasTransposed:h}=Z_(s,r,t);if(h){let e=t.dataIdMap.get(d.dataId).id;e!==o&&(u=d,l=e)}let f=u.shape.length;Bf.assertAxesAreInnerMostDims("min",p,f);let[m,y]=Bf.computeOutAndReduceShapes(u.shape,p),g=Tr.sizeFromShape(y),A=t.makeOutput(m,u.dtype);if(0!==Tr.sizeFromShape(u.shape)){let e=t.dataIdMap.get(A.dataId).id;WO(l,N_[s.dtype],g,e)}if(h&&t.disposeData(d.dataId),i){let e=Bf.expandShapeToKeepDim(A.shape,c);A.shape=e}return A}},IP=W_(Un);!function(e){e[e.reflect=0]="reflect",e[e.symmetric=1]="symmetric"}(BO||(BO={}));var SP,NP={kernelName:Gn,backendName:"wasm",kernelFunc:function(e){let{inputs:{x:t},backend:n,attrs:{paddings:a,mode:r}}=e,i=a.map(((e,n)=>e[0]+t.shape[n]+e[1])),s=n.dataIdMap.get(t.dataId).id,o=n.makeOutput(i,t.dtype),l=n.dataIdMap.get(o.dataId).id,u=new Uint8Array(new Int32Array(t.shape).buffer),d=a.map((e=>e[0])),p=a.map((e=>e[1])),c=new Uint8Array(new Int32Array(d).buffer),h=new Uint8Array(new Int32Array(p).buffer);return VO(s,u,t.shape.length,N_[t.dtype],c,h,BO[r],l),o},setupFunc:function(e){VO=e.wasm.cwrap(Gn,null,["number","array","number","number","array","array","number","number"])}};function CP(e){let{backend:t,inputs:{logits:n},attrs:{dim:a}}=e,r=t.dataIdMap.get(n.dataId).id,i=t.makeOutput(n.shape,n.dtype),s=t.dataIdMap.get(i.dataId).id,o=n.shape[a],l=Tr.sizeFromShape(n.shape)/o;return 0===Tr.sizeFromShape(i.shape)||SP(r,s,o,l),i}var TP,EP,RP={kernelName:za,backendName:"wasm",setupFunc:function(e){SP=e.wasm.cwrap(za,null,["number","number","number","number"])},kernelFunc:CP},$P={kernelName:jn,backendName:"wasm",setupFunc:function(e){TP=e.wasm.cwrap(jn,null,["number","number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{numSamples:i,seed:s,normalized:o}=a;if("float32"!==r.dtype)throw new Error(`Tensor logits must have dtype float32, got ${r.dtype}`);let l=o?r:CP({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),[u,d]=l.shape,p=n.makeOutput([u,i],"int32");return TP(n.dataIdMap.get(l.dataId).id,u,d,i,s,n.dataIdMap.get(p.dataId).id),o||n.disposeData(l.dataId),p}},MP=W_(Hn),_P=W_(qn),FP=P_(Xn);function OP(e,t){let n=new Int32Array(e.wasm.HEAPU8.buffer,t,4),a=n[0],r=n[1],i=n[2],s=n[3];return e.wasm._free(t),{pSelectedIndices:a,selectedSize:r,pSelectedScores:i,pValidOutputs:s}}var PP,DP,zP,LP,WP,BP,VP,UP,GP,HP,jP,qP,XP,KP,ZP,YP,JP,QP,eD,tD={kernelName:Zn,backendName:"wasm",setupFunc:function(e){EP=e.wasm.cwrap(Zn,"number",["number","number","number","number","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{iouThreshold:r,maxOutputSize:i,scoreThreshold:s}=a,{boxes:o,scores:l}=n,u=t.dataIdMap.get(o.dataId).id,d=t.dataIdMap.get(l.dataId).id,p=EP(u,d,i,r,s),{pSelectedIndices:c,selectedSize:h,pSelectedScores:f,pValidOutputs:m}=OP(t,p);return t.wasm._free(f),t.wasm._free(m),t.makeOutput([h],"int32",c)}},nD={kernelName:Yn,backendName:"wasm",setupFunc:function(e){PP=e.wasm.cwrap(Yn,"number",["number","number","number","number","number","bool"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{iouThreshold:r,maxOutputSize:i,scoreThreshold:s,padToMaxOutputSize:o}=a,{boxes:l,scores:u}=n,d=t.dataIdMap.get(l.dataId).id,p=t.dataIdMap.get(u.dataId).id,c=PP(d,p,i,r,s,o),{pSelectedIndices:h,selectedSize:f,pSelectedScores:m,pValidOutputs:y}=OP(t,c);return t.wasm._free(m),[t.makeOutput([f],"int32",h),t.makeOutput([],"int32",y)]}},aD={kernelName:Jn,backendName:"wasm",setupFunc:function(e){DP=e.wasm.cwrap(Jn,"number",["number","number","number","number","number","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{iouThreshold:r,maxOutputSize:i,scoreThreshold:s,softNmsSigma:o}=a,{boxes:l,scores:u}=n,d=t.dataIdMap.get(l.dataId).id,p=t.dataIdMap.get(u.dataId).id,c=DP(d,p,i,r,s,o),{pSelectedIndices:h,selectedSize:f,pSelectedScores:m,pValidOutputs:y}=OP(t,c);return t.wasm._free(y),[t.makeOutput([f],"int32",h),t.makeOutput([f],"float32",m)]}},rD=W_(Kn,0,"bool"),iD={kernelName:ea,backendName:"wasm",setupFunc:function(e){zP=e.wasm.cwrap(ea,null,["number","number","number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{indices:r}=t,{dtype:i,depth:s,onValue:o,offValue:l}=a,u=n.makeOutput([...r.shape,s],i),d=n.dataIdMap.get(u.dataId).id,p=n.dataIdMap.get(r.dataId).id;return zP(p,s,o,l,d),u}},sD={kernelName:Qn,backendName:"wasm",kernelFunc:function(e){let{inputs:{x:t},backend:n}=e,a=n.makeOutput(t.shape,t.dtype);return n.typedArrayFromHeap(a).fill(1),a}},oD={kernelName:ta,backendName:"wasm",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{axis:r}=a;if(1===t.length)return xO({inputs:{input:t[0]},backend:n,attrs:{dim:r}});let i=t[0].shape,s=t[0].dtype;t.forEach((e=>{Tr.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),Tr.assert(s===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));let o=[],l=MF({inputs:t.map((e=>{let t=xO({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeData(e.dataId))),l}},lD={kernelName:na,backendName:"wasm",kernelFunc:function(e){let{inputs:{x:t},backend:n,attrs:{paddings:a,constantValue:r}}=e,i=a.map(((e,n)=>e[0]+t.shape[n]+e[1]));if(0===Tr.sizeFromShape(t.shape))return wO({backend:n,attrs:{shape:i,value:r,dtype:t.dtype}});let s=n.dataIdMap.get(t.dataId).id,o=n.makeOutput(i,t.dtype),l=n.dataIdMap.get(o.dataId).id,u=new Uint8Array(new Int32Array(t.shape).buffer),d=a.map((e=>e[0])),p=a.map((e=>e[1])),c=new Uint8Array(new Int32Array(d).buffer),h=new Uint8Array(new Int32Array(p).buffer);return LP(s,u,t.shape.length,N_[t.dtype],c,h,r,l),o},setupFunc:function(e){LP=e.wasm.cwrap(na,null,["number","array","number","number","array","array","number","number"])}},uD=W_(ra),dD={kernelName:ia,backendName:"wasm",setupFunc:function(e){WP=e.wasm.cwrap(ia,null,["number","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:a,alpha:r}=t,i=n.dataIdMap.get(a.dataId).id,s=n.dataIdMap.get(r.dataId).id,o=i,l=a,u=l;"float32"!==l.dtype&&(u=CF({backend:n,inputs:{x:a},attrs:{dtype:"float32"}}),o=n.dataIdMap.get(u.dataId).id);let d=n.makeOutput(a.shape,"float32"),p=n.dataIdMap.get(d.dataId).id;return WP(o,s,p),"float32"!==l.dtype&&n.disposeData(u.dataId),d}},pD={kernelName:sa,backendName:"wasm",setupFunc:function(e){BP=e.wasm.cwrap(sa,null,["number","number","number","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{axis:r,keepDims:i}=a,{x:s}=n,o=t.dataIdMap.get(s.dataId).id,l=o,u=s,{transposed:d,axes:p,originalAxes:c,inputWasTransposed:h}=Z_(s,r,t),f=p;if(h){let e=t.dataIdMap.get(d.dataId).id;e!==o&&(u=d,l=e,f=Bf.getInnerMostAxes(f.length,u.shape.length))}Bf.assertAxesAreInnerMostDims("prod",f,u.shape.length);let[m,y]=Bf.computeOutAndReduceShapes(u.shape,f),g=Tr.sizeFromShape(y),A=t.makeOutput(m,u.dtype);if(0!==Tr.sizeFromShape(u.shape)){let e=t.dataIdMap.get(A.dataId).id;BP(l,g,N_[A.dtype],e)}if(h&&t.disposeData(d.dataId),i){let e=Bf.expandShapeToKeepDim(A.shape,c);A.shape=e}return A}},cD={kernelName:da,backendName:"wasm",kernelFunc:e=>{let{backend:t,attrs:n}=e,{start:a,stop:r,step:i,dtype:s}=n,o=Ix(a,r,i,s),l=t.makeOutput([o.length],s);return t.typedArrayFromHeap(l).set(o),l}},hD=W_(qt),fD=P_(ca),mD=P_(ha),yD=P_(xa),gD={kernelName:ga,backendName:"wasm",setupFunc:function(e){VP=e.wasm.cwrap(ga,null,["number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let t,{backend:n,inputs:a,attrs:r}=e,{images:i}=a,{alignCorners:s,halfPixelCenters:o,size:l}=r,[u,d]=l,[p,c,h,f]=i.shape,m=[p,u,d,f],y=n.dataIdMap.get(i.dataId);"float32"!==y.dtype&&(t=CF({backend:n,inputs:{x:i},attrs:{dtype:"float32"}}),y=n.dataIdMap.get(t.dataId));let g=y.id,A=n.makeOutput(m,"float32");if(0===Tr.sizeFromShape(i.shape))return A;let x=n.dataIdMap.get(A.dataId).id;return VP(g,p,c,h,f,u,d,s?1:0,o?1:0,x),null!=t&&n.disposeData(t.dataId),A}},AD={kernelName:Aa,backendName:"wasm",setupFunc:function(e){UP=e.wasm.cwrap(Aa,null,["number","number","number","array","array","boolean"])},kernelFunc:function(e){let t,{inputs:n,backend:a,attrs:r}=e,{images:i,dy:s}=n,{alignCorners:o}=r,l=a.makeOutput(i.shape,"float32"),u=a.dataIdMap.get(i.dataId);return"float32"!==u.dtype&&(t=CF({backend:a,inputs:{x:i},attrs:{dtype:"float32"}}),u=a.dataIdMap.get(t.dataId)),UP(a.dataIdMap.get(i.dataId).id,a.dataIdMap.get(s.dataId).id,a.dataIdMap.get(l.dataId).id,new Uint8Array(new Int32Array(i.shape).buffer),new Uint8Array(new Int32Array(s.shape).buffer),o),null!=t&&a.disposeData(t.dataId),l}},xD={kernelName:ma,backendName:"wasm",setupFunc:function(e){GP=e.wasm.cwrap(ma,null,["number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{images:r}=n,{alignCorners:i,halfPixelCenters:s,size:o}=a,[l,u]=o,[d,p,c,h]=r.shape,f=[d,l,u,h],m=t.makeOutput(f,"float32");if(0===Tr.sizeFromShape(r.shape))return m;let y,g=t.dataIdMap.get(r.dataId);"float32"!==g.dtype&&(y=CF({backend:t,inputs:{x:r},attrs:{dtype:"float32"}}),g=t.dataIdMap.get(y.dataId));let A=g.id,x=t.dataIdMap.get(m.dataId).id;return GP(A,d,p,c,h,l,u,i?1:0,s?1:0,x),null!=y&&t.disposeData(y.dataId),m}},bD={kernelName:ya,backendName:"wasm",setupFunc:function(e){HP=e.wasm.cwrap(ya,null,["number","number","number","array","array","boolean"])},kernelFunc:function(e){let t,{inputs:n,backend:a,attrs:r}=e,{images:i,dy:s}=n,{alignCorners:o}=r,l=a.makeOutput(i.shape,"float32"),u=a.dataIdMap.get(i.dataId);return"float32"!==u.dtype&&(t=CF({backend:a,inputs:{x:i},attrs:{dtype:"float32"}}),u=a.dataIdMap.get(t.dataId)),HP(a.dataIdMap.get(i.dataId).id,a.dataIdMap.get(s.dataId).id,a.dataIdMap.get(l.dataId).id,new Uint8Array(new Int32Array(i.shape).buffer),new Uint8Array(new Int32Array(s.shape).buffer),o),null!=t&&a.disposeData(t.dataId),l}},vD={kernelName:ba,backendName:"wasm",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{dims:i}=a,s=Tr.parseAxisParam(i,r.shape);if(0===r.shape.length)return G_({inputs:{x:r},backend:n});let o=n.makeOutput(r.shape,r.dtype),l=n.dataIdMap.get(r.dataId).id,u=n.dataIdMap.get(o.dataId).id,d=new Uint8Array(new Int32Array(s).buffer),p=new Uint8Array(new Int32Array(r.shape).buffer);jP(l,d,s.length,p,r.shape.length,u);let c=yF({inputs:{x:o},attrs:{shape:r.shape},backend:n});return n.disposeData(o.dataId),c},setupFunc:function(e){jP=e.wasm.cwrap(ba,null,["number","array","number","array","number","number"])}},wD={kernelName:pr,backendName:"wasm",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{image:r}=t,{radians:i,fillValue:s,center:o}=a,l=n.makeOutput(r.shape,r.dtype),u=n.dataIdMap.get(r.dataId).id,d=n.dataIdMap.get(l.dataId).id,[p,c,h,f]=r.shape,[m,y]=Bf.getImageCenter(o,c,h),g="number"==typeof s?[s,s,s,0===s?0:255]:[...s,255],A=new Uint8Array(new Int32Array(g).buffer);return qP(u,p,c,h,f,i,m,y,A,g.length,d),l},setupFunc:function(e){qP=e.wasm.cwrap(pr,null,["number","number","number","number","number","number","number","number","array","number","number"])}},kD=P_(va),ID=P_(wa),SD={kernelName:ka,backendName:"wasm",setupFunc:function(e){XP=e.wasm.cwrap(ka,null,["number","number","number","number","number","number","array","number","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{indices:r,updates:i}=n,{shape:s}=a,o=t.makeOutput(s,i.dtype);if(0===Tr.sizeFromShape(s))return o;let{sliceRank:l,numUpdates:u,sliceSize:d,strides:p,outputSize:c}=Wp.calculateShapes(i,r,s),h=t.dataIdMap.get(r.dataId).id,f=t.dataIdMap.get(i.dataId).id,m=new Uint8Array(new Int32Array(p).buffer),y=t.dataIdMap.get(o.dataId).id;return XP(h,f,N_[i.dtype],l,u,d,m,c,y),o}},ND={kernelName:Sa,backendName:"wasm",setupFunc:function(e){KP=e.wasm.cwrap(Sa,null,["number","number","number","number","number","number","bool","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{sortedSequence:r,values:i}=t,{side:s}=a;if(r.dtype!==i.dtype)throw new Error(`SearchSorted error: sorted_sequence must have the same dtype as values. Got ${r.dtype} and ${i.dtype}`);let o=n.makeOutput(i.shape,"int32");function l(e){return n.dataIdMap.get(e.dataId).id}return KP(l(r),l(i),r.shape[0],r.shape[1],i.shape[1],N_[r.dtype],"left"===s,l(o)),o}},CD={kernelName:Na,backendName:"wasm",kernelFunc:function(e){let{inputs:t,backend:n}=e,{condition:a,t:r,e:i}=t,s=n.dataIdMap.get(a.dataId).id,o=n.dataIdMap.get(r.dataId).id,l=n.dataIdMap.get(i.dataId).id,u=n.makeOutput(r.shape,r.dtype),d=n.dataIdMap.get(u.dataId).id,p=a.shape.length,c=r.shape.length,h=0===p||p>1||1===c?1:Tr.sizeFromShape(r.shape.slice(1));return ZP(s,o,l,h,d),u},setupFunc:function(e){ZP=e.wasm.cwrap("SelectV2",null,["number","number","number","number","number"])}},TD=P_(Ca),ED={kernelName:"Sigmoid",backendName:"wasm",setupFunc:function(e){YP=e.wasm.cwrap(Ma,null,["number","number"])},kernelFunc:function(e){let{backend:t,inputs:{x:n}}=e,a=t.dataIdMap.get(n.dataId).id,r=t.makeOutput(n.shape,n.dtype),i=t.dataIdMap.get(r.dataId).id;return 0===Tr.sizeFromShape(r.shape)||YP(a,i),r}},RD=P_($a),$D=P_(Ea),MD=P_(Ra),_D=P_(_a),FD={kernelName:Pa,backendName:"wasm",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:i,paddings:s}=a,o=Tr.sizeFromShape(i),l=[[0,0]];l.push(...s);for(let e=1+i.length;e<r.shape.length;++e)l.push([0,0]);let u=lD.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),d=Bf.getReshaped(u.shape,i,o,!1),p=Bf.getPermuted(d.length,i.length,!1),c=Bf.getReshapedPermuted(u.shape,i,o,!1),h=yF({inputs:{x:u},backend:n,attrs:{shape:d}}),f=q_({inputs:{x:h},backend:n,attrs:{perm:p}}),m=yF({inputs:{x:f},backend:n,attrs:{shape:c}});return n.disposeData(u.dataId),n.disposeData(h.dataId),n.disposeData(f.dataId),m}},OD={kernelName:La,backendName:"wasm",setupFunc:function(e){JP=e.wasm.cwrap("SparseFillEmptyRows","number",["number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){let t,{backend:n,inputs:a}=e,{indices:r,values:i,denseShape:s,defaultValue:o}=a,l=r.shape[0],u=r.shape[1],d=n.readSync(s.dataId)[0],p=[l+d,u],c=n.dataIdMap.get(r.dataId).id,h=n.dataIdMap.get(i.dataId).id,f=n.dataIdMap.get(o.dataId).id,m=n.makeOutput(p,r.dtype),y=n.dataIdMap.get(m.dataId).id,g=n.makeOutput(p.slice(0,1),i.dtype),A=n.dataIdMap.get(g.dataId).id,x=n.makeOutput([d],"bool"),b=n.dataIdMap.get(x.dataId).id,v=n.makeOutput([l],r.dtype),w=n.dataIdMap.get(v.dataId).id,k=n.makeOutput([4],"int32"),I=n.dataIdMap.get(k.dataId).id,S=JP(c,h,N_[i.dtype],l,d,u,f,y,A,b,w,I),N=n.readSync(k.dataId);switch(N[0]){case 1:t=Bf.getSparseFillEmptyRowsIndicesDenseShapeMismatch(N[1]);break;case 2:t=Bf.getSparseFillEmptyRowsNegativeIndexErrorMessage(N[1],N[2]);break;case 3:t=Bf.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(N[1],N[2],N[3]);break;default:t=""}if(n.disposeData(k.dataId),t)throw n.disposeData(m.dataId),n.disposeData(g.dataId),n.disposeData(x.dataId),n.disposeData(v.dataId),new Error(t);let C=m,T=g;return S!==p[0]&&(C=bF({inputs:{x:m},attrs:{begin:0,size:[S,u]},backend:n}),T=bF({inputs:{x:g},attrs:{begin:0,size:S},backend:n}),n.disposeData(m.dataId),n.disposeData(g.dataId)),[C,T,x,v]}},PD={kernelName:Wa,backendName:"wasm",setupFunc:function(e){QP=e.wasm.cwrap(Wa,null,["number","number","number","number","number","number","number"])},kernelFunc:function(e){let{backend:t,inputs:n}=e,{inputIndices:a,inputShape:r,newShape:i}=n;if(2!==a.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${a.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==i.shape.length)throw new Error(`Target shape should be a vector but received shape ${i.shape}`);let s=t.dataIdMap.get(a.dataId).id,o=t.dataIdMap.get(r.dataId).id,l=t.dataIdMap.get(i.dataId).id,u=a.shape[0],d=Tr.sizeFromShape(i.shape),p=t.makeOutput([u,d],a.dtype),c=t.dataIdMap.get(p.dataId).id,h=t.makeOutput([d],i.dtype),f=t.dataIdMap.get(h.dataId).id,m=t.makeOutput([3],"int32"),y=t.dataIdMap.get(m.dataId).id;QP(s,o,l,u,c,f,y);let g,A=t.readSync(m.dataId);switch(A[0]){case 0:g=Bf.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(A[1],A[2]);break;case 1:g=Bf.getSparseReshapeNegativeOutputDimErrorMessage(A[1],A[2]);break;case 2:g=Bf.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage();break;case 3:{let e=Array.from(t.readSync(r.dataId)),n=Array.from(t.readSync(h.dataId));g=Bf.getSparseReshapeInputOutputMultipleErrorMessage(e,n);break}case 4:{let e=Array.from(t.readSync(r.dataId)),n=Array.from(t.readSync(h.dataId));g=Bf.getSparseReshapeInputOutputMismatchErrorMessage(e,n);break}default:g=""}if(t.disposeData(m.dataId),g)throw t.disposeData(p.dataId),t.disposeData(h.dataId),new Error(g);return[p,h]}};function DD(e){eD=e.wasm.cwrap("SparseSegmentReduction",null,["number","number","number","number","number","number","number","number","number"])}function zD(e,t){let{backend:n,inputs:a}=e,{data:r,indices:i,segmentIds:s}=a,o=i.shape[0],l=n.readSync(s.dataId,o-1,o)[0],u=o>0?l+1:0;if(u<0)throw new Error(Bf.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let d=r.shape.slice();d[0]=u;let p=n.dataIdMap.get(r.dataId).id,c=n.dataIdMap.get(i.dataId).id,h=n.dataIdMap.get(s.dataId).id,f=n.makeOutput(d,r.dtype),m=n.dataIdMap.get(f.dataId).id,y=n.makeOutput([4],"int32"),g=n.dataIdMap.get(y.dataId).id;eD(p,N_[r.dtype],r.shape[0],c,h,m,g,t,0);let A,x=n.readSync(y.dataId);switch(x[0]){case 0:A=Bf.getSparseSegmentReductionNegativeSegmentIdsErrorMessage();break;case 1:A=Bf.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage();break;case 2:A=Bf.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(x[1],x[2]);break;case 3:A=Bf.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(x[1],x[2],x[3]);break;default:A=""}if(n.disposeData(y.dataId),A)throw n.disposeData(f.dataId),new Error(A);return f}var LD,WD,BD,VD,UD,GD,HD,jD,qD={kernelName:Ba,backendName:"wasm",setupFunc:DD,kernelFunc:function(e){return zD(e,!0)}},XD={kernelName:Va,backendName:"wasm",setupFunc:DD,kernelFunc:function(e){return zD(e,!1)}},KD={kernelName:Ua,backendName:"wasm",setupFunc:function(e){LD=e.wasm.cwrap(Ua,null,["number","number","number","number","number","number","number","number","array","number","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{sparseIndices:r,sparseValues:i,defaultValue:s}=n,{outputShape:o}=a,l=t.makeOutput(o,s.dtype);if(0===Tr.sizeFromShape(o))return l;let{sliceRank:u,numUpdates:d,sliceSize:p,strides:c,outputSize:h}=Bf.calculateShapes(i,r,o),f=t.dataIdMap.get(r.dataId).id,m=t.dataIdMap.get(i.dataId).id,y=t.dataIdMap.get(s.dataId).id,g=new Uint8Array(new Int32Array(c).buffer),A=t.dataIdMap.get(l.dataId).id;return LD(f,m,i.shape.length,y,N_[s.dtype],u,d,p,g,h,A),l}},ZD={kernelName:Da,backendName:"wasm",kernelFunc:function(e){let{inputs:t,attrs:n,backend:a}=e,{x:r}=t,{numOrSizeSplits:i,axis:s}=n,o=Tr.parseAxisParam(s,r.shape)[0],l=Bf.prepareSplitSize(r,i,o),u=new Array(r.shape.length).fill(0),d=r.shape.slice();return l.map((e=>{let t=[...d];t[o]=e;let n=bF({inputs:{x:r},attrs:{begin:u,size:t},backend:a});return u[o]+=e,n}))}},YD=P_(Fa),JD=P_(Ha),QD=W_(Ga),ez={kernelName:ur,backendName:"wasm",setupFunc:function(e){WD=e.wasm.cwrap(ur,null,["number","number","number","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{alpha:r}=a,{x:i}=n,s=t.dataIdMap.get(i.dataId).id,o=t.makeOutput(i.shape,i.dtype),l=t.dataIdMap.get(o.dataId).id;return WD(s,r,N_[i.dtype],l),o}},tz={kernelName:qa,backendName:"wasm",setupFunc:function(e){BD=e.wasm.cwrap(qa,null,["number","array","number","array","array","array","array","array","number","number"])},kernelFunc:function(e){let t,{backend:n,inputs:a,attrs:r}=e,{x:i}=a,{begin:s,end:o,strides:l,beginMask:u,endMask:d,ellipsisMask:p,newAxisMask:c,shrinkAxisMask:h}=r,{finalShapeSparse:f,finalShape:m,isIdentity:y,sliceDim0:g,isSimpleSlice:A,begin:x,end:b,strides:v}=mf.sliceInfo(i.shape,s,o,l,u,d,p,c,h);if(y)t=yF({inputs:{x:i},backend:n,attrs:{shape:m}});else if(g||A){Tr.assert(i.shape.length>=1,(()=>`Input must have rank at least 1, got: ${i.shape.length}`));let e=mf.computeOutShape(x,b,v),a=bF({inputs:{x:i},backend:n,attrs:{begin:x,size:e}});t=yF({inputs:{x:a},backend:n,attrs:{shape:m}}),n.disposeData(a.dataId)}else{let e=n.makeOutput(f,"float32"),a=n.dataIdMap.get(i.dataId).id,r=new Uint8Array(new Int32Array(Tr.computeStrides(i.shape)).buffer),s=new Uint8Array(new Int32Array(x).buffer),o=new Uint8Array(new Int32Array(b).buffer),l=new Uint8Array(new Int32Array(v).buffer),u=new Uint8Array(new Int32Array(f).buffer),d=new Uint8Array(new Int32Array(Tr.computeStrides(f)).buffer),p=n.dataIdMap.get(e.dataId).id;BD(a,r,i.shape.length,s,o,l,u,d,f.length,p),t=yF({inputs:{x:e},backend:n,attrs:{shape:m}}),n.disposeData(e.dataId)}return t}},nz={kernelName:Xa,backendName:"wasm",kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{data:r,dataSplits:i}=n,{separator:s,nGramWidths:o,leftPad:l,rightPad:u,padWidth:d,preserveShortSequences:p}=a,c=t.readSync(r.dataId),h=t.readSync(i.dataId),[f,m]=Kx(c,h,s,o,l,u,d,p),y=t.makeOutput([f.length],"string");t.dataIdMap.get(y.dataId).stringBytes=f;let g=t.makeOutput(i.shape,"int32");return t.typedArrayFromHeap(g).set(m),[y,g]}},az={kernelName:Ka,backendName:"wasm",kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{input:r,delimiter:i}=n,{skipEmpty:s}=a,o=t.readSync(r.dataId),l=t.readSync(i.dataId),[u,d,p]=Yx(o,l[0],s),c=d.length,h=t.makeOutput([c,2],"int32");t.typedArrayFromHeap(h).set(u);let f=t.makeOutput([c],"string");t.dataIdMap.get(f.dataId).stringBytes=d;let m=t.makeOutput([2],"int32");return t.typedArrayFromHeap(m).set(p),[h,f,m]}},rz={kernelName:Za,backendName:"wasm",kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{input:r}=n,{numBuckets:i}=a,s=Jx(t.readSync(r.dataId),i),o=t.makeOutput(r.shape,"int32");return t.typedArrayFromHeap(o).set(s),o}},iz=W_(Ya),sz={kernelName:Oa,backendName:"wasm",setupFunc:function(e){VD=e.wasm.cwrap(Oa,null,["number","number","number","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{axis:r,keepDims:i}=a,{x:s}=n,o=t.dataIdMap.get(s.dataId).id,l=o,u=s,{transposed:d,axes:p,originalAxes:c,inputWasTransposed:h}=Z_(s,r,t),f=p;if(h){let e=t.dataIdMap.get(d.dataId).id;e!==o&&(u=d,l=e,f=Bf.getInnerMostAxes(f.length,u.shape.length))}Bf.assertAxesAreInnerMostDims("sum",f,u.shape.length);let[m,y]=Bf.computeOutAndReduceShapes(u.shape,f),g=Tr.sizeFromShape(y),A=t.makeOutput(m,u.dtype);if(0!==Tr.sizeFromShape(u.shape)){let e=t.dataIdMap.get(A.dataId).id;VD(l,g,N_[A.dtype],e)}if(h&&t.disposeData(d.dataId),i){let e=Bf.expandShapeToKeepDim(A.shape,c);A.shape=e}return A}},oz=P_(Ja),lz=P_(Qa),uz={kernelName:Ia,backendName:"wasm",setupFunc:function(e){UD=e.wasm.cwrap(Ia,null,["number","number","number","number","number","number","array","number","number","number"])},kernelFunc:function(e){let{backend:t,inputs:n,attrs:a}=e,{tensor:r,indices:i,updates:s}=n,{}=a,o=t.makeOutput(r.shape,r.dtype);if(0===Tr.sizeFromShape(r.shape))return o;let{sliceRank:l,numUpdates:u,sliceSize:d,strides:p,outputSize:c}=Wp.calculateShapes(s,i,r.shape),h=t.dataIdMap.get(i.dataId).id,f=t.dataIdMap.get(s.dataId).id,m=t.dataIdMap.get(r.dataId).id,y=new Uint8Array(new Int32Array(p).buffer),g=t.dataIdMap.get(o.dataId).id;return UD(h,f,N_[s.dtype],l,u,d,y,c,g,m),o}},dz={kernelName:er,backendName:"wasm",setupFunc:function(e){GD=e.wasm.cwrap(er,null,["number","array","number","array","number","number"])},kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,i=n.dataIdMap.get(r.dataId).id,{reps:s}=a,o=new Array(r.shape.length);for(let e=0;e<o.length;e++)o[e]=r.shape[e]*s[e];let l=new Uint8Array(new Int32Array(r.shape).buffer),u=new Uint8Array(new Int32Array(o).buffer),d=n.makeOutput(o,r.dtype),p=n.dataIdMap.get(d.dataId).id;return GD(i,l,r.shape.length,u,o.length,N_[d.dtype],p),d}},pz={kernelName:tr,backendName:"wasm",setupFunc:function(e){HD=e.wasm.cwrap(tr,null,["number","array","number","number","number","bool","number","number"])},kernelFunc:({inputs:e,backend:t,attrs:n})=>{let{x:a}=e,{k:r,sorted:i}=n,s=t.dataIdMap.get(a.dataId).id,o=new Uint8Array(new Int32Array(a.shape).buffer),l=a.shape.slice();l[l.length-1]=r;let u=t.makeOutput(l,a.dtype),d=t.dataIdMap.get(u.dataId).id,p=t.makeOutput(l,"int32"),c=t.dataIdMap.get(p.dataId).id;return HD(s,o,a.shape.length,N_[a.dtype],r,i,d,c),[u,p]}},cz={kernelName:nr,backendName:"wasm",setupFunc:function(e){jD=e.wasm.cwrap(nr,null,["number","number","bool","number","number","number","number","number","number","array","number","array","number","number","number","number","number"])},kernelFunc:function(e){let t,{backend:n,inputs:a,attrs:r}=e,{image:i,transforms:s}=a,{interpolation:o,fillMode:l,fillValue:u,outputShape:d}=r,[p,c,h,f]=i.shape,[m,y]=null!=d?d:[c,h],g=[p,m,y,f],A=new Uint8Array(new Int32Array(Tr.computeStrides(i.shape)).buffer),x=new Uint8Array(new Int32Array(Tr.computeStrides(g)).buffer),b=n.makeOutput(g,i.dtype),v=n.dataIdMap.get(b.dataId).id,w=n.dataIdMap.get(i.dataId).id,k=n.dataIdMap.get(s.dataId).id,I="nearest"===o?1:2;switch(l){case"constant":default:t=1;break;case"reflect":t=2;break;case"wrap":t=3;break;case"nearest":t=4}return jD(w,k,s.shape[0]>1,p,m,y,f,h,c,A,i.shape.length-1,x,g.length-1,I,t,u,v),b}},hz={kernelName:rr,backendName:"wasm",kernelFunc:function(e){let{inputs:t,attrs:n,backend:a}=e,{axis:r}=n,{x:i}=t,{outputValues:s,outputShape:o,indices:l}=ob(a.readSync(i.dataId),r,i.shape,i.dtype);return[a.makeOutput(o,i.dtype,void 0,s),a.makeOutput([l.length],"int32",void 0,l)]}},fz={kernelName:ir,backendName:"wasm",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{value:r}=t,{axis:i}=a;i<0&&(i+=r.shape.length);let s=r.shape[i],o=r.shape.length,l=new Array(o-1),u=0;for(let e=0;e<o;e++)e!==i&&(l[u++]=r.shape[e]);let d=new Array(s),p=new Array(o).fill(0),c=r.shape.slice();c[i]=1;for(let e=0;e<d.length;e++)p[i]=e,d[e]=bF({inputs:{x:r},attrs:{begin:p,size:c},backend:n});return d.map((({dataId:e,dtype:t})=>({dataId:e,dtype:t,shape:l})))}},mz={kernelName:lr,backendName:"wasm",kernelFunc:function(e){let{inputs:{x:t},backend:n}=e,a=n.makeOutput(t.shape,t.dtype);return n.typedArrayFromHeap(a).fill(0),a}},yz=[O_,D_,z_,L_,V_,U_,J_,Q_,iF,sF,oF,lF,uF,dF,pF,cF,mF,hF,fF,xF,kF,IF,SF,NF,EF,RF,$F,WF,BF,VF,UF,GF,HF,jF,qF,rO,iO,sO,oO,lO,uO,dO,pO,cO,hO,fO,mO,yO,gO,AO,bO,vO,UO,GO,HO,jO,qO,XO,KO,ZO,YO,JO,QO,j_,eP,tP,nP,aP,rP,iP,sP,lP,oP,uP,dP,pP,cP,hP,fP,mP,yP,gP,AP,xP,bP,vP,wP,kP,IP,NP,$P,MP,_P,FP,tD,nD,aD,rD,iD,sD,oD,lD,uD,dD,pD,cD,hD,fD,mD,yD,AF,gD,AD,xD,bD,vD,wD,kD,ID,SD,ND,CD,TD,ED,RD,$D,MD,wF,RP,_D,FD,OD,PD,qD,XD,KD,ZD,YD,JD,QD,ez,tz,nz,az,rz,iz,sz,oz,lz,uz,dz,pz,cz,K_,hz,fz,mz];for(let e of yz)wr(e);var gz=He();gz.registerFlag("WASM_HAS_SIMD_SUPPORT",(async()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11]))}catch(e){return!1}})),gz.registerFlag("WASM_HAS_MULTITHREAD_SUPPORT",(async()=>{if(gz.get("IS_NODE"))return!1;try{return(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch(e){return!1}}));var Az=I(V()),xz=I(U()),bz=I(G()),vz=Az.default||Az,wz=bz.default||bz,kz=class extends j{constructor(e){super(),this.wasm=e,this.dataIdNextNumber=1,this.wasm.tfjs.initWithThreadsCount(_z),Fz=this.wasm.tfjs.getThreadsCount(),this.dataIdMap=new H(this,to())}write(e,t,n){let a={id:this.dataIdNextNumber++};return this.move(a,e,t,n,1),a}numDataIds(){return this.dataIdMap.numDataIds()}async time(e){let t=Tr.now();return e(),{kernelMs:Tr.now()-t}}move(e,t,n,a,r){let i=this.dataIdNextNumber++;if("string"===a){let s=t;return void this.dataIdMap.set(e,{id:i,stringBytes:s,shape:n,dtype:a,memoryOffset:null,refCount:r})}let s=Tr.sizeFromShape(n),o=s*Tr.bytesPerElement(a),l=this.wasm._malloc(o)>>>0;this.dataIdMap.set(e,{id:i,memoryOffset:l,shape:n,dtype:a,refCount:r}),this.wasm.tfjs.registerTensor(i,s,l),null!=t&&this.wasm.HEAPU8.set(new Uint8Array(t.buffer,t.byteOffset,o),l)}async read(e){return this.readSync(e)}readSync(e,t,n){let{memoryOffset:a,dtype:r,shape:i,stringBytes:s}=this.dataIdMap.get(e);if("string"===r)return null!=t&&0!==t||!(null==n||n>=s.length)?s.slice(t,n):s;t=t||0,n=n||Tr.sizeFromShape(i);let o=Tr.bytesPerElement(r);return function(e,t){switch(t){case"float32":return new Float32Array(e);case"int32":return new Int32Array(e);case"bool":return new Uint8Array(e);default:throw new Error(`Unknown dtype ${t}`)}}(this.wasm.HEAPU8.slice(a+t*o,a+n*o).buffer,r)}disposeData(e,t=!1){if(this.dataIdMap.has(e)){let n=this.dataIdMap.get(e);if(n.refCount--,!t&&n.refCount>0)return!1;this.wasm._free(n.memoryOffset),this.wasm.tfjs.disposeData(n.id),this.dataIdMap.delete(e)}return!0}refCount(e){return this.dataIdMap.has(e)?this.dataIdMap.get(e).refCount:0}incRef(e){let t=this.dataIdMap.get(e);null!=t&&t.refCount++}floatPrecision(){return 32}getMemoryOffset(e){return this.dataIdMap.get(e).memoryOffset}dispose(){this.wasm.tfjs.dispose(),"PThread"in this.wasm&&this.wasm.PThread.terminateAllThreads(),this.wasm=null}memory(){return{unreliable:!1}}makeOutput(e,t,n,a){let r;if(null==n)r=this.write(null!=a?a:null,e,t);else{let a=this.dataIdNextNumber++;r={id:a},this.dataIdMap.set(r,{id:a,memoryOffset:n,shape:e,dtype:t,refCount:1});let i=Tr.sizeFromShape(e);this.wasm.tfjs.registerTensor(a,i,n)}return{dataId:r,shape:e,dtype:t}}typedArrayFromHeap({shape:e,dtype:t,dataId:n}){let a=this.wasm.HEAPU8.buffer,{memoryOffset:r}=this.dataIdMap.get(n),i=Tr.sizeFromShape(e);switch(t){case"float32":return new Float32Array(a,r,i);case"int32":return new Int32Array(a,r,i);case"bool":return new Uint8Array(a,r,i);default:throw new Error(`Unknown dtype ${t}`)}}};function Iz(e,t,n){if(null!=Nz)return Nz;let a="tfjs-backend-wasm.wasm";return e&&t?a="tfjs-backend-wasm-threaded-simd.wasm":e&&(a="tfjs-backend-wasm-simd.wasm"),null!=Tz&&null!=Tz[a]?Tz[a]:n+a}var Sz=["tfjs-backend-wasm.wasm","tfjs-backend-wasm-simd.wasm","tfjs-backend-wasm-threaded-simd.wasm"],Nz=null,Cz=null,Tz={},Ez=!1,Rz=!1;function $z(e,t=!1){if(Qs("setWasmPath has been deprecated in favor of setWasmPaths and will be removed in a future release."),Ez)throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`");Nz=e,Rz=t}function Mz(e,t=!1){if(Ez)throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPaths()` before you call `tf.setBackend()` or `tf.ready()`");if("string"==typeof e)Cz=e;else{Tz=e;let t=Sz.filter((e=>null==Tz[e]));if(t.length>0)throw new Error(`There were no entries found for the following binaries: ${t.join(",")}. Please either call setWasmPaths with a map providing a path for each binary, or with a string indicating the directory where all the binaries can be found.`)}Rz=t}var _z=-1,Fz=-1;function Oz(e){_z=e}function Pz(){if(-1===Fz)throw new Error("WASM backend not initialized.");return Fz}var Dz="4.7.0";mo("wasm",(async()=>{let{wasm:e}=await async function(){let[e,t]=await Promise.all([He().getAsync("WASM_HAS_SIMD_SUPPORT"),He().getAsync("WASM_HAS_MULTITHREAD_SUPPORT")]);return new Promise(((n,a)=>{let r={locateFile:(n,a)=>{if(n.endsWith(".worker.js")){let e=xz.wasmWorkerContents.replace(/\n/g,"\\n"),t=new Blob([e],{type:"application/javascript"});return URL.createObjectURL(t)}return n.endsWith(".wasm")?Iz(e,t,null!=Cz?Cz:a):a+n}};Rz&&(r.instantiateWasm=function(e){return(t,n)=>(Tr.fetch(e,{credentials:"same-origin"}).then((a=>{a.ok||t.env.a(`failed to load wasm binary file at '${e}'`),a.arrayBuffer().then((e=>{WebAssembly.instantiate(e,t).then((e=>{n(e.instance,e.module)}))}))})),{})}(Iz(e,t,null!=Cz?Cz:"")));let i,s=!1;r.onAbort=()=>{s||Ez||(Ez=!0,a({message:"Make sure the server can serve the `.wasm` file relative to the bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers"}))},t&&e&&null==Nz?(r.mainScriptUrlOrBlob=new Blob(["var WasmBackendModuleThreadedSimd = "+vz.toString()],{type:"text/javascript"}),i=vz(r)):i=wz(r),i.then((e=>{s=!0,Ez=!1,e.tfjs={init:e.cwrap("init",null,[]),initWithThreadsCount:e.cwrap("init_with_threads_count",null,["number"]),getThreadsCount:e.cwrap("get_threads_count","number",[]),registerTensor:e.cwrap("register_tensor",null,["number","number","number"]),disposeData:e.cwrap("dispose_data",null,["number"]),dispose:e.cwrap("dispose",null,[])},n({wasm:e})})).catch(a)}))}();return new kz(e)}),2);var zz=He();function Lz(e,t){return`${e}_${t}`}function Wz(e,t,n,a){return`${e}_${t}_${n}_${a}`}function Bz(e){if("rgba8unorm"===e)return 16;throw new Error(`${e} is not supported!`)}function Vz(e,t){if(Math.max(...e)>5)throw new Error("Cannot symbolically compute strides for rank > 6 tensor.");let n=e.length,a=e.map((e=>`${t}.${"xyzwuv"[e]}`)),r=new Array(n-1);r[n-2]=a[n-1];for(let e=n-3;e>=0;--e)r[e]=`(${r[e+1]} * ${a[e+1]})`;return r}zz.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE",(()=>15)),zz.registerFlag("WEBGPU_CPU_FORWARD",(()=>!0)),zz.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE",(()=>-1)),zz.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE",(()=>!0)),zz.registerFlag("WEBGPU_USE_LOW_POWER_GPU",(()=>!1)),zz.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e3)),zz.registerFlag("WEBGPU_USE_PROFILE_TOOL",(()=>!1)),zz.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE",(()=>!0)),zz.registerFlag("WEBGPU_USE_NAIVE_CONV2D_DEBUG",(()=>!1)),zz.registerFlag("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL",(()=>0)),zz.registerFlag("WEBGPU_CONV_SEPARATE_IM2COL_SHADER",(()=>!1)),zz.registerFlag("WEBGPU_PRINT_SHADER",(()=>"")),zz.registerFlag("WEBGPU_ENGINE_COMPILE_ONLY",(()=>!1));var Uz=(e,t,n)=>"int32"===n?`atomicAdd(${e}, bitcast<i32>(${t}));`:`\n          {\n            var oldValue = 0;\n            loop {\n              let newValueF32 = bitcast<f32>(oldValue) + (${t});\n              let newValue = bitcast<i32>(newValueF32);\n              let res = atomicCompareExchangeWeak(${e}, oldValue, newValue);\n              if res.exchanged {\n                break;\n              }\n              oldValue = res.old_value;\n            }\n          }`,Gz=(e,t="f32")=>{switch(e){case 1:return`${t}`;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component ${t} is not supported.`)}};function Hz(e){if(e<=1)return"i32";if(2===e)return"vec2<i32>";if(3===e)return"vec3<i32>";if(4===e)return"vec4<i32>";if(5===e)return"vec5";if(6===e)return"vec6";throw Error(`GPU for rank ${e} is not yet supported`)}function jz(e){if(0===e)return"x";if(1===e)return"y";if(2===e)return"z";if(3===e)return"w";if(4===e)return"u";if(5===e)return"v";throw Error(`Index ${e} is not yet supported`)}function qz(...e){let t;switch(e.length){case 0:t="\n        fn main()\n      ";break;case 1:t=`\n        fn main(${e[0]} : i32)\n      `;break;default:throw Error("Unreachable")}return t}function Xz(e,t){let n;return n=`\n     ${function(e){return`\n  @compute @workgroup_size(${e.workgroupSize[0]}, ${e.workgroupSize[1]}, ${e.workgroupSize[2]})\n`}(t)}\n      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,\n                @builtin(global_invocation_id) GlobalId : vec3<u32>,\n                @builtin(local_invocation_index) LocalIndex: u32,\n                @builtin(workgroup_id) WorkgroupId : vec3<u32>,\n                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {\n        localId = LocalId;\n        localIndex = LocalIndex;\n        globalId = GlobalId;\n        numWorkgroups = NumWorkgroups;\n        workgroupId = WorkgroupId;\n        ${e?"main(getGlobalIndex());":"main();"};\n      }\n    `,n}var Kz="\n  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};\n  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};\n\n  // Checks whether coordinates lie within the bounds of the shape.\n  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {\n    return all(coord >= vec2<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {\n    return all(coord >= vec3<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {\n    return all(coord >= vec4<i32>(0)) && all(coord < shape);\n  }\n\n  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {\n    return coord;\n  }\n  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {\n    return dot(coords, vec2<i32>(shape.y, 1));\n  }\n  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {\n    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));\n  }\n  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n    return dot(coords, vec4<i32>(\n        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n  }\n  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {\n    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;\n  }\n  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {\n    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;\n  }\n\n  fn idiv(a: i32, b: i32, sign: f32) -> i32 {\n    var res: i32 = a / b;\n    let modulo: i32 = a % b;\n    if (sign < 0. && modulo != 0) {\n      res = res - 1;\n    }\n    return res;\n  }\n\n  // NaN defination in IEEE 754-1985 is :\n  //   - sign = either 0 or 1.\n  //   - biased exponent = all 1 bits.\n  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).\n  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n  fn isnan(val: f32) -> bool {\n    let floatToUint: u32 = bitcast<u32>(val);\n    return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n  }\n  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {\n    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);\n    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);\n  }\n";function Zz(e,t=""){let n=e.length,a=""!==t?`get${t.charAt(0).toUpperCase()+t.slice(1)}CoordsFromIndex`:"getCoordsFromIndex",r=""!==t?`${t.charAt(0).toLowerCase()+t.slice(1)}ShapeStrides`:"outShapeStrides";if(n<=1)return`fn ${a}(index : i32) -> i32 { return index; }`;let i,s=Tr.computeStrides(e),o=Hz(n),l=[];for(let e=0;e<n;e++)l.push(`d${e}`);return 1===s.length?`    fn ${a}(index : i32) -> vec2<i32> {\n      let d0 = index / uniforms.${r}; let d1 = index - d0 * uniforms.${r};\n      return vec2<i32>(d0, d1);\n    }`:(i="var index2 = index;"+s.map(((e,t)=>`let ${l[t]} = index2 / uniforms.${r}.${jz(t)}; ${t===s.length-1?`let ${l[t+1]} = index2 - ${l[t]} * uniforms.${r}.${jz(t)}`:`index2 = index2 - ${l[t]} * uniforms.${r}.${jz(t)}`};`)).join(""),`\n    fn ${a}(index : i32) -> ${o} {\n      ${i}\n      return ${o}(${l.join(",")});\n    }\n  `)}function Yz(e){let t="";switch(e){case 0:case 1:t+="\n        fn getOutputIndexFromCoords(coords : i32) -> i32 {\n          return coords;\n        }\n        ";break;case 2:t+="\n        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {\n          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));\n        }\n        ";break;case 3:t+="\n        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {\n          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));\n        }\n        ";break;case 4:t+="\n        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n          return dot(coords, vec4<i32>(\n            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));\n        }\n        ";break;case 5:t+="\n        fn getOutputIndexFromCoords(coords : vec5) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u;\n        }\n        ";break;case 6:t+="\n        fn getOutputIndexFromCoords(coords : vec6) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u * uniforms.outShapeStrides.u +\n              coords.v;\n        }\n        ";break;default:Tr.assert(!1,(()=>`Unsupported ${e}D shape`))}return t}function Jz(e){return 1===e.dispatch[1]&&1===e.dispatch[2]}function Qz(e,t=1){if("float32"===e)return Gz(t,"f32");if("int32"===e||"bool"===e)return Gz(t,"i32");throw new Error(`type ${e} is not supported.`)}function eL(e){return!(e.dispatchLayout.hasOwnProperty("y")&&0!==e.dispatchLayout.y.length||e.dispatchLayout.hasOwnProperty("z")&&0!==e.dispatchLayout.z.length)}var tL={};k(tL,{GPUBytesPerElement:()=>dL,MatMulProgramType:()=>nL,assertNotComplex:()=>cL,computeDispatch:()=>iL,computeWorkPerThreadForConv2d:()=>lL,computeWorkgroupInfoForMatMul:()=>sL,computeWorkgroupSizeForConv2d:()=>oL,flatDispatchLayout:()=>uL,isWebGPUSupported:()=>pL,tilesFitEvenlyIntoShape:()=>rL});var nL,aL=e=>{let t=1;for(let n=0;n<e.length;n++)t*=e[n];return t};function rL(e,t){if(e.length!==t.length)throw new Error(`Cannot compute whether rank ${e.length} tiles fit evenly into rank ${t.length} shape - ranks must match.`);return t.every(((t,n)=>t%e[n]==0))}function iL(e,t,n=[1,1,1],a=[1,1,1]){let[r,i,s]=[Math.ceil(aL(e.x.map((e=>t[e])))/(n[0]*a[0])),e.y?Math.ceil(aL(e.y.map((e=>t[e])))/(n[1]*a[1])):1,e.z?Math.ceil(aL(e.z.map((e=>t[e])))/(n[2]*a[2])):1];return[r,i,s]}function sL(e,t,n,a=!1){let r=[8,8,1],i=[4,4,1];return a||(e<=8&&(i[1]=1),t<=16&&n<=16&&(r[0]=4)),{workgroupSize:r,elementsPerThread:i}}function oL(e,t,n=!1){if(n)return[8,8,1];let a=aL(e.x.map((e=>t[e]))),r=aL(e.y.map((e=>t[e])));return a<=4?[4,16,1]:r<=4?[16,4,1]:[16,16,1]}function lL(e,t,n=!1){if(n)return[4,4,1];let a=aL(e.x.map((e=>t[e]))),r=aL(e.y.map((e=>t[e])));return a<=4?[1,2,1]:r<=4?[2,1,1]:[2,2,1]}function uL(e){return{x:e.map(((e,t)=>t))}}function dL(e){if("float32"===e||"int32"===e||"bool"===e||"string"===e)return 4;if("complex64"===e)return 8;throw new Error(`Unknown dtype ${e}`)}function pL(){return("undefined"!=typeof window||"undefined"!=typeof WorkerGlobalScope)&&!!navigator.gpu}function cL(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Tr.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGPU backend.`))}))}!function(e){e[e.MatMulReduceProgram=0]="MatMulReduceProgram",e[e.MatMulSplitKProgram=1]="MatMulSplitKProgram",e[e.MatMulSmallOutputSizeProgram=2]="MatMulSmallOutputSizeProgram",e[e.MatMulPackedProgram=3]="MatMulPackedProgram",e[e.MatMulMax=4]="MatMulMax"}(nL||(nL={}));var hL,fL=He().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD"),mL=class extends j{nextDataId(){return mL.nextDataId++}constructor(e,t){if(super(),this.commandQueueOwnedIds=new WeakSet,this.dispatchCountInPass=0,this.disposed=!1,this.downloadWaitMs=0,this.tensorDataPendingDisposal=[],this.queryResolveBuffer=null,this.querySet=null,this.querySetCount=2,this.stagingPendingDisposal=[],this.uniformPendingDisposal=[],this.uploadWaitMs=0,this.hasReadSyncWarned=!1,this.hasTimestampQueryWarned=!1,!pL())throw new Error("WebGPU is not supported on this device");this.pipelineCache={},this.device=e,this.queue=e.queue,this.commandEncoder=null,this.computePassEncoder=null,this.adapterInfo=new class{constructor(e){e&&(this.vendor=e.vendor,this.architecture=e.architecture,this.intelGPUGeneration=this.getIntelGPUGeneration())}getIntelGPUGeneration(){if(this.isIntel()){if(this.architecture.startsWith("gen"))return Number(this.architecture.match(/\d+/));if(this.architecture.startsWith("xe"))return 12}return 0}isIntel(){return"intel"===this.vendor}}(t),this.supportTimestampQuery=this.device.features.has("timestamp-query"),this.thresholdToIncreaseWorkgroups=this.adapterInfo.intelGPUGeneration>=12?16:8,this.bufferManager=new class{constructor(e){this.device=e,this.numUsedBuffers=0,this.numFreeBuffers=0,this.freeBuffers=new Map,this.usedBuffers=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireBuffer(e,t,n=!1,a=!0){let r,i=Lz(e,t);return a?(this.freeBuffers.has(i)||this.freeBuffers.set(i,[]),this.freeBuffers.get(i).length>0?(r=this.freeBuffers.get(i).pop(),this.numFreeBuffers--):(r=this.device.createBuffer({size:e,usage:t,mappedAtCreation:n}),this.numBytesAllocated+=e)):(r=this.device.createBuffer({size:e,usage:t,mappedAtCreation:n}),this.numBytesAllocated+=e),this.usedBuffers.has(i)||this.usedBuffers.set(i,[]),this.usedBuffers.get(i).push(r),this.numUsedBuffers++,this.numBytesUsed+=e,r}releaseBuffer(e,t=!0){if(0===this.freeBuffers.size)return;let n=e.size,a=Lz(n,e.usage),r=this.usedBuffers.get(a),i=r.indexOf(e);if(i<0)throw new Error("Cannot find the buffer in buffer manager");r[i]=r[r.length-1],r.pop(),this.numUsedBuffers--,this.numBytesUsed-=n,t?(this.freeBuffers.get(a).push(e),this.numFreeBuffers++):(e.destroy(),this.numBytesAllocated-=n)}getNumUsedBuffers(){return this.numUsedBuffers}getNumFreeBuffers(){return this.numFreeBuffers}dispose(){this.freeBuffers.forEach(((e,t)=>{e.forEach((e=>{e.destroy()}))})),this.usedBuffers.forEach(((e,t)=>{e.forEach((e=>{e.destroy()}))})),this.freeBuffers=new Map,this.usedBuffers=new Map,this.numUsedBuffers=0,this.numFreeBuffers=0,this.numBytesUsed=0,this.numBytesAllocated=0}}(this.device),this.textureManager=new class{constructor(e){this.device=e,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures=new Map,this.usedTextures=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireTexture(e,t,n,a){let r=e*t*Bz(n),i=Wz(e,t,n,a);if(this.freeTextures.has(i)||this.freeTextures.set(i,[]),this.usedTextures.has(i)||this.usedTextures.set(i,[]),this.numBytesUsed+=r,this.numUsedTextures++,this.freeTextures.get(i).length>0){this.numFreeTextures--;let e=this.freeTextures.get(i).shift();return this.usedTextures.get(i).push(e),e}this.numBytesAllocated+=r;let s=this.device.createTexture({size:[e,t],format:n,usage:a});return this.usedTextures.get(i).push(s),s}releaseTexture(e){if(0===this.freeTextures.size)return;let t=e.width,n=e.height,a=e.format,r=Wz(t,n,a,e.usage);this.freeTextures.has(r)||this.freeTextures.set(r,[]),this.freeTextures.get(r).push(e),this.numFreeTextures++,this.numUsedTextures--;let i=this.usedTextures.get(r),s=i.indexOf(e);if(s<0)throw new Error("Cannot release a texture that was never provided by this texture manager");i.splice(s,1);let o=t*n*Bz(a);this.numBytesUsed-=o}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){this.freeTextures.forEach(((e,t)=>{e.forEach((e=>{e.destroy()}))})),this.usedTextures.forEach(((e,t)=>{e.forEach((e=>{e.destroy()}))})),this.freeTextures=new Map,this.usedTextures=new Map,this.numUsedTextures=0,this.numFreeTextures=0,this.numBytesUsed=0,this.numBytesAllocated=0}}(this.device),this.tensorMap=new H(this,to()),He().getBool("WEBGPU_USE_PROFILE_TOOL")&&(this.dummyCanvas=document.createElement("canvas"),this.dummyCanvas.width=1,this.dummyCanvas.height=1,this.dummyContext=this.dummyCanvas.getContext("webgpu"),this.dummyContext.configure({device:e,format:"bgra8unorm"}),document.body.appendChild(this.dummyCanvas))}floatPrecision(){return 32}disposeData(e,t=!1){if(!this.tensorMap.has(e))return!0;let n=this.tensorMap.get(e);return t?n.refCount=0:n.refCount--,!(n.refCount>0||(null!=n.complexTensorInfos&&(this.disposeData(n.complexTensorInfos.real.dataId),this.disposeData(n.complexTensorInfos.imag.dataId)),this.commandQueueOwnedIds.has(e)?(this.tensorDataPendingDisposal.push(e),0):(this.releaseResource(e),this.tensorMap.delete(e),0)))}memory(){return{numBytesInGPU:this.bufferManager.numBytesUsed,numBytesAllocatedInGPU:this.bufferManager.numBytesAllocated,unreliable:!1}}releaseResource(e){let t=this.tensorMap.get(e);if(t&&t.resource){if(t.external)return void(t.resource=null);t.resource instanceof GPUBuffer?this.bufferManager.releaseBuffer(t.resource):t.resource instanceof GPUTexture&&this.textureManager.releaseTexture(t.resource),t.resource=null}}refCount(e){return this.tensorMap.has(e)?this.tensorMap.get(e).refCount:0}incRef(e){this.tensorMap.get(e).refCount++}decRef(e){this.tensorMap.has(e)&&this.tensorMap.get(e).refCount--}write(e,t,n){if("complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let a={id:this.nextDataId()};return this.tensorMap.set(a,{dtype:n,shape:t,values:e,refCount:1}),a}move(e,t,n,a,r){if("complex64"===a)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.tensorMap.set(e,{dtype:a,shape:n,values:t,refCount:r})}submitQueue(){this.queue.submit([this.commandEncoder.finish()]),this.commandEncoder=null,this.dispatchCountInPass=0,this.commandQueueOwnedIds=new WeakSet,this.tensorDataPendingDisposal.forEach((e=>{this.releaseResource(e),this.tensorMap.delete(e)})),this.uniformPendingDisposal.forEach((e=>this.bufferManager.releaseBuffer(e))),this.stagingPendingDisposal.forEach((e=>this.bufferManager.releaseBuffer(e,!1))),this.tensorDataPendingDisposal=[],this.uniformPendingDisposal=[],this.stagingPendingDisposal=[]}ensureCommandEncoderReady(){this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder())}endComputePassEncoder(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}async checkCompileCompletionAsync(){let e;try{e=await Promise.all(Object.values(this.pipelineCache))}catch(e){throw new Error(e.message)}Object.keys(this.pipelineCache).map(((t,n)=>{this.pipelineCache[t]=e[n]}))}async getBufferData(e){if(He().getBool("WEBGPU_ENGINE_COMPILE_ONLY"))return console.warn("The data may be invalid since WEBGPU_ENGINE_COMPILE_ONLY is true, this can only be called when WEBGPU_ENGINE_COMPILE_ONLY is false"),null;let t=e.size,n=this.bufferManager.acquireBuffer(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,n,0,t),this.submitQueue(),await n.mapAsync(GPUMapMode.READ);let a=n.getMappedRange().slice(0);return n.unmap(),null!=n&&this.bufferManager.releaseBuffer(n),He().getBool("WEBGPU_USE_PROFILE_TOOL")&&(Tr.assert(void 0!==this.dummyContext,(()=>"Fail to get context for profiling tool")),this.dummyContext.getCurrentTexture()),a}convertAndCacheOnCPU(e,t){let n=this.tensorMap.get(e);return n.values=t,n.values}readSync(e){let t=this.tensorMap.get(e),{values:n,complexTensorInfos:a}=t;if(null!=n||"string"===t.dtype)return n;if("complex64"===t.dtype){let t=this.readSync(a.real.dataId),n=this.readSync(a.imag.dataId),r=Tr.convertBackendValuesAndArrayBuffer(Bf.mergeRealAndImagArrays(t,n).buffer,"float32");return this.convertAndCacheOnCPU(e,r),r}this.hasReadSyncWarned||(this.hasReadSyncWarned=!0,console.warn("The performance of synchronously reading data from GPU to CPU is poor on the webgpu backend, please use asynchronous APIs instead."));let r=["opaque","premultiplied"],i=t.resource,s=i.size;Tr.assert(s%4==0,(()=>"Because there is 4 bytes for one pixel, buffer size must be multiple of 4."));let o=s/4,l=new ArrayBuffer(s),u=256,d=256,p=r.map((e=>new OffscreenCanvas(u,d))),c=new OffscreenCanvas(u,d);this.endComputePassEncoder(),p.map(((e,t)=>{let n=e.getContext("webgpu");return n.configure({device:this.device,format:"bgra8unorm",usage:GPUTextureUsage.COPY_DST,alphaMode:r[t]}),n.getCurrentTexture()})).map(((e,t)=>{let n=(n,a,s)=>{this.ensureCommandEncoderReady(),this.commandEncoder.copyBufferToTexture({buffer:i,bytesPerRow:1024,offset:s},{texture:e},{width:n,height:a}),this.submitQueue();let o=c.getContext("2d",{willReadFrequently:!0});o.clearRect(0,0,n,a),o.drawImage(p[t],0,0);let u=o.getImageData(0,0,n,a).data,d=r[t],h=new Uint8ClampedArray(l,s,n*a*4);for(let e=0;e<h.length;e+=4)if("premultiplied"===d)h[e+3]=u[e+3];else{let t=u[e];h[e]=u[e+2],h[e+1]=u[e+1],h[e+2]=t}},a=Math.floor(o/(u*d)),s=u,h=d,f=0;for(let e=0;e<a;e++)n(s,h,f),f+=u*d*4;let m=o%(u*d);h=Math.floor(m/u),h>0&&(n(s,h,f),f+=h*(4*u)),s=m%u,s>0&&n(s,1,f)}));let h=Tr.convertBackendValuesAndArrayBuffer(l,t.dtype);return this.convertAndCacheOnCPU(e,h),h}async read(e){if(!this.tensorMap.has(e))throw new Error(`Tensor ${e} was not registered!`);let t,n=this.tensorMap.get(e),{values:a}=n;if(null!=a)return a;if("complex64"===n.dtype){let e=await Promise.all([this.read(n.complexTensorInfos.real.dataId),this.read(n.complexTensorInfos.imag.dataId)]),a=e[0],r=e[1];t=Bf.mergeRealAndImagArrays(a,r)}else{let e=await this.getBufferData(n.resource);t=Tr.convertBackendValuesAndArrayBuffer(e,n.dtype)}return this.convertAndCacheOnCPU(e,t),t}copyBuffer(e){let t=e.size,n=e.usage,a=this.bufferManager.acquireBuffer(t,n);return this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,a,0,t),this.submitQueue(),a}createTensorFromGPUData(e,t,n){let a=e.buffer;if("complex64"===n)throw new Error("Cannot write to a complex64 dtype. ");let r={id:this.nextDataId()};this.tensorMap.set(r,{dtype:n,shape:t,values:null,refCount:1,external:e.zeroCopy});let i=this.tensorMap.get(r),s=dL(i.dtype)*Tr.sizeFromShape(i.shape);if(e.buffer.size<s)throw new Error(`GPUBuffer size(${e.buffer.size}) is smaller than tensor size(${s})!`);if((e.buffer.usage&(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))!=(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))throw new Error("GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!");return!0!==e.zeroCopy&&(a=this.copyBuffer(a)),i.resource=a,to().makeTensorFromDataId(r,t,n,this)}readToGPU(e){let t=this.tensorMap.get(e),{values:n,dtype:a,shape:r,resource:i}=t;if("complex64"===a)throw new Error("Does not support reading buffer for complex64 dtype.");if(null==i)throw null!=n?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");let s=i,o=s.size,l=s.usage,u=this.bufferManager.acquireBuffer(o,l);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(i,0,u,0,o),this.submitQueue();let d=this.makeTensorInfo(r,a),p=to().makeTensorFromTensorInfo(d);return this.tensorMap.get(d.dataId).resource=u,{tensorRef:p,buffer:u}}bufferSync(e){let t=this.readSync(e.dataId);if("string"===e.dtype)try{let n=t.map((e=>Tr.decodeString(e)));return js(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return js(e.shape,e.dtype,t)}async time(e){!this.supportTimestampQuery&&!this.hasTimestampQueryWarned&&(console.warn("This device doesn't support timestamp-query extension. Start Chrome browser with flag --disable-dawn-features=disallow_unsafe_apis to try it again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled."),this.hasTimestampQueryWarned=!0);let t=this.activeTimers,n=[],a=!1;null==this.programTimersStack?(this.programTimersStack=n,a=!0):this.activeTimers.push(n),this.activeTimers=n,e();let r=Tr.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),i=Tr.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,a&&(this.programTimersStack=null);let s={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},o=await Promise.all(r);return s.kernelMs=Tr.sum(o),s.getExtraProfileInfo=()=>o.map(((e,t)=>({name:i[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", "),this.uploadWaitMs=0,this.downloadWaitMs=0,s}makeTensorInfo(e,t,n){return"string"===t&&null!=n&&n.length>0&&Tr.isString(n[0])&&(n=n.map((e=>Tr.encodeString(e)))),{dataId:this.write(n,e,t),shape:e,dtype:t}}tensorToBinding(e){if(!e)return null;let t=this.tensorMap.get(e.dataId).resource;return t instanceof GPUBuffer?{buffer:t}:t instanceof GPUTexture?t.createView():t}uploadToGPU(e){let t=this.tensorMap.get(e);if(null!=t.resource)return;let n,a=dL(t.dtype)*Tr.sizeFromShape(t.shape),r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST;if(t.values){if(n=this.bufferManager.acquireBuffer(a,r,!0),"unmapped"===n.mapState){let e=this.bufferManager.acquireBuffer(a,GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,!0,!1),r=e.getMappedRange();"int32"===t.dtype||"bool"===t.dtype?new Int32Array(r).set(t.values):new Float32Array(r).set(t.values),e.unmap(),this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,n,0,a),this.stagingPendingDisposal.push(e)}else{let e=n.getMappedRange();"int32"===t.dtype||"bool"===t.dtype?new Int32Array(e).set(t.values):new Float32Array(e).set(t.values),n.unmap()}t.values=null}else n=this.bufferManager.acquireBuffer(a,r);t.resource=n}makeUniforms(e){let t=0,n=0,a=[],r=1;e.forEach((e=>{let i;switch(0===e.data.length&&(e.data=[1]),e.data.length){case 1:i=4;break;case 2:i=8;break;case 3:case 4:case 5:case 6:i=16;break;default:Tr.assert(!1,(()=>`Unsupported ${e.data.length}D shape`))}(5===n||6===n)&&(i=16),i>r&&(r=i),t=Math.ceil(t/i)*i,n=e.data.length,a.push(t),t+=4*e.data.length})),t=Math.ceil(t/r)*r;let i=new ArrayBuffer(t);e.forEach(((e,t)=>{let n=a[t];"int32"===e.type?new Int32Array(i,n,e.data.length).set(e.data):"uint32"===e.type?new Uint32Array(i,n,e.data.length).set(e.data):new Float32Array(i,n,e.data.length).set(e.data)}));let s=this.bufferManager.acquireBuffer(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);return this.queue.writeBuffer(s,0,i,0,t),this.uniformPendingDisposal.push(s),{offset:0,size:t,buffer:s}}runWebGPUProgram(e,t,n,a,r){if(r||(r=this.makeTensorInfo(e.outputShape,n)),0===Tr.sizeFromShape(r.shape))return this.tensorMap.get(r.dataId).values=Tr.getTypedArrayFromDType(r.dtype,0),r;this.uploadToGPU(r.dataId),e.dispatch=((e,t)=>{let n=e.limits.maxComputeWorkgroupsPerDimension,a=t.dispatchLayout,r=t.dispatch;if(r.every((e=>e<=n)))return r;Tr.assert(r[0]>n&&void 0===a.y&&void 0===a.z,(()=>"Dispatch size exceeds WebGPU limits in Y or Z dimension."));let i=Math.ceil(Math.sqrt(r[0]));return i>n?(i=Math.ceil(Math.cbrt(r[0])),Tr.assert(i<=n,(()=>"Total dispatch size exceeds WebGPU maximum.")),[i,i,i]):[i,i,1]})(this.device,e);let i=t.map(((t,n)=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");return this.uploadToGPU(t.dataId),{dtype:this.tensorMap.get(t.dataId).dtype,shape:t.shape,name:e.variableNames[n]}}));e.shaderKey=function(e,t,n){let a=e.shaderKey;if(e.isFromPixels)return a;let r=[],i=[];t.forEach((e=>{r.push(e.shape),i.push(e.dtype)})),r.push(n.shape),i.push(n.dtype);let s=t.map((e=>Bf.getBroadcastDims(e.shape,n.shape))),o=t.map((e=>Tr.arraysEqual(e.shape,n.shape))).join("_"),l=s.map((e=>e.join("_"))).join(";"),u=Jz(e)?"flatDispatch":"";return a+="_"+(e.workgroupSize?e.workgroupSize.join(","):"")+r.map((e=>e.length)).join(",")+i.join(",")+e.variableNames.join(",")+l+o+u,a}(e,i,r);let s=He().getBool("WEBGPU_ENGINE_COMPILE_ONLY");return e.shaderKey in this.pipelineCache||(this.pipelineCache[e.shaderKey]=((e,t,n,a,r)=>{let i=function(e,t,n){let a=[],r=n.workgroupSize[0]*n.workgroupSize[1]*n.workgroupSize[2];if(n.outputComponent=n.outputComponent?n.outputComponent:1,a.push(`\n\n      var<private> localId: vec3<u32>;\n      var<private> localIndex: u32;\n      var<private> globalId: vec3<u32>;\n      var<private> numWorkgroups: vec3<u32>;\n      var<private> workgroupId: vec3<u32>;\n\n      // Only used when the y/z dimension of workgroup size is 1.\n      fn getGlobalIndex() -> i32 {\n        ${Jz(n)?"  return i32(globalId.x);":`  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +\n                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${r}u +\n                localIndex);\n        `}\n      }\n    `),n.isFromPixels){a.push(`\n        struct Uniform {\n          size            : i32,\n          numChannels     : i32,\n          outShapeStrides : vec2<i32>,\n        };\n\n        @group(0) @binding(0) var<storage, read_write> result: array<${Qz(t.dtype,n.outputComponent)}>;\n        @group(0) @binding(2) var<uniform> uniforms: Uniform;\n      `);let e=eL(n);return[Kz,a.join("\n"),Zz(t.shape),n.getUserCode(),Xz(e,n)].join("\n")}let i,s,o="struct Uniforms { NAN : f32, INFINITY : f32, ";n.variableNames.forEach(((t,n)=>{let a=Hz(e[n].shape.length);o+=`${t.charAt(0).toLowerCase()+t.slice(1)}Shape : ${a}, `,i=e[n].shape.length-1,s=Hz(i),o+=`${t.charAt(0).toLowerCase()+t.slice(1)}ShapeStrides: ${s}, `}));let l=Hz(t.shape.length);o+=`outShape : ${l}, `,i=t.shape.length-1,s=Hz(i),o+=`\n         outShapeStrides: ${s}, `,n.size&&(o+="size : i32, "),n.uniforms&&(o+=n.uniforms),o+="};",o=function(e){return e=(e=e.replace(/(\w+)\s*:\s*vec(5|6)/g,(e=>"@align(16) "+e))).replace(/vec(5|6)\s*,\s*(\w+)/g,((e,t,n)=>`vec${t}, @align(16) ${n}`)),e}(o),a.push(o),n.atomic?a.push("\n      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;\n    "):a.push(`\n      @group(0) @binding(0) var<storage, read_write> result: array<${Qz(t.dtype,n.outputComponent)}>;\n    `),n.variableNames.forEach(((t,r)=>{a.push(`\n      @group(0) @binding(${1+r}) var<storage, read> ${t}: array<${n.variableComponents?Qz(e[r].dtype,n.variableComponents[r]):Qz(e[r].dtype,n.outputComponent)}>;\n        `)})),""!==o&&a.push(`\n      @group(0) @binding(${1+n.variableNames.length}) var<uniform> uniforms: Uniforms;\n      `);let u=function(e,t){let{x:n,y:a=[],z:r=[]}=t,i=e.length,s=n.length+a.length+r.length;if(s!==i)return"";if(n.length===i)return`fn getOutputCoords() -> ${Hz(i)}{\n    let globalIndex = getGlobalIndex();\n    return getCoordsFromIndex(globalIndex);\n  }\n  `;let o="",l=[n,a,r];for(let e=0;e<l.length;e++){let t=l[e];if(0!==t.length)if(1===t.length)o+=`let d${t[0]} = i32(globalId[${e}]);`;else{let n=Vz(t,"uniforms.outShape");o+=`var index${e} = i32(globalId[${e}]);`;for(let a=0;a<n.length;a++)o+=`let d${t[a]} = index${e} / ${n[a]};`,a===n.length-1?o+=`let d${t[a+1]} = index${e} - d${t[a]} * ${n[a]};`:o+=`index${e} = index${e} - d${t[a]} * ${n[a]};`}}let u=[];for(let e=0;e<s;e++)u.push(`d${e}`);let d=Hz(s),p=`fn getOutputCoords() -> ${d} {\n  ${o}\n`;return 0===u.length?p+=`return ${d}(0); }`:p+=`return ${d}(${u.join(",")}); }`,p}(t.shape,n.dispatchLayout),d=[Kz,a.join("\n")+"\n  fn isinf(val: f32) -> bool {\n    return abs(val) == uniforms.INFINITY;\n  }\n",Zz(t.shape),u,Yz(t.shape.length)];n.atomic||d.push(function(e,t,n){let a=e.length,r=Qz(t,n),i=`fn setOutputAtIndex(flatIndex : i32, value : ${Gz(n)}) {\n      result[flatIndex] = ${r}(value);\n    }\n\n    fn setOutputAtIndexI32(flatIndex : i32, value : ${Gz(n,"i32")}) {\n      result[flatIndex] = ${r}(value);\n    }\n    `;if(a>=2){let e=["d0","d1","d2","d3","d4","d5"].slice(0,a),t=Hz(a);i+=`\n      fn setOutputAtCoords(${e.map((e=>`${e} : i32`)).join(", ")}, value : ${Gz(n)}) {\n        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));\n        setOutputAtIndex(flatIndex${1===n?"":` / ${n}`}, value);\n      }\n      fn setOutputAtCoordsI32(${e.map((e=>`${e} : i32`)).join(", ")}, value : ${Gz(n,"i32")}) {\n        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));\n        setOutputAtIndexI32(flatIndex${1===n?"":` / ${n}`}, value);\n      }\n    `}return i}(t.shape,t.dtype,n.outputComponent)),n.variableNames.forEach(((t,n)=>{d.push(`${Zz(e[n].shape,t)}`)}));let p=e.map(((e,a)=>function(e,t,n,a){let r=function(e,t){let n=e.name,a=e.shape.length,r=Hz(a),i="get"+n.charAt(0).toUpperCase()+n.slice(1),s=["d0","d1","d2","d3","d4","d5"].slice(0,a),o=s.map((e=>`${e} : i32`)).join(", ");if(a<1)return`\n      fn ${i}() -> ${Gz(t)} {\n        return ${Gz(t)}(${n}[0]);\n      }\n    `;let l=`uniforms.${n.charAt(0).toLowerCase()+n.slice(1)}Shape`,u=`${a}D`;return 0===a&&(u="1D"),`\n    fn ${i}(${o}) -> ${Gz(t)} {\n      return ${Gz(t)}(${n}[getIndexFromCoords${u}(${r}(${s.join(",")}),\n        ${l})${1===t?"":` / ${t}`}]);\n    }\n   `}(e,n);return e.shape.length<=t.length&&(r+=function(e,t,n,a){let r=e.name,i=r.charAt(0).toUpperCase()+r.slice(1),s="get"+i+"ByOutput",o=e.shape.length,l=t.length,u=Hz(l);if(Tr.arraysEqual(e.shape,t)&&a)return`\n    fn ${s}Index(globalIndex : i32) -> ${Gz(n)} {\n      return ${Gz(n)}(${r}[globalIndex]);\n    }\n\n    fn ${s}Coords(coords : ${u}) -> ${Gz(n)} {\n      return ${Gz(n)}(${r}[${l>1?"getOutputIndexFromCoords(coords)":"coords"}${1===n?"":` / ${n}`}]);\n    }\n    `;let d=Bf.getBroadcastDims(e.shape,t),p=l-o,c="";if(0===o)return`\n    fn ${s}Index(globalIndex : i32) -> ${Gz(n)}{\n      return get${i}();\n    }\n\n    fn ${s}Coords(coords : ${u}) -> ${Gz(n)}{\n      return get${i}();\n    }\n  `;c=l<2&&d.length>=1?"coords = 0;":d.map((e=>`coords.${jz(e+p)} = 0;`)).join("\n");let h="";h=l<2&&o>0?"coords":l>1?`${Hz(o)}(${e.shape.map(((e,t)=>`coords.${jz(t+p)}`)).join(", ")})`:"coords";let f=`uniforms.${r.charAt(0).toLowerCase()+r.slice(1)}Shape`,m=`${o}D`;return`\n  fn ${s}Index(globalIndex : i32) -> ${Gz(n)} {\n    var coords = getCoordsFromIndex(globalIndex);\n    ${c}\n    return ${Gz(n)}(${r}[getIndexFromCoords${m}(${h}, ${f})${1===n?"":` / ${n}`}]);\n  }\n\n  fn ${s}Coords(coordsIn : ${u}) -> ${Gz(n)} {\n    var coords = coordsIn;\n    ${c}\n    return ${Gz(n)}(${r}[getIndexFromCoords${m}(${h}, ${f})${1===n?"":` / ${n}`}]);\n  }\n`}(e,t,n,a)),r}(e,t.shape,n.variableComponents?n.variableComponents[a]:n.outputComponent,n.dispatchLayout.x.length===t.shape.length))).join("\n");d.push(p),d.push(n.getUserCode());let c=eL(n);return d.push(Xz(c,n)),d.join("\n")}(n,{dtype:a.dtype,shape:a.shape},t),s=e.createShaderModule({code:i,label:t.constructor.name}),o=He().get("WEBGPU_PRINT_SHADER");if(""!==o){o=o.toLowerCase();let e=o.split(",");("all"===o||e.some((e=>t.shaderKey.toLowerCase().includes(e))))&&(console.group(t.shaderKey),console.debug(i),console.groupEnd())}return r?e.createComputePipelineAsync({compute:{module:s,entryPoint:"_start"},label:t.constructor.name,layout:"auto"}):e.createComputePipeline({compute:{module:s,entryPoint:"_start"},label:t.constructor.name,layout:"auto"})})(this.device,e,i,r,s)),e.pipeline=this.pipelineCache[e.shaderKey],s||this.recordAndSubmit(e,r,t,a),r}recordAndSubmit(e,t,n,a){if(e.pipeline instanceof Promise)throw new Error("Please call checkCompileCompletionAsync to ensure parallel compilation is done!");let r=[],i=[];if(!e.isFromPixels){r.push({type:"float32",data:[NaN]},{type:"float32",data:[1/0]}),i=n.concat(t).map((e=>e.shape));let a="int32";if(i.map((e=>{r.push({type:a,data:e});let t=Tr.computeStrides(e);r.push({type:a,data:t})})),e.size){let t=Tr.sizeFromShape(e.outputShape);r.push({type:a,data:[e.outputComponent?t/e.outputComponent:t]})}}a&&(r=[...r,...a]);let s=[this.tensorToBinding(t),...n.map((e=>this.tensorToBinding(e))),this.makeUniforms(r)];n.forEach((e=>{this.commandQueueOwnedIds.add(e.dataId)})),this.commandQueueOwnedIds.add(t.dataId);let o=this.device.createBindGroup({layout:e.pipeline.getBindGroupLayout(0),entries:s.map(((e,t)=>({binding:t,resource:e})))}),l=null!=this.activeTimers;this.ensureCommandEncoderReady();let u={};l&&this.supportTimestampQuery?(this.endComputePassEncoder(),null==this.querySet&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),u.timestampWrites=[{querySet:this.querySet,queryIndex:0,location:"beginning"},{querySet:this.querySet,queryIndex:1,location:"end"}],this.computePassEncoder=this.commandEncoder.beginComputePass(u)):this.computePassEncoder||(this.computePassEncoder=this.commandEncoder.beginComputePass(u)),this.computePassEncoder.setPipeline(e.pipeline),this.computePassEncoder.setBindGroup(0,o),this.computePassEncoder.dispatchWorkgroups(e.dispatch[0],e.dispatch[1],e.dispatch[2]),this.dispatchCountInPass++,(l||He().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE")<=this.dispatchCountInPass)&&(this.endComputePassEncoder(),l?this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime()}):this.submitQueue())}async getQueryTime(){if(!this.supportTimestampQuery)return 0;null==this.queryResolveBuffer&&(this.queryResolveBuffer=this.bufferManager.acquireBuffer(8*this.querySetCount,GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST|GPUBufferUsage.QUERY_RESOLVE)),this.commandEncoder.resolveQuerySet(this.querySet,0,this.querySetCount,this.queryResolveBuffer,0);let e=this.bufferManager.acquireBuffer(8*this.querySetCount,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,8*this.querySetCount),this.submitQueue(),await e.mapAsync(GPUMapMode.READ);let t=new BigUint64Array(e.getMappedRange()),n=Number(t[1]-t[0])/1e6;return e.unmap(),this.bufferManager.releaseBuffer(e),n}shouldExecuteOnCPU(e,t=fL){return He().getBool("WEBGPU_CPU_FORWARD")&&e.every((e=>null==this.tensorMap.get(e.dataId).resource&&Tr.sizeFromShape(e.shape)<t))}numDataIds(){return this.tensorMap.numDataIds()-this.tensorDataPendingDisposal.length}dispose(){this.disposed||(null!=this.querySet&&this.querySet.destroy(),this.bufferManager.dispose(),this.textureManager.dispose(),this.disposed=!0)}};mL.nextDataId=0,pL()&&mo("webgpu",(async()=>{let e={powerPreference:He().get("WEBGPU_USE_LOW_POWER_GPU")?"low-power":"high-performance"},t=await navigator.gpu.requestAdapter(e),n={};t.features.has("timestamp-query")&&(n.requiredFeatures=["timestamp-query"]);let a=t.limits;n.requiredLimits={maxComputeWorkgroupStorageSize:a.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:a.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:a.maxStorageBufferBindingSize,maxBufferSize:a.maxBufferSize,maxComputeWorkgroupSizeX:a.maxComputeWorkgroupSizeX,maxComputeInvocationsPerWorkgroup:a.maxComputeInvocationsPerWorkgroup};let r=await t.requestDevice(n),i=await t.requestAdapterInfo();return new mL(r,i)}),3),function(e){e[e.ADD=0]="ADD",e[e.ATAN2=1]="ATAN2",e[e.COMPLEX_MULTIPLY_IMAG=2]="COMPLEX_MULTIPLY_IMAG",e[e.COMPLEX_MULTIPLY_REAL=3]="COMPLEX_MULTIPLY_REAL",e[e.DIV=4]="DIV",e[e.ELU_DER=5]="ELU_DER",e[e.EQUAL=6]="EQUAL",e[e.GREATER=7]="GREATER",e[e.GREATER_EQUAL=8]="GREATER_EQUAL",e[e.INT_DIV=9]="INT_DIV",e[e.LESS=10]="LESS",e[e.LESS_EQUAL=11]="LESS_EQUAL",e[e.LOGICAL_AND=12]="LOGICAL_AND",e[e.LOGICAL_OR=13]="LOGICAL_OR",e[e.MAX=14]="MAX",e[e.MIN=15]="MIN",e[e.MOD=16]="MOD",e[e.MUL=17]="MUL",e[e.NOT_EQUAL=18]="NOT_EQUAL",e[e.POW=19]="POW",e[e.PRELU=20]="PRELU",e[e.SQUARED_DIFFERENCE=21]="SQUARED_DIFFERENCE",e[e.SUB=22]="SUB"}(hL||(hL={}));var yL,gL="return a + b;",AL="var resultTemp = atan2(a, b);",xL="return areal * breal - aimag * bimag;",bL="return areal * bimag + aimag * breal;",vL="return a / b;",wL="return select(a * (b + 1.0), a, b >= 0.);",kL="return select(a * (b + vec4<f32>(1.0)), a, b >= vec4<f32>(0.));",IL="return f32(a == b);",SL="return vec4<f32>(a == b);",NL="return f32(a > b);",CL="return vec4<f32>(a > b);",TL="return f32(a >= b);",EL="return vec4<f32>(a >= b);",RL="\n  let s = sign(a) * sign(b);\n  let ia = i32(round(a));\n  let ib = i32(round(b));\n  return f32(idiv(ia, ib, s));\n",$L="\n  let ia = vec4<i32>(round(a));\n  let ib = vec4<i32>(round(b));\n  let cond = ib != vec4<i32>(0);\n  var resultTemp = vec4<i32>(0);\n  let s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    resultTemp[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    resultTemp[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    resultTemp[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    resultTemp[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4<f32>(resultTemp);\n",ML="return f32(a < b);",_L="return vec4<f32>(a < b);",FL="return f32(a <= b);",OL="return vec4<f32>(a <= b);",PL="return f32(a >= 1.0 && b >= 1.0);",DL="return (vec4<f32>(a >= vec4<f32>(1.0)) *\n  vec4<f32>(b >= vec4<f32>(1.0)));",zL="return f32(a >= 1.0 || b >= 1.0);",LL="return min(vec4<f32>(a >= vec4<f32>(1.0)) +\n  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));",WL="var resultTemp = max(a, b);",BL="var resultTemp = min(a, b);",VL="\n  let isNaN = b == 0.;\n  var resultTemp = a % b;\n  resultTemp = select((resultTemp + b) % b, resultTemp,\n      (a < 0. && b < 0.) || (a >= 0. && b > 0.));\n",UL="\n  let isNaN = !vec4<bool>(b);\n  var resultTemp = vec4<f32>(a % b);\n  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {\n    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];\n  }\n  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {\n    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];\n  }\n  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {\n    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];\n  }\n  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {\n    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];\n  }\n",GL="return a * b;",HL="\n  var resultTemp = f32(a != b);\n  let valueForNaN = 1.0;\n",jL="\n  var resultTemp = vec4<f32>(a != b);\n  let valueForNaN = 1.0;\n",qL="\n  let isNaN = a < 0.0 && floor(b) < b;\n  if (b == 0.0) {\n    return 1.0;\n  }\n  var resultTemp = select(sign(a) * pow(abs(a), b), pow(abs(a), b),\n      round(abs(b) % 2.0) != 1.0);\n",XL="\n  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);\n  let isModRound1 = vec4<f32>(isModRound1Bool);\n  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);\n  var resultTemp = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  let isExpZero = b == vec4<f32>(0.0);\n  if (isExpZero.r) {\n    resultTemp.r = 1.0;\n  }\n  if (isExpZero.g) {\n    resultTemp.g = 1.0;\n  }\n  if (isExpZero.b) {\n    resultTemp.b = 1.0;\n  }\n  if (isExpZero.a) {\n    resultTemp.a = 1.0;\n  }\n  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);\n",KL="if (a < 0.0) { return b * a; }  return a;",ZL="\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n",YL="return (a - b) * (a - b);",JL="return a - b;";function QL(e,t){let n;do{switch(e){case hL.ATAN2:n=AL;break;case hL.MAX:n=WL;break;case hL.MIN:n=BL;break;case hL.MOD:n=t?UL:VL;break;case hL.NOT_EQUAL:n=t?jL:HL;break;case hL.POW:n=t?XL:qL;break;default:continue}let a,r,i;return t?(a="isnanVec4",r="vec4<f32>",i="vec4<bool>"):(a="isnan",r="f32",i="bool"),`\n      let aIsNaN = ${a}(a);\n      let aPostLegalization = select(a, ${r}(42), aIsNaN);\n      let bIsNaN = ${a}(b);\n      let bPostLegalization = select(b, ${r}(42), bIsNaN);\n      let isNaN = false;\n      let valueForNaN = uniforms.NAN;\n      {\n        let a = aPostLegalization;\n        let b = bPostLegalization;\n        ${n}\n        return select(\n            resultTemp, ${r}(valueForNaN),\n            ${i}(isNaN) | aIsNaN | bIsNaN);\n      }\n    `}while(0);switch(e){case hL.ADD:return gL;case hL.COMPLEX_MULTIPLY_IMAG:return bL;case hL.COMPLEX_MULTIPLY_REAL:return xL;case hL.DIV:return vL;case hL.ELU_DER:return t?kL:wL;case hL.EQUAL:return t?SL:IL;case hL.GREATER:return t?CL:NL;case hL.GREATER_EQUAL:return t?EL:TL;case hL.INT_DIV:return t?$L:RL;case hL.LESS:return t?_L:ML;case hL.LESS_EQUAL:return t?OL:FL;case hL.LOGICAL_AND:return t?DL:PL;case hL.LOGICAL_OR:return t?LL:zL;case hL.MUL:return GL;case hL.PRELU:return t?ZL:KL;case hL.SQUARED_DIFFERENCE:return YL;case hL.SUB:return JL}return`\n    ${n}\n    return resultTemp;\n  `}!function(e){e[e.ABS=0]="ABS",e[e.ACOS=1]="ACOS",e[e.ACOSH=2]="ACOSH",e[e.ASIN=3]="ASIN",e[e.ASINH=4]="ASINH",e[e.ATAN=5]="ATAN",e[e.ATANH=6]="ATANH",e[e.CEIL=7]="CEIL",e[e.COS=8]="COS",e[e.COSH=9]="COSH",e[e.ELU=10]="ELU",e[e.ERF=11]="ERF",e[e.EXP=12]="EXP",e[e.EXPM1=13]="EXPM1",e[e.FLOOR=14]="FLOOR",e[e.IS_FINITE=15]="IS_FINITE",e[e.IS_INF=16]="IS_INF",e[e.IS_NAN=17]="IS_NAN",e[e.LINEAR=18]="LINEAR",e[e.LOG=19]="LOG",e[e.LOG1P=20]="LOG1P",e[e.LOGICAL_NOT=21]="LOGICAL_NOT",e[e.NEG=22]="NEG",e[e.RELU=23]="RELU",e[e.RELU6=24]="RELU6",e[e.LEAKYRELU=25]="LEAKYRELU",e[e.RECIPROCAL=26]="RECIPROCAL",e[e.ROUND=27]="ROUND",e[e.RSQRT=28]="RSQRT",e[e.SELU=29]="SELU",e[e.SIGMOID=30]="SIGMOID",e[e.SIGN=31]="SIGN",e[e.SIN=32]="SIN",e[e.SINH=33]="SINH",e[e.SOFTPLUS=34]="SOFTPLUS",e[e.SQRT=35]="SQRT",e[e.SQUARE=36]="SQUARE",e[e.STEP=37]="STEP",e[e.TAN=38]="TAN",e[e.TANH=39]="TANH",e[e.TO_INT=40]="TO_INT"}(yL||(yL={}));var eW="return abs(a);",tW="\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return acos(a);\n",nW="\n  if (a < 1.) {\n    return uniforms.NAN;\n  }\n  return acosh(a);\n",aW="\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return asin(a);\n",rW="return asinh(a);",iW="\n  if (isnan(a)) {\n    return uniforms.NAN;\n  }\n  return atan(a);\n",sW="\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  if (a == 1.) {\n    return uniforms.INFINITY;\n  }\n  if (a == -1.) {\n    return -uniforms.INFINITY;\n  }\n  return atanh(a);\n",oW="return ceil(a);",lW="return cos(a);",uW="\n  let e2x = exp(-a);\n  return (e2x + 1.0 / e2x) / 2.0;\n",dW="return exp(a) - 1.0;",pW="if (a >= 0.0) { return a; }  return (exp(a) - 1.0);",cW="\n  var resFloat = exp(a) - vec4<f32>(1.0);\n  if (a.r >= 0.0) {\n    resFloat.r = a.r;\n  }\n  if (a.g >= 0.0) {\n    resFloat.g = a.g;\n  }\n  if (a.b >= 0.0) {\n    resFloat.b = a.b;\n  }\n  if (a.a >= 0.0) {\n    resFloat.a = a.a;\n  }\n  return resFloat;\n",hW=`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  let p = ${Bf.ERF_P};\n  let a1 = ${Bf.ERF_A1};\n  let a2 = ${Bf.ERF_A2};\n  let a3 = ${Bf.ERF_A3};\n  let a4 = ${Bf.ERF_A4};\n  let a5 = ${Bf.ERF_A5};\n\n  let sign = sign(a);\n  let absA = abs(a);\n  let t = 1.0 / (1.0 + p * absA);\n  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));\n`,fW="return exp(a);",mW="return floor(a);",yW="return f32(!isnan(a) && !isinf(a));",gW="return f32(isinf(a));",AW="return f32(isnan(a));",xW="return a;",bW="if (a < 0.0) { return uniforms.NAN; }\n  return log(a);",vW="\n  if (isnan(a)) { return a; }\n  return log(1.0 + a);\n",wW="return f32(!(a >= 1.0));",kW="return -a;",IW="if (a < 0.0) { return uniforms.alpha * a; } return a;",SW="\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n",NW="return 1.0 / a;",CW="return select(a, 0.0, a < 0.0);",TW="return clamp(a, 0.0, 6.0);",EW="return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));",RW="\n  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));\n",$W="return round(a);",MW="return inverseSqrt(a);",_W=`\n  if (a >= 0.0) {\n    return ${Bf.SELU_SCALE} * a;\n  } else {\n    return ${Bf.SELU_SCALEALPHA} * (exp(a) - 1.0);\n  }\n`,FW="return 1.0 / (1.0 + exp(-1.0 * a));",OW="return sign(a);",PW="return sin(a);",DW="\n  let e2x = exp(a);\n  return (e2x - 1.0 / e2x) / 2.0;\n",zW="\n  let epsilon = 1.1920928955078125e-7;\n  let threshold = log(epsilon) + 2.0;\n\n  let too_large = a > -threshold;\n  let too_small = a < threshold;\n  let exp_a = exp(a);\n\n  if (too_large) {\n    return a;\n  } else if (too_small) {\n    return exp_a;\n  } else {\n    return log(exp_a + 1.0);\n  }\n",LW="return sqrt(a);",WW="return a * a;",BW="\n  if (isnan(a)) {\n    return a;\n  }\n\n  return select(uniforms.stepAlpha, 1.0, a > 0.0);\n",VW="return tan(a);",UW="\n  let e2x = exp(-2.0 * abs(a));\n  return sign(a) * (1.0 - e2x) / (1.0 + e2x);\n",GW="return f32(i32((a)));";function HW(e,t){switch(e){case yL.ABS:return eW;case yL.ACOS:return tW;case yL.ACOSH:return nW;case yL.ASIN:return aW;case yL.ASINH:return rW;case yL.ATAN:return iW;case yL.ATANH:return sW;case yL.COS:return lW;case yL.COSH:return uW;case yL.CEIL:return oW;case yL.ELU:return t?cW:pW;case yL.ERF:return hW;case yL.EXP:return fW;case yL.EXPM1:return dW;case yL.FLOOR:return mW;case yL.IS_FINITE:return yW;case yL.IS_INF:return gW;case yL.IS_NAN:return AW;case yL.LINEAR:return xW;case yL.LOG:return bW;case yL.LOG1P:return vW;case yL.LOGICAL_NOT:return wW;case yL.NEG:return kW;case yL.LEAKYRELU:return t?SW:IW;case yL.RECIPROCAL:return NW;case yL.RELU:return t?RW:CW;case yL.RELU6:return t?EW:TW;case yL.ROUND:return $W;case yL.RSQRT:return MW;case yL.SELU:return _W;case yL.SIGMOID:return FW;case yL.SIGN:return OW;case yL.SIN:return PW;case yL.SINH:return DW;case yL.SOFTPLUS:return zW;case yL.SQRT:return LW;case yL.SQUARE:return WW;case yL.STEP:return BW;case yL.TAN:return VW;case yL.TANH:return UW;case yL.TO_INT:return GW;default:throw new Error(`BinaryType ${e} is not implemented!`)}}function jW(e,t=!1,n=!1,a=3){if(null===e)return"";let r="";if("linear"===e)r=HW(yL.LINEAR);else if("relu"===e)r=HW(yL.RELU,n);else if("elu"===e)r=HW(yL.ELU,n);else if("relu6"===e)r=HW(yL.RELU6,n);else if("prelu"===e)r=QL(hL.PRELU,n);else if("sigmoid"===e)r=HW(yL.SIGMOID,n);else{if("leakyrelu"!==e)throw new Error(`Activation ${e} has not been implemented for the WebGPU backend.`);r=HW(yL.LEAKYRELU,n)}let i=Gz(n?4:1),s="";return s=t?`\n      fn activation(a : ${i}, coords : vec${a}<i32>) -> ${i} {\n        let b = getPreluActivationWeightsByOutputCoords(coords);\n        ${r}\n      }`:`\n      fn activation(a : ${i}, coords : vec${a}<i32>) -> ${i} {\n        ${r}\n      }`,s}function qW(e,t){return`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      ${t?"value = activation(value, coords);":""}\n      `}function XW(e,t,n=!1,a=!1,r=!1,i=1){Tr.assert(e&&1===i||!e,(()=>`transposeA ${e} is not compatible with component size ${i}`));let s=`\n      ${e?"value = getA(batch, col, row);":"value = getA(batch, row, col);"}\n\n    `,o=t?"value = getB(batch, col, row);":"value = getB(batch, row, col);";return`\n  fn mm_readA(batch: i32, row: i32, colIn: i32) -> ${Gz(i)} {\n    var value = ${Gz(i)}(0.0);\n    let col = colIn * ${i};\n    ${n&&r?s:`\n    ${e?"if(row < uniforms.dimAOuter && col < uniforms.dimInner)":"if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}\n    {\n      ${s}\n    }\n    `}\n    return value;\n  }\n\n  fn mm_readB(batch: i32, row: i32, colIn: i32) -> ${Gz(i)} {\n    let col = colIn * ${i};\n    var value = ${Gz(i)}(0.0);\n    ${o}\n    return value;\n  }\n  `}function KW(e,t,n,a,r=!1,i=!1,s=!1,o=1){return`\n  ${XW(n,a,r,i,s,o)}\n  fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Gz(o)}) {\n    let col = colIn * ${o};\n    ${r&&i?"":"if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}\n    {\n      var value = valueIn;\n      let coords = vec3<i32>(batch, row, col);\n      ${qW(e,t)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], value);\n    }\n  }\n  `}function ZW(e,t,n=!1,a=32,r=!1,i=32,s=!1){let o=t[1]*e[1],l=t[0]*e[0],u=n?o:a,d=n?a:o,p=u/t[0],c=a/t[1],h=e[1];return Tr.assert((n&&4===p&&4===e[1]||!n&&(3===p||4===p))&&u%t[0]==0&&a%t[1]==0&&4===e[0],(()=>`If transposeA ${n} is true, innerElementSize ${p} and workPerThread[1] ${e[1]} must be 4.\n          Otherwise, innerElementSize ${p} must be 3 or 4.\n      tileAWidth ${u} must be divisible by workgroupSize[0]${t[0]}. tileInner ${a} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`)),`\n  var<workgroup> mm_Asub : array<array<vec${p}<f32>, ${u/p}>, ${d}>;\n  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${l/e[0]}>, ${a}>;\n\n  ${qz()} {\n    let localRow = i32(localId.y);\n    let tileRow = localRow * ${h};\n    let tileCol = i32(localId.x);\n\n    let globalRow = i32(globalId.y) * ${h};\n    let globalCol = i32(globalId.x);\n    let batch = ${r?"0":"i32(globalId.z)"};\n    let batchA = ${r||!s?"batch":"batch % uniforms.aShape[0]"};\n    let batchB = ${r||!s?"batch":"batch % uniforms.bShape[0]"};\n    let globalRowStart = i32(workgroupId.y) * ${o};\n\n    let numTiles = ${r?`${Math.ceil(i/a)}`:`(uniforms.dimInner - 1) / ${a} + 1`};\n    var kStart = ${r?`i32(globalId.z) * ${i}`:"0"};\n\n    var acc: array<vec4<f32>, ${h}>;\n\n    // Loop over shared dimension.\n    let tileRowB = localRow * ${c};\n    for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var innerRow = 0; innerRow < ${h}; innerRow++) {\n            let inputRow = tileRow + innerRow;\n            let inputCol = tileCol;\n            ${((e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart / ${t} + inputCol);\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRow + innerRow,\n          kStart / ${t} + inputCol);\n        `)(n,p)}\n        }\n\n        // Load one tile of B into local memory.\n        for (var innerRow = 0; innerRow < ${c}; innerRow++) {\n            let inputRow = tileRowB + innerRow;\n            let inputCol = tileCol;\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);\n        }\n        kStart = kStart + ${a};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < ${a/p}; k++) {\n            let BCached0 = mm_Bsub[k * ${p}][tileCol];\n            let BCached1 = mm_Bsub[k * ${p} + 1][tileCol];\n            let BCached2 = mm_Bsub[k * ${p} + 2][tileCol];\n            ${3===p?"":`let BCached3 = mm_Bsub[k * ${p} + 3][tileCol];`}\n\n            ${((e,t,n)=>e?`\n        let ACached0 = mm_Asub[k * ${t}][localRow];\n        let ACached1 = mm_Asub[k * ${t} + 1][localRow];\n        let ACached2 = mm_Asub[k * ${t} + 2][localRow];\n        ${3===t?"":`let ACached3 = mm_Asub[k * ${t} + 3][localRow];`}\n        for (var i = 0; i < ${n}; i++) {\n          acc[i] = fma(BCached0, vec4<f32>(ACached0[i]), acc[i]);\n          acc[i] = fma(BCached1, vec4<f32>(ACached1[i]), acc[i]);\n          acc[i] = fma(BCached2, vec4<f32>(ACached2[i]), acc[i]);\n          ${3===t?"":"acc[i] = fma(BCached3, vec4<f32>(ACached3[i]), acc[i]);"}\n        }`:`\n        for (var i = 0; i < ${n}; i++) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = fma(BCached0, vec4<f32>(ACached.x), acc[i]);\n          acc[i] = fma(BCached1, vec4<f32>(ACached.y), acc[i]);\n          acc[i] = fma(BCached2, vec4<f32>(ACached.z), acc[i]);\n          ${3===t?"":"acc[i] = fma(BCached3, vec4<f32>(ACached.w), acc[i]);"}\n        }`)(n,p,h)}\n        }\n\n        workgroupBarrier();\n    }\n\n    for (var innerRow = 0; innerRow < ${h}; innerRow++) {\n        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n    }\n  }`}var YW=e=>e?"\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol);\n        ":"\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRowStart + inputRow,\n          kStart + inputCol);\n        ";function JW(e,t,n=!1,a=32,r=!1,i=32,s=!1,o=!1){let l=e[1]*t[1],u=e[0]*t[0],d=n?l:a,p=n?a:l;Tr.assert(p%t[1]==0&&d%t[0]==0&&a%t[1]==0,(()=>`tileAHight ${p} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${d} must be divisible by workgroupSize[0]${t[0]}, tileInner ${a} must be divisible by workgroupSize[1]${t[1]}`));let c=p/t[1],h=d/t[0],f=a/t[1],m=e[1],y=e[0],g=s?`\n      let localRow = i32(localId.y);\n      let localCol = i32(localId.x);\n      let globalRowStart = i32(workgroupId.y) * ${l};\n      let globalColStart = i32(workgroupId.x) * ${u};\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var inputRow = localRow; inputRow < ${p}; inputRow = inputRow + ${t[1]}) {\n          for (var inputCol = localCol; inputCol < ${d}; inputCol = inputCol + ${t[0]}) {\n            ${YW(n)}\n          }\n        }\n        // Load one tile of B into local memory.\n        for (var inputRow = localRow; inputRow < ${a}; inputRow = inputRow + ${t[1]}) {\n              for (var inputCol = localCol; inputCol < ${u}; inputCol = inputCol + ${t[0]}) {\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n              kStart + inputRow,\n              globalColStart + inputCol);\n          }\n        }\n        kStart = kStart + ${a};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        var BCached : array<f32, ${y}>;\n        for (var k = 0; k < ${a}; k++) {\n          for (var inner = 0; inner < ${y}; inner++) {\n            BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n          }\n          for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n            let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n            for (var innerCol = 0; innerCol < ${y}; innerCol++) {\n              acc[innerRow][innerCol] =\n                  fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);\n            }\n          }\n        }\n        workgroupBarrier();\n      }\n      for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n        let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n        for (var innerCol = 0; innerCol < ${y}; innerCol++) {\n          let gCol = globalColStart + localCol + innerCol * ${t[0]};\n          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n        }\n      }\n      `:`\n  let tileRow = i32(localId.y) * ${m};\n  let tileCol = i32(localId.x) * ${y};\n\n  let globalRow = i32(globalId.y) * ${m};\n  let globalCol = i32(globalId.x) * ${y};\n  let globalRowStart = i32(workgroupId.y) * ${l};\n\n  let tileRowA = i32(localId.y) * ${c};\n  let tileColA = i32(localId.x) * ${h};\n  let tileRowB = i32(localId.y) * ${f};\n  // Loop over shared dimension.\n  for (var t = 0; t < numTiles; t++) {\n    // Load one tile of A into local memory.\n    for (var innerRow = 0; innerRow < ${c}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${h}; innerCol++) {\n        let inputRow = tileRowA + innerRow;\n        let inputCol = tileColA + innerCol;\n        ${YW(n)}\n      }\n    }\n\n    // Load one tile of B into local memory.\n    for (var innerRow = 0; innerRow < ${f}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${y}; innerCol++) {\n        let inputRow = tileRowB + innerRow;\n        let inputCol = tileCol + innerCol;\n        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n          kStart + inputRow,\n          globalCol + innerCol);\n      }\n    }\n    kStart = kStart + ${a};\n    workgroupBarrier();\n\n    // Compute acc values for a single thread.\n    var BCached : array<f32, ${y}>;\n    for (var k = 0; k < ${a}; k++) {\n      for (var inner = 0; inner < ${y}; inner++) {\n        BCached[inner] = mm_Bsub[k][tileCol + inner];\n      }\n\n      for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n        ${(e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];")(n)}\n        for (var innerCol = 0; innerCol < ${y}; innerCol++) {\n          acc[innerRow][innerCol] =\n              fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);\n        }\n      }\n    }\n\n    workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n    for (var innerCol = 0; innerCol < ${y}; innerCol++) {\n      mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n          acc[innerRow][innerCol]);\n    }\n  }\n  `;return`\n    var<workgroup> mm_Asub : array<array<f32, ${d}>, ${p}>;\n    var<workgroup> mm_Bsub : array<array<f32, ${u}>, ${a}>;\n\n    ${qz()} {\n      let batch = ${r?"0":"i32(globalId.z)"};\n      let batchA = ${r||!o?"batch":"batch % uniforms.aShape[0]"};\n      let batchB = ${r||!o?"batch":"batch % uniforms.bShape[0]"};\n      let numTiles = ${r?`${Math.ceil(i/a)}`:`(uniforms.dimInner - 1) / ${a} + 1`};\n      var kStart = ${r?`i32(globalId.z) * ${i}`:"0"};\n\n      var acc : array<array<f32, ${y}>, ${m}>;\n\n      // Without this initialization strange values show up in acc.\n      for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n        for (var innerCol = 0; innerCol < ${y}; innerCol++) {\n          acc[innerRow][innerCol] = 0.0;\n        }\n      }\n      ${g}\n    }\n  `}var QW=class{constructor(e,t,n=!1,a=!1,r=null,i=null,s=null,o=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t,this.dispatchLayout={x:[2],y:[1],z:[0]};let l=n?e[1]:e[2];if(this.isVec4=(l%4==0&&!n||t[1]%4==0&&n)&&t[2]%4==0&&!a,this.outputComponent=this.isVec4?4:1,this.isVectorA=1===t[1]&&!n,!this.isVec4&&this.isVectorA)this.elementsPerThread=[1,1,1],this.workgroupSize=[32,1,1];else{let e=sL(t[1],l,t[2],n);this.workgroupSize=e.workgroupSize,this.elementsPerThread=e.elementsPerThread}this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread);let u=null!=r,d=null!=s;u&&this.variableNames.push("bias"),d&&this.variableNames.push("preluActivationWeights"),this.sequentialAccessByThreads=o,this.transposeA=n,this.transposeB=a,this.addBias=u,this.activation=i,this.hasPreluActivationWeights=d,[this.fitAOuter,this.fitBOuter,this.fitInner]=this.getShapeFit(t[1],t[2],l),this.shaderKey=`matMulPacked_${this.elementsPerThread}_${n}_${a}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.sequentialAccessByThreads}`}getShapeFit(e,t,n){let a=this.workgroupSize[1]*this.elementsPerThread[1],r=this.workgroupSize[0]*this.elementsPerThread[0];return!this.isVec4&&this.isVectorA?this.tileInner=4*this.workgroupSize[0]:this.tileInner=r,[e%a==0,t%r==0,n%this.tileInner==0]}getUserCode(){return`\n      ${jW(this.activation,this.hasPreluActivationWeights,this.isVec4)}\n      ${KW(this.addBias,this.activation,!1,this.transposeB,this.fitAOuter,this.fitBOuter,this.fitInner,this.isVec4?4:1)}\n      ${this.isVec4?ZW(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,!0):this.isVectorA?function(e,t=!1){Tr.assert(1===e[1]&&1===e[2],(()=>`A linear work group size is required. But got ${e}.`));let n=4*e[0];return`\n    var<workgroup> mm_Asub : array<vec4<f32>, ${e[0]}>;\n\n    ${qz()} {\n      let tileCol = i32(localId.x);\n      let globalCol = i32(globalId.x);\n      let globalRow = i32(globalId.y);\n\n      let numTiles = (uniforms.dimInner - 1) / ${n} + 1;\n      let batch = i32(globalId.z);\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      // Without this initialization strange values show up in acc.\n      var acc = 0.0;\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        let colA = t * ${n} + tileCol * 4;\n        mm_Asub[tileCol] = vec4<f32>(${(e=>e?"\n      mm_readA(batchA, colA, globalRow),\n      mm_readA(batchA, colA + 1, globalRow),\n      mm_readA(batchA, colA + 2, globalRow),\n      mm_readA(batchA, colA + 3, globalRow)\n  ":"\n      mm_readA(batchA, globalRow, colA),\n      mm_readA(batchA, globalRow, colA + 1),\n      mm_readA(batchA, globalRow, colA + 2),\n      mm_readA(batchA, globalRow, colA + 3)\n  ")(t)});\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < ${n/4}; k++) {\n          let rowB = t * ${n} + k * 4;\n          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),\n                              mm_readB(batchB, rowB + 1, globalCol),\n                              mm_readB(batchB, rowB + 2, globalCol),\n                              mm_readB(batchB, rowB + 3, globalCol));\n\n          let ACached = mm_Asub[k];\n          acc = acc + dot(ACached, BCached);\n        }\n\n        workgroupBarrier();\n      }\n\n      mm_write(batch, globalRow, globalCol, acc);\n    }\n  `}(this.workgroupSize,this.transposeA):JW(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,this.sequentialAccessByThreads,!0)}\n    `}},eB=class{constructor(e,t=!1,n=!1,a=null,r=null,i=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout={x:[],y:[1,2],z:[0]},this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize);let s=null!=a,o=null!=i;s&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),this.transposeA=t,this.transposeB=n,this.addBias=s,this.activation=r,this.hasPreluActivationWeights=o,this.shaderKey=`matMulReduce_${this.activation}_${t}_${n}`}getUserCode(){return`\n      ${jW(this.activation,this.hasPreluActivationWeights)}\n      ${KW(this.addBias,this.activation,this.transposeA,this.transposeB)}\n      ${function(e){return`\n    var<workgroup> sumValues : array<f32, ${e}>;\n    ${qz()} {\n      let coords = getOutputCoords();\n      let batch = coords[0];\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      let row = coords[1];\n      let col = coords[2];\n      var sum = 0.0;\n      let Length = uniforms.dimInner;\n      for (var k = i32(localId.x); k < Length; k = k + ${e}) {\n        let dataA = mm_readA(batchA, row, k);\n        let dataB = mm_readB(batchB, k, col);\n        sum = sum + dataA * dataB;\n      }\n      sumValues[localId.x] = sum;\n      workgroupBarrier();\n\n      for(var currentSize = ${e/2}u; currentSize > 1u;\n          currentSize = currentSize / 2u) {\n        if (localId.x < currentSize)\n        {\n          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (localId.x == 0u) {\n        sum = sumValues[0] + sumValues[1];\n        mm_write(batch, row, col, sum);\n      }\n    }\n  `}(this.workgroupSize[0])}\n    `}},tB=class{constructor(e,t,n,a=!1,r=!1,i=null,s=null,o=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[16,8,1],this.outputShape=n,this.dispatchLayout={x:[2],y:[1],z:[0]},this.dispatch=[Math.ceil(n[2]/this.workgroupSize[0]),Math.ceil(n[1]/this.workgroupSize[1]),n[0]];let l=null!=i;l&&this.variableNames.push("bias");let u=null!=o;u&&this.variableNames.push("preluActivationWeights"),this.transposeA=a,this.transposeB=r,this.addBias=l,this.activation=s,this.hasPreluActivationWeights=u,this.shaderKey=`matMulSmallOutputSize_${this.activation}_${a}_${r}`}getUserCode(){return`\n      ${jW(this.activation,this.hasPreluActivationWeights)}\n      ${KW(this.addBias,this.activation,this.transposeA,this.transposeB)}\n      ${function(e){let t=e[1],n=e[0],a=t>n?t:n;return`\n  var<workgroup> mm_Asub : array<array<f32, ${a}>, ${t}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${n}>, ${a}>;\n\n  // If the output size is small for matrix multiplication, avoid to use vec4\n  // and handle some elements per thread to optimally utilize the ALU.\n  // Read data from global memory to registers firstly, then store them into\n  // shared memory, so it is instruction-Level parallelism for arithmetic\n  // operations and others handle IO operations between barrier api, makes ALU\n  // and load/store units work simultaneously, could improves the performance.\n  ${qz()} {\n    let tileRow = i32(localId.y);\n    let tileCol = i32(localId.x);\n    let globalRow = i32(globalId.y);\n    let globalCol = i32(globalId.x);\n    let batch = i32(globalId.z);\n    let batchA = batch % uniforms.aShape[0];\n    let batchB = batch % uniforms.bShape[0];\n\n    // uniforms.dimInner should be greater than 0.\n    let numTiles = (uniforms.dimInner - 1) / ${a} + 1;\n    var acc = 0.0;\n\n    var globalColA = tileCol;\n    var globalRowB = 0;\n    var regA = mm_readA(batchA, globalRow, globalColA);\n    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n    globalColA = globalColA + ${a};\n    globalRowB = globalRowB + ${a};\n\n    for (var t = 0; t < numTiles; t = t + 1) {\n      mm_Asub[tileRow][tileCol] = regA;\n      mm_Bsub[2 * tileRow][tileCol] = regB0;\n      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;\n\n      workgroupBarrier();\n\n      regA = mm_readA(batchA, globalRow, globalColA);\n      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n      globalColA = globalColA + ${a};\n      globalRowB = globalRowB + ${a};\n\n      for (var k = 0; k < ${a}; k = k + 1) {\n        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];\n      }\n      workgroupBarrier();\n    }\n\n    mm_write(batch, globalRow, globalCol, acc);\n  }\n  `}(this.workgroupSize)}\n    `}},nB=class{constructor(e,t,n=!1,a=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[8,8,1],this.atomic=!0,this.splitedDimInner=128,Tr.assert(1===e[0],(()=>"MatMulSplitKProgram only supports batch = 1.")),this.outputShape=e,this.dispatchLayout={x:[2],y:[1],z:[0,3]};let r=(n&&this.outputShape[1]%4==0||!n&&t%4==0)&&this.outputShape[2]%4==0;this.elementsPerThread=[4,4,this.splitedDimInner],this.outputComponent=r?4:1,r||(this.outputShape[1]<16&&(this.elementsPerThread[1]=1),this.outputShape[2]<16&&(this.elementsPerThread[0]=1)),this.dispatch=iL(this.dispatchLayout,[this.outputShape[0],this.outputShape[1],this.outputShape[2],t],this.workgroupSize,this.elementsPerThread),this.transposeA=n,this.transposeB=a,this.shaderKey=`matMulSplitK_${n}_${a}_${this.elementsPerThread}_${this.outputComponent}`}getUserCode(){let e=this.outputComponent;return`\n      ${XW(!1,this.transposeB,!1,!1,!1,e)}\n      fn mm_write(batch: i32, row : i32, colIn : i32, value : ${Gz(e)}) {\n        let col = colIn * ${e};\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n          let coords = vec3<i32>(batch, row, col);\n          let flatIndex = getOutputIndexFromCoords(coords);\n          // The problem is that we should initialize output to zero before using.\n          // Otherwise, the original value will be added to the result.\n          for (var i = 0; i < ${e}; i = i + 1) {\n            ${Uz("&result[flatIndex + i]",e>1?"value[i]":"value","float32")}\n          }\n        }\n      }\n      ${4===e?ZW(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner):JW(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner)}\n    `}},aB=class{constructor(e,t=null,n=null,a=null){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=null!=t,this.hasPreluActivationWeights=null!=a,this.activation=n,this.addBias&&this.variableNames.push("bias"),this.hasPreluActivationWeights&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`biasActivation_${n}`}getUserCode(){return`\n    ${jW(this.activation,this.hasPreluActivationWeights)}\n    ${qz("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        var value = getXByOutputIndex(index);\n        ${qW(this.addBias,this.activation)}\n        setOutputAtIndex(index, value);\n      }\n    }\n    `}},rB=class{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="value : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="fill"}getUserCode(){return`\n    ${qz("index")} {\n      if (index < uniforms.size) {\n        setOutputAtIndex(index, uniforms.value);\n      }\n    }\n  `}};function iB(e){let{backend:t,attrs:n}=e,{shape:a,value:r}=n,{dtype:i}=n;if(i=i||Tr.inferDtype(r),"string"===i){let e=Tr.getArrayFromDType(i,Tr.sizeFromShape(a));return e.fill(r),t.makeTensorInfo(a,i,e)}{let e=new rB(a),n=[{type:"float32",data:[r]}];return t.runWebGPUProgram(e,[],i,n)}}var sB={kernelName:an,backendName:"webgpu",kernelFunc:iB};function oB(e){let{inputs:t,attrs:n}=e,{x:a}=t,{shape:r}=n,i=Tr.sizeFromShape(a.shape),s=Tr.inferFromImplicitShape(r,i),o=Tr.sizeFromShape(s);return Tr.assert(i===o,(()=>`The new shape (${s}) has ${o} elements and the old shape (${a.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),e.backend.incRef(a.dataId),{dataId:a.dataId,shape:s,dtype:a.dtype}}var lB={kernelName:fa,backendName:"webgpu",kernelFunc:oB};function uB({a:e,b:t,transposeA:n,transposeB:a,backend:r,bias:i=null,preluActivationWeights:s=null,leakyreluAlpha:o=0,activation:l=null}){let u=e.shape.length,d=t.shape.length,p=n?e.shape[u-2]:e.shape[u-1],c=a?t.shape[d-1]:t.shape[d-2],h=n?e.shape[u-1]:e.shape[u-2],f=a?t.shape[d-2]:t.shape[d-1],m=e.shape.slice(0,-2),y=t.shape.slice(0,-2),g=Tr.sizeFromShape(m),A=Tr.sizeFromShape(y),x=zl.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([h,f]);Tr.assert(p===c,(()=>`Error in matMul: inner shapes (${p}) and (${c}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${a} must match.`));let b,v,w=n?[g,p,h]:[g,h,p],k=a?[A,f,c]:[A,c,f],I=oB({inputs:{x:e},backend:r,attrs:{shape:w}}),S=oB({inputs:{x:t},backend:r,attrs:{shape:k}}),N=[I,S],C=Math.max(g,A),T=[I,S],E=[{type:"int32",data:[h]},{type:"int32",data:[f]},{type:"int32",data:[p]}],R=[C,h,f],$=He().get("WEBGPU_MATMUL_PROGRAM_TYPE");if($<0){let e=He().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),t=e>0?e:r.thresholdToIncreaseWorkgroups,n=C*Math.ceil(h/32)*Math.ceil(f/32);$=n<=t||h<=8&&n<=2*t?C*h*f<=128?nL.MatMulReduceProgram:1===C&&c>=2e3?nL.MatMulSplitKProgram:nL.MatMulSmallOutputSizeProgram:nL.MatMulPackedProgram}switch($){case nL.MatMulReduceProgram:b=new eB(R,n,a,i,l,s);break;case nL.MatMulSplitKProgram:if(v=iB({backend:r,attrs:{shape:R,value:0,dtype:e.dtype}}),b=new nB(R,c,n,a),i||l){v=r.runWebGPUProgram(b,T,e.dtype,E,v);let t=new aB(v.shape,i,l,s),n=null,a=[v];i&&a.push(i),s&&a.push(s),"leakyrelu"===l&&(n=[{type:"float32",data:[o]}],t.uniforms+=" alpha : f32,");let u=r.runWebGPUProgram(t,a,v.dtype,n);N.push(v);let d=oB({inputs:{x:u},backend:r,attrs:{shape:x}});N.push(u);for(let e of N)r.disposeData(e.dataId);return d}break;case nL.MatMulSmallOutputSizeProgram:b=new tB(w,k,R,n,a,i,l,s);break;case nL.MatMulPackedProgram:let t=r.adapterInfo.isIntel();b=new QW(w,R,n,a,i,l,s,t);break;default:throw new Error(`Unsupported MatMulProgramType ${$}.`)}i&&T.push(i),s&&T.push(s),"leakyrelu"===l&&(E.push({type:"float32",data:[o]}),b.uniforms+=" alpha : f32,"),v=r.runWebGPUProgram(b,T,e.dtype,E,v);let M=oB({inputs:{x:v},backend:r,attrs:{shape:x}});N.push(v);for(let e of N)r.disposeData(e.dataId);return M}var dB={kernelName:cr,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{a:r,b:i,bias:s,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:d,leakyreluAlpha:p}=a;return uB({a:r,b:i,transposeA:l,transposeB:u,backend:n,bias:s,preluActivationWeights:o,leakyreluAlpha:p,activation:d})}},pB=class{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.workgroupSize=[128,1,1],this.size=!0,this.outputShape=Bf.assertAndGetBroadcastShape(t,n),this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`binaryOpComplex_${e}`,this.op=e}getUserCode(){return`\n      fn binaryOpComplex(\n          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {\n        ${QL(this.op,!1)}\n      }\n\n      ${qz("index")} {\n        if(index < uniforms.size) {\n          let areal = getARealByOutputIndex(index);\n          let aimag = getAImagByOutputIndex(index);\n          let breal = getBRealByOutputIndex(index);\n          let bimag = getBImagByOutputIndex(index);\n          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));\n        }\n      }\n    `}},cB=class{constructor(e,t,n){if(this.size=!0,this.variableNames=["A","B"],this.outputShape=Bf.assertAndGetBroadcastShape(t,n),this.dispatchLayout=uL(this.outputShape),this.op=e,this.useSharedMemoryWithA=t.length<=1&&n.length>1&&t[0]<128,this.useSharedMemoryWithB=n.length<=1&&t.length>1&&n[0]<128,this.useSharedMemoryWithA||this.useSharedMemoryWithB)this.outputComponent=1,this.variableComponents=[1,1],this.lastDimensionSize=this.useSharedMemoryWithB?n[0]:t[0],this.shaderKey=`binary_${e}_${this.lastDimensionSize}`,this.type="shared",this.workgroupSize=[256,1,1];else{let a=t.length>0&&t[t.length-1]%4==0,r=n.length>0&&n[n.length-1]%4==0;a&&r?(this.outputComponent=4,this.variableComponents=[4,4]):a&&(Tr.isScalarShape(n)||1===n[n.length-1])||r&&(Tr.isScalarShape(t)||1===t[t.length-1])?(this.outputComponent=4,this.variableComponents=a?[4,1]:[1,4]):(this.outputComponent=1,this.variableComponents=[1,1]),this.type="nonshared",this.shaderKey=`binary_${e}_${this.variableComponents}`,this.workgroupSize=[128,1,1]}this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.outputComponent,1,1])}getUserCode(){let e,t=4===this.outputComponent?"vec4<f32>":"f32",n=`\n    fn binaryOperation(a : ${t}, b : ${t}) -> ${t} {\n      ${QL(this.op,4===this.outputComponent)}\n    };\n    `;if("shared"===this.type){let t=this.lastDimensionSize>1?`coords[${this.outputShape.length-1}]`:"0",a=this.useSharedMemoryWithB?`let a = getAByOutputIndex(index);\n          let b = sharedBuf[${t}];`:`let a = sharedBuf[${t}];\n          let b = getBByOutputIndex(index);`;e=`\n        ${n}\n        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;\n        ${qz("index")} {\n          // Fill in the shared memory buffer.\n          let localIndex = i32(localId.x);\n          if(localIndex < ${this.lastDimensionSize}) {\n            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB?"B":"A"}[localIndex]);\n          }\n          workgroupBarrier();\n\n          if(index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            ${a}\n            setOutputAtIndex(index, binaryOperation(a, b));\n          }\n        }\n        `}else e=`\n       ${n}\n       ${qz("index")} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index * ${this.outputComponent});\n           let a = ${t}(getAByOutputCoords(coords));\n           let b = ${t}(getBByOutputCoords(coords));\n           setOutputAtIndex(index, binaryOperation(a, b));\n         }\n       }\n       `;return e}};function hB(e){let{inputs:t}=e,{x:n}=t;return e.backend.incRef(n.dataId),{dataId:n.dataId,shape:n.shape,dtype:n.dtype}}var fB={kernelName:hn,backendName:"webgpu",kernelFunc:hB};function mB(e){let{inputs:t,backend:n}=e,{real:a,imag:r}=t,i=n.makeTensorInfo(a.shape,"complex64"),s=n.tensorMap.get(i.dataId),o=hB({inputs:{x:a},backend:n}),l=hB({inputs:{x:r},backend:n});return s.complexTensorInfos={real:o,imag:l},i}var yB={kernelName:kt,backendName:"webgpu",kernelFunc:mB},gB=class{constructor(e,t,n=""){this.variableNames=["A"],this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.op=t,""!==n&&(this.uniforms=n),this.shaderKey=`unary_${t}`}getUserCode(){return`\n      fn unaryOperation(a : f32) -> f32 {\n        ${HW(this.op,!1)}\n      }\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let a = getAByOutputIndex(index);\n          setOutputAtIndex(index, unaryOperation(a));\n        }\n      }\n      `}};function AB({opType:e,cpuKernelImpl:t,dtype:n}){return({inputs:a,backend:r})=>{let{x:i}=a,s=r,o=n||i.dtype;if(s.shouldExecuteOnCPU([i])&&null!=t){let e=s.tensorMap.get(i.dataId),n=t(e.values,o);return s.makeTensorInfo(i.shape,o,n)}let l=new gB(i.shape,e);return s.runWebGPUProgram(l,[i],o)}}function xB({opType:e,cpuKernelImpl:t,supportsComplex:n=!1,dtype:a}){return({inputs:r,backend:i})=>{let{a:s,b:o}=r,l=i;if(n&&"complex64"===s.dtype){let t,n,a=l.tensorMap.get(s.dataId),r=l.tensorMap.get(o.dataId);if(e!==hL.MUL)[t,n]=[[a.complexTensorInfos.real,r.complexTensorInfos.real],[a.complexTensorInfos.imag,r.complexTensorInfos.imag]].map((t=>{let[n,a]=t,r={dataId:n.dataId,dtype:n.dtype,shape:s.shape},i={dataId:a.dataId,dtype:a.dtype,shape:o.shape},u=new cB(e,s.shape,o.shape);return l.runWebGPUProgram(u,[r,i],bi(n.dtype,a.dtype))}));else{let e=new pB(hL.COMPLEX_MULTIPLY_REAL,s.shape,o.shape),i=new pB(hL.COMPLEX_MULTIPLY_IMAG,s.shape,o.shape),u=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:s.shape},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:o.shape},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:o.shape}];t=l.runWebGPUProgram(e,u,"float32"),n=l.runWebGPUProgram(i,u,"float32")}let i=mB({inputs:{real:t,imag:n},backend:l});return l.disposeData(t.dataId),l.disposeData(n.dataId),i}let u=a||bi(s.dtype,o.dtype);if(("string"===s.dtype||"string"===o.dtype||l.shouldExecuteOnCPU([s,o]))&&null!=t){let e=l.tensorMap.get(s.dataId).values,n=l.tensorMap.get(o.dataId).values,a="string"===s.dtype?Bf.fromUint8ToStringArray(e):e,r="string"===s.dtype?Bf.fromUint8ToStringArray(n):n,[i,d]=t(s.shape,o.shape,a,r,u);return l.makeTensorInfo(d,u,i)}let d=new cB(e,s.shape,o.shape);return l.runWebGPUProgram(d,[s,o],u)}}var{addImpl:bB,castImpl:vB,ceilImpl:wB,concatImpl:kB,equalImpl:IB,expImpl:SB,expm1Impl:NB,floorImpl:CB,floorDivImpl:TB,gatherNdImpl:EB,gatherV2Impl:RB,greaterEqualImpl:$B,greaterImpl:MB,lessEqualImpl:_B,lessImpl:FB,logImpl:OB,maxImpl:PB,maximumImpl:DB,minimumImpl:zB,multiplyImpl:LB,negImpl:WB,notEqualImpl:BB,prodImpl:VB,rangeImpl:UB,rsqrtImpl:GB,scatterImpl:HB,simpleAbsImpl:jB,sliceImpl:qB,stridedSliceImpl:XB,stringNGramsImpl:KB,subImpl:ZB,tileImpl:YB,topKImpl:JB,transposeImpl:QB,uniqueImpl:eV}=Dg,tV=AB({opType:yL.ABS,cpuKernelImpl:jB}),nV={kernelName:Ze,backendName:"webgpu",kernelFunc:tV},aV=AB({opType:yL.ACOS}),rV={kernelName:Ye,backendName:"webgpu",kernelFunc:aV},iV=AB({opType:yL.ACOSH}),sV={kernelName:Je,backendName:"webgpu",kernelFunc:iV},oV=xB({opType:hL.ADD,cpuKernelImpl:bB,supportsComplex:!0}),lV={kernelName:Qe,backendName:"webgpu",kernelFunc:oV},uV={kernelName:et,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,a=t;if(1===a.length)return hB({inputs:{x:a[0]},backend:n});let r=a.map((e=>e.dtype)).reduce(((e,t)=>bi(e,t))),i=a.map((e=>e.shape)),s=new class{constructor(e){this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e[0],this.variableNames=e.map(((e,t)=>`T${t}`)),this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="addN"}getUserCode(){let e=[];this.variableNames.forEach((t=>{e.push(`let v${t} = get${t}ByOutputCoords(coords);`)}));let t=this.variableNames.map((e=>`v${e}`)).join(" + ");return`\n      ${qz("index")} {\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if (flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            ${e.join("\n        ")}\n            setOutputAtIndex(flatIndex, ${t});\n          }\n        }\n      }\n    `}}(i);return n.runWebGPUProgram(s,a,r)}},dV=class{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[16,16,1];let n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];this.outputShape=n,this.dispatchLayout={x:[0],y:[1]},this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize,[1,1,1]),this.shaderKey="transposeShared"}getUserCode(){Tr.assert(this.workgroupSize[0]===this.workgroupSize[1],(()=>`Must be a square tile, current tile shape is ${this.workgroupSize[0]} x ${this.workgroupSize[1]}`));let e=this.workgroupSize[0];return`\n      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0]+1}>, ${this.workgroupSize[0]}>;\n      ${qz()} {\n        var x = i32(workgroupId.x) * ${e} + i32(localId.x);\n        var y = i32(workgroupId.y) * ${e} + i32(localId.y);\n        let width = uniforms.outShape[0];\n        let height = uniforms.outShape[1];\n        if (x < width && y < height) {\n          tile[localId.y][localId.x] = f32(A[y * width + x]);\n        }\n        workgroupBarrier();\n\n        x = i32(workgroupId.y) * ${e} + i32(localId.x);\n        y = i32(workgroupId.x) * ${e} + i32(localId.y);\n        if (x < height && y < width) {\n          setOutputAtIndex((y * height + x), tile[localId.x]\n            [localId.y]);\n        }\n      }\n    `}},pV=class{constructor(e,t){this.variableNames=["A"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0;let n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];this.outputShape=n,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.newDim=t,this.shaderKey=`transpose_${t}`}getUserCode(){let e=Hz(this.outputShape.length),t=cV(this.newDim);return`\n      ${qz("index")} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(\n              ${e}(${t}), uniforms.aShape)]);\n          }\n        }\n      }\n    `}};function cV(e){let t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let n=new Array(t);for(let t=0;t<e.length;t++)n[e[t]]=`coords.${jz(t)}`;return n.join()}function hV(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{perm:i}=a,s=n,o=r.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=r.shape[i[e]];if(n.shouldExecuteOnCPU([r])){let e=s.tensorMap.get(r.dataId).values,t=QB(e,r.shape,r.dtype,i,l);return n.makeTensorInfo(l,r.dtype,t)}if(2===r.shape.length&&Tr.arraysEqual(i,[1,0])){let e=new dV(r.shape,i);return s.runWebGPUProgram(e,[r],r.dtype)}let u=new pV(r.shape,i);return s.runWebGPUProgram(u,[r],r.dtype)}var fV={kernelName:ar,backendName:"webgpu",kernelFunc:hV},mV=class{constructor(e,t,n){this.variableNames=["x"],this.uniforms="reduceSize : i32,",this.size=!0,this.inputShape=[e.batchSize,e.inSize];let[a]=Bf.computeOutAndReduceShapes(this.inputShape,[1]);this.outputShape=0===a.length?[1]:a,e.inSize>=32768&&n>=512?this.workgroupSize=[512,1,1]:e.inSize>=4096?this.workgroupSize=[256,1,1]:this.workgroupSize=[64,1,1],this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,[1,1,1]),this.reduceType=t,this.shaderKey=`reduce_${t}`}getUserCode(){let e="",t="0.0",n=this.workgroupSize[0];"min"===this.reduceType||"max"===this.reduceType?(e=`\n         if (isnan(candidate)) {\n          bestValue = uniforms.NAN;\n         } else if (!isnan(bestValue) && candidate ${"min"===this.reduceType?"<":">"} bestValue)\n           {  bestValue = candidate; }`,t="f32(x[offset])"):"sum"===this.reduceType||"mean"===this.reduceType?e=" bestValue = bestValue + candidate; ":"prod"===this.reduceType?(e=" bestValue = bestValue * candidate; ",t="1.0"):"all"===this.reduceType?(e=" bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ",t="1.0"):"any"===this.reduceType&&(e=" bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ",t="0.0");let a="mean"===this.reduceType?"setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));":"setOutputAtIndex(outputIndex, bestValue);";return`\n       fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n       }\n\n       \n         var<workgroup> xBestValues : array<f32, ${n}>;\n       \n       fn getOffset(outputIndex : i32) -> i32 {\n         let outputCoords = getCoordsFromIndex(outputIndex);\n         let offset = ${1===this.outputShape.length?"outputCoords":"outputCoords[0]"} * uniforms.reduceSize;\n          return offset;\n       }\n       ${qz("index")} {\n         let outputIndex = index / ${n};\n         let offset = getOffset(outputIndex);\n         var bestValue = ${t};\n         let Length = uniforms.reduceSize;\n         let WorkPerThread = DIV_CEIL(u32(Length), ${n}u);\n         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;\n             k = k + ${n}) {\n           let candidate = f32(x[offset + k]);\n           ${e}\n         }\n         xBestValues[localId.x] = bestValue;\n         workgroupBarrier();\n\n         var reduceSize = min(u32(Length), ${n}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            ${e}\n            xBestValues[localId.x] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (localId.x == 0u && outputIndex < uniforms.size) {\n          ${a}\n        }\n       }\n     `}};function yV(e,t,n,a,r){let i=e.shape.length,s=[],o=Tr.parseAxisParam(t,e.shape),l=o,u=Bf.getAxesPermutation(l,i),d=e;null!=u&&(d=hV({inputs:{x:e},attrs:{perm:u},backend:r}),l=Bf.getInnerMostAxes(l.length,i),s.push(d)),Bf.assertAxesAreInnerMostDims(a,l,i);let p,[c,h]=Bf.computeOutAndReduceShapes(d.shape,l),f=c;if(n&&(f=Bf.expandShapeToKeepDim(c,o)),"max"!==a&&"prod"!==a||!r.shouldExecuteOnCPU([d])){let t=Tr.sizeFromShape(h),n={windowSize:t,inSize:t,batchSize:Tr.sizeFromShape(d.shape)/t,outSize:1},i="mean"===a?"float32":vi(e.dtype),o=[{type:"int32",data:[t]}],l=new mV(n,a,r.device.limits.maxComputeWorkgroupSizeX),u=r.runWebGPUProgram(l,[d],i,o);s.push(u),p=oB({inputs:{x:u},attrs:{shape:f},backend:r})}else{let t=r.tensorMap.get(d.dataId).values;switch(a){case"max":let n=PB(t,Tr.sizeFromShape(h),f,e.dtype);p=r.makeTensorInfo(f,e.dtype,n);break;case"prod":let{outVals:i,outShape:s,outDtype:o}=VB(d.shape,d.dtype,t,l);p=r.makeTensorInfo(s,o,i);break;default:throw new Error(`${a} CPU implementation is not yet supported.`)}}return s.forEach((e=>r.disposeData(e.dataId))),p}var gV={kernelName:tt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{keepDims:i,axis:s}=a;return yV(r,s,i,"all",n)}},AV={kernelName:nt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{keepDims:i,axis:s}=a;return yV(r,s,i,"any",n)}},xV=class{constructor(e,t,n){this.workgroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="infinityValue : f32,",this.size=!0;let a=[t];this.op="min"===n?"<":">";let[r,i]=Bf.computeOutAndReduceShapes(e,a);this.outputShape=0===r.length?[1]:r,this.dispatchLayout=uL(this.outputShape),Tr.sizeFromShape(i)<32||Tr.sizeFromShape(r)>1e3?(this.type="plain",this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize)):(this.type="shared",this.dispatch=iL(this.dispatchLayout,this.outputShape,[1,1,1])),this.inputShape=e,this.shaderKey=`argMinMax_${this.op}_${this.type}`}getUserCode(){let e=this.workgroupSize[0],t=()=>1===this.inputShape.length?"uniforms.xShape":`uniforms.xShape.${jz(this.inputShape.length-1)}`,n=()=>{let e="";if(1===this.outputShape.length)1!==this.inputShape.length&&(e+="outputCoords,");else for(let t=0;t<this.outputShape.length;t++)e+=`outputCoords.${jz(t)},`;return e};return"shared"===this.type?`\n      fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n      }\n\n      \n      var<workgroup> xBestIndices : array<i32, ${e}>;\n      var<workgroup> xBestValues : array<f32, ${e}>;\n    \n\n      ${qz("index")} {\n        let outputIndex = index / ${e};\n        let reduceLength = ${t()};\n\n        var bestIndex = i32(localId.x);\n        var bestValue = uniforms.infinityValue;\n        let outputCoords = getCoordsFromIndex(outputIndex);\n        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;\n            k = k + ${e}) {\n          let candidate = getX(${n()} k);\n          if (!isnan(candidate) && candidate ${this.op} bestValue) {\n            bestValue = candidate;\n            bestIndex = k;\n          }\n        }\n        xBestValues[localId.x] = bestValue;\n        xBestIndices[localId.x] = bestIndex;\n        workgroupBarrier();\n\n        var reduceSize = min(u32(reduceLength), ${e}u);\n        for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n            currentSize = reduceSize / 2u) {\n          let interval = DIV_CEIL(reduceSize, 2u);\n          if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              xBestValues[localId.x] = bestValue;\n              xBestIndices[localId.x] = xBestIndices[localId.x + interval];\n            }\n          }\n          reduceSize = interval;\n          workgroupBarrier();\n        }\n\n        if (localId.x == 0u && outputIndex < uniforms.size) {\n          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);\n        }\n      }\n    `:`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let outputCoords = getCoordsFromIndex(index);\n          var bestIndex = 0;\n          var bestValue = getX(${n()} 0);\n          let reduceLength = ${t()};\n          for (var i = 1; i < reduceLength; i++) {\n            let candidate = getX(${n()} i);\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              bestIndex = i;\n            }\n          }\n          setOutputAtIndexI32(index, bestIndex);\n        }\n      }\n      `}},bV={kernelName:at,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i}=a,s=Tr.parseAxisParam(i,r.shape),o=Bf.getAxesPermutation(s,r.shape.length),l=r,u=[];null!=o&&(l=hV({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),s=Bf.getInnerMostAxes(s.length,l.shape.length)),Bf.assertAxesAreInnerMostDims("argMax",[s[0]],l.shape.length);let d=new xV(l.shape,s[0],"max"),p=[{type:"float32",data:[Number.NEGATIVE_INFINITY]}],c=n.runWebGPUProgram(d,[l],"int32",p);return u.forEach((e=>n.disposeData(e.dataId))),c}},vV={kernelName:rt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i}=a,s=Tr.parseAxisParam(i,r.shape),o=Bf.getAxesPermutation(s,r.shape.length),l=r,u=[];null!=o&&(l=hV({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),s=Bf.getInnerMostAxes(s.length,l.shape.length)),Bf.assertAxesAreInnerMostDims("argMin",[s[0]],l.shape.length);let d=new xV(l.shape,s[0],"min"),p=[{type:"float32",data:[Number.POSITIVE_INFINITY]}],c=n.runWebGPUProgram(d,[l],"int32",p);return u.forEach((e=>n.disposeData(e.dataId))),c}},wV=AB({opType:yL.ASIN}),kV={kernelName:it,backendName:"webgpu",kernelFunc:wV},IV=AB({opType:yL.ASINH}),SV={kernelName:st,backendName:"webgpu",kernelFunc:IV},NV=AB({opType:yL.ATAN}),CV={kernelName:ot,backendName:"webgpu",kernelFunc:NV},TV=xB({opType:hL.ATAN2}),EV={kernelName:ut,backendName:"webgpu",kernelFunc:TV},RV=AB({opType:yL.ATANH}),$V={kernelName:lt,backendName:"webgpu",kernelFunc:RV},MV=class{constructor(e,t,n=!1,a=!1,r=!1){if(this.variableNames=["x"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,",this.workgroupSize=[128,1,1],this.size=!0,"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");this.outputShape=e.outShape,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=t,this.computePositions=n,this.flattenPositions=a,this.includeBatchIndex=r,this.shaderKey=`pool2D_${t}_${n}_${a}_${r}`}getUserCode(){let e;e="avg"===this.poolType?"resultValue = resultValue + value; count = count + 1.0;":this.computePositions?`let currMaxValue = mix(value, maxValue, maxValueFound);\n      if (value >= currMaxValue) {\n        maxValue = value;\n        maxValueFound = 1.0;\n        maxPosition = ${this.flattenPositions?this.includeBatchIndex?"((batch * uniforms.xShape[1] + xR) * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"(xR * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"wR * uniforms.filterDims.y + wC"};\n      }`:"resultValue = max(value, resultValue);";let t="resultValue";return"avg"===this.poolType&&(t="resultValue / max(count, 1.0)"),`\n      ${qz("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n          let xRCCorner = vec2<i32>(coords.yz) * uniforms.strides - uniforms.pads;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          ${this.computePositions?"var maxValue = 0.0;\n            var maxValueFound = 0.0;\n            var maxPosition = 0;":`var resultValue = ${"avg"===this.poolType?"0.0":"-1.0 / pow(10.0, -20.0)"};`}\n\n          var count = 0.0;\n          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilations.x) {\n            let xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilations.y) {\n              let xC = xCCorner + wC;\n              if (xC < 0 || xC >= uniforms.convDims.y) {\n                continue;\n              }\n\n              let value = getX(batch, xR, xC, d);\n              ${e}\n            }\n          }\n\n          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${t});`}\n        }\n      }\n    `}},_V=class{constructor(e,t,n=!1,a=!1,r=!1){if(this.variableNames=["x"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, convDims : vec3<i32>, filterDims : vec3<i32>,",this.workgroupSize=[128,1,1],this.size=!0,"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");this.outputShape=e.outShape,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=t,this.computePositions=n,this.flattenPositions=a,this.includeBatchIndex=r,this.shaderKey=`pool3D_${t}_${n}_${a}_${r}`}getUserCode(){let e;e="avg"===this.poolType?"resultValue += value; count += 1.0;":this.computePositions?`let currMaxValue = mix(value, maxValue, maxValueFound);\n      if (value >= currMaxValue) {\n        maxValue = value;\n        maxValueFound = 1.0;\n        maxPosition = ${this.flattenPositions?this.includeBatchIndex?"(((batch * uniforms.xShape.y + xD) * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"((xD * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"wD * uniforms.filterDims.y * uniforms.filterDims.y + wR * uniforms.filterDims.z + wC"};\n      }`:"resultValue = max(value, resultValue);";let t="resultValue";return"avg"===this.poolType&&(t="resultValue / max(count, 1.0)"),`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords.x;\n          let ch = coords.u;\n\n          let xCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;\n          let xDCorner = xCorner.x;\n          let xRCorner = xCorner.y;\n          let xCCorner = xCorner.z;\n\n          ${this.computePositions?"var maxValue = 0.0;\n            var maxValueFound = 0.0;\n            var maxPosition = 0;":`var resultValue = ${"avg"===this.poolType?"0.0":"-1.0 / pow(10.0, -20.0)"};`}\n\n          var count = 0.0;\n          for (var wD = 0; wD < uniforms.filterDims.x; wD++) {\n            let xD = xDCorner + wD;\n            if (xD < 0 || xD >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wR = 0; wR < uniforms.filterDims.y; wR++) {\n              let xR = xRCorner + wR;\n              if (xR < 0 || xR >= uniforms.convDims.y) {\n                continue;\n              }\n\n              for (var wC = 0; wC < uniforms.filterDims.z; wC++) {\n                let xC = xCCorner + wC;\n                if (xC < 0 || xC >= uniforms.convDims.z) {\n                  continue;\n                }\n\n                let value = getX(batch, xD, xR, xC, ch);\n                ${e}\n              }\n            }\n          }\n\n          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${t});`}\n        }\n      }\n    `}};function FV(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{reductionIndices:i,keepDims:s}=a;return yV(r,i,s,"max",n)}var OV={kernelName:Fn,backendName:"webgpu",kernelFunc:FV};function PV(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{keepDims:i,axis:s}=a;return yV(r,s,i,"mean",n)}var DV={kernelName:Bn,backendName:"webgpu",kernelFunc:PV};function zV(e,t,n,a){if(1===t.filterWidth&&1===t.filterHeight&&Tr.arraysEqual(t.inShape,t.outShape))return hB({inputs:{x:e},backend:a});if(t.filterWidth===t.inWidth&&t.filterHeight===t.inHeight&&1===t.batchSize&&"VALID"===t.padInfo.type){let r,i=e.shape.length,s=oB({inputs:{x:e},backend:a,attrs:{shape:[e.shape[i-3]*e.shape[i-2],e.shape[i-1]]}});"avg"===n?r=PV({inputs:{x:s},backend:a,attrs:{axis:0,keepDims:!1}}):(Tr.assert("max"===n,(()=>`Invalid pool type ${n}`)),r=FV({inputs:{x:s},backend:a,attrs:{reductionIndices:0,keepDims:!1}}));let o=oB({inputs:{x:r},backend:a,attrs:{shape:t.outShape}});return a.disposeData(s.dataId),a.disposeData(r.dataId),o}let r,i=[{type:"int32",data:[t.strideHeight,t.strideWidth]}];return 1===t.filterHeight&&1===t.filterWidth?r=new class{constructor(e){this.variableNames=["x"],this.uniforms="strides : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="poolWithFilterSizeEqualsOne"}getUserCode(){return`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n\n          let xRCCorner = coords.yz * uniforms.strides;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          let value = getX(batch, xRCorner, xCCorner, d);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `}}(t):("avg"===n?r=new MV(t,"avg"):(Tr.assert("max"===n,(()=>`Invalid pool type ${n}`)),r=new MV(t,"max")),i.push({type:"int32",data:[t.padInfo.top,t.padInfo.left]},{type:"int32",data:[t.dilationHeight,t.dilationWidth]},{type:"int32",data:[t.inHeight,t.inWidth]},{type:"int32",data:[t.effectiveFilterHeight,t.effectiveFilterWidth]})),a.runWebGPUProgram(r,[e],e.dtype,i)}var LV={kernelName:dt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:i,strides:s,pad:o,dimRoundingMode:l}=a;return zV(r,Bf.computePool2DInfo(r.shape,i,s,1,o,l),"avg",n)}},WV={kernelName:ct,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:i,strides:s,pad:o,dataFormat:l,dimRoundingMode:u}=a,d=Bf.computePool3DInfo(r.shape,i,s,[1,1,1],o,u,l),p=new _V(d,"avg"),c=[{type:"int32",data:[d.strideDepth,d.strideHeight,d.strideWidth]},{type:"int32",data:[d.padInfo.front,d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.inDepth,d.inHeight,d.inWidth]},{type:"int32",data:[d.effectiveFilterDepth,d.effectiveFilterHeight,d.effectiveFilterWidth]}];return n.runWebGPUProgram(p,[r],r.dtype,c)}},BV={kernelName:ht,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,input:i}=t,s=i,{filterSize:o,strides:l,pad:u,dimRoundingMode:d}=a,p=Bf.computePool3DInfo(s.shape,o,l,1,u,d),c=new class{constructor(e){this.variableNames=["dy"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,\n       outDepth : i32, outHeight : i32, outWidth : i32, avgMultiplier : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool3DBackprop"}getUserCode(){return`\n      ${qz("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let ch = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyDCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {\n          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);\n\n          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {\n            continue;\n          }\n          let idyD = i32(dyD);\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              dotProd += dyValue * uniforms.avgMultiplier;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}(p),h=1/(p.filterDepth*p.filterHeight*p.filterWidth),f=[{type:"int32",data:[p.strideDepth,p.strideHeight,p.strideWidth]},{type:"int32",data:[p.effectiveFilterDepth-1-p.padInfo.front,p.effectiveFilterHeight-1-p.padInfo.top,p.effectiveFilterWidth-1-p.padInfo.left]},{type:"int32",data:[p.effectiveFilterDepth,p.effectiveFilterHeight,p.effectiveFilterWidth]},{type:"int32",data:[p.outDepth]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]},{type:"float32",data:[h]}];return n.runWebGPUProgram(c,[r],s.dtype,f)}},VV={kernelName:pt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,input:i}=t,s=i;cL([r,i],"avgPoolGrad");let{filterSize:o,strides:l,pad:u}=a,d=Bf.computePool2DInfo(s.shape,o,l,1,u),p=new class{constructor(e){this.variableNames=["dy"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, avgMultiplier : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool2DBackprop"}getUserCode(){return`\n      ${qz("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilations[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilations[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n\n            dotProd = dotProd + dyValue * uniforms.avgMultiplier;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}(d),c=1/(d.filterHeight*d.filterWidth),h=[{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.effectiveFilterHeight-1-d.padInfo.top,d.effectiveFilterWidth-1-d.padInfo.left]},{type:"int32",data:[d.dilationHeight,d.dilationWidth]},{type:"int32",data:[d.effectiveFilterHeight,d.effectiveFilterWidth]},{type:"int32",data:[d.outHeight]},{type:"int32",data:[d.outWidth]},{type:"float32",data:[c]}];return n.runWebGPUProgram(p,[r],s.dtype,h)}},UV={kernelName:ft,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{a:r,b:i}=t,{transposeA:s,transposeB:o}=a;return uB({a:r,b:i,transposeA:s,transposeB:o,backend:n})}},GV=["x","y","z","w","u","v"];function HV(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{begin:i,size:s}=a,[o,l]=mf.parseSliceParams(r,i,s);if(mf.assertParamsValid(r,o,l),n.shouldExecuteOnCPU([r])||"string"===r.dtype){let e=n.tensorMap.get(r.dataId),t=qB(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}if(0===Tr.sizeFromShape(l))return n.makeTensorInfo(l,r.dtype,[]);let u=new class{constructor(e,t){this.variableNames=["source"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.rank=t.length,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.start=e,this.uniforms=`start : ${Hz(e.length)}, `,this.shaderKey="slice"}getUserCode(){let e,t=Hz(this.rank),n=function(e){if(1===e)return"sourceLoc";if(e<=6)return GV.slice(0,e).map((e=>`sourceLoc.${e}`)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);return e=1===this.start.length?this.outputShape.map(((e,t)=>"sourceLoc = uniforms.start + coords;")):this.outputShape.map(((e,t)=>`sourceLoc.${GV[t]} = uniforms.start.${jz(t)} + coords.${GV[t]};`)),`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          var sourceLoc : ${t};\n          let coords = getCoordsFromIndex(index);\n          ${e.join("\n")}\n          setOutputAtIndex(index, getSource(${n}));\n        }\n      }\n    `}}(o,l),d=[{type:"int32",data:o}];return n.runWebGPUProgram(u,[r],r.dtype,d)}var jV={kernelName:Ta,backendName:"webgpu",kernelFunc:HV},qV={kernelName:mt,backendName:"webgpu",kernelFunc:e=>{let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:i,crops:s}=a;Tr.assert(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet"));let o=i.reduce(((e,t)=>e*t)),l=Bf.getReshaped(r.shape,i,o),u=Bf.getPermuted(l.length,i.length),d=Bf.getReshapedPermuted(r.shape,i,o),p=Bf.getSliceBeginCoords(s,i.length),c=Bf.getSliceSize(d,s,i.length),h=[],f=oB({inputs:{x:r},backend:n,attrs:{shape:l}}),m=hV({inputs:{x:f},backend:n,attrs:{perm:u}}),y=oB({inputs:{x:m},backend:n,attrs:{shape:d}}),g=HV({inputs:{x:y},backend:n,attrs:{begin:p,size:c}});return h.push(f),h.push(m),h.push(y),h.forEach((e=>n.disposeData(e.dataId))),g}},XV=`\n  fn bincount_write(index: i32, value: f32) {\n    ${Uz("&result[index]","value","float32")}\n  }\n`,KV=class{constructor(e,t,n=!1){this.outputShape=[],this.variableNames=["x"],this.uniforms="binCountSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.hasWeights=!0,this.binaryOutput=!1,this.outputShape=e,this.rank=e.length,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.binaryOutput=n,n&&(this.atomic=!1),this.hasWeights=t,this.hasWeights&&this.variableNames.push("w"),this.shaderKey=`bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`}getUserCode(){return`\n    ${this.binaryOutput?"\n  fn bincount_write(index: i32, value: f32) {\n    atomicStore(&result[index], bitcast<i32>(value));\n  }\n":XV}\n  ${qz("index")} {\n    ${1===this.rank?`if (index < uniforms.xShape) {\n      let indexVal = i32(getX(index));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${this.binaryOutput?1:this.hasWeights?"getW(index)":"1."};\n        bincount_write(indexVal, value);\n      }\n    }`:`let coord = getCoordsFromIndex(index);\n    if (coordsInBounds2D(coord, uniforms.xShape)) {\n      let indexVal = i32(getX(coord[0], coord[1]));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${this.binaryOutput?1:this.hasWeights?"getW(coord[0], coord[1])":"1."};\n        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);\n      }\n    }`}\n  }\n  `}},ZV={kernelName:yt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,weights:i}=t,{size:s}=a,o=Tr.sizeFromShape(r.shape),l=Tr.sizeFromShape(i.shape)>0,u=[s],d=i.dtype,p=iB({backend:n,attrs:{shape:u,value:0,dtype:d}}),c=new KV([o],l),h=[{type:"int32",data:[s]}],f=l?[r,i]:[r];return n.runWebGPUProgram(c,f,d,h,p)}},YV={kernelName:xt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{s0:a,s1:r}=t;if(n.shouldExecuteOnCPU([a,r])){let e=n.tensorMap.get(a.dataId),t=n.tensorMap.get(r.dataId),i=e.values,s=t.values,o=Bf.assertAndGetBroadcastShape(Array.from(i),Array.from(s));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}let i=Tr.sizeFromShape(a.shape),s=Tr.sizeFromShape(r.shape),o=Math.max(i,s),l=new class{constructor(e){this.outputShape=[],this.variableNames=["s0","s1"],this.uniforms="s0Size : i32, s1Size : i32, ",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="broadcastArgs"}getUserCode(){return`\n  ${qz("index")} {\n    if (index < uniforms.size) {\n      var s0 = 1.0;\n      var s1 = 1.0;\n      let indexS0 = index - uniforms.size + uniforms.s0Size;\n      let indexS1 = index - uniforms.size + uniforms.s1Size;\n      if (indexS0 >= 0) {\n        s0 = getS0(indexS0);\n      }\n      if (indexS1 >= 0) {\n        s1 = getS1(indexS1);\n      }\n\n      if (s0 == 1.0) {\n        setOutputAtIndex(index, s1);\n      } else if (s1 == 1.0) {\n        setOutputAtIndex(index, s0);\n      } else if (s0 != s1) {\n        setOutputAtIndex(index, uniforms.NAN);\n      } else {\n        setOutputAtIndex(index, s0);\n      }\n    }\n  }\n  `}}(o),u=[{type:"int32",data:[i]},{type:"int32",data:[s]}];return n.runWebGPUProgram(l,[a,r],"int32",u)}},JV=xB({opType:hL.NOT_EQUAL,dtype:"bool",cpuKernelImpl:BB}),QV={kernelName:Kn,backendName:"webgpu",kernelFunc:JV};function eU(e){let{inputs:t,backend:n}=e,{input:a}=t;return hB({inputs:{x:n.tensorMap.get(a.dataId).complexTensorInfos.real},backend:n})}var tU={kernelName:pa,backendName:"webgpu",kernelFunc:eU},nU={kernelName:bt,backendName:"webgpu",kernelFunc:function e(t){let{inputs:n,backend:a,attrs:r}=t,{x:i}=n,{dtype:s}=r;if("complex64"===s){if("complex64"===i.dtype)return hB({inputs:{x:i},backend:a});let t=sd(i.shape),n=e({inputs:{x:i},backend:a,attrs:{dtype:"float32"}}),r=mB({inputs:{real:n,imag:t},backend:a});return t.dispose(),a.disposeData(n.dataId),r}if("complex64"===i.dtype){let t=eU({inputs:{input:i},backend:a}),n=e({inputs:{x:t},backend:a,attrs:{dtype:s}});return a.disposeData(t.dataId),n}if(!Tr.hasEncodingLoss(i.dtype,s)){let e=hB({inputs:{x:i},backend:a});return{dataId:e.dataId,shape:e.shape,dtype:s}}if(a.shouldExecuteOnCPU([i])){let e=a.tensorMap.get(i.dataId).values,[t,n,r]=vB(e,i.shape,i.dtype,s);return a.makeTensorInfo(t,n,r)}if("int32"===s)return function(e,t){let n=new gB(e.shape,yL.TO_INT),a=t.runWebGPUProgram(n,[e],"int32");return{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}(i,a);if("bool"===s){let e=a.makeTensorInfo([],"bool",Tr.getTypedArrayFromDType("bool",1)),t=JV({inputs:{a:i,b:e},backend:a});return a.disposeData(e.dataId),t}throw new Error(`Error in Cast: failed to cast ${i.dtype} to ${s}`)}},aU=AB({opType:yL.CEIL,cpuKernelImpl:wB}),rU={kernelName:vt,backendName:"webgpu",kernelFunc:aU},iU={kernelName:wt,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:n,backend:a,attrs:r}=e,{x:i}=n,{clipValueMin:s,clipValueMax:o}=r,l=[{type:"float32",data:[s]},{type:"float32",data:[o]}];return t=Tr.sizeFromShape(i.shape)%4==0?new class{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workPerThread=4,this.workgroupSize=[64,1,1],this.outputComponent=4,this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="clipVec4"}getUserCode(){return`\n      ${qz("index")} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          var clampedValue = clamp(\n              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));\n          clampedValue = select(clampedValue, value, isnanVec4(value));\n          setOutputAtIndex(index, clampedValue);\n        }\n      }\n    `}}(i.shape):new class{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="clip"}getUserCode(){return`\n      ${qz("index")} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          if (isnan(value)) {\n            setOutputAtIndex(index, value);\n            return;\n          }\n          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));\n        }\n      }\n    `}}(i.shape),a.runWebGPUProgram(t,[i],i.dtype,l)}};function sU(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}var oU={kernelName:It,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:a}=t,r=n.tensorMap.get(a.dataId),i=new class{constructor(e){this.outputShape=[],this.variableNames=["real","imag"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="complexAbs"}getUserCode(){return`\n    ${qz("index")} {\n      if (index < uniforms.size) {\n        let re = abs(getRealByOutputIndex(index));\n        let im = abs(getImagByOutputIndex(index));\n        let mx = max(re, im);\n\n        // The length function in wgsl may be not underflow-safe on some GPUs.\n        // So the safe solution is to ensure underflow-safety in all cases.\n        setOutputAtIndex(index, select(mx * length(vec2<f32>(1, min(re, im)/mx)), 0.0, mx == 0.0));\n      }\n    }\n  `}}(a.shape),s=[sU(a,r.complexTensorInfos.real),sU(a,r.complexTensorInfos.imag)];return n.runWebGPUProgram(i,s,s[0].dtype)}},lU=class{constructor(e){this.uniforms="",this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=Bf.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`)),this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.offsetLength=e.length-1;for(let e=0;e<this.offsetLength;e++)this.uniforms+=`offset${e} : i32,`;this.shaderKey="concat"}getUserCode(){let e=[];if(this.offsetLength>0){e.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");for(let t=1;t<this.offsetLength;t++)e.push(`else if (yC < uniforms.offset${[t]}){ setOutputAtCoords(coords.x, coords.y, getT${t}(yR, yC - uniforms.offset${t-1})); }`);let t=this.offsetLength,n=this.offsetLength-1;e.push(`else { setOutputAtCoords(coords.x, coords.y, getT${t}(yR, yC - uniforms.offset${n})); }`)}else e.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");return`\n      ${qz("index")} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            let yR = coords.x;\n            let yC = coords.y;\n\n            ${e.join("\n        ")}\n          }\n        }\n      }\n    `}};function uU(e){let{inputs:t,backend:n}=e,{input:a}=t;return hB({inputs:{x:n.tensorMap.get(a.dataId).complexTensorInfos.imag},backend:n})}var dU={kernelName:mn,backendName:"webgpu",kernelFunc:uU};function pU(e,t,n){let a=e[0].dtype;if("complex64"===a){let a=e.map((e=>eU({inputs:{input:e},backend:n}))),r=e.map((e=>uU({inputs:{input:e},backend:n}))),i=pU(a,t,n),s=pU(r,t,n),o=mB({inputs:{real:i,imag:s},backend:n});return a.forEach((e=>n.disposeData(e.dataId))),r.forEach((e=>n.disposeData(e.dataId))),n.disposeData(i.dataId),n.disposeData(s.dataId),o}let r=n.shouldExecuteOnCPU(e);if("string"===a&&(r=!0),r){let r=e.map((e=>{let a=[-1,Tr.sizeFromShape(e.shape.slice(t))];return oB({inputs:{x:e},backend:n,attrs:{shape:a}})})),i=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),s=Bf.computeOutShape(r.map((e=>e.shape)),1),o=1===r[0].shape[0],l=kB(i,s,a,o),u=Bf.computeOutShape(e.map((e=>e.shape)),t),d=n.makeTensorInfo(u,a,l);return r.forEach((e=>n.disposeData(e.dataId))),d}let i=n.device.limits.maxStorageBuffersPerShaderStage-1;if(e.length>i){let a=[];for(let r=0;r<e.length;r+=i){let s=e.slice(r,r+i);a.push(pU(s,t,n))}let r=pU(a,t,n);for(let e of a)n.disposeData(e.dataId);return r}let{tensors2D:s,outShape:o}=function(e,t,n){let a=Bf.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>oB({inputs:{x:e},backend:n,attrs:{shape:[Tr.sizeFromShape(e.shape.slice(0,t)),Tr.sizeFromShape(e.shape.slice(t))]}}))),outShape:a}}(e,t,n),l=s.map((e=>e.shape)),u=new lU(l),d=[],p=new Array(l.length-1);if(p.length>0){p[0]=l[0][1],d.push({type:"int32",data:[p[0]]});for(let e=1;e<p.length;e++)p[e]=p[e-1]+l[e][1],d.push({type:"int32",data:[p[e]]})}let c=n.runWebGPUProgram(u,s,s[0].dtype,d);s.forEach((e=>n.disposeData(e.dataId)));let h=oB({inputs:{x:c},backend:n,attrs:{shape:o}});return n.disposeData(c.dataId),h}function cU(e){let{inputs:t,backend:n,attrs:a}=e,{axis:r}=a,i=Tr.parseAxisParam(r,t[0].shape)[0],s=t.map((e=>e.shape));Bf.assertParamsConsistent(s,i);let o=Bf.computeOutShape(t.map((e=>e.shape)),i);if(0===Tr.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);let l=t.filter((e=>Tr.sizeFromShape(e.shape)>0));return 1===l.length?hB({inputs:{x:l[0]},backend:n}):pU(l,i,n)}var hU={kernelName:St,backendName:"webgpu",kernelFunc:cU};function fU(e,t){let n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function mU({x:e,filter:t,convInfo:n,backend:a,bias:r=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:o=null}){let l=null!=r,u=null!=i,d="channelsLast"===n.dataFormat,p=d&&n.filterHeight===n.inHeight&&n.filterWidth===n.inWidth&&"VALID"===n.padInfo.type,c=He().getBool("WEBGPU_USE_NAIVE_CONV2D_DEBUG");if(!c&&(p||1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type)))return function({x:e,filter:t,convInfo:n,backend:a,bias:r=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:o=null}){let l,u,d="channelsLast"===n.dataFormat,p=!d,c=[];if(d&&n.filterHeight===n.inHeight&&n.filterWidth===n.inWidth&&"VALID"===n.padInfo.type){let r=n.inHeight*n.inWidth*n.inChannels;l=oB({inputs:{x:e},backend:a,attrs:{shape:[1,n.batchSize,r]}}),u=oB({inputs:{x:t},backend:a,attrs:{shape:[1,r,n.outChannels]}})}else l=oB({inputs:{x:e},backend:a,attrs:{shape:d?[n.batchSize,n.inHeight*n.inWidth,n.inChannels]:[n.batchSize,n.inChannels,n.inHeight*n.inWidth]}}),u=oB({inputs:{x:t},backend:a,attrs:{shape:[1,n.inChannels,n.outChannels]}});if(c.push(l),c.push(u),null!=i){let e=fU(i.shape,d);null!=e&&(i=oB({inputs:{x:i},backend:a,attrs:{shape:e}}),c.push(i))}if(null!=r){let e=fU(r.shape,d);null!=e&&(r=oB({inputs:{x:r},backend:a,attrs:{shape:e}}),c.push(r))}let h=uB({a:d?l:u,b:d?u:l,transposeA:p,transposeB:!1,backend:a,bias:r,activation:o,preluActivationWeights:i,leakyreluAlpha:s}),f=oB({inputs:{x:h},backend:a,attrs:{shape:n.outShape}});c.push(h);for(let e of c)a.disposeData(e.dataId);return f}({x:e,filter:t,convInfo:n,backend:a,bias:r,activation:o,preluActivationWeights:i,leakyreluAlpha:s});let h=He().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),f=h>0?h:a.thresholdToIncreaseWorkgroups,m=n.batchSize*Math.ceil(n.outHeight*n.outWidth/32)*Math.ceil(n.outChannels/32);if(He().getBool("WEBGPU_CONV_SEPARATE_IM2COL_SHADER")||m<=f)return function({x:e,filter:t,convInfo:n,backend:a,bias:r=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:o=null}){let{filterWidth:l,filterHeight:u,inChannels:d,strideWidth:p,strideHeight:c,padInfo:h,outWidth:f,outHeight:m,dilationWidth:y,dilationHeight:g,dataFormat:A}=n,x="channelsLast"===A,b=l*u*d,v=m*f,w=x?[n.batchSize,v,b]:[n.batchSize,b,v],k=new class{constructor(e,t){this.variableNames=["x"],this.uniforms="pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,\n       inChannels : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=t,this.shaderKey=`im2col_${this.isChannelsLast}`}getUserCode(){let e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,n=this.isChannelsLast?"coords[1]":"coords[2]",a=this.isChannelsLast?"coords[2]":"coords[1]",r=this.isChannelsLast?"getX(batch, xRow, xCol, ch)":"getX(batch, ch, xRow, xCol)";return`\n    ${qz("index")} {\n      let coords = getCoordsFromIndex(index);\n      if(index < uniforms.size) {\n        let batch = coords[0];\n        let row = ${n};\n        let col = ${a};\n        let offsetY = (row / uniforms.outWidth) * uniforms.strides[0] - uniforms.pads[0];\n        let xRow = offsetY + uniforms.dilations[0] * (col / uniforms.itemsPerBlockRow);\n        var value = 0.0;\n        if(xRow < uniforms.xShape[${e}] && xRow >= 0) {\n          let offsetX = (row % uniforms.outWidth) * uniforms.strides[1] -\n              uniforms.pads[1];\n          let xCol = offsetX + uniforms.dilations[1] * ((col %\n              uniforms.itemsPerBlockRow) / uniforms.inChannels);\n          let ch = col % uniforms.inChannels;\n          if(xCol < uniforms.xShape[${t}] && xCol >= 0) {\n            value = ${r};\n          }\n        }\n        setOutputAtIndex(index, value);\n      }\n    }\n   `}}(w,x),I=[{type:"int32",data:[h.top,h.left]},{type:"int32",data:[c,p]},{type:"int32",data:[g,y]},{type:"int32",data:[f]},{type:"int32",data:[d*l]},{type:"int32",data:[d]}],S=a.runWebGPUProgram(k,[e],e.dtype,I),N=[];N.push(S);let C=oB({inputs:{x:t},backend:a,attrs:{shape:[1,b,-1]}});if(N.push(C),null!=i){let e=fU(i.shape,x);null!=e&&(i=oB({inputs:{x:i},backend:a,attrs:{shape:e}}),N.push(i))}if(null!=r){let e=fU(r.shape,x);null!=e&&(r=oB({inputs:{x:r},backend:a,attrs:{shape:e}}),N.push(r))}let T=uB({a:x?S:C,b:x?C:S,transposeA:!x,transposeB:!1,backend:a,bias:r,activation:o,preluActivationWeights:i,leakyreluAlpha:s}),E=oB({inputs:{x:T},backend:a,attrs:{shape:n.outShape}});N.push(T);for(let e of N)a.disposeData(e.dataId);return E}({x:e,filter:t,convInfo:n,backend:a,bias:r,preluActivationWeights:i,leakyreluAlpha:s,activation:o});let y,g=[n.padInfo.top,n.padInfo.left],A=[{type:"int32",data:[n.filterHeight,n.filterWidth]},{type:"int32",data:[...g]},{type:"int32",data:[n.strideHeight,n.strideWidth]},{type:"int32",data:[n.dilationHeight,n.dilationWidth]}];if(c)y=new class{constructor(e,t=!1,n=null,a=!1){this.variableNames=["x","W"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>,",this.workgroupSize=[4,4,8],this.outputShape=e.outShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.dispatchLayout=this.isChannelsLast?{x:[2],y:[1],z:[0,3]}:{x:[3],y:[2],z:[0,1]},this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=t,this.activation=n,this.hasPreluActivationWeights=a,t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`conv2dnaive_${this.activation}_${this.isChannelsLast}`}getUserCode(){return`\n       ${jW(this.activation,this.hasPreluActivationWeights,!1,4)}\n       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{\n         let coords = vec4<i32>(batch, row, col, chan);\n         if (coordsInBounds4D(coords, uniforms.xShape)) {\n           return  getX(batch, row, col, chan);\n         } else {\n          return 0.0;\n         }\n       }\n       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{\n         let coords = vec4<i32>(row, col, xChannel, outChannel);\n         if(coordsInBounds4D(coords, uniforms.wShape)) {\n           return getW(row, col, xChannel, outChannel);\n          } else {\n            return 0.0;\n          }\n       }\n       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {\n         let coords = ${this.isChannelsLast?"vec4<i32>(batch, row, col, chan);":"vec4<i32>(batch, chan, row, col);"}\n         if (coordsInBounds4D(coords, uniforms.outShape)) {\n           var value = valueIn;\n           ${qW(this.addBias,this.activation)}\n           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);\n         }\n       }\n       ${qz("index")} {\n         let coords = getOutputCoords();\n         let batch = coords[0];\n         let outChannel = ${this.isChannelsLast?"coords[3];":"coords[1];"}\n         let outRow = ${this.isChannelsLast?"coords[1];":"coords[2];"}\n         let outCol = ${this.isChannelsLast?"coords[2];":"coords[3];"}\n         var acc : f32 = 0.0;\n         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {\n           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {\n             let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * row - uniforms.pads[0];\n             let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * col - uniforms.pads[1];\n             for (var xChannel = 0; xChannel < ${this.isChannelsLast?"uniforms.xShape[3];":"uniforms.xShape[1];"} xChannel = xChannel + 1) {\n               ${this.isChannelsLast?"let v = readInp(batch, xRow, xCol, xChannel);":"let v = readInp(batch, xChannel, xRow, xCol);"}\n               let f = readFilt(row, col, xChannel, outChannel);\n               acc = acc + v * f;\n             }\n           }\n         }\n         writeResult(batch, outRow, outCol, outChannel, acc);\n       }\n     `}}(n,l,o,u);else{let e=d?n.outHeight*n.outWidth:n.outChannels,t=d?n.outChannels:n.outHeight*n.outWidth,r=n.filterHeight*n.filterWidth*n.inChannels;A.push({type:"int32",data:[e]},{type:"int32",data:[t]},{type:"int32",data:[r]});let i=a.adapterInfo.isIntel();y=new class{constructor(e,t,n,a,r=!1,i=null,s=!1,o=!1){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.outShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.isVec4=((e.inChannels%4==0||e.inChannels%3==0)&&this.isChannelsLast||e.outWidth%4==0&&!this.isChannelsLast)&&e.outChannels%4==0,this.dispatchLayout=this.isChannelsLast?{x:[3],y:[1,2],z:[0]}:{x:[2,3],y:[1],z:[0]},this.workgroupSize=oL(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=lL(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4?(this.outputComponent=4,this.isChannelsLast&&e.inChannels%4!=0?(this.innerElementSize=3,this.variableComponents=[1,4]):(this.innerElementSize=4,this.variableComponents=[4,4]),r&&(this.variableNames.push("bias"),this.variableComponents.push(4)),s&&(this.variableNames.push("preluActivationWeights"),this.variableComponents.push(4))):(this.innerElementSize=this.elementsPerThread[0],r&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights")),this.sequentialAccessByThreads=o,this.addBias=r,this.activation=i,this.hasPreluActivationWeights=s,this.tileAOuter=this.workgroupSize[1]*this.elementsPerThread[1],this.tileBOuter=this.workgroupSize[0]*this.elementsPerThread[0],this.tileInner=Math.max(this.workgroupSize[0]*this.innerElementSize,this.workgroupSize[1]),this.fitAOuter=t%this.tileAOuter==0,this.fitBOuter=n%this.tileBOuter==0,this.fitInner=a%this.tileInner==0,this.shaderKey=`conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}_${this.sequentialAccessByThreads}`}getUserCode(){let e=this.isVec4?ZW(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner):JW(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner,!1,null,this.sequentialAccessByThreads),t=this.isVec4?[this.innerElementSize,4,4]:[1,1,1];return`\n    ${function(e,t,n,a,r=!1,i=null,s=!1,o=4,l=4,u=4){let d=e?"\n      let coord = vec4<i32>(batch, xRow, xCol, xCh);\n      ":"\n      let coord = vec4<i32>(batch, xCh, xRow, xCol);\n      ",p=e?"\n      let coords = vec4<i32>(\n        batch,\n        row / outWidth,\n        row % outWidth,\n        col);\n      ":"\n      let coords = vec4<i32>(\n        batch,\n        row,\n        col / outWidth,\n        col % outWidth);\n      ",c=e?"uniforms.xShape[1]":"uniforms.xShape[2]",h=e?"uniforms.xShape[2]":"uniforms.xShape[3]",f=e?"row":"col",m=e?"col":"row",y=`\n      let inChannels = uniforms.wShape[2];\n      let outWidth = ${e?"uniforms.outShape[2]":"uniforms.outShape[3]"};\n      let outRow = ${f} / outWidth;\n      let outCol = ${f} % outWidth;\n\n      let WRow = ${m} / (uniforms.filterDims[1] * inChannels);\n      let WCol = ${m} / inChannels % uniforms.filterDims[1];\n      let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * WRow - uniforms.pads[0];\n      let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * WCol - uniforms.pads[1];\n      let xCh = ${m} % inChannels;\n      var resData = ${Gz(o)}(0.0);\n      // The bounds checking is always needed since we use it to pad zero for\n      // the 'same' padding type.\n      if (xRow >= 0 && xRow < ${c} && xCol >= 0 && xCol < ${h}) {\n        ${d}\n        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);\n        ${(e=>{switch(e){case 1:return"resData = x[xIndex];";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(o)}\n      }\n      return resData;`,g=e?t&&a?`\n      let col = colIn * ${o};\n      ${y}`:`\n      let col = colIn * ${o};\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${y}\n      }\n      return ${Gz(o)}(0.0);`:a&&n?`\n      let col = colIn * ${o};\n      ${y}`:`\n      let col = colIn * ${o};\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${y}\n      }\n      return ${Gz(o)}(0.0);`,A=`${(e=>{switch(e){case 1:return"return W[row * uniforms.wShape[3] + colIn];";case 4:return"return W[row * uniforms.wShape[3] / 4 + colIn];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(l)}`,x=Gz(u),b=Gz(e?o:l),v=Gz(e?l:o);return`\n      ${jW(i,s,4===u,4)}\n      fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${b} {\n        ${e?g:A}\n      }\n\n      fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${v} {\n        ${e?A:g}\n      }\n\n      fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${x}) {\n        let col = colIn * ${u};\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n        {\n        var value = valueIn;\n        let outWidth = ${e?"uniforms.outShape[2]":"uniforms.outShape[3]"};\n        ${p}\n        ${qW(r,i)}\n        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }`}(this.isChannelsLast,this.fitAOuter,this.fitBOuter,this.fitInner,this.addBias,this.activation,this.hasPreluActivationWeights,t[0],t[1],t[2])}\n    ${e}\n  `}}(n,e,t,r,l,o,u,i)}let x=[],b=[e,t];l&&(!d&&1===r.shape.length&&(r=oB({inputs:{x:r},backend:a,attrs:{shape:[r.shape[0],1,1]}}),x.push(r)),b.push(r)),u&&(!d&&1===i.shape.length&&(i=oB({inputs:{x:i},backend:a,attrs:{shape:[i.shape[0],1,1]}}),x.push(i)),b.push(i)),"leakyrelu"===o&&(A.push({type:"float32",data:[s]}),y.uniforms+=" alpha : f32,");let v=a.runWebGPUProgram(y,b,e.dtype,A);for(let e of x)a.disposeData(e.dataId);return v}var yU,gU={kernelName:Nt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,attrs:n,backend:a}=e,{x:r,filter:i}=t,{strides:s,pad:o,dataFormat:l,dilations:u,dimRoundingMode:d}=n,p=Bf.convertConv2DDataFormat(l);return mU({x:r,filter:i,convInfo:Bf.computeConv2DInfo(r.shape,i.shape,s,u,o,d,!1,p),backend:a})}},AU={kernelName:Ct,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,dy:i}=t,{strides:s,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:d}=a,p=Bf.convertConv2DDataFormat(l),c=Bf.computeConv2DInfo(r.shape,d,s,1,o,u,!1,p),h=new class{constructor(e){this.variableNames=["x","dy"],this.uniforms="pads : vec2<i32>, strides : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,this.shaderKey=`conv2DDerFilter_${this.isChannelsLast}`}getUserCode(){return`\n    ${qz("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let d2 = coords[3];\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b = b + 1) {\n          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {\n            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {\n              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              if (${this.isChannelsLast}) {\n                let dyValue = getDy(b, yR, yC, d2);\n                let xValue = getX(b, xR, xC, d1);\n                dotProd = dotProd + xValue * dyValue;\n              } else {\n                let dyValue = getDy(b, d2, yR, yC);\n                let xValue = getX(b, d1, xR, xC);\n                dotProd = dotProd + xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}(c),f=[{type:"int32",data:[c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.batchSize]},{type:"int32",data:[c.outHeight]},{type:"int32",data:[c.outWidth]},{type:"int32",data:[c.inHeight]},{type:"int32",data:[c.inWidth]}];return n.runWebGPUProgram(h,[r,i],r.dtype,f)}},xU={kernelName:Tt,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:n,backend:a,attrs:r}=e,{dy:i,filter:s}=n,{inputShape:o,strides:l,pad:u,dataFormat:d,dimRoundingMode:p}=r,c=Bf.convertConv2DDataFormat(d),h=Bf.computeConv2DInfo(o,s.shape,l,1,u,p,!1,c),f=[{type:"int32",data:[h.filterHeight,h.filterWidth]},{type:"int32",data:[h.filterHeight-1-h.padInfo.top,h.filterWidth-1-h.padInfo.left]},{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.batchSize,h.outHeight,h.outWidth,h.outChannels]}];if(He().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE")||"channelsLast"!==h.dataFormat)t=new class{constructor(e){this.variableNames=["dy","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>,",this.workgroupSize=[64,1,1],this.size=!1,this.isVec4=!1,this.workPerThread=1,this.outputShape=e.inShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.isVec4=this.isChannelsLast&&e.outChannels%4==0&&e.inChannels%4==0,this.isVec4?(this.workPerThread=2,this.outputComponent=4,this.workgroupSize=[4,4,4],this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize,[4,this.workPerThread,1])):(this.size=!0,this.workPerThread=1,this.workgroupSize=[64,1,1],this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize)),this.shaderKey=`conv2DDerInput_${this.isChannelsLast}_${this.isVec4}_${this.workPerThread}`}getUserCode(){let e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,n=this.isChannelsLast?3:1,a=`\n    ${qz()} {\n      let batch = i32(globalId.z) / uniforms.outShape[1];\n      let r = i32(globalId.z) % uniforms.outShape[1];\n      let c = i32(globalId.y) * ${this.workPerThread};\n      let d1 = i32(globalId.x) * 4;\n\n      let dyCorner = vec2<i32>(r, c) - uniforms.pads;\n\n      // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n      // ? = to be determined. : = across all values in that axis.\n      var dotProd: array<vec4<f32>, ${this.workPerThread}>;\n      for (var i = 0; i < ${this.workPerThread}; i++) {\n        dotProd[i] = vec4<f32>(0.0);\n      }\n      for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n        let dyR = f32(dyCorner.x + wR) / f32(uniforms.strides.x);\n        let wRPerm = uniforms.filterDims.x - 1 - wR;\n        if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) ||\n            fract(dyR) > 0.0) {\n          continue;\n        }\n        let idyR = i32(dyR);\n\n        for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n          let dyC = f32(dyCorner.y + wC) / f32(uniforms.strides.y);\n          let dyC2 = f32(dyCorner.y + 1 + wC) / f32(uniforms.strides.y);\n          let wCPerm = uniforms.filterDims.y - 1 - wC;\n          var bDyCVal = true;\n          var bDyCVal2 = true;\n          if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n              fract(dyC) > 0.0) {\n            bDyCVal = false;\n          }\n          if (dyC2 < 0.0 || dyC2 >= f32(uniforms.outBackprop[2]) ||\n              fract(dyC2) > 0.0) {\n            bDyCVal2 = false;\n          }\n\n          let idyC = i32(dyC);\n          let idyC2 = i32(dyC2);\n          if (bDyCVal && bDyCVal2) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[0] = dotProd[0] + tmpval;\n              xValue = getDy(batch, idyR, idyC2, d2);\n              dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),\n                                                  dot(xValue, wValue1),\n                                                  dot(xValue, wValue2),\n                                                  dot(xValue, wValue3));\n            }\n          } else if (bDyCVal) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[0] = dotProd[0] + tmpval;\n            }\n          } else if (bDyCVal2) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC2, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[1] = dotProd[1] + tmpval;\n            }\n          }\n        }\n      }\n\n      for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n        let coords = vec4<i32>(batch, r, c + i, d1);\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], dotProd[i]);\n        }\n      }\n    }\n    `;return this.isVec4?`\n    ${a}\n    `:`\n    ${qz("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[${n}];\n\n        let dyCorner = vec2<i32>(coords[${e}], coords[${t}]) - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.strides.x);\n          let wRPerm = uniforms.filterDims.x - 1 - wR;\n          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||\n              wRPerm < 0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.strides.y);\n            let wCPerm = uniforms.filterDims.y - 1 - wC;\n            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n                fract(dyC) > 0.0 || wCPerm < 0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {\n              let xValue = ${this.isChannelsLast?"getDy(batch, idyR, idyC, d2)":"getDy(batch, d2, idyR, idyC)"};\n              let wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd = dotProd + xValue * wValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}(h);else{t=new class{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.inShape,Tr.assert("channelsLast"===e.dataFormat,(()=>"TODO: NCHW is unimplemented")),this.isVec4=e.inChannels%4==0&&e.outChannels%4==0,this.dispatchLayout={x:[3],y:[1,2],z:[0]},this.workgroupSize=oL(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=lL(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4&&(this.outputComponent=4,this.variableComponents=[4,1]),this.shaderKey=`conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`}getUserCode(){let e=this.isVec4?ZW(this.elementsPerThread,this.workgroupSize):JW(this.elementsPerThread,this.workgroupSize);return`\n    ${function(e=4){let t=`if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        \n      let outRow = row / uniforms.outShape[2];\n      let outCol = row % uniforms.outShape[2];\n\n      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];\n      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {\n        return ${Gz(e)}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {\n        return ${Gz(e)}(0.0);\n      }\n      let coord = vec4<i32>(\n          batch,\n          i32(xR),\n          i32(xC),\n          col % uniforms.outBackprop[3]);\n      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${e}];\n      }\n      return ${Gz(e)}(0.0);`;return`\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${Gz(e)} {\n    let col = colIn * ${e};\n    ${t}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${Gz(e)} {\n    let col = colIn * ${e};\n    let coordX = uniforms.filterDims.x - 1 -\n        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n    let coordY = uniforms.filterDims.y - 1 -\n        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&\n        coordX >= 0 && coordY >= 0) {\n      let rowInner = row % uniforms.outBackprop[3];\n      let coord = vec4<i32>(coordX, coordY, col, rowInner);\n      ${(e=>{switch(e){case 1:return"return W[getIndexFromCoords4D(coord, uniforms.wShape)];";case 4:return"\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];\n            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];\n            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];\n            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];\n            return vec4<f32>(v0, v1, v2, v3);\n            ";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(e)}\n    }\n    return ${Gz(e)}(0.0);\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${Gz(e)}) {\n    let col = colIn * ${e};\n    if (row < uniforms.dimAOuter && (col + ${e-1}) < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outCoord = vec4<i32>(\n          batch,\n          row / uniforms.outShape[2],\n          row % uniforms.outShape[2],\n          col);\n      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${e}] = value;\n    }\n  }`}(this.isVec4?4:1)}\n    ${e}\n    `}}(h);let e=h.inHeight*h.inWidth,n=h.inChannels,a=h.filterHeight*h.filterWidth*h.outChannels;f.push({type:"uint32",data:[e]},{type:"uint32",data:[n]},{type:"uint32",data:[a]})}return a.runWebGPUProgram(t,[i,s],"float32",f)}},bU={kernelName:Et,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i}=t,{strides:s,pad:o,dilations:l}=a,u=Bf.computeConv3DInfo(r.shape,i.shape,s,l,o),d=[u.padInfo.front,u.padInfo.top,u.padInfo.left],p=[{type:"int32",data:[u.filterDepth,u.filterHeight,u.filterWidth]},{type:"int32",data:[...d]},{type:"int32",data:[u.strideDepth,u.strideHeight,u.strideWidth]},{type:"int32",data:[u.dilationDepth,u.dilationHeight,u.dilationWidth]}],c=new class{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims: vec3<i32>, pads: vec3<i32>, strides: vec3<i32>, dilations: vec3<i32>,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3dnaive"}getUserCode(){return`\n    ${qz("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let batch = coords.x;\n        let d2 = coords.u;\n\n        let xFRCCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;\n        let xFCorner = xFRCCorner.x;\n        let xRCorner = xFRCCorner.y;\n        let xCCorner = xFRCCorner.z;\n\n        let inputDepthNearestVec4 = (uniforms.xShape.u / 4) * 4;\n        let inputDepthVec4Remainder = uniforms.xShape.u % 4;\n\n        var dotProd = 0.0;\n        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {\n          let xF = xFCorner + wF * uniforms.dilations[0];\n          if (xF < 0 || xF >= uniforms.xShape.y) {\n            continue;\n          }\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let xR = xRCorner + wR * uniforms.dilations[1];\n            if (xR < 0 || xR >= uniforms.xShape.z) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let xC = xCCorner + wC * uniforms.dilations[2];\n              if (xC < 0 || xC >= uniforms.xShape.w) {\n                continue;\n              }\n\n              for (var d1 = 0; d1 < inputDepthNearestVec4; d1 += 4) {\n                let xValues = vec4<f32>(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                let wValues = vec4<f32>(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (inputDepthVec4Remainder == 1) {\n                dotProd += getX(batch, xF, xR, xC, inputDepthNearestVec4) *\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2);\n              } else if (inputDepthVec4Remainder == 2) {\n                let xValues = vec2<f32>(\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1)\n                );\n                let wValues = vec2<f32>(\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (inputDepthVec4Remainder == 3) {\n                let xValues = vec3<f32>(\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2)\n                );\n                let wValues = vec3<f32>(\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }`}}(u),h=bi(r.dtype,i.dtype);return n.runWebGPUProgram(c,[r,i],h,p)}},vU={kernelName:Rt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,dy:i}=t,{strides:s,pad:o,filterShape:l}=a,u=Bf.computeConv3DInfo(r.shape,l,s,1,o),d=new class{constructor(e){this.variableNames=["x","dy"],this.uniforms="pads : vec3<i32>, strides : vec3<i32>, batchSize : i32, outDepth : i32,\n       outHeight : i32, outWidth : i32, inDepth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerFilter"}getUserCode(){return`\n    ${qz("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wF = coords.x;\n        let wR = coords.y;\n        let wC = coords.z;\n        let d1 = coords.w;\n        let d2 = coords.u;\n\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b++) {\n          for (var yF = 0; yF < uniforms.outDepth; yF++) {\n            let xF = wF + yF * uniforms.strides[0] - uniforms.pads[0];\n            if (xF < 0 || xF >= uniforms.inDepth) {\n              continue;\n            }\n\n            for (var yR = 0; yR < uniforms.outHeight; yR++) {\n              let xR = wR + yR * uniforms.strides[1] - uniforms.pads[1];\n              if (xR < 0 || xR >= uniforms.inHeight) {\n                continue;\n              }\n\n              for (var yC = 0; yC < uniforms.outWidth; yC++) {\n                let xC = wC + yC * uniforms.strides[2] - uniforms.pads[2];\n                if (xC < 0 || xC >= uniforms.inWidth) {\n                  continue;\n                }\n\n                let dyValue = getDy(b, yF, yR, yC, d2);\n                let xValue = getX(b, xF, xR, xC, d1);\n                dotProd += xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}(u),p=[{type:"int32",data:[u.padInfo.front,u.padInfo.top,u.padInfo.left]},{type:"int32",data:[u.strideDepth,u.strideHeight,u.strideWidth]},{type:"int32",data:[u.batchSize]},{type:"int32",data:[u.outDepth]},{type:"int32",data:[u.outHeight]},{type:"int32",data:[u.outWidth]},{type:"int32",data:[u.inDepth]},{type:"int32",data:[u.inHeight]},{type:"int32",data:[u.inWidth]}];return n.runWebGPUProgram(d,[r,i],i.dtype,p)}},wU={kernelName:$t,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:i}=t,{strides:s,pad:o,inputShape:l}=a,u=Bf.computeConv3DInfo(l,i.shape,s,1,o),d=new class{constructor(e){this.variableNames=["dy","W"],this.uniforms="filterDims : vec3<i32>, pads : vec3<i32>, strides : vec3<i32>,\n      outDepth : i32, outHeight : i32, outWidth : i32, outChannels : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerInput"}getUserCode(){return`\n    ${qz("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let d1 = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyFCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        var dotProd = 0.0;\n        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {\n          let dyF = f32(dyFCorner + wF) / f32(uniforms.strides[0]);\n          if (dyF < 0.0 || dyF >= f32(uniforms.outDepth) || fract(dyF) > 0.0) {\n            continue;\n          }\n          let idyF = i32(dyF);\n\n          let wFPerm = uniforms.filterDims[0] - 1 - wF;\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            let wRPerm = uniforms.filterDims[1] - 1 - wR;\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let wCPerm = uniforms.filterDims[2] - 1 - wC;\n\n              for (var d2 = 0; d2 < uniforms.outChannels; d2++) {\n                let xValue = getDy(batch, idyF, idyR, idyC, d2);\n                let wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}(u),p=[{type:"int32",data:[u.filterDepth,u.filterHeight,u.filterWidth]},{type:"int32",data:[u.filterDepth-1-u.padInfo.front,u.filterHeight-1-u.padInfo.top,u.filterWidth-1-u.padInfo.left]},{type:"int32",data:[u.strideDepth,u.strideHeight,u.strideWidth]},{type:"int32",data:[u.outDepth]},{type:"int32",data:[u.outHeight]},{type:"int32",data:[u.outWidth]},{type:"int32",data:[u.outChannels]}];return n.runWebGPUProgram(d,[r,i],r.dtype,p)}},kU=AB({opType:yL.COS}),IU={kernelName:Mt,backendName:"webgpu",kernelFunc:kU},SU=AB({opType:yL.COSH}),NU={kernelName:_t,backendName:"webgpu",kernelFunc:SU},CU={kernelName:Pt,backendName:"webgpu",kernelFunc:e=>{let{inputs:t,backend:n,attrs:a}=e,{image:r,boxes:i,boxInd:s}=t,{cropSize:o,method:l,extrapolationValue:u}=a,d=new class{constructor(e,t,n,a){this.variableNames=["Image","Boxes","BoxInd"],this.uniforms="extrapolationValue : f32,",this.workgroupSize=[64,1,1],this.size=!0;let[r]=t;this.outputShape=[r,n[0],n[1],e],this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.methodId="bilinear"===a?1:0,this.cropHeightBiggerThan1=this.outputShape[1]>1,this.cropWidthBiggerThan1=this.outputShape[2]>1,this.shaderKey=`cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`}getUserCode(){let[e,t]=["f32(uniforms.imageShape[1] - 1)","f32(uniforms.imageShape[2] - 1)"],[n,a,r]=this.cropHeightBiggerThan1?[`(${e} / f32(uniforms.outShape[1] - 1))`,"(y2-y1) * height_ratio",`y1*${e} + f32(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${e}`],[i,s,o]=this.cropWidthBiggerThan1?[`(${t} / f32(uniforms.outShape[2] - 1))`,"(x2-x1) * width_ratio",`x1*${t} + f32(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${t}`];return`\n    ${qz("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let height_ratio = f32(${n});\n        let width_ratio = f32(${i});\n        let b = coords[0];\n        let y = coords[1];\n        let x = coords[2];\n        let d = coords[3];\n        // get box vals\n        let y1 = getBoxes(b, 0);\n        let x1 = getBoxes(b, 1);\n        let y2 = getBoxes(b, 2);\n        let x2 = getBoxes(b, 3);\n        // get image in batch index\n        let bInd = i32(round(getBoxInd(b)));\n        if(bInd < 0 || bInd >= uniforms.outShape[0]) {\n          return;\n        }\n        let height_scale = ${a};\n        let width_scale = ${s};\n        let in_y = ${r};\n        if( in_y < 0.0 || in_y > ${e} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let in_x = ${o};\n        if( in_x < 0.0 || in_x > ${t} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let sourceFracIndexCR = vec2<f32>(in_x,in_y);\n        if(${this.methodId} == 1) {\n          // Compute the four integer indices.\n          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);\n          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));\n          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);\n          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);\n          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);\n          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);\n          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);\n          let top = topLeft + (topRight - topLeft) * fracCR.x;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          let newValue = top + (bottom - top) * fracCR.y;\n          setOutputAtIndex(index, newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          let sourceNearestCR = vec2<i32>(floor(\n            sourceFracIndexCR + vec2<f32>(0.5,0.5)));\n          let newValue = getImage(\n            bInd, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    }\n    `}}(r.shape[3],i.shape,o,l),p=[{type:"float32",data:[u]}];return n.runWebGPUProgram(d,[r,i,s],"float32",p)}};!function(e){e.Prod="*",e.Sum="+"}(yU||(yU={}));var TU=class{constructor(e,t,n,a){this.variableNames=["x"],this.uniforms="index : f32,",this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=t,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.exclusive=n,this.reverse=a,this.op=e,this.shaderKey=`cum_${this.op}_${this.exclusive}_${this.reverse}`}getUserCode(){let e=this.outputShape.length,t=this.op===yU.Prod?"1.0":"0.0",n=this.exclusive?t:`getX(${EU(e,"coords",this.op)})`,a=this.outputShape[this.outputShape.length-1],r="",i="";return this.exclusive?(r=this.reverse?"end != "+(a-1):"end != 0",i=this.reverse?"end + 1":"end - 1"):(r=this.reverse?`end + pow2 < ${a}`:"end >= pow2",i=this.reverse?"end + pow2":"end - pow2"),`\n      ${qz("index")} {\n       if (index < uniforms.size) {\n         var coords = getCoordsFromIndex(index);\n\n         let end = ${RU(e,"coords",this.op)};\n         var val = ${n};\n         let pow2 = i32(pow(2.0, uniforms.index));\n         if (${r}) {\n           let idx = ${i};\n           ${RU(e,"coords",this.op)} = idx;\n           val ${this.op}= getX(${EU(e,"coords",this.op)});\n         }\n         setOutputAtIndex(index, val);\n       }\n      }\n    `}};function EU(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function RU(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function $U(e,t,n,a,r,i){let s=t.shape.length,o=Bf.getAxesPermutation([a],s),l=t;null!=o&&(l=hV({inputs:{x:t},backend:n,attrs:{perm:o}}));let u=Bf.getInnerMostAxes(1,s)[0];if(u!==s-1)throw new Error(`WebGPU cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${a}`);let d=l.shape[u],p=hB({inputs:{x:l},backend:n});for(let t=0;t<=Math.ceil(Math.log2(d))-1;t++){let a=new TU(e,l.shape,!1,i),r=p,s=[{type:"float32",data:[t]}];p=n.runWebGPUProgram(a,[p],p.dtype,s),n.disposeData(r.dataId)}if(r){let t=new TU(e,l.shape,r,i),a=p,s=[{type:"float32",data:[0]}];p=n.runWebGPUProgram(t,[p],p.dtype,s),n.disposeData(a.dataId)}if(null!=o){let e=hV({inputs:{x:p},backend:n,attrs:{perm:Bf.getUndoAxesPermutation(o)}});return n.disposeData(p.dataId),n.disposeData(l.dataId),e}return p}var MU={kernelName:Ft,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,exclusive:s,reverse:o}=a;return $U(yU.Prod,r,n,i,s,o)}},_U={kernelName:Ot,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,exclusive:s,reverse:o}=a;return $U(yU.Sum,r,n,i,s,o)}},FU={kernelName:Dt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,weights:i}=t,{size:s,binaryOutput:o}=a,l=1===r.shape.length,u=Tr.sizeFromShape(i.shape)>0,d=i.dtype,p=l?[r.shape[0]]:[r.shape[0],r.shape[1]],c=iB({backend:n,attrs:{shape:l?[s]:[r.shape[0],s],value:0,dtype:d}}),h=new KV(p,u,o),f=[{type:"int32",data:[s]}],m=u?[r,i]:[r];return n.runWebGPUProgram(h,m,d,f,c)}},OU={kernelName:zt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockSize:i,dataFormat:s}=a,o=r.shape[0],l=("NHWC"===s?r.shape[1]:r.shape[2])*i,u=("NHWC"===s?r.shape[2]:r.shape[3])*i,d=("NHWC"===s?r.shape[3]:r.shape[1])/(i*i),p="NHWC"===s?[o,l,u,d]:[o,d,l,u],c=[{type:"int32",data:[i]}],h=new class{constructor(e,t){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.uniforms="blockSize : i32,",this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`depthToSpace_${t}`,this.dataFormat=t}getUserCode(){return`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let h = ${this.getHeightCoordString()};\n          let w = ${this.getWidthCoordString()};\n          let d = ${this.getDepthCoordString()};\n\n          let in_h = h / uniforms.blockSize;\n          let offset_h = h % uniforms.blockSize;\n          let in_w = w / uniforms.blockSize;\n          let offset_w = w % uniforms.blockSize;\n          let offset_d = (offset_h * uniforms.blockSize + offset_w) *\n            ${this.getOutputDepthSize()};\n          let in_d = d + offset_d;\n\n          let rlt = ${this.getInputSamplingString()};\n          setOutputAtIndex(index, rlt);\n        }\n      }`}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?"uniforms.outShape[3]":"uniforms.outShape[1]"}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}(p,s);return n.runWebGPUProgram(h,[r],r.dtype,c)}},PU=class{constructor(e,t=!1,n=null,a=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,",this.workgroupSize=[64,1,1],this.workPerThread=4,this.outputComponent=4,this.outputShape=e.outShape,this.virtualWidth=Math.ceil(this.outputShape[2]/this.workPerThread)*this.workPerThread;let r=[this.outputShape[0],this.outputShape[1],this.virtualWidth,this.outputShape[3]];this.dispatchLayout=uL(r),this.dispatch=iL(this.dispatchLayout,r,this.workgroupSize,[this.outputComponent*this.workPerThread,1,1]),Tr.assert("channelsLast"===e.dataFormat,(()=>"TODO: NCHW is unimplemented")),t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=n,this.hasPreluActivation=a,this.shaderKey=`depthwiseVec4_${n}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${this.convInfo.strideWidth}_${this.workPerThread}`}getUserCode(){let e=(this.workPerThread-1)*this.convInfo.strideWidth+this.convInfo.filterWidth,t=this.convInfo.strideHeight,n=this.convInfo.strideWidth;return`\n      ${jW(this.activation,this.hasPreluActivation,!0,4)}\n      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {\n        var value = vec4<f32>(0.0);\n        if (col >=0 && col < uniforms.inDims[1]) {\n          value = getX(batch, row, col, channel);\n        }\n        return value;\n      }\n\n      ${qz("index")} {\n        let width0 = uniforms.outShape[3] / ${this.outputComponent};\n        let d1 = (index % width0) * ${this.outputComponent};\n        var index1 = index / width0;\n        let width1 = uniforms.virtualWidth / ${this.workPerThread};\n        let c = (index1 % width1) * ${this.workPerThread};\n        index1 = index1 / width1;\n        let r = index1 % uniforms.outShape[1];\n        let batch = index1 / uniforms.outShape[1];\n\n        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${t}, ${n}) - uniforms.pads;\n\n        let xRCorner = xRCCorner.x;\n        let xCCorner = xRCCorner.y;\n        var xVals : array<vec4<f32>, ${e}>;\n        var dotProd : array<vec4<f32>, ${this.workPerThread}>;\n        for (var i = 0; i < ${this.workPerThread}; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n\n        // Use constant instead of uniform can give better performance.\n        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {\n          let xR = xRCorner + wR;\n          if (xR >=0 && xR < uniforms.inDims[0]) {\n            for (var i = 0; i < ${e}; i++) {\n              xVals[i] = readX(batch, xR, xCCorner + i, d1);\n            }\n            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {\n              let wValue = getW(wR, wC, d1, 0);\n              for (var i = 0; i < ${this.workPerThread}; i++) {\n                dotProd[i] = fma(xVals[i * ${n} + wC], wValue, dotProd[i]);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let coords = vec4<i32>(batch, r, c + i, d1);\n          if (coordsInBounds4D(coords, uniforms.outShape)) {\n            var value = dotProd[i];\n            ${qW(this.addBias,this.activation)}\n            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n          }\n        }\n      }\n    `}},DU=class{constructor(e,t=!1,n=null,a=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,\n      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=n,this.hasPreluActivation=a,this.shaderKey=`depthwise_${this.activation}_${this.isChannelsLast}`}getUserCode(){let e=this.isChannelsLast?"getX(batch, xR, xC, d1);":"getX(batch, d1, xR, xC);";return`\n      ${jW(this.activation,this.hasPreluActivation,!1,4)}\n\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let batch = coords[0];\n          let xRCCorner = vec2<i32>(coords.${this.isChannelsLast?"yz":"zw"}) * uniforms.strides - uniforms.pads;\n          let d2 = coords[${this.isChannelsLast?3:1}];\n          let channelMul = uniforms.wShape[3];\n          let d1 = d2 / channelMul;\n          let q = d2 % channelMul;\n\n          let inputRowStart = xRCCorner.x;\n          let inputColStart = xRCCorner.y;\n          let inputRowEnd = inputRowStart + uniforms.filterHeight *\n              uniforms.dilations[0];\n          let inputColEnd = inputColStart + uniforms.filterWidth *\n              uniforms.dilations[1];\n\n          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get\n          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all\n          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.\n          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.\n          var value = 0.0;\n\n          // Extract if checking out of for loop for performance.\n          if (inputRowStart >= 0 && inputColStart >= 0 &&\n            inputRowEnd < uniforms.inDims[0] &&\n                inputColEnd < uniforms.inDims[1]) {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  let xVal = ${e};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            } else {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                if (xR < 0 || xR >= uniforms.inDims[0]) {\n                  continue;\n                }\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  if (xC < 0 || xC >= uniforms.inDims[1]) {\n                    continue;\n                  }\n\n                  let xVal = ${e};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            }\n            ${qW(this.addBias,this.activation)}\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `}},zU={kernelName:Lt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i}=t,{strides:s,pad:o,dataFormat:l,dilations:u,dimRoundingMode:d}=a,p=Bf.convertConv2DDataFormat(l),c=u;null==c&&(c=[1,1]);let h,f=Bf.computeConv2DInfo(r.shape,i.shape,s,c,o,d,!0,p),m=[{type:"int32",data:[f.padInfo.top,f.padInfo.left]},{type:"int32",data:[f.inHeight,f.inWidth]}],y="channelsLast"===f.dataFormat;return!y&&f.inHeight>16&&f.inWidth>16&&1===f.strideHeight&&1===f.strideWidth&&1===f.dilationWidth&&1===f.dilationHeight&&f.inChannels===f.outChannels?h=new class{constructor(e,t,n,a=!1,r=null,i=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>,",this.workgroupSize=[16,16,1],this.outputShape=e,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),a&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.addBias=a,this.activation=r,this.hasPreluActivation=i,this.filterHeight=t,this.filterWidth=n,this.shaderKey=`depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`}getUserCode(){let e=this.filterWidth*this.filterHeight,t=this.workgroupSize[0]*this.workgroupSize[1]*this.workgroupSize[2],n=this.workgroupSize[1]+this.filterHeight-1,a=this.workgroupSize[0]+this.filterWidth-1;return`\n      ${jW(this.activation,this.hasPreluActivation,!1,4)}\n\n      var<workgroup> mm_Asub : array<array<f32, ${a}>, ${n}>;\n      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;\n      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {\n        var value = 0.0;\n        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])\n        {\n          value = getX(batch, channel, row, col);\n        }\n        return value;\n      }\n\n      ${qz()} {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pads;\n        let channelMul = uniforms.wShape[3];\n        let d1 = coords[1] / channelMul;\n        let q = coords[1] % channelMul;\n\n        let inputRowStart = xRCCorner.x;\n        let inputColStart = xRCCorner.y;\n\n        let localRow = i32(localId.y);\n        let localCol = i32(localId.x);\n\n        // Load one tile of X into local memory.\n        for (var inputRow = localRow; inputRow < ${n}; inputRow = inputRow + ${this.workgroupSize[1]}) {\n          for (var inputCol = localCol; inputCol < ${a}; inputCol = inputCol + ${this.workgroupSize[0]}) {\n            let rowOffset = inputRow - localRow;\n            let colOffset = inputCol - localCol;\n            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);\n          }\n        }\n\n        // Load one tile of W into local memory.\n        var wIndex = i32(localIndex);\n        ${e<t?`if (wIndex < ${e})`:`for(; wIndex < ${e}; wIndex = wIndex + ${t})`}\n\n        {\n          let wRow = wIndex / ${this.filterWidth};\n          let wCol = wIndex % ${this.filterWidth};\n          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);\n        }\n\n        workgroupBarrier();\n\n        var value = 0.0;\n        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {\n          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {\n            let xVal = mm_Asub[localRow + wR][localCol + wC];\n            let wVal = mm_Bsub[wR][wC];\n            value = fma(xVal, wVal, value);\n          }\n        }\n        ${qW(this.addBias,this.activation)}\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `}}(f.outShape,f.filterHeight,f.filterWidth):y&&f.outHeight>4&&f.outWidth>4&&f.strideWidth<=2&&f.inChannels===f.outChannels&&1===f.dilationHeight&&1===f.dilationWidth&&f.inChannels%4==0?(h=new PU(f),m.push({type:"int32",data:[h.virtualWidth]})):(h=new DU(f),m.push({type:"int32",data:[f.filterHeight]},{type:"int32",data:[f.filterWidth]},{type:"int32",data:[f.strideHeight,f.strideWidth]},{type:"int32",data:[f.dilationHeight,f.dilationWidth]})),n.runWebGPUProgram(h,[r,i],r.dtype,m)}},LU={kernelName:Wt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,dy:i}=t,{strides:s,dilations:o,pad:l,dimRoundingMode:u,filterShape:d}=a,p=Bf.computeConv2DInfo(r.shape,d,s,o,l,u,!0),c=new class{constructor(e){this.variableNames=["x","dy"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>, outHeight : i32,\n      outWidth : i32, inHeight : i32, inWidth : i32, batchSize : i32, channelMul : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_filter"}getUserCode(){return`\n      ${qz("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let dm = coords[3];\n        let d2 = d1 * uniforms.channelMul + dm;\n\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b++) {\n          for (var yR = 0; yR < uniforms.outHeight; yR++) {\n            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];\n\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC++) {\n              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              let dyValue = getDy(b, yR, yC, d2);\n              let xValue = getX(b, xR, xC, d1);\n              dotProd += xValue * dyValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}(p),h=[{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.padInfo.top,p.padInfo.left]},{type:"int32",data:[p.filterHeight,p.filterWidth]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]},{type:"int32",data:[p.inHeight]},{type:"int32",data:[p.inWidth]},{type:"int32",data:[p.batchSize]},{type:"int32",data:[p.outChannels/p.inChannels]}];return n.runWebGPUProgram(c,[r,i],"float32",h)}},WU={kernelName:Bt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:i}=t,{strides:s,dilations:o,pad:l,dimRoundingMode:u,inputShape:d}=a,p=Bf.computeConv2DInfo(d,i.shape,s,o,l,u,!0),c=new class{constructor(e){this.variableNames=["dy","W"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, channelMul : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_input"}getUserCode(){return`\n      ${qz("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[3];\n        let dyCorner = coords.yz - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n\n          let idyR = i32(dyR);\n          let wRPerm = uniforms.filterDims[0] - 1 - wR;\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n\n            let idyC = i32(dyC);\n            let wCPerm = uniforms.filterDims[1] - 1 - wC;\n\n            for (var dm = 0; dm < uniforms.channelMul; dm++) {\n              let d2 = d1 * uniforms.channelMul + dm;\n              let xValue = getDy(batch, idyR, idyC, d2);\n              let wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}(p),h=[{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.filterHeight-1-p.padInfo.top,p.filterWidth-1-p.padInfo.left]},{type:"int32",data:[p.filterHeight,p.filterWidth]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]},{type:"int32",data:[p.outChannels/p.inChannels]}];return n.runWebGPUProgram(c,[r,i],r.dtype,h)}},BU={kernelName:Vt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:a}=t,r=[...a.shape,...a.shape],i=Tr.sizeFromShape(a.shape),s=oB({inputs:{x:a},backend:n,attrs:{shape:[i]}}),o=new class{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,e],this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="diag"}getUserCode(){return`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `}}(i),l=n.runWebGPUProgram(o,[s],s.dtype),u=oB({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeData(s.dataId),n.disposeData(l.dataId),u}},VU={kernelName:Ut,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i}=t,{strides:s,pad:o,dilations:l}=a,u=Bf.computeDilation2DInfo(r.shape,i.shape,s,o,"NHWC",l),d=[u.padInfo.top,u.padInfo.left],p=[{type:"int32",data:[u.filterHeight,u.filterWidth]},{type:"int32",data:[...d]},{type:"int32",data:[u.strideHeight,u.strideWidth]},{type:"int32",data:[u.dilationHeight,u.dilationWidth]}],c=new class{constructor(e){this.variableNames=["x","w"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="dilation2d"}getUserCode(){return`\n       ${qz("index")} {\n         if (index < uniforms.size) {\n           let neg_infinity = -3.4e38;\n           let coords = getOutputCoords();\n           let batch = coords.x;\n           let d1 = coords.w;\n           let outTopLeftCorner = coords.yz * uniforms.strides - uniforms.pads;\n           let hBeg = outTopLeftCorner.x;\n           let wBeg = outTopLeftCorner.y;\n\n           var curVal = neg_infinity;\n           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {\n             let hIn = hBeg + h * uniforms.dilations[0];\n\n             if (hIn >= 0 && hIn < uniforms.xShape[1]) {\n               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {\n                 let wIn = wBeg + w * uniforms.dilations[1];\n\n                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {\n                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);\n                   if (val > curVal) {\n                     curVal = val;\n                   }\n                 }\n               }\n             }\n           }\n\n           setOutputAtIndex(index, curVal);\n         }\n       }\n     `}}(u);return n.runWebGPUProgram(c,[r,i],r.dtype,p)}},UU={kernelName:Ht,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i,dy:s}=t,{strides:o,pad:l,dilations:u}=a,d=Bf.computeDilation2DInfo(r.shape,i.shape,o,l,"NHWC",u),p=i.dtype,c=new class{constructor(e,t,n){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e.filterShape,this.dispatchLayout=uL(e.outShape),this.dispatch=iL(this.dispatchLayout,e.outShape,this.workgroupSize),"float32"!==n&&"int32"!==n)throw new Error(`Dilation2DBackpropFilter only supports float32 and int32\n          types, does not support ${n} type.`);this.type=n,this.shaderKey="dilation2DBackpropFilter"}getUserCode(){return`\n       ${qz("index")} {\n         if (index < uniforms.dySize) {\n           let coords = getDyCoordsFromIndex(index);\n           let b = coords[0];\n           let r = coords[1];\n           let c = coords[2];\n           let d = coords[3];\n\n           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;\n           var curVal = -3.4e38;  // neg_infinity\n           var wRMax = 0;\n           var wCMax = 0;\n\n           // In the case of multiple argmax branches, we only back-propagate\n           // along the last branch, i.e., the one with largest value of\n           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling\n           // backward routines.\n           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n             let xR = dyCorner.x + wR * uniforms.dilations[0];\n\n             if (xR >= 0 && xR < uniforms.xShape[1]) {\n               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n                 let xC = dyCorner.y + wC * uniforms.dilations[1];\n\n                 if (xC >= 0 && xC < uniforms.xShape[2]) {\n                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);\n                   if (val > curVal) {\n                     curVal = val;\n                     wRMax = wR;\n                     wCMax = wC;\n                   }\n                 }\n               }\n             }\n           }\n\n           let flatIndexIn = d + uniforms.wShape[2] * (wCMax + wRMax * uniforms.wShape[1]);\n           let value = getDy(b, r, c, d);\n           ${Uz("&result[flatIndexIn]","value",this.type)}\n         }\n       }\n     `}}(d,i.shape,p),h=[{type:"int32",data:[d.filterHeight,d.filterWidth]},{type:"int32",data:[d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.dilationHeight,d.dilationWidth]},{type:"int32",data:[Tr.sizeFromShape(d.outShape)]}],f=iB({backend:n,attrs:{shape:i.shape,value:0,dtype:p}});return n.runWebGPUProgram(c,[r,i,s],p,h,f)}},GU={kernelName:Gt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i,dy:s}=t,{strides:o,pad:l,dilations:u}=a,d=Bf.computeDilation2DInfo(r.shape,i.shape,o,l,"NHWC",u),p=r.dtype,c=new class{constructor(e,t){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e.inShape,this.dispatchLayout=uL(e.outShape),this.dispatch=iL(this.dispatchLayout,e.outShape,this.workgroupSize),"float32"!==t&&"int32"!==t)throw new Error(`Dilation2DBackpropInput only supports float32 and int32\n          types, does not support ${t} type.`);this.type=t,this.shaderKey="dilation2DBackpropInput"}getUserCode(){return`\n       ${qz("index")} {\n         if (index < uniforms.dySize) {\n           let coords = getDyCoordsFromIndex(index);\n           let b = coords[0];\n           let r = coords[1];\n           let c = coords[2];\n           let d = coords[3];\n\n           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;\n           var curVal = -3.4e38;  // neg_infinity\n           var xRMax = 0;\n           var xCMax = 0;\n\n           // In the case of multiple argmax branches, we only back-propagate\n           // along the last branch, i.e., the one with largest value of\n           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling\n           // backward routines.\n           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n             let xR = dyCorner.x + wR * uniforms.dilations[0];\n\n             if (xR >= 0 && xR < uniforms.xShape[1]) {\n               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n                 let xC = dyCorner.y + wC * uniforms.dilations[1];\n\n                 if (xC >= 0 && xC < uniforms.xShape[2]) {\n                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);\n                   if (val > curVal) {\n                     curVal = val;\n                     xRMax = xR;\n                     xCMax = xC;\n                   }\n                 }\n               }\n             }\n           }\n\n           let flatIndexIn = d + uniforms.xShape[3] *\n               (xCMax + uniforms.xShape[2] * (xRMax + uniforms.xShape[1] * b));\n           let value = getDy(b, r, c, d);\n           ${Uz("&result[flatIndexIn]","value",this.type)}\n         }\n       }\n     `}}(d,p),h=[{type:"int32",data:[d.filterHeight,d.filterWidth]},{type:"int32",data:[d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.dilationHeight,d.dilationWidth]},{type:"int32",data:[Tr.sizeFromShape(d.outShape)]}],f=iB({backend:n,attrs:{shape:d.inShape,value:0,dtype:p}});return n.runWebGPUProgram(c,[r,i,s],p,h,f)}},HU=xB({opType:hL.MUL,cpuKernelImpl:LB,supportsComplex:!0}),jU={kernelName:qn,backendName:"webgpu",kernelFunc:HU};function qU(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,keepDims:s}=a;return yV(r,i,s,"sum",n)}var XU={kernelName:Oa,backendName:"webgpu",kernelFunc:qU},KU={kernelName:Xt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{equation:r}=a,i=t,{allDims:s,summedDims:o,idDims:l}=Bf.decodeEinsumEquation(r,i.length);Bf.checkEinsumDimSizes(s.length,l,i);let{path:u,steps:d}=Bf.getEinsumComputePath(o,l),p=d.length,c=null,h=s.length,f=[];for(let e=0;e<p;++e){for(let t of d[e]){let e,{permutationIndices:a,expandDims:r}=Bf.getEinsumPermutation(h,l[t]);Bf.isIdentityPermutation(a)?e=i[t]:(e=hV({inputs:{x:i[t]},backend:n,attrs:{perm:a}}),f.push(e));let s=e.shape.slice();for(let e=0;e<r.length;++e)s.splice(r[e],0,1);Tr.arraysEqual(e.shape,s)||(e=oB({inputs:{x:e},backend:n,attrs:{shape:s}}),f.push(e)),null===c?c=e:(c=HU({inputs:{a:e,b:c},backend:n}),f.push(c))}e<p-1&&(u[e]>=0&&(c=qU({inputs:{x:c},backend:n,attrs:{axis:u[e]-(s.length-h),keepDims:!1}}),f.push(c)),h--)}for(let e of f)e!==c&&n.disposeData(e.dataId);return c}},ZU=AB({opType:yL.ELU}),YU={kernelName:Kt,backendName:"webgpu",kernelFunc:ZU},JU={kernelName:Zt,backendName:"webgpu",kernelFunc:e=>{let{inputs:t,backend:n}=e,{dy:a,y:r}=t,i=new cB(hL.ELU_DER,a.shape,r.shape);return n.runWebGPUProgram(i,[a,r],a.dtype)}},QU=xB({opType:hL.EQUAL,dtype:"bool",cpuKernelImpl:IB}),eG={kernelName:Jt,backendName:"webgpu",kernelFunc:QU},tG=AB({opType:yL.ERF}),nG={kernelName:Yt,backendName:"webgpu",kernelFunc:tG},aG=AB({opType:yL.EXP,cpuKernelImpl:SB,dtype:"float32"}),rG={kernelName:Qt,backendName:"webgpu",kernelFunc:aG};function iG(e){let{inputs:t,attrs:n,backend:a}=e,{dim:r}=n,{input:i}=t,s=i.shape.length,o=i.shape.slice(),l=r;return r<0&&(Tr.assert(-(s+1)<=r,(()=>`Axis must be in the interval [${-(s+1)}, ${s}]`)),l=s+r+1),o.splice(l,0,1),oB({inputs:{x:i},backend:a,attrs:{shape:o}})}var sG={kernelName:en,backendName:"webgpu",kernelFunc:iG},oG=AB({opType:yL.EXPM1,cpuKernelImpl:NB}),lG={kernelName:tn,backendName:"webgpu",kernelFunc:oG},uG=class{constructor(e,t){this.variableNames=["real","imag"],this.outputShape=[],this.uniforms="exponentMultiplier : f32, denominator: f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.component=e,this.shaderKey=`fft_${e}`}getUserCode(){return`\n    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {\n      ${"real"===this.component?"return real * expR - imag * expI;":"return real * expI + imag * expR;"}\n    }\n\n    fn mulMatDFT(batch: i32, index: i32) -> f32 {\n      let indexRatio = f32(index) / f32(uniforms.realShape[1]);\n      let exponentMultiplierTimesIndexRatio =\n          uniforms.exponentMultiplier * indexRatio;\n\n      var result = 0.0;\n\n      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {\n        // x = (-2|2 * PI / N) * index * i;\n        let x = exponentMultiplierTimesIndexRatio * f32(i);\n        let expR = cos(x);\n        let expI = sin(x);\n        let real = getReal(batch, i);\n        let imag = getImag(batch, i);\n\n        result = result +\n            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;\n      }\n\n      return result;\n    }\n\n    ${qz("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));\n      }\n    }\n  `}};function dG(e,t,n){let a=n.tensorMap.get(e.dataId),r=Tr.sizeFromShape(e.shape),i=e.shape[e.shape.length-1],s=[],o=oB({inputs:{x:e},backend:n,attrs:{shape:[r/i,i]}});s.push(o);let l=o.shape,u=new uG("real",l),d=new uG("imag",l),p=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:l},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:l}],c=[{type:"float32",data:[t?2*Math.PI:-2*Math.PI]},{type:"float32",data:[t?l[1]:1]}],h=n.runWebGPUProgram(u,p,"float32",c);s.push(h);let f=n.runWebGPUProgram(d,p,"float32",c);s.push(f);let m=mB({inputs:{real:h,imag:f},backend:n});s.push(m);let y=oB({inputs:{x:m},backend:n,attrs:{shape:e.shape}});return s.forEach((e=>n.disposeData(e.dataId))),y}var pG,cG={kernelName:nn,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{input:a}=t;return dG(a,!1,n)}},hG={kernelName:rn,backendName:"webgpu",kernelFunc:({inputs:e,backend:t})=>{let{image:n}=e,a=t,r=new class{constructor(e){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="flipLeftRight"}getUserCode(){return`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let coordX = uniforms.xShape[2] - coords[2] - 1;\n          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);\n          setOutputAtIndex(index, outputValue);\n        }\n      }\n    `}}(n.shape);return a.runWebGPUProgram(r,[n],n.dtype)}},fG=AB({opType:yL.FLOOR,cpuKernelImpl:CB}),mG={kernelName:sn,backendName:"webgpu",kernelFunc:fG},yG=xB({opType:hL.INT_DIV,cpuKernelImpl:TB,dtype:"int32"}),gG={kernelName:on,backendName:"webgpu",kernelFunc:yG},AG={kernelName:dr,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{pixels:r}=t,{numChannels:i}=a;if(null==r)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let s="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,l="undefined"!=typeof HTMLCanvasElement&&r instanceof HTMLCanvasElement||"undefined"!=typeof OffscreenCanvas&&r instanceof OffscreenCanvas,u="undefined"!=typeof ImageBitmap&&r instanceof ImageBitmap,[d,p]=s?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[p,d,i],h=s||o;if(u||l||h){let e;{if(h){let e=He().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==pG||e!==xG)&&(xG=e,pG=document.createElement("canvas").getContext("2d",{willReadFrequently:xG})),pG.canvas.width=d,pG.canvas.height=p,pG.drawImage(r,0,0,d,p),r=pG.canvas}let t=GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,a="rgba8unorm",i=n.textureManager.acquireTexture(c[1],c[0],a,t);n.queue.copyExternalImageToTexture({source:r},{texture:i},[c[1],c[0]]),e=i}let t=Tr.sizeFromShape(c),a=Tr.computeStrides(c),s=new class{constructor(e,t,n=!1){this.isFromPixels=!0,this.outputShape=[0],this.variableNames=[],this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize,[t,1,1]),this.importVideo=n,this.shaderKey=`fromPixels_${this.importVideo}`}getUserCode(){let e=this.importVideo?"textureLoad(src, vec2<i32>(coords.yx));":"textureLoad(src, vec2<i32>(coords.yx), 0)";return`\n      @binding(1) @group(0) var src: ${this.importVideo?"texture_external":"texture_2d<f32>"};\n      ${qz("index")} {\n        let flatIndex = index * uniforms.numChannels;\n        if (flatIndex < uniforms.size) {\n          let coords = getCoordsFromIndex(flatIndex);\n          let values = ${e};\n          for (var i = 0; i < uniforms.numChannels; i = i + 1) {\n            result[flatIndex + i] = i32(floor(255.0 * values[i]));\n          }\n        }\n      }\n  `}}(c,i,!1),o=[{type:"uint32",data:[t]},{type:"uint32",data:[i]},{type:"uint32",data:[...a]}],l=n.makeTensorInfo([p,d],"int32");n.tensorMap.get(l.dataId).resource=e;let u=n.runWebGPUProgram(s,[l],"int32",o);return n.disposeData(l.dataId),u}let f=r.data,m=f;if(null!=i&&4!==i){m=new Uint8Array(r.width*r.height*i);let e=f.length,t=0;for(let n=0;n<e;n++)n%4<i&&(m[t++]=f[n])}let y=n.makeTensorInfo(c,"int32",new Int32Array(m));return n.uploadToGPU(y.dataId),y}},xG=He().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU"),bG={kernelName:ln,backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{x:a,scale:r,offset:i,mean:s,variance:o}=e,{varianceEpsilon:l}=t,u=n,d=[a,s,o],p=null;null!=i&&(p=i.shape,d.push(i));let c=null;null!=r&&(c=r.shape,d.push(r));let h=new class{constructor(e,t,n,a,r){this.uniforms="varianceEpsilon : f32,",this.workgroupSize=[128,1,1],this.size=!0,this.variableNames=["x","mean","variance"],Bf.assertAndGetBroadcastShape(e,t),Bf.assertAndGetBroadcastShape(e,n),this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),null!=a&&(Bf.assertAndGetBroadcastShape(e,a),this.variableNames.push("offset")),null!=r&&(Bf.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale")),this.offsetShape=a,this.scaleShape=r,this.shaderKey="batchNorm"}getUserCode(){let e="0.0";null!=this.offsetShape&&(e="getOffsetByOutputIndex(index)");let t="1.0";return null!=this.scaleShape&&(t="getScaleByOutputIndex(index)"),`\n      ${qz("index")} {\n        if (index < uniforms.size)\n        {\n          let xValue = getXByOutputIndex(index);\n          let meanValue = getMeanByOutputIndex(index);\n          let varianValue = getVarianceByOutputIndex(index);\n          let offsetValue = ${e};\n          let scaleValue = ${t};\n          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));\n          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));\n        }\n      }\n  `}}(a.shape,s.shape,o.shape,p,c),f=[{type:"float32",data:[l]}];return u.runWebGPUProgram(h,d,a.dtype,f)}},vG={kernelName:hr,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i,bias:s,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:d,dilations:p,dimRoundingMode:c,activation:h,leakyreluAlpha:f}=a,m=Bf.convertConv2DDataFormat(d);return mU({x:r,filter:i,convInfo:Bf.computeConv2DInfo(r.shape,i.shape,l,p,u,c,!1,m),backend:n,bias:s,preluActivationWeights:o,leakyreluAlpha:f,activation:h})}},wG={kernelName:fr,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,filter:i,bias:s,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:d,dimRoundingMode:p,activation:c,leakyreluAlpha:h}=a,f=d;null==f&&(f=[1,1]),Tr.assert(Bf.eitherStridesOrDilationsAreOne(l,f),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${f}'`));let m=Bf.computeConv2DInfo(r.shape,i.shape,l,f,u,p,!0),y=[r,i],g=null!=s,A=null!=o;g&&y.push(s),A&&y.push(o);let x,b=[{type:"int32",data:[m.padInfo.top,m.padInfo.left]},{type:"int32",data:[m.inHeight,m.inWidth]}];return m.outHeight>4&&m.outWidth>4&&m.strideWidth<=2&&m.inChannels===m.outChannels&&1===m.dilationHeight&&1===m.dilationWidth&&m.inChannels%4==0?(x=new PU(m,g,c,A),b.push({type:"int32",data:[x.virtualWidth]})):(x=new DU(m,g,c,A),b.push({type:"int32",data:[m.filterHeight]},{type:"int32",data:[m.filterWidth]},{type:"int32",data:[m.strideHeight,m.strideWidth]},{type:"int32",data:[m.dilationHeight,m.dilationWidth]})),"leakyrelu"===c&&(b.push({type:"float32",data:[h]}),x.uniforms+=" alpha : f32,"),n.runWebGPUProgram(x,y,"float32",b)}},kG={kernelName:dn,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{params:a,indices:r}=t,i=r.shape,s=i[i.length-1],o=Tr.sizeFromShape(a.shape),[l,u,d,p]=Bf.prepareAndValidate(a,r),c=oB({inputs:{x:r},backend:n,attrs:{shape:[u,s]}}),h=oB({inputs:{x:a},backend:n,attrs:{shape:[Tr.sizeFromShape(a.shape)/d,d]}});if(n.shouldExecuteOnCPU([a,r])||"string"===a.dtype){let e=n.readSync(r.dataId),t=n.bufferSync(a),i=EB(e,t,a.dtype,u,s,d,p,a.shape,o);return n.makeTensorInfo(l,a.dtype,i.values)}let f=new class{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`gathernd_${e}`,this.sliceDim=e,this.uniforms=`sliceDim : i32, strides : ${Hz(e)},`}getUserCode(){let e;return e=this.sliceDim>1?"uniforms.strides[j]":"uniforms.strides",`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          var flattenIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexTemp = i32(round(getIndices(coords[0], j)));\n            let strideNum = ${e};\n            flattenIndex = flattenIndex + indexTemp * strideNum;\n          }\n\n          setOutputAtIndex(index, getA(flattenIndex, coords[1]));\n        }\n      }\n      `}}(s,[u,d]),m=[{type:"int32",data:[s]},{type:"int32",data:p}],y=n.runWebGPUProgram(f,[h,c],h.dtype,m),g=oB({inputs:{x:y},backend:n,attrs:{shape:l}});return n.disposeData(c.dataId),n.disposeData(h.dataId),n.disposeData(y.dataId),g}};function IG(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,indices:i}=t,{axis:s,batchDims:o}=a,l=Tr.parseAxisParam(s,r.shape)[0],u=Bf.segment_util.collectGatherOpShapeInfo(r,i,l,o),d=Tr.sizeFromShape(i.shape),p=[],c=oB({inputs:{x:r},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),h=oB({inputs:{x:i},backend:n,attrs:{shape:[u.batchSize,d/u.batchSize]}});p.push(c),p.push(h);let f=[u.batchSize,u.outerSize,d/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([r,i])){let e=n.tensorMap.get(h.dataId).values,t=js(h.shape,h.dtype,e),a=n.tensorMap.get(c.dataId).values,r=js(c.shape,c.dtype,a),i=RB(r,t,f);return p.forEach((e=>n.disposeData(e.dataId))),n.makeTensorInfo(u.outputShape,i.dtype,i.values)}let m=new class{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.slice(),this.aShape=e,this.outputShape=t,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="gather"}getUserCode(){let e=function(e){let t=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let a=0;a<e.length;a++)2===a?n.push("indexZ"):n.push(`${t[a]}`);return n.join()}(this.aShape);return`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let indexZ = i32(getIndices(resRC.x, resRC.z));\n          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);\n          setOutputAtIndex(index, inBounds * getA(${e}));\n        }\n      }\n    `}}(c.shape,f),y=n.runWebGPUProgram(m,[c,h],c.dtype);p.push(y);let g=oB({inputs:{x:y},backend:n,attrs:{shape:u.outputShape}});return p.forEach((e=>n.disposeData(e.dataId))),g}var SG={kernelName:un,backendName:"webgpu",kernelFunc:IG},NG=xB({opType:hL.GREATER,cpuKernelImpl:MB,dtype:"bool"}),CG={kernelName:pn,backendName:"webgpu",kernelFunc:NG},TG=xB({opType:hL.GREATER_EQUAL,dtype:"bool",cpuKernelImpl:$B}),EG={kernelName:cn,backendName:"webgpu",kernelFunc:TG},RG={kernelName:fn,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{input:a}=t;return dG(a,!0,n)}},$G=AB({opType:yL.IS_FINITE,dtype:"bool"}),MG={kernelName:yn,backendName:"webgpu",kernelFunc:$G},_G=AB({opType:yL.IS_INF,dtype:"bool"}),FG={kernelName:gn,backendName:"webgpu",kernelFunc:_G},OG=AB({opType:yL.IS_NAN,dtype:"bool"}),PG={kernelName:An,backendName:"webgpu",kernelFunc:OG},DG={kernelName:xn,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{alpha:i}=a,s=[{type:"float32",data:[i]}],o=new gB(r.shape,yL.LEAKYRELU,"alpha : f32,");return n.runWebGPUProgram(o,[r],"float32",s)}},zG=xB({opType:hL.LESS,dtype:"bool",cpuKernelImpl:FB}),LG={kernelName:bn,backendName:"webgpu",kernelFunc:zG},WG=xB({opType:hL.LESS_EQUAL,dtype:"bool",cpuKernelImpl:_B}),BG={kernelName:vn,backendName:"webgpu",kernelFunc:WG},VG={kernelName:wn,backendName:"webgpu",kernelFunc:function(e){let{backend:t,attrs:n}=e,{start:a,stop:r,num:i}=n,s=(r-a)/(i-1),o=new class{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="start : f32, step : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="linSpace"}getUserCode(){return`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);\n        }\n      }\n    `}}(i),l=[{type:"float32",data:[a]},{type:"float32",data:[s]}];return t.runWebGPUProgram(o,[],"float32",l)}},UG=AB({opType:yL.LOG,cpuKernelImpl:OB}),GG={kernelName:kn,backendName:"webgpu",kernelFunc:UG},HG=AB({opType:yL.LOG1P}),jG={kernelName:In,backendName:"webgpu",kernelFunc:HG},qG=xB({opType:hL.LOGICAL_AND,dtype:"bool"}),XG={kernelName:Sn,backendName:"webgpu",kernelFunc:qG},KG=AB({opType:yL.LOGICAL_NOT}),ZG={kernelName:Nn,backendName:"webgpu",kernelFunc:KG},YG=xB({opType:hL.LOGICAL_OR}),JG={kernelName:Cn,backendName:"webgpu",kernelFunc:YG},QG="\n  var powValue = 0.0;\n  let basis = uniforms.bias + uniforms.alpha * sum;\n  if (uniforms.beta == 0.5) {\n    powValue = inverseSqrt(basis);\n  } else if (uniforms.beta == 1.0) {\n    powValue = 1.0 / basis;\n  } else {\n    powValue = exp(log(basis) * (-uniforms.beta));\n  }\n",eH={kernelName:$n,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:n,backend:a,attrs:r}=e,{x:i}=n,{depthRadius:s,bias:o,alpha:l,beta:u}=r;t=s>16?new class{constructor(e){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn"}getUserCode(){return`\n    ${qz("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n        let d = coords[3];\n\n        let x = getX(b, r, c, d);\n        var sum = 0.0;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let idx = d + i;\n          if (idx >= 0 && idx < uniforms.xShape[3]) {\n            let z = getX(b, r, c, idx);\n            sum = sum + z * z;\n          }\n        }\n        ${QG}\n\n        setOutputAtIndex(index, x * powValue);\n      }\n    }\n  `}}(i.shape):new class{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[256,1,1],this.maxAllowRadius=16,Tr.assert(t<=this.maxAllowRadius,(()=>`Radius must be less than or equal to ${this.maxAllowRadius}, current radius is ${t}`)),this.outputShape=e,this.elementsPerWorkgroup=this.workgroupSize[0]-2*this.maxAllowRadius,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=iL(this.dispatchLayout,this.outputShape,[this.elementsPerWorkgroup,this.workgroupSize[1],this.workgroupSize[2]]),this.shaderKey="lrn_shared"}getUserCode(){return`\n    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;\n    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};\n    const maxAllowRadius = ${this.maxAllowRadius};\n\n    ${qz()} {\n      let localDepth = i32(localId.x);\n      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;\n      let xDepth = workgroupDepth + localDepth - maxAllowRadius;\n      let b = i32(globalId.z) / uniforms.xShape[1];\n      let r = i32(globalId.z) - b * uniforms.xShape[1];\n      let c = i32(globalId.y);\n      let d = workgroupDepth + localDepth;\n\n      var x = 0.0;\n      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {\n        x = getX(b, r, c, xDepth);\n      }\n      lrnSub[localDepth] = x;\n      workgroupBarrier();\n\n      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {\n        var sum = 0.0;\n        let index = localDepth + maxAllowRadius;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let z = lrnSub[index + i];\n          sum = sum + z * z;\n        }\n        ${QG}\n\n        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);\n      }\n    } `}}(i.shape,s);let d=[{type:"int32",data:[s]},{type:"float32",data:[o]},{type:"float32",data:[l]},{type:"float32",data:[u]}];return a.runWebGPUProgram(t,[i],i.dtype,d)}},tH={kernelName:Mn,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,y:i,dy:s}=t,{depthRadius:o,bias:l,alpha:u,beta:d}=a,p=new class{constructor(e){this.outputShape=[],this.variableNames=["inputImage","outputImage","dy"],this.uniforms="depthRadius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn_grad"}getUserCode(){return`\n    ${qz("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n\n        let MIN_DEPTH_BEGIN = 0;\n        let MAX_DEPTH_END = uniforms.outShape[3];\n        var result = 0.0;\n        for (var d = MIN_DEPTH_BEGIN; d < MAX_DEPTH_END; d++) {\n          let depthBegin = max(MIN_DEPTH_BEGIN, d - uniforms.depthRadius);\n          let depthEnd = min(MAX_DEPTH_END, d + uniforms.depthRadius + 1);\n\n          var norm = 0.0;\n          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {\n            if (k < depthBegin) {\n              continue;\n            } else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            } else {\n              break;\n            }\n          }\n\n          norm = uniforms.alpha * norm + uniforms.bias;\n\n          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {\n            if (k < depthBegin) {\n              continue;\n            } else if (k >= depthBegin && k < depthEnd) {\n              var dyi = -2.0 * uniforms.alpha * uniforms.beta\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d) / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * uniforms.beta);\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n\n        setOutputAtIndex(index, result);\n      }\n    }\n  `}}(r.shape),c=[{type:"int32",data:[o]},{type:"float32",data:[l]},{type:"float32",data:[u]},{type:"float32",data:[d]}];return n.runWebGPUProgram(p,[r,i,s],r.dtype,c)}},nH=xB({opType:hL.MAX,cpuKernelImpl:DB}),aH={kernelName:On,backendName:"webgpu",kernelFunc:nH},rH={kernelName:Pn,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:i,strides:s,pad:o,dimRoundingMode:l}=a;return zV(r,Bf.computePool2DInfo(r.shape,i,s,1,o,l),"max",n)}},iH={kernelName:zn,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:i,strides:s,pad:o,dataFormat:l,dimRoundingMode:u}=a,d=Bf.computePool3DInfo(r.shape,i,s,[1,1,1],o,u,l),p=new _V(d,"max"),c=[{type:"int32",data:[d.strideDepth,d.strideHeight,d.strideWidth]},{type:"int32",data:[d.padInfo.front,d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.inDepth,d.inHeight,d.inWidth]},{type:"int32",data:[d.effectiveFilterDepth,d.effectiveFilterHeight,d.effectiveFilterWidth]}];return n.runWebGPUProgram(p,[r],r.dtype,c)}},sH={kernelName:Ln,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,input:i}=t,s=i,{filterSize:o,strides:l,pad:u,dimRoundingMode:d}=a,p=Bf.computePool3DInfo(s.shape,o,l,[1,1,1],u,d),c=new _V(p,"max",!0),h=[{type:"int32",data:[p.strideDepth,p.strideHeight,p.strideWidth]},{type:"int32",data:[p.padInfo.front,p.padInfo.top,p.padInfo.left]},{type:"int32",data:[p.inDepth,p.inHeight,p.inWidth]},{type:"int32",data:[p.effectiveFilterDepth,p.effectiveFilterHeight,p.effectiveFilterWidth]}],f=n.runWebGPUProgram(c,[s],"int32",h),m=new class{constructor(e){this.variableNames=["dy","maxPos"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,\n      outDepth : i32, outHeight : i32, outWidth : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool3DBackprop"}getUserCode(){return`\n      ${qz("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let ch = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyDCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] * uniforms.filterDims[2] - 1;\n\n        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {\n          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);\n\n          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {\n            continue;\n          }\n          let idyD = i32(dyD);\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              let maxPosValue = lastIndex - i32(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              let curPosValue = wD * uniforms.filterDims[1] * uniforms.filterDims[2] + wR * uniforms.filterDims[2] + wC;\n              let mask = select(0.0, 1.0, maxPosValue == curPosValue);\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}(p);h=[{type:"int32",data:[p.strideDepth,p.strideHeight,p.strideWidth]},{type:"int32",data:[p.effectiveFilterDepth-1-p.padInfo.front,p.effectiveFilterHeight-1-p.padInfo.top,p.effectiveFilterWidth-1-p.padInfo.left]},{type:"int32",data:[p.effectiveFilterDepth,p.effectiveFilterHeight,p.effectiveFilterWidth]},{type:"int32",data:[p.outDepth]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]}];let y=n.runWebGPUProgram(m,[r,f],s.dtype,h);return n.disposeData(f.dataId),y}},oH={kernelName:Dn,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{dy:r,input:i,output:s}=t,o=i;cL([i,s],"maxPoolGrad");let{filterSize:l,strides:u,pad:d,dimRoundingMode:p}=a,c=Bf.computePool2DInfo(o.shape,l,u,1,d,p),h=new MV(c,"max",!0),f=[{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.dilationHeight,c.dilationWidth]},{type:"int32",data:[c.inHeight,c.inWidth]},{type:"int32",data:[c.effectiveFilterHeight,c.effectiveFilterWidth]}],m=n.runWebGPUProgram(h,[o],"int32",f),y=new class{constructor(e){this.variableNames=["dy","maxPos"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool2DBackprop"}getUserCode(){return`\n      ${qz("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] - 1;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR += uniforms.dilations[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC += uniforms.dilations[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n            let maxPosValue = lastIndex - i32(getMaxPos(batch, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            let curPosValue = wR * uniforms.filterDims[1] + wC;\n            let mask = select(0.0, 1.0, maxPosValue == curPosValue);\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}(c);f=[{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.effectiveFilterHeight-1-c.padInfo.top,c.effectiveFilterWidth-1-c.padInfo.left]},{type:"int32",data:[c.dilationHeight,c.dilationWidth]},{type:"int32",data:[c.effectiveFilterHeight,c.effectiveFilterWidth]},{type:"int32",data:[c.outHeight]},{type:"int32",data:[c.outWidth]}];let g=n.runWebGPUProgram(y,[r,m],o.dtype,f);return n.disposeData(m.dataId),g}},lH={kernelName:Wn,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{filterSize:r,strides:i,pad:s,includeBatchInIndex:o}=a,{x:l}=t;Tr.assert(4===l.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${l.shape.length}.`));let u=[1,1];Tr.assert(Bf.eitherStridesOrDilationsAreOne(i,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`));let d=Bf.computePool2DInfo(l.shape,r,i,u,s),p=[{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.dilationHeight,d.dilationWidth]},{type:"int32",data:[d.inHeight,d.inWidth]},{type:"int32",data:[d.effectiveFilterHeight,d.effectiveFilterWidth]}],c=new MV(d,"max",!1),h=n.runWebGPUProgram(c,[l],l.dtype,p);return c=new MV(d,"max",!0,!0,o),[h,n.runWebGPUProgram(c,[l],"int32",p)]}},uH={kernelName:Vn,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,keepDims:s}=a;return yV(r,i,s,"min",n)}},dH=xB({opType:hL.MIN,cpuKernelImpl:zB}),pH={kernelName:Un,backendName:"webgpu",kernelFunc:dH},cH={kernelName:Gn,backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{x:a}=e,{paddings:r,mode:i}=t,s=n,o=r.map((e=>({type:"int32",data:[e[0],e[1]]}))),l=new class{constructor(e,t,n){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1])),this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,t.map(((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`})),this.offset="reflect"===n?0:1,this.shaderKey=`mirrorPad_${n}`}getUserCode(){let e=this.xShape.length,t=this.xShape.map(((e,t)=>`uniforms.pad${t}[0]`)).join(","),n=this.xShape.map(((t,n)=>`uniforms.pad${n}[0] + uniforms.xShape${e>1?`[${n}]`:""}`)).join(","),a=1===e?"start":"start[i]",r=1===e?"end":"end[i]",i=1===e?"outC":"outC[i]",s=Hz(e),o=e>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,e):"coords";return`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let start = ${s}(${t});\n          let end = ${s}(${n});\n          var outC = getCoordsFromIndex(index);\n          for (var i = 0; i < ${e}; i = i + 1) {\n            if (${i} < ${a}) {\n              ${i} = ${a} * 2 - ${i} - ${this.offset};\n            } else if(${i} >= ${r}) {\n              ${i} = (${r} - 1) * 2 - ${i} + ${this.offset};\n            }\n          }\n          let coords = outC - start;\n          setOutputAtIndex(index, getX(${o}));\n        }\n      }\n    `}}(a.shape,r,i);return s.runWebGPUProgram(l,[a],a.dtype,o)}},hH=xB({opType:hL.MOD}),fH={kernelName:Hn,backendName:"webgpu",kernelFunc:hH};function mH(e){let{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{dim:i}=a,s=oB({inputs:{x:r},backend:n,attrs:{shape:[Tr.sizeFromShape(r.shape)/r.shape[i],r.shape[i]]}}),o=new class{constructor(e){this.variableNames=["logits"],this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=[this.outputShape[0],1,1],this.outputShape[1]>=4096?this.workgroupSize=[256,1,1]:this.workgroupSize=[64,1,1],this.shaderKey="softmax"}getUserCode(){return`\n    var<workgroup> buf : array<f32, ${this.workgroupSize[0]}>;\n    var<workgroup> rowMaxShared : f32;\n    var<workgroup> rowSumShared : f32;\n    const blockSize = ${this.workgroupSize[0]};\n    ${qz("index")} {\n      let row = index / blockSize;\n      let tid = i32(localId.x);\n      let cols = uniforms.outShape[1];\n\n      var threadMax = -3.402823e+38f;\n      for (var col = tid; col < cols; col += blockSize) {\n        let value = getLogits(row, col);\n        threadMax = max(threadMax, value);\n      }\n      if (tid < cols) {\n        buf[tid] = threadMax;\n      }\n      workgroupBarrier();\n\n      var reduceSize = min(cols, blockSize);\n      for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n        reduceSize = currSize + (reduceSize & 1);\n        if (tid < currSize) {\n          buf[tid] = max(buf[tid], buf[tid + reduceSize]);\n        }\n        workgroupBarrier();\n      }\n\n      if (tid == 0) {\n        rowMaxShared = buf[0];\n      }\n      workgroupBarrier();\n\n      var threadSum = 0.0;\n      for (var col = tid; col < cols; col += blockSize) {\n        let subExp = exp(getLogits(row, col) - rowMaxShared);\n        threadSum += subExp;\n      }\n      buf[tid] = threadSum;\n      workgroupBarrier();\n\n      for (var currSize = blockSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n        if (tid < currSize) {\n          buf[tid] = buf[tid] + buf[tid + currSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (tid == 0) {\n        rowSumShared = buf[0];\n      }\n      workgroupBarrier();\n\n      for (var col = tid; col < cols; col += blockSize) {\n        let value = exp(getLogits(row, col) - rowMaxShared) / rowSumShared;\n        setOutputAtCoords(row, col, value);\n      }\n  }\n    `}}(s.shape),l=n.runWebGPUProgram(o,[s],r.dtype),u=oB({inputs:{x:l},backend:n,attrs:{shape:r.shape}});return n.disposeData(s.dataId),n.disposeData(l.dataId),u}var yH={kernelName:za,backendName:"webgpu",kernelFunc:mH},gH={kernelName:jn,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{numSamples:i,seed:s,normalized:o}=a,l=o?r:mH({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],d=l.shape[1],p=new class{constructor(e,t){this.variableNames=["probs"],this.outputShape=[],this.uniforms="seed : f32, numOutcomes: i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="multinomial"}getUserCode(){return`\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    fn random (seed : f32, resultUV : vec2<f32>) -> f32 {\n      let HASHSCALE1 = 443.8975;\n      let p = resultUV * seed;\n      var p3  = fract(vec3<f32>(p.xyx) * HASHSCALE1);\n      p3 = p3 + dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${qz("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n\n        let resUV = vec2<f32>(f32(coords[1]) / f32(uniforms.outShape[1]),\n            f32(coords[0]) / f32(uniforms.outShape[0]));\n        let r = random(uniforms.seed, resUV);\n        var cdf = 0.0;\n        for (var i = 0; i < uniforms.numOutcomes - 1; i = i + 1) {\n          cdf = cdf + getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutputAtIndexI32(index, i);\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutputAtIndexI32(index, uniforms.numOutcomes - 1);\n      }\n    }\n  `}}(u,i),c=[{type:"float32",data:[s]},{type:"int32",data:[d]}],h=n.runWebGPUProgram(p,[l],"int32",c);return o||n.disposeData(l.dataId),h}},AH={kernelName:Xn,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:a}=t;if(n.shouldExecuteOnCPU([a])){let e=n.tensorMap.get(a.dataId),[t,r]=WB(e.values,a.shape,a.dtype);return n.makeTensorInfo(r,a.dtype,t)}let r=new gB(a.shape,yL.NEG);return n.runWebGPUProgram(r,[a],a.dtype)}},xH={kernelName:Zn,backendName:"webgpu",kernelFunc:function(e){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l}=a,u=n.readSync(r.dataId),d=n.readSync(i.dataId),{selectedIndices:p}=Km.nonMaxSuppressionV3Impl(u,d,s,o,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},bH={kernelName:Jn,backendName:"webgpu",kernelFunc:function(e){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=a,d=n.readSync(r.dataId),p=n.readSync(i.dataId),c=s,h=o,f=l,m=u,{selectedIndices:y,selectedScores:g}=Km.nonMaxSuppressionV5Impl(d,p,c,h,f,m);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([g.length],"float32",new Float32Array(g))]}},vH={kernelName:ea,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{indices:r}=t,{dtype:i,depth:s,onValue:o,offValue:l}=a,u=Tr.sizeFromShape(r.shape),d=new class{constructor(e,t){this.variableNames=["x"],this.uniforms="onValue : f32, offValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="onehot"}getUserCode(){return`\n      ${qz("index")} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,\n                                      f32(i32(round(getX(coords.x))) == coords.y)));\n        }\n      }\n    `}}(u,s),p=oB({inputs:{x:r},backend:n,attrs:{shape:[u]}}),c=[{type:"float32",data:[o]},{type:"float32",data:[l]}],h=n.runWebGPUProgram(d,[p],i,c);n.disposeData(p.dataId);let f=oB({inputs:{x:h},backend:n,attrs:{shape:[...r.shape,s]}});return n.disposeData(h.dataId),f}};function wH(e){let{inputs:t,backend:n}=e,{x:a}=t;if("complex64"===a.dtype){let e=eU({inputs:{input:a},backend:n}),t=wH({inputs:{x:e},backend:n}),r=uU({inputs:{input:a},backend:n}),i=wH({inputs:{x:r},backend:n}),s=mB({inputs:{real:t,imag:i},backend:n});return n.disposeData(e.dataId),n.disposeData(t.dataId),n.disposeData(r.dataId),n.disposeData(i.dataId),s}return iB({attrs:{shape:a.shape,dtype:a.dtype,value:"string"===a.dtype?"":0},backend:n})}var kH={kernelName:lr,backendName:"webgpu",kernelFunc:wH},IH={kernelName:Qn,backendName:"webgpu",kernelFunc:function e(t){let{inputs:n,backend:a}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){let t=eU({inputs:{input:r},backend:a}),n=e({inputs:{x:t},backend:a}),i=uU({inputs:{input:r},backend:a}),s=wH({inputs:{x:i},backend:a}),o=mB({inputs:{real:n,imag:s},backend:a});return a.disposeData(t.dataId),a.disposeData(n.dataId),a.disposeData(i.dataId),a.disposeData(s.dataId),o}return iB({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:a})}},SH={kernelName:ta,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{axis:r}=a;if(1===t.length)return iG({inputs:{input:t[0]},backend:n,attrs:{dim:r}});let i=t[0].shape,s=t[0].dtype;t.forEach((e=>{Tr.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),Tr.assert(s===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));let o=[],l=cU({inputs:t.map((e=>{let t=iG({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeData(e.dataId))),l}};function NH(e,t=!1){let n=e.length,a=Hz(n),r=e.map(((e,t)=>`uniforms.pad${t}[0]`)).join(","),i=e.map(((e,t)=>`uniforms.pad${t}[0] + uniforms.xShape${n>1?`[${t}]`:""}`)).join(",");return`\n        let start = ${n>1?`${a}(${r})`:`${r}`};\n        let end = ${n>1?`${a}(${i})`:`${i}`};\n        if (${n>1?"any(paddedCoords < start)":"paddedCoords < start"} || ${n>1?"any(paddedCoords >= end)":"paddedCoords >= end"}) {\n          setOutputAtIndex(index, ${t?0:"uniforms.constantValue"});\n        } else {\n          let coords = paddedCoords - start;\n          setOutputAtIndex(index, getX(${n>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n):"coords"}));\n        }\n  `}var CH={kernelName:na,backendName:"webgpu",kernelFunc:e=>{let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{paddings:i,constantValue:s}=a;if(i.every((e=>Tr.arraysEqual(e,[0,0]))))return hB({inputs:{x:r},backend:n});if(0===Tr.sizeFromShape(r.shape))return iB({backend:n,attrs:{shape:i.map(((e,t)=>e[0]+r.shape[t]+e[1])),value:s,dtype:r.dtype}});let o=[{type:"float32",data:[s]}];i.map((e=>o.push({type:"int32",data:[e[0],e[1]]})));let l=new class{constructor(e,t){this.variableNames=["x"],this.uniforms="constantValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1])),this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),t.map(((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`})),this.xShape=e,this.shaderKey="pad"}getUserCode(){return`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let paddedCoords = getCoordsFromIndex(index);\n          ${NH(this.xShape)}\n        }\n      }\n    `}}(r.shape,i);return n.runWebGPUProgram(l,[r],r.dtype,o)}},TH=xB({opType:hL.POW}),EH={kernelName:ra,backendName:"webgpu",kernelFunc:TH},RH={kernelName:ia,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:a,alpha:r}=t,i=new cB(hL.PRELU,a.shape,r.shape);return n.runWebGPUProgram(i,[a,r],"float32")}},$H={kernelName:sa,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:i,keepDims:s}=a;return yV(r,i,s,"prod",n)}},MH={kernelName:da,backendName:"webgpu",kernelFunc:e=>{let{backend:t,attrs:n}=e,{start:a,stop:r,step:i,dtype:s}=n,o=UB(a,r,i,s);return t.makeTensorInfo([o.length],s,o)}},_H=xB({opType:hL.DIV}),FH={kernelName:qt,backendName:"webgpu",kernelFunc:_H},OH=AB({opType:yL.RECIPROCAL}),PH={kernelName:ca,backendName:"webgpu",kernelFunc:OH},DH=AB({opType:yL.RELU}),zH={kernelName:ha,backendName:"webgpu",kernelFunc:DH},LH=AB({opType:yL.RELU6}),WH={kernelName:xa,backendName:"webgpu",kernelFunc:LH},BH={kernelName:ga,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{images:r}=t,{alignCorners:i,size:s,halfPixelCenters:o}=a,[l,u]=s,d=[{type:"float32",data:[i&&l>1?1:0,i&&u>1?1:0]},{type:"float32",data:[o?.5:0]}],p=new class{constructor(e,t,n){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,n,e[3]],this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="resizeBilinear"}getUserCode(){return`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC =\n            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *\n            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);\n\n          // Compute the four integer indices.\n          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);\n          let sourceCeilRC = vec2<i32>(\n            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));\n\n          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);\n          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);\n          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);\n          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);\n\n          let top = topLeft + (topRight - topLeft) * fracRC.y;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n          let newValue = top + (bottom - top) * fracRC.x;\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `}}(r.shape,l,u);return n.runWebGPUProgram(p,[r],"float32",d)}},VH={kernelName:Aa,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{images:r,dy:i}=t,{alignCorners:s}=a,[,o,l]=r.shape,[,u,d]=i.shape,p=[s&&u>1?o-1:o,s&&d>1?l-1:l],c=[s&&u>1?u-1:u,s&&d>1?d-1:d],h=p[0]/c[0],f=p[1]/c[1],m=1/h,y=1/f,g=2*Math.ceil(m)+2,A=2*Math.ceil(y)+2,x=new class{constructor(e,t){this.variableNames=["dy"],this.uniforms="effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, heightScale : f32, widthScale : f32,\n       invHeightScale : f32, invWidthScale : f32, winHeight : i32, winWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=t,this.shaderKey=`resizeBilinearBackprop_${t}`}getUserCode(){return`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let b = coords[0];\n          let d = coords[3];\n          let r = coords[1];\n          let c = coords[2];\n\n          var accumulator = 0.0;\n\n          // Compute bounds for where in dy we will look\n          let startRLerp = floor(f32(r) * uniforms.invHeightScale);\n          let startDyR = i32(startRLerp - f32(uniforms.winHeight / 2));\n\n          let startCLerp = floor(f32(c) * uniforms.invWidthScale);\n          let startDyC = i32(startCLerp - f32(uniforms.winWidth / 2));\n\n          // Loop over dy\n          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {\n            let dyR = startDyR + dyROffset;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {\n              continue;\n            }\n\n            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {\n              let dyC = startDyC + dyCOffset;\n\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {\n                continue;\n              }\n\n              let dxR = f32(dyR) * uniforms.heightScale;\n              let topDxRIndex = i32(floor(dxR));\n              let bottomDxRIndex = i32(min(ceil(dxR), f32(uniforms.outShape[1] - 1)));\n              let dxRLerp = dxR - f32(topDxRIndex);\n              let inverseDxRLerp = 1.0 - dxRLerp;\n\n              let dxC = f32(dyC) * uniforms.widthScale;\n              let leftDxCIndex = i32(floor(dxC));\n              let rightDxCIndex = i32(min(ceil(dxC), f32(uniforms.outShape[2] - 1)));\n              let dxCLerp = dxC - f32(leftDxCIndex);\n              let inverseDxCLerp = 1.0 - dxCLerp;\n\n              if (r == topDxRIndex && c == leftDxCIndex) {\n                // topLeft\n                accumulator +=\n                  getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n              }\n\n              if (r == topDxRIndex && c == rightDxCIndex) {\n                // topRight\n                accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n              }\n\n              if (r == bottomDxRIndex && c == leftDxCIndex) {\n                // bottomLeft\n                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n              }\n\n              if (r == bottomDxRIndex && c == rightDxCIndex) {\n                // bottomRight\n                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n              }\n            }\n          }\n          // End loop over dy\n\n          setOutputAtIndex(index, accumulator);\n        }\n      }\n    `}}(r.shape,s),b=[{type:"int32",data:p},{type:"int32",data:c},{type:"float32",data:[h]},{type:"float32",data:[f]},{type:"float32",data:[m]},{type:"float32",data:[y]},{type:"int32",data:[g]},{type:"int32",data:[A]}];return n.runWebGPUProgram(x,[i],i.dtype,b)}},UH={kernelName:ma,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{images:r}=t,{alignCorners:i,halfPixelCenters:s,size:o}=a,[l,u]=o,d=[{type:"float32",data:[i&&l>1?1:0,i&&u>1?1:0]},{type:"float32",data:[i?.5:0]}],p=new class{constructor(e,t,n,a){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, roundBase : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,n,e[3]],this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.halfPixelCenters=a,this.shaderKey=`resizeNearest_${a}`}getUserCode(){let e;return e=this.halfPixelCenters?"max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))":"vec2<f32>(rc) * effectiveInputOverOutputRatioRC",`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC = ${e};\n\n          // Compute the coordinators of nearest neighbor point.\n          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));\n          let sourceNearestRC = vec2<i32>(\n            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));\n          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `}}(r.shape,l,u,s);return n.runWebGPUProgram(p,[r],r.dtype,d)}},GH={kernelName:ya,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{images:r,dy:i}=t,{alignCorners:s}=a,[,o,l]=r.shape,[,u,d]=i.shape,p=[s&&u>1?o-1:o,s&&d>1?l-1:l],c=[s&&u>1?u-1:u,s&&d>1?d-1:d],h=1/(p[0]/c[0]),f=1/(p[1]/c[1]),m=2*Math.ceil(h)+2,y=2*Math.ceil(f)+2,g=new class{constructor(e,t){this.variableNames=["dy"],this.uniforms="effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, invHeightScale : f32, invWidthScale : f32,\n       winHeight : i32, winWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=t,this.shaderKey=`resizeNearestNeigborBackprop_${t}`}getUserCode(){return`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let b = coords[0];\n          let d = coords[3];\n          let r = coords[1];\n          let c = coords[2];\n\n          var accumulator = 0.0;\n\n          // Compute bounds for where in dy we will look\n          let startRLerp = floor(f32(r) * uniforms.invHeightScale);\n          let startDyR = i32(floor(startRLerp - f32(uniforms.winHeight / 2)));\n\n          let startCLerp = floor(f32(c) * uniforms.invWidthScale);\n          let startDyC = i32(floor(startCLerp - f32(uniforms.winWidth / 2)));\n\n          // Loop over dy\n          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {\n            let dyR = startDyR + dyROffset;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {\n              continue;\n            }\n\n            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {\n              let dyC = startDyC + dyCOffset;\n\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {\n                continue;\n              }\n\n              let sourceFracRow = f32(uniforms.effectiveXSize[0]) *\n                  (f32(dyR) / f32(uniforms.effectiveYSize[0]));\n\n              let sourceFracCol = f32(uniforms.effectiveXSize[1]) *\n                  (f32(dyC) / f32(uniforms.effectiveYSize[1]));\n\n              let sourceNearestRow =\n                  i32(min(f32(uniforms.outShape[1] - 1),\n                  ${this.alignCorners?"floor(sourceFracRow + 0.5)":"floor(sourceFracRow)"}));\n\n              let sourceNearestCol =\n                  i32(min(f32(uniforms.outShape[2] - 1),\n                  ${this.alignCorners?"floor(sourceFracCol + 0.5)":"floor(sourceFracCol)"}));\n\n              if (r == sourceNearestRow && c == sourceNearestCol) {\n                accumulator += getDy(b, dyR, dyC, d);\n              }\n            }\n          }\n          // End loop over dy\n\n          setOutputAtIndex(index, accumulator);\n        }\n      }\n    `}}(r.shape,s),A=[{type:"int32",data:p},{type:"int32",data:c},{type:"float32",data:[h]},{type:"float32",data:[f]},{type:"int32",data:[m]},{type:"int32",data:[y]}];return n.runWebGPUProgram(g,[i],i.dtype,A)}},HH={kernelName:ba,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{dims:i}=a,s=r.shape.length;if(0===s)return hB({inputs:{x:r},backend:n});let o=r.shape,l=[1,1,1,1];o.forEach(((e,t)=>{l[t+4-s]=e}));let u=Tr.parseAxisParam(i,r.shape),d=[0,0,0,0];u.forEach((e=>{d[e+4-s]=1}));let p=[{type:"int32",data:d}],c=oB({inputs:{x:r},backend:n,attrs:{shape:l}}),h=new class{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=" axis : vec4<i32>,",this.shaderKey="reverse"}getUserCode(){return`\n      \n      // Using uniform variables as judging conditions, so the function has\n      // coherent execution within all threads.\n      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {\n        var reverseCoords = coords;\n        if (uniforms.axis[0] == 1) {\n          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;\n        }\n        if (uniforms.axis[1] == 1) {\n          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;\n        }\n        if (uniforms.axis[2] == 1) {\n          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;\n        }\n        if (uniforms.axis[3] == 1) {\n          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;\n        }\n\n        return reverseCoords;\n      }\n    \n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let reverseCoords = getReverseCoords(coords);\n          setOutputAtIndex(index, getX(reverseCoords[0],\n              reverseCoords[1], reverseCoords[2], reverseCoords[3]));\n        }\n      }\n    `}}(l),f=n.runWebGPUProgram(h,[c],c.dtype,p);n.disposeData(c.dataId);let m=oB({inputs:{x:f},backend:n,attrs:{shape:o}});return n.disposeData(f.dataId),m}},jH={kernelName:pr,backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{image:a}=e,{radians:r,fillValue:i,center:s}=t,o=n,l=new class{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="centerX : f32, centerY : f32, sinRadians : f32,\n          cosRadians : f32,",this.shaderKey="rotate",this.outputShape=e,"number"==typeof t?(this.uniforms+=" fillValue : f32,",this.fillSnippet="var outputValue = uniforms.fillValue;",this.shaderKey+="_float"):(this.uniforms+=" fillValue : vec3<f32>,",this.fillSnippet="var outputValue = uniforms.fillValue[coords[3]];",this.shaderKey+="_vec3")}getUserCode(){return`\n        ${qz("index")} {\n          if (index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *\n                uniforms.sinRadians;\n            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *\n                uniforms.cosRadians;\n            let coordX = i32(round(coordXFloat + uniforms.centerX));\n            let coordY = i32(round(coordYFloat + uniforms.centerY));\n            ${this.fillSnippet}\n            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&\n                coordY < uniforms.xShape[1]) {\n              outputValue = getX(coords[0], coordY, coordX, coords[3]);\n            }\n            setOutputAtIndex(index, outputValue);\n          }\n        }\n      `}}(a.shape,i),[u,d]=Bf.getImageCenter(s,a.shape[1],a.shape[2]),p=[{type:"float32",data:[u]},{type:"float32",data:[d]},{type:"float32",data:[Math.sin(r)]},{type:"float32",data:[Math.cos(r)]}];return"number"==typeof i?p.push({type:"float32",data:[Number.parseFloat(i.toFixed(2))]}):p.push({type:"float32",data:i}),o.runWebGPUProgram(l,[a],a.dtype,p)}},qH=AB({opType:yL.ROUND}),XH={kernelName:va,backendName:"webgpu",kernelFunc:qH},KH=AB({opType:yL.RSQRT,cpuKernelImpl:GB}),ZH={kernelName:wa,backendName:"webgpu",kernelFunc:KH},YH=class{constructor(e,t,n,a,r,i,s,o=!0){this.variableNames=["updates","indices"],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=i,this.type=s,this.sumDupeIndices=o,this.dispatchLayout=uL(e),this.dispatch=iL(this.dispatchLayout,e,this.workgroupSize),this.sliceDimGreaterThanOne=t>1,this.shaderKey=`scatter_${n}_${a}_${this.sliceDimGreaterThanOne}_${s}_${o}`;let l=Hz(r.length);this.uniforms=`sliceDim : i32, strides: ${l}, updatesSize: i32,`,this.updatesRank=a,this.indicesRank=n}getUserCode(){let e="";1===this.indicesRank?e="coords[0]":2===this.indicesRank&&(e="coords[0], j");let t=`getIndices(${e})`,n=this.sliceDimGreaterThanOne?"uniforms.strides[j]":"uniforms.strides",a="",r="";1===this.dispatchLayout.x.length?(a="flattenedIndex",r="\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {\n        return index;\n      }\n      "):2===this.dispatchLayout.x.length&&(a="vec2<i32>(flattenedIndex, coords[1])",r="\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {\n        // N.B. |updates| could be a scalar tensor, conceptually representing a\n        // 2D tensor with all values equal to that. By design, its size must be\n        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|\n        // gives the other.\n        let sliceSize = uniforms.outShape[1];\n        let d0 = index / sliceSize;\n        let d1 = index - d0 * sliceSize;\n        return vec2<i32>(d0, d1);\n      }\n      ");let i=`getUpdates(${Array.from({length:this.updatesRank},((e,t)=>`coords[${t}]`)).join(", ")})`;return`\n    ${r}\n      ${qz("index")} {\n        if (index < uniforms.updatesSize) {\n          let coords = getUpdatesCoordsFromFlatIndex(index);\n          var flattenedIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexInside = i32(round(${t}));\n            flattenedIndex = flattenedIndex + indexInside * ${n};\n          }\n          let updateValue =\n              ${Qz(this.type)}(${i});\n          let flatIndex = getOutputIndexFromCoords(${a});\n\n          ${this.sumDupeIndices?Uz("&result[flatIndex]","updateValue",this.type):"atomicStore(&result[flatIndex], bitcast<i32>(updateValue));"}\n        }\n      }`}},JH={kernelName:ka,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{indices:r,updates:i}=t,{shape:s}=a,{sliceRank:o,numUpdates:l,sliceSize:u,strides:d,outputSize:p}=Bf.calculateShapes(i,r,s),c=[p/u,u];if(0===p)return n.makeTensorInfo(s,r.dtype);let h=oB({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),f=oB({inputs:{x:i},backend:n,attrs:{shape:[l,u]}}),m=f.dtype,y=iB({backend:n,attrs:{shape:c,value:0,dtype:m}}),g=[{type:"int32",data:[o]},{type:"int32",data:d},{type:"int32",data:[Tr.sizeFromShape(f.shape)]}],A=new YH(f.shape,o,h.shape.length,f.shape.length,d,c,m),x=n.runWebGPUProgram(A,[f,h],m,g,y),b=oB({inputs:{x},backend:n,attrs:{shape:s}});return n.disposeData(h.dataId),n.disposeData(f.dataId),n.disposeData(x.dataId),b}},QH={kernelName:Sa,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{sortedSequence:r,values:i}=t,{side:s}=a,o=new class{constructor(e,t){this.outputShape=[],this.variableNames=["sortedSequence","values"],this.uniforms="numInputs : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.side=t,this.shaderKey=`search_sorted_${t}`}getUserCode(){return`\n      fn findBound(batch: i32, value: f32) -> i32 {\n        var left = i32(0);\n        var right = uniforms.numInputs;\n        while (left < right) {\n          var mid = (left + right) / 2;\n          if (getSortedSequence(batch, mid) ${"left"===this.side?"<":"<="} value) {\n            left = mid + 1;\n          } else {\n            right = mid;\n          }\n        }\n        return right;\n      }\n\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let value = getValuesByOutputIndex(index);\n          setOutputAtIndexI32(index, findBound(coords[0], value));\n        }\n      }\n    `}}([i.shape[0],i.shape[1]],s),l=[{type:"int32",data:[r.shape[1]]}];return n.runWebGPUProgram(o,[r,i],"int32",l)}},ej={kernelName:Na,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{condition:a,t:r,e:i}=t,s=new class{constructor(e,t,n){this.variableNames=["c","a","b"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.cRank=e,this.rank=n,this.shaderKey="select"}getUserCode(){let e,t;if(this.rank>4)throw Error(`Where for rank ${this.rank} is not yet supported`);if(1===this.rank)t="resRC",e="resRC";else{let n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],r=[];for(let e=0;e<this.outputShape.length;e++)r.push(`${n[e]}`),e<this.cRank&&a.push(`${n[e]}`);e=a.join(),t=r.join()}return`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let cVal = getC(${e});\n          if (cVal >= 1.0) {\n            setOutputAtIndex(index, getA(${t}));\n          } else {\n            setOutputAtIndex(index, getB(${t}));\n          }\n        }\n      }\n    `}}(a.shape.length,r.shape,r.shape.length);return n.runWebGPUProgram(s,[a,r,i],bi(r.dtype,i.dtype))}},tj=AB({opType:yL.SELU}),nj={kernelName:Ca,backendName:"webgpu",kernelFunc:tj},aj=AB({opType:yL.SIGMOID}),rj={kernelName:Ma,backendName:"webgpu",kernelFunc:aj},ij=AB({opType:yL.SIGN}),sj={kernelName:$a,backendName:"webgpu",kernelFunc:ij},oj=AB({opType:yL.SIN}),lj={kernelName:Ea,backendName:"webgpu",kernelFunc:oj},uj=AB({opType:yL.SINH}),dj={kernelName:Ra,backendName:"webgpu",kernelFunc:uj},pj=AB({opType:yL.SOFTPLUS}),cj={kernelName:_a,backendName:"webgpu",kernelFunc:pj},hj={kernelName:Pa,backendName:"webgpu",kernelFunc:e=>{let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:i,paddings:s}=a;Tr.assert(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet"));let o=i.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...s);for(let e=1+i.length;e<r.shape.length;++e)l.push([0,0]);let u=l.map(((e,t)=>e[0]+r.shape[t]+e[1])),d=Bf.getReshaped(u,i,o,!1),p=Bf.getPermuted(d.length,i.length,!1),c=Bf.getReshapedPermuted(u,i,o,!1),h=Tr.computeStrides(u),f=new class{constructor(e,t,n,a,r,i){this.variableNames=["x"],this.outputShape=[],this.uniforms="",this.workgroupSize=[64,1,1],this.size=!0;let s=new Array(a.length);for(let e=0;e<s.length;e++)s[e]=a[r[e]];this.outputShape=s,this.newDim=r,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,this.paddedXShape=t,this.uniforms+=`reshapedPaddedXShape : ${Hz(a.length)}, paddedXShapeStrides : ${Hz(i)}, `,n.map(((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`})),this.shaderKey=`spaceToBatchND_${r}`}getUserCode(){let e=Hz(this.outputShape.length),t=cV(this.newDim);return`\n      ${Zz(this.paddedXShape,"PaddedX")}\n      ${qz("index")} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let switchedIndex = getIndexFromCoords${this.outputShape.length}D(${e}(${t}), uniforms.reshapedPaddedXShape);\n          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);\n          ${NH(this.xShape,!0)}\n        }\n      }\n    `}}(r.shape,u,l,d,p,h.length),m=[{type:"int32",data:d},{type:"int32",data:h}];l.map((e=>m.push({type:"int32",data:[e[0],e[1]]})));let y=n.runWebGPUProgram(f,[r],r.dtype,m),g=oB({inputs:{x:y},backend:n,attrs:{shape:c}});return n.disposeData(y.dataId),g}};function fj(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{reps:i}=a;if(n.shouldExecuteOnCPU([r])||"string"===r.dtype||r.shape.length>=5){let e=n.readSync(r.dataId),t="string"===r.dtype?e.map((e=>Tr.decodeString(e))):e,a=js(r.shape,r.dtype,t),s=YB(a,i);return n.makeTensorInfo(s.shape,s.dtype,s.values)}let s=new class{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[64,1,1],this.size=!0;let n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[a]*t[a];this.outputShape=n,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.rank=this.outputShape.length,this.shaderKey="tile"}getUserCode(){let e=function(e,t=""){if(e>=5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`(resRC % ${t}aShape)`;let n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[];for(let r=0;r<e;r++)a.push(`(${n[r]} % ${t}aShape[${r}])`);return a.join()}(this.rank,"uniforms.");return`\n      ${qz("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          setOutputAtIndex(index, getA(${e}));\n        }\n      }\n    `}}(r.shape,i);return n.runWebGPUProgram(s,[r],r.dtype)}var mj={kernelName:er,backendName:"webgpu",kernelFunc:fj},yj={kernelName:Ua,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{sparseIndices:r,sparseValues:i,defaultValue:s}=t,{outputShape:o}=a,{sliceRank:l,numUpdates:u,sliceSize:d,strides:p,outputSize:c}=Bf.calculateShapes(i,r,o),h=!1;if("string"===i.dtype){let e=n.bufferSync(r),t=n.bufferSync(i),a=Tr.decodeString(n.readSync(s.dataId)[0]),f=HB(e,t,o,c,d,u,l,p,a,h);return n.makeTensorInfo(o,f.dtype,f.values)}let f=[c/d,d],m=oB({inputs:{x:r},backend:n,attrs:{shape:[u,l]}}),y=i.shape.length?oB({inputs:{x:i},backend:n,attrs:{shape:[u,d]}}):hB({inputs:{x:i},backend:n}),g=y.dtype,A=n.makeTensorInfo([],g,Tr.makeZerosTypedArray(1,g)),x=oB({inputs:{x:s},backend:n,attrs:{shape:Array(f.length).fill(1)}}),b=fj({inputs:{x},backend:n,attrs:{reps:f}}),v=[{type:"int32",data:[l]},{type:"int32",data:p},{type:"int32",data:[Tr.sizeFromShape([u,d])]}];switch(u){case 0:break;case 1:{let e=new YH([u,d],l,m.shape.length,y.shape.length,p,f,g,h);n.runWebGPUProgram(e,[y,m],g,v,b)}break;default:{let e=new YH([u,d],l,m.shape.length,A.shape.length,p,f,g,h);n.runWebGPUProgram(e,[A,m],g,v,b)}{let e=new YH([u,d],l,m.shape.length,y.shape.length,p,f,g);n.runWebGPUProgram(e,[y,m],g,v,b)}}let w=oB({inputs:{x:b},backend:n,attrs:{shape:o}});return n.disposeData(m.dataId),n.disposeData(y.dataId),n.disposeData(x.dataId),n.disposeData(A.dataId),n.disposeData(b.dataId),w}},gj={kernelName:Da,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{numOrSizeSplits:i,axis:s}=a,o=Tr.parseAxisParam(s,r.shape)[0],l=Bf.prepareSplitSize(r,i,o),u=r.shape.length,d=new Array(u).fill(0),p=r.shape.slice();return l.map((e=>{let t=[...p];t[o]=e;let a=HV({inputs:{x:r},backend:n,attrs:{begin:d,size:t}});return d[o]+=e,a}))}},Aj=AB({opType:yL.SQRT}),xj={kernelName:Fa,backendName:"webgpu",kernelFunc:Aj},bj={kernelName:Ha,backendName:"webgpu",kernelFunc:({inputs:e,backend:t})=>{let{x:n}=e,a=t,r=new gB(n.shape,yL.SQUARE);return a.runWebGPUProgram(r,[n],n.dtype)}},vj=xB({opType:hL.SQUARED_DIFFERENCE}),wj={kernelName:Ga,backendName:"webgpu",kernelFunc:vj},kj={kernelName:ur,backendName:"webgpu",kernelFunc:function({inputs:e,attrs:t,backend:n}){let{x:a}=e,r=new gB(a.shape,yL.STEP,"stepAlpha : f32,"),i=[{type:"float32",data:[t.alpha]}];return n.runWebGPUProgram(r,[a],a.dtype,i)}},Ij={kernelName:qa,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:n,backend:a,attrs:r}=e,{x:i}=n,{begin:s,end:o,strides:l,beginMask:u,endMask:d,ellipsisMask:p,newAxisMask:c,shrinkAxisMask:h}=r,{finalShapeSparse:f,finalShape:m,isIdentity:y,sliceDim0:g,isSimpleSlice:A,begin:x,end:b,strides:v}=mf.sliceInfo(i.shape,s,o,l,u,d,p,c,h);if(y)t=oB({inputs:{x:i},backend:a,attrs:{shape:m}});else if(g||A){Tr.assert(i.shape.length>=1,(()=>`Input must have rank at least 1, got: ${i.shape.length}`));let e=mf.computeOutShape(x,b,v),n=HV({inputs:{x:i},backend:a,attrs:{begin:x,size:e}});t=oB({inputs:{x:n},backend:a,attrs:{shape:m}}),a.disposeData(n.dataId)}else if(a.shouldExecuteOnCPU([i])){let e=a.readSync(i.dataId),n=js(i.shape,i.dtype,e),r=XB(f,n,v,x);t=a.makeTensorInfo(m,i.dtype,r.values)}else{let e=new class{constructor(e){this.variableNames=["x"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]);let t=Hz(this.outputShape.length);this.uniforms=`begin : ${t},  strides : ${t}, `,this.shaderKey="stridedSlice"}getUserCode(){let e="";if(1===this.outputShape.length)e="coords * uniforms.strides + uniforms.begin";else{let t=0;e=this.outputShape.map(((e,n)=>(t++,1===this.outputShape.length?`coords * uniforms.strides[${n}] + uniforms.begin[${n}]`:`coords[${t-1}] * uniforms.strides[${n}] + uniforms.begin[${n}]`))).join(",")}return`\n       ${qz("index")} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index);\n           setOutputAtIndex(index, getX(${e}));\n         }\n       }\n     `}}(f),n=[{type:"int32",data:x},{type:"int32",data:v}],r=a.runWebGPUProgram(e,[i],i.dtype,n);t=oB({inputs:{x:r},backend:a,attrs:{shape:m}}),a.disposeData(r.dataId)}return t}},Sj={kernelName:Xa,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{separator:r,nGramWidths:i,leftPad:s,rightPad:o,padWidth:l,preserveShortSequences:u}=a,{data:d,dataSplits:p}=t,c=n.readSync(d.dataId),h=n.readSync(p.dataId),[f,m]=KB(c,h,r,i,s,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}},Nj=xB({opType:hL.SUB,cpuKernelImpl:ZB,supportsComplex:!0}),Cj={kernelName:Ya,backendName:"webgpu",kernelFunc:Nj},Tj=AB({opType:yL.TAN}),Ej={kernelName:Ja,backendName:"webgpu",kernelFunc:Tj},Rj=AB({opType:yL.TANH}),$j={kernelName:Qa,backendName:"webgpu",kernelFunc:Rj},Mj={kernelName:Ia,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{tensor:r,indices:i,updates:s}=t,{}=a,{sliceRank:o,numUpdates:l,sliceSize:u,strides:d,outputSize:p}=Bf.calculateShapes(s,i,r.shape),c=[p/u,u];if(0===p)return n.makeTensorInfo(r.shape,i.dtype);let h=[],f=oB({inputs:{x:i},backend:n,attrs:{shape:[l,o]}});h.push(f);let m=oB({inputs:{x:s},backend:n,attrs:{shape:[l,u]}});h.push(m);let y=oB({inputs:{x:r},backend:n,attrs:{shape:c}});h.push(y);let g=fj({inputs:{x:y},backend:n,attrs:{reps:Array(c.length).fill(1)}}),A=new YH([l,u],o,f.shape.length,m.shape.length,d,c,r.dtype,!1),x=[{type:"int32",data:[o]},{type:"int32",data:d},{type:"int32",data:[Tr.sizeFromShape([l,u])]}],b=n.runWebGPUProgram(A,[m,f],y.dtype,x,g);h.push(b);let v=oB({inputs:{x:b},backend:n,attrs:{shape:r.shape}});return h.forEach((e=>n.disposeData(e.dataId))),v}},_j=class{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, k : i32,",this.shaderKey="merge"}getUserCode(){return`\n        ${qz("index")} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // The output size is half of the previous size.\n            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _\n            // (k=4), we only need to output the indices at positions |, the\n            // indices at positions _ can be thrown away, see Figure5(b) After\n            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced\n            // above.\n            // For example, the paper shows we only need to output the orange\n            // bars. The output sequence should look like this | | | | | | | |.\n            // Because the sequence is halved, to map the output index back to\n            // the previous sequence to find the corresponding value, we need\n            // to double the index. When we double the index, we basically\n            // interpolate a position, so 2i looks like\n            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k\n            // position of each 2k positions by - elemIdx % k. E.g. for output\n            // at index 4,5,6,7, we want to get the corresponding element at\n            // original index 8,9,10,11, for output at index 8,9,10,11,\n            // we want to get the corresponding element at original index\n            // 16,17,18,19, so on and so forth.\n\n            var i = 0;\n            if (elemIdx < uniforms.k) {\n              i = elemIdx;\n            } else {\n              i = elemIdx * 2 - elemIdx % uniforms.k;\n            }\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.k;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.k));\n            }\n\n            let x0 = getX(batch, i0);\n            var x1 = f32(0.0);\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = x0;\n            }\n\n            if (x0 >= x1) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `}};function Fj(e,t){null!==t&&e.disposeData(t.dataId)}function Oj(e){let t=1;for(;t<e;)t*=2;return t}var Pj={kernelName:tr,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{k:i,sorted:s}=a,o=r.shape,l=o[o.length-1];if(n.shouldExecuteOnCPU([r])){let e=n.readSync(r.dataId),[t,a]=JB(e,o,r.dtype,i,s);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(a.shape,a.dtype,a.values)]}if(0===i)return o[o.length-1]=0,[n.makeTensorInfo(o,r.dtype,[]),n.makeTensorInfo(o,"int32",[])];if(1===l)return[r,iB({attrs:{shape:o,dtype:"int32",value:0},backend:n})];let u=Tr.sizeFromShape(o)/l,d=oB({inputs:{x:r},attrs:{shape:[u,l]},backend:n}),p=Oj(i),c=Oj(l),h=null,f=()=>null===h?[d,d]:[d,h],m=(e,t,a)=>{let r=f(),i=new class{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, negativeInf : f32,\n        dir : i32, inc : i32,",this.shaderKey="swap"}getUserCode(){return`\n        ${qz("index")} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // We compare elements pair-wise within a group of size 2 * inc.\n            // The comparing rule for each group alternates between ascending\n            // and descending. Within each group, we compare each pair at\n            // positions i and i+inc. To decide whether an element at position i\n            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n            // inc, it is in the first half of the group, we denote it as x0,\n            // otherwise we denote it as x1.\n            // For example, as shown in the Bitonic top K paper referenced\n            // above, Figure5(a) shows that element[1] is in the second half of\n            // the group when group size is 2, but it is in the first half of\n            // the group when group size is 4.\n            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;\n            var i = 0;\n            if (isFirstInPair) {\n              i = elemIdx;\n            } else {\n              i = elemIdx - uniforms.inc;\n            }\n\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.inc;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.inc));\n            }\n\n            var x0 = f32(0.0);\n            var x1 = f32(0.0);\n            if (i0 < uniforms.inputSize) {\n              x0 = getX(batch, i0);\n            } else {\n              x0 = uniforms.negativeInf;\n            }\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = uniforms.negativeInf;\n            }\n\n            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;\n            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n            if (reverse == isGreater) {\n              // Elements in opposite order of direction\n              let iTemp = i0;\n              i0 = i1;\n              i1 = iTemp;\n            }\n            if (isFirstInPair) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `}}(a),s=[{type:"int32",data:[l]},{type:"int32",data:[null===h?1:0]},{type:"float32",data:[Number.NEGATIVE_INFINITY]},{type:"int32",data:[e]},{type:"int32",data:[t]}],o=h;h=n.runWebGPUProgram(i,r,"int32",s),Fj(n,o)};for(let e=1;e<p;e*=2){let t=2*e;for(let n=e;n>=1;n/=2)m(t,n,[u,c])}for(let e=c;e>p;e/=2){let t=f(),a=new _j([u,e/2]),r=[{type:"int32",data:[l]},{type:"int32",data:[null===h?1:0]},{type:"int32",data:[p]}],i=h;h=n.runWebGPUProgram(a,t,"int32",r),Fj(n,i);let s=p/2,o=2*s;for(let e=s;e>=1;e/=2)m(o,e,h.shape)}let y=h;h=HV({inputs:{x:h},backend:n,attrs:{begin:0,size:[u,i]}}),Fj(n,y);let g=IG({inputs:{x:d,indices:h},backend:n,attrs:{axis:1,batchDims:1}});Fj(n,d);let A=o.slice(0,-1);A.push(i),y=h,h=oB({inputs:{x:h},attrs:{shape:A},backend:n}),Fj(n,y);let x=g;return g=oB({inputs:{x:g},attrs:{shape:A},backend:n}),Fj(n,x),[g,h]}},Dj={kernelName:nr,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:n,backend:a,attrs:r}=e,{image:i,transforms:s}=n,{interpolation:o,fillMode:l,fillValue:u,outputShape:d}=r,[p,c,h,f]=i.shape,[m,y]=null!=d?d:[c,h],g=[p,m,y,f],A=new class{constructor(e){this.variableNames=["Image","Transforms"],this.uniforms="interpolationModeId : i32, fillModeId : i32, fillValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=uL(this.outputShape),this.dispatch=iL(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="transform"}getUserCode(){return`\n          fn mapCoord(outCoord : f32, len : f32) -> f32{\n            var inCoord = outCoord;\n            if(uniforms.fillModeId == 2) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  if (inCoord < sz2) {\n                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +\n                    inCoord;\n                  }\n                  if (inCoord < -len) {\n                    inCoord = inCoord + sz2;\n                  } else {\n                    inCoord = -inCoord - 1.0;\n                  }\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));\n                  if (inCoord >= len) {\n                    inCoord = sz2 - inCoord - 1.0;\n                  }\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 3) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 4) {\n              return clamp(outCoord, 0.0, len - 1.0);\n            }\n            return outCoord;\n          }\n          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,\n            channel : i32) -> f32 {\n            var outputValue : f32;\n            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {\n                outputValue = getImage(batch, coordY, coordX, channel);\n            } else {\n              outputValue = uniforms.fillValue;\n            }\n            return outputValue;\n          }\n\n          ${qz("index")} {\n            if (index < uniforms.size) {\n              let coords = getCoordsFromIndex(index);\n              var outputValue : f32;\n              let batch = coords[0];\n              let x = coords[2];\n              let y = coords[1];\n              let channel = coords[3];\n              let xf = f32(x);\n              let yf = f32(y);\n              let a1 = getTransforms(batch, 0);\n              let a2 = getTransforms(batch, 1);\n              let a3 = getTransforms(batch, 2);\n              let b1 = getTransforms(batch, 3);\n              let b2 = getTransforms(batch, 4);\n              let b3 = getTransforms(batch, 5);\n              let c1 = getTransforms(batch, 6);\n              let c2 = getTransforms(batch, 7);\n              let projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = uniforms.fillValue;\n              } else {\n                let inX = (a1 * xf + a2 * yf + a3) / projection;\n                let inY = (b1 * xf + b2 * yf + b3) / projection;\n                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));\n                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));\n\n                if (uniforms.interpolationModeId == 1) {\n                  let coordY = i32(round(mapY));\n                  let coordX = i32(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  let yFloor = floor(mapY);\n                  let xFloor = floor(mapX);\n                  let yCeil = yFloor + 1.0;\n                  let xCeil = xFloor + 1.0;\n                  let valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);\n                  let valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutputAtIndex(index, outputValue);\n            }\n          }\n        `}}(g),x="nearest"===o?1:2;switch(l){case"constant":default:t=1;break;case"reflect":t=2;break;case"wrap":t=3;break;case"nearest":t=4}let b=[{type:"int32",data:[x]},{type:"int32",data:[t]},{type:"float32",data:[u]}];return a.runWebGPUProgram(A,[i,s],"float32",b)}},zj={kernelName:ir,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{value:r}=t,{axis:i}=a;i<0&&(i+=r.shape.length);let s=r,o=s.shape.length,l=r.shape[i],u=new Array(o-1),d=0;for(let e=0;e<o;e++)e!==i&&(u[d++]=s.shape[e]);let p=[],c=new Array(o).fill(0),h=s.shape.slice();h[i]=1;let f=new Array(l);for(let e=0;e<f.length;e++){c[i]=e;let t=HV({inputs:{x:s},backend:n,attrs:{begin:c,size:h}}),a=oB({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=a,p.push(t)}return p.forEach((e=>n.disposeData(e.dataId))),f}},Lj={kernelName:sr,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:a}=e,{x:r,segmentIds:i}=t,{numSegments:s}=a,o=r.shape.length,l=[],u=0,d=Bf.getAxesPermutation([u],o),p=r;null!=d&&(p=hV({inputs:{x:r},backend:n,attrs:{perm:d}}),l.push(p),u=Bf.getInnerMostAxes(1,o)[0]);let c=Bf.segment_util.computeOutShape(p.shape,u,s),h=Tr.sizeFromShape([p.shape[u]]),f=oB({inputs:{x:p},backend:n,attrs:{shape:[-1,h]}});l.push(f);let m=r.dtype,y=[f.shape[0],s],g=iB({backend:n,attrs:{shape:y,value:0,dtype:m}}),A=new class{constructor(e,t,n){if(this.outputShape=[],this.variableNames=["x","segmentIds"],this.uniforms="numSegments : i32, xSize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=t,this.dispatchLayout=uL(e),this.dispatch=iL(this.dispatchLayout,e,this.workgroupSize),"float32"!==n&&"int32"!==n)throw new Error(`UnsortedSegmentSum only supports float32 and int32\n              types, does not support ${n} type.`);this.type=n,this.shaderKey="unsortedSegmentSum"}getUserCode(){return`\n    ${qz("index")} {\n      if (index < uniforms.xSize) {\n        let coords = getXCoordsFromIndex(index);\n        let b = coords[0];\n        let inCol = coords[1];\n\n        let segmentId = i32(getSegmentIds(inCol));\n        if (segmentId >= 0) {\n          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;\n          let value = getX(b, inCol);\n\n          ${Uz("&result[flatIndex]","value",this.type)}\n        }\n      }\n    }\n  `}}(f.shape,y,m),x=[{type:"int32",data:[s]},{type:"int32",data:[Tr.sizeFromShape(f.shape)]}],b=n.runWebGPUProgram(A,[f,i],m,x,g),v=oB({inputs:{x:b},backend:n,attrs:{shape:c}});l.push(b);let w=v;if(null!=d){l.push(v);let e=Bf.getUndoAxesPermutation(d);w=hV({inputs:{x:w},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeData(e.dataId))),w}},Wj=[dB,nV,rV,sV,lV,uV,gV,AV,bV,vV,kV,SV,CV,EV,$V,LV,WV,BV,VV,UV,qV,ZV,YV,nU,rU,iU,yB,oU,hU,gU,AU,xU,bU,vU,wU,IU,NU,CU,MU,_U,FU,OU,LU,WU,zU,BU,VU,UU,GU,KU,YU,JU,eG,nG,rG,sG,lG,cG,sB,hG,AG,mG,gG,bG,vG,wG,kG,SG,CG,EG,fB,RG,dU,MG,FG,PG,DG,LG,BG,VG,jG,GG,XG,ZG,JG,eH,tH,OV,aH,rH,oH,iH,sH,lH,DV,uH,pH,cH,fH,gH,jU,AH,xH,bH,QV,vH,IH,SH,CH,EH,RH,$H,MH,tU,FH,PH,zH,WH,lB,BH,VH,UH,GH,HH,jH,XH,ZH,JH,QH,ej,nj,rj,sj,lj,dj,jV,kj,Ij,Sj,yH,cj,hj,yj,gj,xj,bj,wj,Cj,XU,Ej,$j,Mj,mj,Pj,Dj,fV,zj,Lj,kH];for(let e of Wj)wr(e);var Bj="4.7.0",Vj={tfjs:Bj,"tfjs-core":Bj,"tfjs-converter":"4.7.0","tfjs-backend-cpu":"4.7.0","tfjs-backend-webgl":"4.7.0","tfjs-backend-wasm":"4.7.0","tfjs-backend-webgpu":"4.7.0"};function Uj(...e){const t=new Date,n=`${t.getHours().toString().padStart(2,"0")}:${t.getMinutes().toString().padStart(2,"0")}:${t.getSeconds().toString().padStart(2,"0")}.${t.getMilliseconds().toString().padStart(3,"0")}`;e&&console.log(n,"Human:",...e)}var Gj=()=>"undefined"!=typeof performance?performance.now():parseInt((Number({env:{NODE_ENV:"production",TARGET:"module"}}.hrtime.bigint())/1e3/1e3).toString());function Hj(e,t,n="config",a=[]){for(const r of Object.keys(t))if("object"==typeof t[r])Hj(e[r],t[r],r,a);else{const i=e&&void 0!==e[r];i||a.push({reason:"unknown property",where:`${n}.${r} = ${t[r]}`});const s=e&&typeof e[r]==typeof t[r];i&&!s&&a.push({reason:"property type mismatch",where:`${n}.${r} = ${t[r]}`,expected:typeof e[r]})}return t.debug&&"config"===n&&a.length>0&&Uj("invalid configuration",a),a}function jj(...e){const t=e=>e&&"object"==typeof e;return e.reduce(((e,n)=>(Object.keys(n||{}).forEach((a=>{const r=e[a],i=n[a];Array.isArray(r)&&Array.isArray(i)?e[a]=r.concat(...i):t(r)&&t(i)?e[a]=jj(r,i):e[a]=i})),e)),{})}var qj={backend:"",modelBasePath:"",cacheModels:!0,validateModels:!0,wasmPath:"",wasmPlatformFetch:!1,debug:!1,async:!0,warmup:"full",cacheSensitivity:.7,skipAllowed:!1,deallocate:!1,flags:{},softwareKernels:!1,filter:{enabled:!0,equalization:!1,width:0,height:0,flip:!1,return:!0,autoBrightness:!0,brightness:0,contrast:0,sharpness:0,blur:0,saturation:0,hue:0,negative:!1,sepia:!1,vintage:!1,kodachrome:!1,technicolor:!1,polaroid:!1,pixelate:0},gesture:{enabled:!0},face:{enabled:!0,detector:{modelPath:"blazeface.json",rotation:!1,maxDetected:1,skipFrames:99,skipTime:2500,minConfidence:.2,minSize:0,iouThreshold:.1,mask:!1,return:!1},mesh:{enabled:!0,modelPath:"facemesh.json",keepInvalid:!1},attention:{enabled:!1,modelPath:"facemesh-attention.json"},iris:{enabled:!0,modelPath:"iris.json"},emotion:{enabled:!0,minConfidence:.1,skipFrames:99,skipTime:1500,modelPath:"emotion.json"},description:{enabled:!0,modelPath:"faceres.json",skipFrames:99,skipTime:3e3,minConfidence:.1},antispoof:{enabled:!1,skipFrames:99,skipTime:4e3,modelPath:"antispoof.json"},liveness:{enabled:!1,skipFrames:99,skipTime:4e3,modelPath:"liveness.json"}},body:{enabled:!0,modelPath:"movenet-lightning.json",maxDetected:-1,minConfidence:.3,skipFrames:1,skipTime:200},hand:{enabled:!0,rotation:!0,skipFrames:99,skipTime:1e3,minConfidence:.5,iouThreshold:.2,maxDetected:-1,landmarks:!0,detector:{modelPath:"handtrack.json"},skeleton:{modelPath:"handlandmark-lite.json"}},object:{enabled:!1,modelPath:"centernet.json",minConfidence:.2,iouThreshold:.4,maxDetected:10,skipFrames:99,skipTime:2e3},segmentation:{enabled:!1,modelPath:"rvm.json",ratio:.5,mode:"default"}},Xj="\n  precision highp float;\n  attribute vec2 pos;\n  attribute vec2 uv;\n  varying vec2 vUv;\n  uniform float flipY;\n  void main(void) {\n    vUv = uv;\n    gl_Position = vec4(pos.x, pos.y*flipY, 0.0, 1.);\n  }\n",Kj="\n  precision highp float;\n  varying vec2 vUv;\n  uniform sampler2D texture;\n  uniform float m[20];\n  void main(void) {\n    vec4 c = texture2D(texture, vUv);\n    gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[3] * c.a + m[4];\n    gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[8] * c.a + m[9];\n    gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[13] * c.a + m[14];\n    gl_FragColor.a = m[15] * c.r + m[16] * c.g + m[17] * c.b + m[18] * c.a + m[19];\n  }\n",Zj="\n  precision highp float;\n  varying vec2 vUv;\n  uniform sampler2D texture;\n  uniform float m[20];\n  void main(void) {\n    vec4 c = texture2D(texture, vUv);\n    gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[4];\n    gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[9];\n    gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[14];\n    gl_FragColor.a = c.a;\n  }\n",Yj="\n  precision highp float;\n  varying vec2 vUv;\n  uniform vec2 size;\n  uniform sampler2D texture;\n  vec2 pixelate(vec2 coord, vec2 size) {\n    return floor( coord / size ) * size;\n  }\n  void main(void) {\n    gl_FragColor = vec4(0.0);\n    vec2 coord = pixelate(vUv, size);\n    gl_FragColor += texture2D(texture, coord);\n  }\n",Jj="\n  precision highp float;\n  varying vec2 vUv;\n  uniform sampler2D texture;\n  uniform vec2 px;\n  void main(void) {\n    gl_FragColor = vec4(0.0);\n    gl_FragColor += texture2D(texture, vUv + vec2(-7.0*px.x, -7.0*px.y))*0.0044299121055113265;\n    gl_FragColor += texture2D(texture, vUv + vec2(-6.0*px.x, -6.0*px.y))*0.00895781211794;\n    gl_FragColor += texture2D(texture, vUv + vec2(-5.0*px.x, -5.0*px.y))*0.0215963866053;\n    gl_FragColor += texture2D(texture, vUv + vec2(-4.0*px.x, -4.0*px.y))*0.0443683338718;\n    gl_FragColor += texture2D(texture, vUv + vec2(-3.0*px.x, -3.0*px.y))*0.0776744219933;\n    gl_FragColor += texture2D(texture, vUv + vec2(-2.0*px.x, -2.0*px.y))*0.115876621105;\n    gl_FragColor += texture2D(texture, vUv + vec2(-1.0*px.x, -1.0*px.y))*0.147308056121;\n    gl_FragColor += texture2D(texture, vUv                             )*0.159576912161;\n    gl_FragColor += texture2D(texture, vUv + vec2( 1.0*px.x,  1.0*px.y))*0.147308056121;\n    gl_FragColor += texture2D(texture, vUv + vec2( 2.0*px.x,  2.0*px.y))*0.115876621105;\n    gl_FragColor += texture2D(texture, vUv + vec2( 3.0*px.x,  3.0*px.y))*0.0776744219933;\n    gl_FragColor += texture2D(texture, vUv + vec2( 4.0*px.x,  4.0*px.y))*0.0443683338718;\n    gl_FragColor += texture2D(texture, vUv + vec2( 5.0*px.x,  5.0*px.y))*0.0215963866053;\n    gl_FragColor += texture2D(texture, vUv + vec2( 6.0*px.x,  6.0*px.y))*0.00895781211794;\n    gl_FragColor += texture2D(texture, vUv + vec2( 7.0*px.x,  7.0*px.y))*0.0044299121055113265;\n  }\n",Qj="\n  precision highp float;\n  varying vec2 vUv;\n  uniform sampler2D texture;\n  uniform vec2 px;\n  uniform float m[9];\n  void main(void) {\n    vec4 c11 = texture2D(texture, vUv - px); // top left\n    vec4 c12 = texture2D(texture, vec2(vUv.x, vUv.y - px.y)); // top center\n    vec4 c13 = texture2D(texture, vec2(vUv.x + px.x, vUv.y - px.y)); // top right\n    vec4 c21 = texture2D(texture, vec2(vUv.x - px.x, vUv.y) ); // mid left\n    vec4 c22 = texture2D(texture, vUv); // mid center\n    vec4 c23 = texture2D(texture, vec2(vUv.x + px.x, vUv.y) ); // mid right\n    vec4 c31 = texture2D(texture, vec2(vUv.x - px.x, vUv.y + px.y) ); // bottom left\n    vec4 c32 = texture2D(texture, vec2(vUv.x, vUv.y + px.y) ); // bottom center\n    vec4 c33 = texture2D(texture, vUv + px ); // bottom right\n    gl_FragColor = \n    c11 * m[0] + c12 * m[1] + c22 * m[2] +\n    c21 * m[3] + c22 * m[4] + c23 * m[5] +\n    c31 * m[6] + c32 * m[7] + c33 * m[8];\n    gl_FragColor.a = c22.a;\n  }\n",eq=(e,t,n)=>{const a=new RegExp("\\b"+t+" \\w+ (\\w+)","ig");e.replace(a,((e,t)=>(n[t]=0,e)))},tq=class{constructor(e,t,n){d(this,"uniform",{}),d(this,"attribute",{}),d(this,"gl"),d(this,"id"),d(this,"compile",((e,t)=>{const n=this.gl.createShader(t);return n?(this.gl.shaderSource(n,e),this.gl.compileShader(n),this.gl.getShaderParameter(n,this.gl.COMPILE_STATUS)?n:(Uj(`filter: gl compile failed: ${this.gl.getShaderInfoLog(n)||"unknown"}`),null)):(Uj("filter: could not create shader"),null)})),this.gl=e;const a=this.compile(t,this.gl.VERTEX_SHADER),r=this.compile(n,this.gl.FRAGMENT_SHADER);if(this.id=this.gl.createProgram(),a&&r)if(this.id)if(this.gl.attachShader(this.id,a),this.gl.attachShader(this.id,r),this.gl.linkProgram(this.id),this.gl.getProgramParameter(this.id,this.gl.LINK_STATUS)){this.gl.useProgram(this.id),eq(t,"attribute",this.attribute);for(const e in this.attribute)this.attribute[e]=this.gl.getAttribLocation(this.id,e);eq(t,"uniform",this.uniform),eq(n,"uniform",this.uniform);for(const e in this.uniform)this.uniform[e]=this.gl.getUniformLocation(this.id,e)}else Uj(`filter: gl link failed: ${this.gl.getProgramInfoLog(this.id)||"unknown"}`);else Uj("filter: could not create webgl program")}};function nq(){let e=0,t=null,n=!1,a=-1,r=[null,null],i=[],s=null,o=null;const l=fq(100,100),u={},d=l.getContext("webgl");if(!d)return void Uj("filter: cannot get webgl context");function p(e){return r[e]=r[e]||function(e,t){const n=d.createFramebuffer();d.bindFramebuffer(d.FRAMEBUFFER,n);const a=d.createRenderbuffer();d.bindRenderbuffer(d.RENDERBUFFER,a);const r=d.createTexture();return d.bindTexture(d.TEXTURE_2D,r),d.texImage2D(d.TEXTURE_2D,0,d.RGBA,e,t,0,d.RGBA,d.UNSIGNED_BYTE,null),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MAG_FILTER,d.LINEAR),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MIN_FILTER,d.LINEAR),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_S,d.CLAMP_TO_EDGE),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_T,d.CLAMP_TO_EDGE),d.framebufferTexture2D(d.FRAMEBUFFER,d.COLOR_ATTACHMENT0,d.TEXTURE_2D,r,0),d.bindTexture(d.TEXTURE_2D,null),d.bindFramebuffer(d.FRAMEBUFFER,null),{fbo:n,texture:r}}(l.width,l.height),r[e]}function c(r=0){if(!o)return;let i=null,s=null,l=!1;i=0===e?t:p(a).texture||null,e++,!n||1&r?(a=(a+1)%2,s=p(a).fbo||null):(s=null,l=e%2==0),d.bindTexture(d.TEXTURE_2D,i),d.bindFramebuffer(d.FRAMEBUFFER,s),d.uniform1f(o.uniform.flipY,l?-1:1),d.drawArrays(d.TRIANGLES,0,6)}function h(e){if(u[e])return o=u[e],d.useProgram((o?o.id:null)||null),o;if(o=new tq(d,Xj,e),!o)return Uj("filter: could not get webgl program"),null;const t=Float32Array.BYTES_PER_ELEMENT,n=4*t;return d.enableVertexAttribArray(o.attribute.pos),d.vertexAttribPointer(o.attribute.pos,2,d.FLOAT,!1,n,0*t),d.enableVertexAttribArray(o.attribute.uv),d.vertexAttribPointer(o.attribute.uv,2,d.FLOAT,!1,n,2*t),u[e]=o,o}this.gl=d;const f={colorMatrix:e=>{const t=new Float32Array(e);t[4]/=255,t[9]/=255,t[14]/=255,t[19]/=255;const n=h(1===t[18]&&0===t[3]&&0===t[8]&&0===t[13]&&0===t[15]&&0===t[16]&&0===t[17]&&0===t[19]?Zj:Kj);n&&(d.uniform1fv(n.uniform.m,t),c())},brightness:e=>{const t=(e||0)+1;f.colorMatrix([t,0,0,0,0,0,t,0,0,0,0,0,t,0,0,0,0,0,1,0])},saturation:e=>{const t=2*(e||0)/3+1,n=-.5*(t-1);f.colorMatrix([t,n,n,0,0,n,t,n,0,0,n,n,t,0,0,0,0,0,1,0])},desaturate:()=>{f.saturation(-1)},contrast:e=>{const t=(e||0)+1,n=-128*(t-1);f.colorMatrix([t,0,0,0,n,0,t,0,0,n,0,0,t,0,n,0,0,0,1,0])},negative:()=>{f.contrast(-2)},hue:e=>{e=(e||0)/180*Math.PI;const t=Math.cos(e),n=Math.sin(e),a=.213,r=.715,i=.072;f.colorMatrix([a+.787*t+n*-a,r+t*-r+n*-r,i+t*-i+.928*n,0,0,a+t*-a+.143*n,r+t*(1-r)+.14*n,i+t*-i+-.283*n,0,0,a+t*-a+-.787*n,r+t*-r+n*r,i+.928*t+n*i,0,0,0,0,0,1,0])},desaturateLuminance:()=>{f.colorMatrix([.2764723,.929708,.0938197,0,-37.1,.2764723,.929708,.0938197,0,-37.1,.2764723,.929708,.0938197,0,-37.1,0,0,0,1,0])},sepia:()=>{f.colorMatrix([.393,.7689999,.18899999,0,0,.349,.6859999,.16799999,0,0,.272,.5339999,.13099999,0,0,0,0,0,1,0])},brownie:()=>{f.colorMatrix([.5997023498159715,.34553243048391263,-.2708298674538042,0,47.43192855600873,-.037703249837783157,.8609577587992641,.15059552388459913,0,-36.96841498319127,.24113635128153335,-.07441037908422492,.44972182064877153,0,-7.562075277591283,0,0,0,1,0])},vintagePinhole:()=>{f.colorMatrix([.6279345635605994,.3202183420819367,-.03965408211312453,0,9.651285835294123,.02578397704808868,.6441188644374771,.03259127616149294,0,7.462829176470591,.0466055556782719,-.0851232987247891,.5241648018700465,0,5.159190588235296,0,0,0,1,0])},kodachrome:()=>{f.colorMatrix([1.1285582396593525,-.3967382283601348,-.03992559172921793,0,63.72958762196502,-.16404339962244616,1.0835251566291304,-.05498805115633132,0,24.732407896706203,-.16786010706155763,-.5603416277695248,1.6014850761964943,0,35.62982807460946,0,0,0,1,0])},technicolor:()=>{f.colorMatrix([1.9125277891456083,-.8545344976951645,-.09155508482755585,0,11.793603434377337,-.3087833385928097,1.7658908555458428,-.10601743074722245,0,-70.35205161461398,-.231103377548616,-.7501899197440212,1.847597816108189,0,30.950940869491138,0,0,0,1,0])},polaroid:()=>{f.colorMatrix([1.438,-.062,-.062,0,0,-.122,1.378,-.122,0,0,-.016,-.016,1.483,0,0,0,0,0,1,0])},shiftToBGR:()=>{f.colorMatrix([0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0])},convolution:e=>{const t=new Float32Array(e),n=1/l.width,a=1/l.height,r=h(Qj);r&&(d.uniform1fv(r.uniform.m,t),d.uniform2f(r.uniform.px,n,a),c())},detectEdges:()=>{f.convolution.call(this,[0,1,0,1,-4,1,0,1,0])},sobelX:()=>{f.convolution.call(this,[-1,0,1,-2,0,2,-1,0,1])},sobelY:()=>{f.convolution.call(this,[-1,-2,-1,0,0,0,1,2,1])},sharpen:e=>{const t=e||1;f.convolution.call(this,[0,-1*t,0,-1*t,1+4*t,-1*t,0,-1*t,0])},emboss:e=>{const t=e||1;f.convolution.call(this,[-2*t,-1*t,0,-1*t,1,1*t,0,1*t,2*t])},blur:e=>{const t=e/7/l.width,n=e/7/l.height,a=h(Jj);a&&(d.uniform2f(a.uniform.px,0,n),c(1),d.uniform2f(a.uniform.px,t,0),c())},pixelate:e=>{const t=e/l.width,n=e/l.height,a=h(Yj);a&&(d.uniform2f(a.uniform.size,t,n),c())}};this.add=function(e){const t=Array.prototype.slice.call(arguments,1),n=f[e];i.push({func:n,args:t})},this.reset=function(){i=[]},this.get=function(){return i},this.apply=function(a){!function(e,t){if(e!==l.width||t!==l.height){if(l.width=e,l.height=t,!s){const e=new Float32Array([-1,-1,0,1,1,-1,1,1,-1,1,0,0,-1,1,0,0,1,-1,1,1,1,1,1,0]);s=d.createBuffer(),d.bindBuffer(d.ARRAY_BUFFER,s),d.bufferData(d.ARRAY_BUFFER,e,d.STATIC_DRAW),d.pixelStorei(d.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!0)}d.viewport(0,0,l.width,l.height),r=[null,null]}}(a.width,a.height),e=0,t||(t=d.createTexture()),d.bindTexture(d.TEXTURE_2D,t),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_S,d.CLAMP_TO_EDGE),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_T,d.CLAMP_TO_EDGE),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MIN_FILTER,d.NEAREST),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MAG_FILTER,d.NEAREST),d.texImage2D(d.TEXTURE_2D,0,d.RGBA,d.RGBA,d.UNSIGNED_BYTE,a);for(let e=0;e<i.length;e++){n=e===i.length-1;const t=i[e];t.func.apply(this,t.args||[])}return l},this.draw=function(e){return this.add("brightness",0),this.apply(e)}}async function aq(e){const t=4===e.shape.length?Ep(e):e,n=Np(t,3,2),a=[su(n[0]),su(n[1]),su(n[2])],r=[iu(n[0]),iu(n[1]),iu(n[2])],i=await Promise.all(r.map((e=>e.data()))),s=Math.max(i[0][0],i[1][0],i[2][0]),o=(s>1?255:1)/s;let l;if(o>1){const e=[Hu(n[0],a[0]),Hu(n[1],a[1]),Hu(n[2],a[2])],i=[Hu(r[0],a[0]),Hu(r[1],a[1]),Hu(r[2],a[2])],s=[vo(e[0],o),vo(e[1],o),vo(e[2],o)],u=Rp([s[0],s[1],s[2]],2);l=Zo(u,[1,t.shape[0]||0,t.shape[1]||0,3]),io([...e,...i,...s,u])}else l=yu(t,0);return io([...n,...a,...r,n,t,e]),l}var rq,iq,sq,oq,lq=3840,uq=null,dq=null,pq=null,cq={inputSum:0,cacheDiff:1,sumMethod:0,inputTensor:void 0};function hq(){cq.inputSum=0,cq.cacheDiff=1,cq.sumMethod=0,cq.inputTensor=void 0}function fq(e,t){let n;if(gq.browser)if(gq.worker){if("undefined"==typeof OffscreenCanvas)throw new Error("canvas error: attempted to run in web worker but OffscreenCanvas is not supported");n=new OffscreenCanvas(e,t)}else if("undefined"!=typeof document)n=document.createElement("canvas"),n.width=e,n.height=t;else{if("undefined"==typeof navigator||"ReactNative"!==navigator.product)throw new Error("canvas error: attempted to run in browser but DOM is not defined");if(void 0!==gq.Canvas)n=new gq.Canvas(e,t);else{if(void 0===globalThis.Canvas)throw new Error("canvas error: attempted to use canvas in react-native without canvas support installed");n=new globalThis.Canvas(e,t)}}else void 0!==gq.Canvas?n=new gq.Canvas(e,t):void 0!==globalThis.Canvas&&(n=new globalThis.Canvas(e,t));return n}function mq(e,t){const n=t||fq(e.width,e.height);return n.getContext("2d").drawImage(e,0,0),n}async function yq(e,t,n=!0){var a,r,i;if(!e)return t.debug&&Uj("input error: input is missing"),{tensor:null,canvas:null};if(!(e instanceof di||"undefined"!=typeof Image&&e instanceof Image||void 0!==globalThis.Canvas&&e instanceof globalThis.Canvas||"undefined"!=typeof ImageData&&e instanceof ImageData||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap||"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLMediaElement&&e instanceof HTMLMediaElement||"undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas))throw new Error("input error: type not recognized");if(e instanceof di){let n=null;if(e.isDisposedInternal)throw new Error("input error: attempted to use tensor but it is disposed");if(!e.shape)throw new Error("input error: attempted to use tensor without a shape");if(3===e.shape.length){if(3===e.shape[2])n=yu(e,0);else if(4===e.shape[2]){const t=bp(e,[0,0,0],[-1,-1,3]);n=yu(t,0),io(t)}}else 4===e.shape.length&&(3===e.shape[3]?n=Xs(e):4===e.shape[3]&&(n=vp(e,[0,0,0,0],[-1,-1,-1,3])));if(null==n||4!==n.shape.length||1!==n.shape[0]||3!==n.shape[3])throw new Error(`input error: attempted to use tensor with unrecognized shape: ${e.shape.toString()}`);if("int32"===n.dtype){const e=qs(n,"float32");io(n),n=e}return{tensor:n,canvas:t.filter.return?dq:null}}if(void 0!==e.readyState&&e.readyState<=2)return t.debug&&Uj("input stream is not ready"),{tensor:null,canvas:uq};const s=e.naturalWidth||e.videoWidth||e.width||e.shape&&e.shape[1]>0,o=e.naturalHeight||e.videoHeight||e.height||e.shape&&e.shape[2]>0;if(!s||!o)return t.debug&&Uj("cannot determine input dimensions"),{tensor:null,canvas:uq};let l=s,u=o;if(l>lq&&(l=lq,u=Math.trunc(l*o/s)),u>lq&&(u=lq,l=Math.trunc(u*s/o)),((null==(a=t.filter)?void 0:a.width)||0)>0?l=t.filter.width:((null==(r=t.filter)?void 0:r.height)||0)>0&&(l=s*((t.filter.height||0)/o)),(t.filter.height||0)>0?u=t.filter.height:(t.filter.width||0)>0&&(u=o*((t.filter.width||0)/s)),!l||!u)throw new Error("input error: cannot determine dimension");uq&&uq.width===l&&uq.height===u||(uq=fq(l,u));const d=uq.getContext("2d");if("undefined"!=typeof ImageData&&e instanceof ImageData?d.putImageData(e,0,0):t.filter.flip&&void 0!==d.translate?(d.translate(s,0),d.scale(-1,1),d.drawImage(e,0,0,s,o,0,0,uq.width,uq.height),d.setTransform(1,0,0,1,0,0)):d.drawImage(e,0,0,s,o,0,0,uq.width,uq.height),dq&&uq.width===dq.width&&uq.height===dq.height||(dq=fq(uq.width,uq.height)),t.filter.enabled&&gq.webgl.supported?(rq||(rq=gq.browser?new nq:null),gq.filter=!!rq,(null==rq?void 0:rq.add)?(rq.reset(),0!==t.filter.brightness&&rq.add("brightness",t.filter.brightness),0!==t.filter.contrast&&rq.add("contrast",t.filter.contrast),0!==t.filter.sharpness&&rq.add("sharpen",t.filter.sharpness),0!==t.filter.blur&&rq.add("blur",t.filter.blur),0!==t.filter.saturation&&rq.add("saturation",t.filter.saturation),0!==t.filter.hue&&rq.add("hue",t.filter.hue),t.filter.negative&&rq.add("negative"),t.filter.sepia&&rq.add("sepia"),t.filter.vintage&&rq.add("brownie"),t.filter.sepia&&rq.add("sepia"),t.filter.kodachrome&&rq.add("kodachrome"),t.filter.technicolor&&rq.add("technicolor"),t.filter.polaroid&&rq.add("polaroid"),0!==t.filter.pixelate&&rq.add("pixelate",t.filter.pixelate),dq=(null==(i=rq.get())?void 0:i.length)>1?rq.apply(uq):rq.draw(uq)):(t.debug&&Uj("input process error: cannot initialize filters"),gq.webgl.supported=!1,t.filter.enabled=!1,mq(uq,dq))):(mq(uq,dq),rq&&(rq=null),gq.filter=!!rq),!n)return{tensor:null,canvas:dq};if(!dq)throw new Error("canvas error: cannot create output");let p,c=3;if("undefined"!=typeof ImageData&&e instanceof ImageData||e.data&&e.width&&e.height)gq.browser&&rf?p=rf?rf.fromPixels(e):null:(c=e.data.length/e.height/e.width,p=Zi(new Uint8Array(e.data.buffer),[e.height,e.width,c],"int32"));else if(pq&&dq.width===pq.width&&dq.height===pq.height||(pq=fq(dq.width,dq.height)),rf&&gq.browser)"webgl"===t.backend||"humangl"===t.backend||"webgpu"===t.backend?p=rf.fromPixels(dq):(pq=mq(dq),p=rf.fromPixels(pq));else{const e=mq(dq).getContext("2d").getImageData(0,0,l,u);c=e.data.length/l/u,p=Zi(new Uint8Array(e.data.buffer),[l,u,c])}if(4===c){const e=bp(p,[0,0,0],[-1,-1,3]);io(p),p=e}if(!p)throw new Error("input error: cannot create tensor");const h=qs(p,"float32"),f=t.filter.equalization?await aq(h):yu(h,0);if(io([p,h]),t.filter.autoBrightness){const e=iu(f),n=await e.data();t.filter.brightness=n[0]>1?1-n[0]/255:1-n[0],io(e)}return{tensor:f,canvas:t.filter.return?dq:null}}iq=new WeakMap,sq=new WeakMap,oq=new WeakMap;var gq=new class{constructor(){if(d(this,"browser"),d(this,"node"),d(this,"worker"),d(this,"platform",""),d(this,"agent",""),d(this,"backends",[]),d(this,"initial"),d(this,"filter"),d(this,"tfjs"),d(this,"offscreen"),d(this,"perfadd",!1),d(this,"tensorflow",{version:void 0,gpu:void 0}),d(this,"wasm",{supported:void 0,backend:void 0,simd:void 0,multithread:void 0}),d(this,"webgl",{supported:void 0,backend:void 0,version:void 0,renderer:void 0,shader:void 0,vendor:void 0}),d(this,"webgpu",{supported:void 0,backend:void 0,adapter:void 0}),d(this,"cpu",{model:void 0,flags:[]}),d(this,"kernels",[]),h(this,iq,void 0),h(this,sq,void 0),h(this,oq,void 0),this.browser="undefined"!=typeof navigator,this.node=void 0!=={env:{NODE_ENV:"production",TARGET:"module"}}.versions&&void 0!=={env:{NODE_ENV:"production",TARGET:"module"}}.versions.node,this.tfjs={version:Vj["tfjs-core"]},this.offscreen="undefined"!=typeof OffscreenCanvas,this.initial=!0,this.worker=this.browser&&this.offscreen?"undefined"!=typeof WorkerGlobalScope:void 0,"undefined"!=typeof navigator&&void 0!==navigator.userAgent){const e=navigator.userAgent||"",t=e.match(/\(([^()]+)\)/g);if(null==t?void 0:t[0]){const n=t[0].match(/\(([^()]+)\)/g);this.platform=(null==n?void 0:n[0])?n[0].replace(/\(|\)/g,""):"",this.agent=e.replace(t[0],""),this.platform[1]&&(this.agent=this.agent.replace(t[1],"")),this.agent=this.agent.replace(/  /g," ")}}else this.platform=`${{env:{NODE_ENV:"production",TARGET:"module"}}.platform} ${{env:{NODE_ENV:"production",TARGET:"module"}}.arch}`,this.agent=`NodeJS ${{env:{NODE_ENV:"production",TARGET:"module"}}.version}`}get Canvas(){return c(this,iq)}set Canvas(e){f(this,iq,e),globalThis.Canvas=e}get Image(){return c(this,sq)}set Image(e){f(this,sq,e),globalThis.Image=e}get ImageData(){return c(this,oq)}set ImageData(e){f(this,oq,e),globalThis.ImageData=e}async updateBackend(){this.backends=Object.keys(to().registryFactory);try{this.tensorflow={version:yo().binding?yo().binding.TF_Version:void 0,gpu:yo().binding?yo().binding.isUsingGpuDevice():void 0}}catch(e){}this.wasm.supported="undefined"!=typeof WebAssembly,this.wasm.backend=this.backends.includes("wasm"),this.wasm.supported&&this.wasm.backend&&(this.wasm.simd=await He().getAsync("WASM_HAS_SIMD_SUPPORT"),this.wasm.multithread=await He().getAsync("WASM_HAS_MULTITHREAD_SUPPORT"));const e=fq(100,100),t=e?e.getContext("webgl2"):void 0;this.webgl.supported=void 0!==t,this.webgl.backend=this.backends.includes("webgl"),this.webgl.supported&&this.webgl.backend&&t&&(this.webgl.version=t.getParameter(t.VERSION),this.webgl.vendor=t.getParameter(t.VENDOR),this.webgl.renderer=t.getParameter(t.RENDERER),this.webgl.shader=t.getParameter(t.SHADING_LANGUAGE_VERSION)),this.webgpu.supported=this.browser&&"undefined"!=typeof navigator&&void 0!==navigator.gpu,this.webgpu.backend=this.backends.includes("webgpu");try{if(this.webgpu.supported){const e=await navigator.gpu.requestAdapter();this.webgpu.adapter=await(null==e?void 0:e.requestAdapterInfo())}}catch(e){this.webgpu.supported=!1}try{this.kernels=vr(po()).map((e=>e.kernelName.toLowerCase()))}catch(e){}}updateCPU(){const e={model:"",flags:[]};this.node&&this.platform.startsWith("linux"),this.cpu?this.cpu=e:Object.defineProperty(this,"cpu",{value:e})}},Aq={};u(Aq,{"affectnet-mobilenet":()=>$q,age:()=>Mq,"anti-spoofing":()=>dX,antispoof:()=>xq,blazeface:()=>bq,"blazeface-back":()=>_q,"blazeface-front":()=>Fq,"blazepose-detector":()=>Oq,"blazepose-full":()=>Pq,"blazepose-heavy":()=>Dq,"blazepose-lite":()=>zq,centernet:()=>vq,default:()=>kX,efficientpose:()=>Lq,"efficientpose-i-lite":()=>pX,"efficientpose-ii-lite":()=>cX,"efficientpose-iv":()=>hX,emotion:()=>wq,faceboxes:()=>Wq,facemesh:()=>kq,"facemesh-attention":()=>Vq,"facemesh-attention-pinto":()=>Bq,"facemesh-detection-full":()=>Uq,"facemesh-detection-short":()=>Gq,faceres:()=>Iq,"faceres-deep":()=>Hq,gear:()=>Xq,"gear-e1":()=>jq,"gear-e2":()=>qq,gender:()=>Zq,"gender-ssrnet-imdb":()=>Kq,handdetect:()=>Yq,"handlandmark-full":()=>Jq,"handlandmark-lite":()=>Sq,"handlandmark-sparse":()=>Qq,handskeleton:()=>eX,handtrack:()=>Nq,"insightface-efficientnet-b0":()=>fX,"insightface-ghostnet-strides1":()=>mX,"insightface-ghostnet-strides2":()=>yX,"insightface-mobilenet-emore":()=>gX,"insightface-mobilenet-swish":()=>AX,iris:()=>Cq,liveness:()=>Tq,meet:()=>tX,mobileface:()=>nX,mobilefacenet:()=>aX,models:()=>Eq,"movenet-lightning":()=>Rq,"movenet-multipose":()=>rX,"movenet-thunder":()=>iX,nanodet:()=>sX,"nanodet-e":()=>xX,"nanodet-g":()=>bX,"nanodet-m":()=>vX,"nanodet-t":()=>wX,posenet:()=>oX,rvm:()=>lX,selfie:()=>uX});var xq=853098,bq=538928,vq=4030290,wq=820516,kq=1477958,Iq=6978814,Sq=2023432,Nq=2964837,Cq=2599092,Tq=592976,Eq=0,Rq=4650216,$q=6920630,Mq=161240,_q=538928,Fq=402048,Oq=5928856,Pq=6339202,Dq=27502466,zq=2726402,Lq=5651240,Wq=2013002,Bq=2387598,Vq=2382414,Uq=1026192,Gq=201268,Hq=13957620,jq=112438,qq=112438,Xq=1498916,Kq=161236,Zq=201808,Yq=3515612,Jq=5431368,Qq=5286322,eX=5502280,tX=372228,nX=2183192,aX=5171976,rX=9448838,iX=12477112,sX=7574558,oX=5032780,lX=3739355,uX=212886,dX=853098,pX=2269064,cX=5651240,hX=25643252,fX=13013224,mX=8093408,yX=8049584,gX=6938536,AX=12168584,xX=12319156,bX=7574558,vX=1887474,wX=5294216,kX={antispoof:xq,blazeface:bq,centernet:vq,emotion:wq,facemesh:kq,faceres:Iq,"handlandmark-lite":Sq,handtrack:Nq,iris:Cq,liveness:Tq,models:Eq,"movenet-lightning":Rq,"affectnet-mobilenet":$q,age:Mq,"blazeface-back":_q,"blazeface-front":Fq,"blazepose-detector":Oq,"blazepose-full":Pq,"blazepose-heavy":Dq,"blazepose-lite":zq,efficientpose:Lq,faceboxes:Wq,"facemesh-attention-pinto":Bq,"facemesh-attention":Vq,"facemesh-detection-full":Uq,"facemesh-detection-short":Gq,"faceres-deep":Hq,"gear-e1":jq,"gear-e2":qq,gear:Xq,"gender-ssrnet-imdb":Kq,gender:Zq,handdetect:Yq,"handlandmark-full":Jq,"handlandmark-sparse":Qq,handskeleton:eX,meet:tX,mobileface:nX,mobilefacenet:aX,"movenet-multipose":rX,"movenet-thunder":iX,nanodet:sX,posenet:oX,rvm:lX,selfie:uX,"anti-spoofing":dX,"efficientpose-i-lite":pX,"efficientpose-ii-lite":cX,"efficientpose-iv":hX,"insightface-efficientnet-b0":fX,"insightface-ghostnet-strides1":mX,"insightface-ghostnet-strides2":yX,"insightface-mobilenet-emore":gX,"insightface-mobilenet-swish":AX,"nanodet-e":xX,"nanodet-g":bX,"nanodet-m":vX,"nanodet-t":wX},IX={cacheModels:!0,cacheSupported:!0,verbose:!0,debug:!1,modelBasePath:""},SX={};async function NX(e){var t,n,a,r;let i=function(e,t){const n=e.endsWith("/")?"":"/",a=t.startsWith(".")||t.startsWith("/")||t.startsWith("http:")||t.startsWith("https:")||t.startsWith("file:")?`${t}`:`${e}${n}${t}`;if(!a.toLocaleLowerCase().includes(".json"))throw new Error(`modelpath error: expecting json file: ${a}`);return a}(IX.modelBasePath,e||"");i.toLowerCase().endsWith(".json")||(i+=".json");const s=i.includes("/")?i.split("/"):i.split("\\"),o=s[s.length-1].replace(".json",""),l="indexeddb://"+o;SX[o]={name:o,sizeFromManifest:0,sizeLoadedWeights:0,sizeDesired:Aq[o],inCache:!1,url:""},IX.cacheSupported="undefined"!=typeof indexedDB;let u={};try{u=IX.cacheSupported&&IX.cacheModels?await Fh.listModels():{}}catch(e){IX.cacheSupported=!1}SX[o].inCache=IX.cacheSupported&&IX.cacheModels&&Object.keys(u).includes(l),SX[o].url=SX[o].inCache?l:i;const d="undefined"==typeof fetch?{}:{fetchFunc:(e,t)=>async function(e,t){return IX.debug&&Uj("load model fetch:",e,t),fetch(e,t)}(e,t)};let p=new Rg(SX[o].url,d),c=!1;try{p.findIOHandler(),IX.debug&&Uj("model load handler:",p.handler)}catch(e){Uj("error finding model i/o handler:",i,e)}try{const e=await(null==(t=p.handler)?void 0:t.load())||null;SX[o].sizeFromManifest=(null==(n=null==e?void 0:e.weightData)?void 0:n.byteLength)||0,e?p.loadSync(e):p=await $g(SX[o].inCache?l:i,d),SX[o].sizeLoadedWeights=(null==(r=null==(a=p.artifacts)?void 0:a.weightData)?void 0:r.byteLength)||0,IX.verbose&&Uj("load:",{model:o,url:p.modelUrl,bytes:SX[o].sizeLoadedWeights}),c=!0}catch(e){Uj("error loading model:",i,e)}if(c&&IX.cacheModels&&IX.cacheSupported&&!SX[o].inCache)try{const e=await p.save(l);IX.debug&&Uj("model saved:",l,e)}catch(e){Uj("error saving model:",i,e)}return p}var CX="3.0.7",TX={name:"humangl",priority:999,canvas:null,gl:null,extensions:[],webGLattr:{alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!1,desynchronized:!0}},EX={tf255:255,tf1:1,tf2:2,tf05:.5,tf127:127.5,rgb:[.2989,.587,.114]},RX={};async function $X(e,t=!1){var n,a;if(e.state="backend",0===(null==(n=e.config.backend)?void 0:n.length)&&(e.config.backend=await async function(){var e;return await gq.updateBackend(),(null==(e=gq.tensorflow)?void 0:e.version)?"tensorflow":gq.webgpu.supported&&gq.webgpu.backend?"webgpu":gq.webgl.supported&&gq.webgl.backend?"webgl":gq.wasm.supported&&gq.wasm.backend?"wasm":"cpu"}()),t||gq.initial||e.config.backend&&e.config.backend.length>0&&po()!==e.config.backend){const n=Gj();if(e.config.backend&&e.config.backend.length>0){"undefined"==typeof window&&"undefined"!=typeof WorkerGlobalScope&&e.config.debug&&e.config.debug&&Uj("running inside web worker"),"undefined"!=typeof navigator&&(null==(a=null==navigator?void 0:navigator.userAgent)?void 0:a.toLowerCase().includes("electron"))&&e.config.debug&&Uj("running inside electron");let n=Object.keys(to().registryFactory);if("humangl"!==e.config.backend||n.includes("humangl")||(function(e){var t;if("humangl"===e.config.backend&&(TX.name in to().registry&&!(null==(t=null==TX?void 0:TX.gl)?void 0:t.getParameter(TX.gl.VERSION))&&(Uj("humangl error: backend invalid context"),e.models.reset()),!ho(TX.name))){try{TX.canvas=fq(100,100)}catch(e){return void Uj("humangl error: cannot create canvas:",e)}try{if(TX.gl=TX.canvas.getContext("webgl2",TX.webGLattr),!TX.gl)return void Uj("humangl error: cannot get webgl context");if(!TX.gl.getParameter(TX.gl.VERSION).includes("2.0"))return Uj("backend override: using fallback webgl backend as webgl 2.0 is not detected"),void(e.config.backend="webgl");TX.canvas&&(TX.canvas.addEventListener("webglcontextlost",(t=>{throw Uj("humangl error:",t.type),Uj("possible browser memory leak using webgl or conflict with multiple backend registrations"),e.emit("error"),new Error("backend error: webgl context lost")})),TX.canvas.addEventListener("webglcontextrestored",(e=>{Uj("humangl error: context restored:",e)})),TX.canvas.addEventListener("webglcontextcreationerror",(e=>{Uj("humangl error: context create:",e)})))}catch(e){return void Uj("humangl error: cannot get webgl context:",e)}try{vI(2,TX.gl)}catch(e){return void Uj("humangl error: cannot set webgl context:",e)}try{const e=new xN(TX.gl);mo(TX.name,(()=>new LC(e)),TX.priority)}catch(e){return void Uj("humangl error: cannot register webgl backend:",e)}try{vr("webgl").forEach((e=>{wr({...e,backendName:TX.name})}))}catch(e){return void Uj("humangl error: cannot update webgl backend registration:",e)}try{He().flagRegistry.WEBGL_VERSION&&He().set("WEBGL_VERSION",2)}catch(e){return void Uj("humangl error: cannot set WebGL backend flags:",e)}!function(){const e=TX.gl;e&&(TX.extensions=e.getSupportedExtensions())}();const t=yo(),n=void 0!==t.gpgpu?t.getGPGPUContext().gl:null;n?e.config.debug&&Uj("humangl backend registered:",{webgl:n.getParameter(n.VERSION),renderer:n.getParameter(n.RENDERER)}):Uj("humangl error: no current gl context:",n,TX.gl)}}(e),n=Object.keys(to().registryFactory)),e.config.debug&&Uj("available backends:",n),gq.browser&&!gq.node&&"tensorflow"===e.config.backend&&n.includes("webgl")&&(e.config.debug&&Uj("override: backend set to tensorflow while running in browser"),e.config.backend="webgl"),!gq.node||gq.browser||"webgl"!==e.config.backend&&"humangl"!==e.config.backend||!n.includes("tensorflow")||(e.config.debug&&Uj(`override: backend set to ${e.config.backend} while running in nodejs`),e.config.backend="tensorflow"),gq.browser&&"webgpu"===e.config.backend)if("undefined"==typeof navigator||void 0===navigator.gpu)Uj("override: backend set to webgpu but browser does not support webgpu"),e.config.backend="webgl";else{const t=await navigator.gpu.requestAdapter();e.config.debug&&Uj("enumerated webgpu adapter:",t),t?Uj("webgpu adapter info:","requestAdapterInfo"in t?await t.requestAdapterInfo():void 0):(Uj("override: backend set to webgpu but browser reports no available gpu"),e.config.backend="webgl")}if(n.includes(e.config.backend)||(Uj(`error: backend ${e.config.backend} not found in registry`),e.config.backend=gq.node?"tensorflow":"webgl",e.config.debug&&Uj(`override: setting backend ${e.config.backend}`)),e.config.debug&&Uj("setting backend:",[e.config.backend]),"wasm"===e.config.backend){if(He().flagRegistry.CANVAS2D_WILL_READ_FREQUENTLY&&He().set("CANVAS2D_WILL_READ_FREQUENTLY",!0),e.config.debug&&Uj("wasm path:",e.config.wasmPath),void 0===Mz)throw new Error("backend error: attempting to use wasm backend but wasm path is not set");Mz(e.config.wasmPath,e.config.wasmPlatformFetch);let t=!1,n=!1;try{t=await He().getAsync("WASM_HAS_MULTITHREAD_SUPPORT"),n=await He().getAsync("WASM_HAS_SIMD_SUPPORT"),e.config.debug&&Uj(`wasm execution: ${n?"simd":"no simd"} ${t?"multithreaded":"singlethreaded"}`),e.config.debug&&!n&&Uj("warning: wasm simd support is not enabled")}catch(e){Uj("wasm detection failed")}}try{await lo(e.config.backend),await uo()}catch(t){return Uj("error: cannot set backend:",e.config.backend,t),!1}e.config.debug&&(RX=JSON.parse(JSON.stringify(He().flags)))}if("humangl"!==po()&&"webgl"!==po()||(He().flagRegistry.WEBGL_USE_SHAPES_UNIFORMS&&He().set("WEBGL_USE_SHAPES_UNIFORMS",!0),He().flagRegistry.WEBGL_EXP_CONV&&He().set("WEBGL_EXP_CONV",!0),e.config.debug&&void 0!==e.config.deallocate&&e.config.deallocate&&(Uj("changing webgl: WEBGL_DELETE_TEXTURE_THRESHOLD:",!0),He().set("WEBGL_DELETE_TEXTURE_THRESHOLD",0))),po(),e.config.debug){const t=He().flags,n={};for(const e of Object.keys(t))RX[e]!==t[e]&&(n[e]=t[e]);e.config.debug&&Object.keys(n).length>0&&Uj("backend:",po(),"flags:",n)}if(e.config.flags&&Object.keys(e.config.flags).length>0){e.config.debug&&Uj("flags:",e.config.flags);for(const[t,n]of Object.entries(e.config.flags))He().set(t,n)}Zs(),EX.tf255=lu(255,"float32"),EX.tf1=lu(1,"float32"),EX.tf2=lu(2,"float32"),EX.tf05=lu(.5,"float32"),EX.tf127=lu(127.5,"float32"),EX.rgb=Fp([.2989,.587,.114],"float32"),e.performance.initBackend=Math.trunc(Gj()-n),e.config.backend=po(),await gq.updateBackend(),function(e){const t=[];gq.kernels.includes("mod")||(wr({kernelName:"Mod",backendName:po(),kernelFunc:e=>ro((()=>Hu(e.inputs.a,vo(bo(e.inputs.a,e.inputs.b),e.inputs.b))))}),gq.kernels.push("mod"),t.push("mod")),gq.kernels.includes("floormod")||(wr({kernelName:"FloorMod",backendName:po(),kernelFunc:e=>ro((()=>Ao(vo(xo(e.inputs.a,e.inputs.b),e.inputs.b),pd(e.inputs.a,e.inputs.b))))}),gq.kernels.push("floormod"),t.push("floormod")),!gq.kernels.includes("rotatewithoffset")&&e.softwareKernels&&(wr({kernelName:"RotateWithOffset",backendName:po(),kernelFunc:e=>ro((()=>{const t=po();lo("cpu");const n=yh.rotateWithOffset(e.inputs.image,e.attrs.radians,e.attrs.fillValue,e.attrs.center);return lo(t),n}))}),gq.kernels.push("rotatewithoffset"),t.push("rotatewithoffset")),t.length>0&&e.debug&&Uj("registered kernels:",t)}(e.config)}return!0}function MX(e,t){for(const n of e)wr({kernelName:n,backendName:t.backend,kernelFunc:e=>{var a;return t.debug&&Uj("kernelFunc",n,t.backend,e),null==(a=null==e?void 0:e.inputs)?void 0:a.info}});gq.kernels=vr(po()).map((e=>e.kernelName.toLowerCase()))}var _X={};u(_X,{all:()=>bK,body:()=>cK,canvas:()=>xK,face:()=>pK,gesture:()=>mK,hand:()=>hK,init:()=>vK,object:()=>fK,options:()=>GX,person:()=>AK});var FX=e=>{if(e)if(e.getContext){const t=e.getContext("2d",{willReadFrequently:!0});if(t)return t;Uj("draw error: cannot get canvas context")}else Uj("draw error: canvas context not defined");else Uj("draw error: invalid canvas");return null},OX=e=>Math.round(180*e/Math.PI),PX=(e,t,n)=>e.replace(t,"number"==typeof n?n.toFixed(1):n),DX=(e,t)=>{if(!t.useDepth||void 0===e)return t.color;const n=Uint8ClampedArray.from([127+2*e,127-2*e,255]);return`rgba(${n[0]}, ${n[1]}, ${n[2]}, ${t.alpha})`};function zX(e,t,n,a,r){const i=t.replace(/\[.*\]/g,"").split("\n").map((e=>e.trim())),s=Math.max(0,n);for(let t=i.length-1;t>=0;t--){const n=t*r.lineHeight+a;r.shadowColor&&""!==r.shadowColor&&(e.fillStyle=r.shadowColor,e.fillText(i[t],s+5,n+16)),e.fillStyle=r.labelColor,e.fillText(i[t],s+4,n+15)}}function LX(e,t,n,a,r){e.fillStyle=DX(a,r),e.beginPath(),e.arc(t,n,r.pointSize,0,2*Math.PI),e.fill()}function WX(e,t,n,a,r,i){if(e.beginPath(),e.lineWidth=i.lineWidth,i.useCurves){const i=(t+t+a)/2,s=(n+n+r)/2;e.ellipse(i,s,a/2,r/2,0,0,2*Math.PI)}else e.moveTo(t+i.roundRect,n),e.lineTo(t+a-i.roundRect,n),e.quadraticCurveTo(t+a,n,t+a,n+i.roundRect),e.lineTo(t+a,n+r-i.roundRect),e.quadraticCurveTo(t+a,n+r,t+a-i.roundRect,n+r),e.lineTo(t+i.roundRect,n+r),e.quadraticCurveTo(t,n+r,t,n+r-i.roundRect),e.lineTo(t,n+i.roundRect),e.quadraticCurveTo(t,n,t+i.roundRect,n),e.closePath();e.stroke()}function BX(e,t,n){if(!(t.length<2)){e.beginPath(),e.moveTo(t[0][0],t[0][1]);for(const a of t)e.strokeStyle=DX(a[2]||0,n),e.lineTo(Math.trunc(a[0]),Math.trunc(a[1]));e.stroke(),n.fillPolygons&&(e.closePath(),e.fill())}}function VX(e,t,n){if(!(t.length<2))if(e.lineWidth=n.lineWidth,!n.useCurves||t.length<=2)BX(e,t,n);else{e.moveTo(t[0][0],t[0][1]);for(let n=0;n<t.length-2;n++){const a=(t[n][0]+t[n+1][0])/2,r=(t[n][1]+t[n+1][1])/2;e.quadraticCurveTo(t[n][0],t[n][1],a,r)}e.quadraticCurveTo(t[t.length-2][0],t[t.length-2][1],t[t.length-1][0],t[t.length-1][1]),e.stroke(),n.fillPolygons&&(e.closePath(),e.fill())}}function UX(e,t,n,a=5){let r,i,s;e.beginPath(),e.moveTo(t[0],t[1]),e.lineTo(n[0],n[1]),r=Math.atan2(n[1]-t[1],n[0]-t[0]),i=a*Math.cos(r)+n[0],s=a*Math.sin(r)+n[1],e.moveTo(i,s),r+=1/3*(2*Math.PI),i=a*Math.cos(r)+n[0],s=a*Math.sin(r)+n[1],e.lineTo(i,s),r+=1/3*(2*Math.PI),i=a*Math.cos(r)+n[0],s=a*Math.sin(r)+n[1],e.lineTo(i,s),e.closePath(),e.stroke(),e.fill()}var GX={color:"rgba(173, 216, 230, 0.6)",labelColor:"rgba(173, 216, 230, 1)",shadowColor:"black",alpha:.5,font:'small-caps 16px "Segoe UI"',lineHeight:18,lineWidth:4,pointSize:2,roundRect:8,drawPoints:!1,drawLabels:!0,drawBoxes:!0,drawAttention:!0,drawGestures:!0,drawPolygons:!0,drawGaze:!0,fillPolygons:!1,useDepth:!0,useCurves:!1,faceLabels:"",bodyLabels:"",bodyPartLabels:"",objectLabels:"",handLabels:"",fingerLabels:"",gestureLabels:""},HX={silhouette:[10,338,297,332,284,251,389,356,454,323,361,288,397,365,379,378,400,377,152,148,176,149,150,136,172,58,132,93,234,127,162,21,54,103,67,109],lipsUpperOuter:[185,40,39,37,0,267,269,270,409],lipsLowerOuter:[61,146,91,181,84,17,314,405,321,375,291],lipsUpperInner:[191,80,81,82,13,312,311,310,415],lipsLowerInner:[78,95,88,178,87,14,317,402,318,324,308],lipsLowerSemiOuter:[76,77,90,180,85,16,315,404,320,307,306],lipsUpperSemiOuter:[184,74,73,72,11,302,303,304,408],lipsLowerSemiInner:[62,96,89,179,86,15,316,403,319,325,292],lipsUpperSemiInner:[183,42,41,38,12,268,271,272,407],rightEyeUpper0:[246,161,160,159,158,157,173],rightEyeLower0:[33,7,163,144,145,153,154,155,133],rightEyeUpper1:[247,30,29,27,28,56,190],rightEyeLower1:[130,25,110,24,23,22,26,112,243],rightEyeUpper2:[113,225,224,223,222,221,189],rightEyeLower2:[226,31,228,229,230,231,232,233,244],rightEyeLower3:[143,111,117,118,119,120,121,128,245],rightEyebrowUpper:[156,70,63,105,66,107,55,193],rightEyebrowLower:[35,124,46,53,52,65],rightEyeIris:[473,474,475,476,477],leftEyeUpper0:[466,388,387,386,385,384,398],leftEyeLower0:[263,249,390,373,374,380,381,382,362],leftEyeUpper1:[467,260,259,257,258,286,414],leftEyeLower1:[359,255,339,254,253,252,256,341,463],leftEyeUpper2:[342,445,444,443,442,441,413],leftEyeLower2:[446,261,448,449,450,451,452,453,464],leftEyeLower3:[372,340,346,347,348,349,350,357,465],leftEyebrowUpper:[383,300,293,334,296,336,285,417],leftEyebrowLower:[265,353,276,283,282,295],leftEyeIris:[468,469,470,471,472],midwayBetweenEyes:[168],noseTip:[1],noseBottom:[2],noseRightCorner:[98],noseLeftCorner:[327],rightCheek:[205],leftCheek:[425]},jX={count:468,mouth:13,symmetryLine:[13,HX.midwayBetweenEyes[0]]},qX={leftEye:0,rightEye:1,nose:2,mouth:3,leftEar:4,rightEar:5,symmetryLine:[3,2]},XX=[{key:"EyeUpper0",indices:[9,10,11,12,13,14,15]},{key:"EyeUpper1",indices:[25,26,27,28,29,30,31]},{key:"EyeUpper2",indices:[41,42,43,44,45,46,47]},{key:"EyeLower0",indices:[0,1,2,3,4,5,6,7,8]},{key:"EyeLower1",indices:[16,17,18,19,20,21,22,23,24]},{key:"EyeLower2",indices:[32,33,34,35,36,37,38,39,40]},{key:"EyeLower3",indices:[54,55,56,57,58,59,60,61,62]},{key:"EyebrowUpper",indices:[63,64,65,66,67,68,69,70]},{key:"EyebrowLower",indices:[48,49,50,51,52,53]}],KX=[[.499976992607117,.652534008026123],[.500025987625122,.547487020492554],[.499974012374878,.602371990680695],[.482113003730774,.471979022026062],[.500150978565216,.527155995368958],[.499909996986389,.498252987861633],[.499523013830185,.40106201171875],[.289712011814117,.380764007568359],[.499954998493195,.312398016452789],[.499987006187439,.269918978214264],[.500023007392883,.107050001621246],[.500023007392883,.666234016418457],[.5000159740448,.679224014282227],[.500023007392883,.692348003387451],[.499976992607117,.695277988910675],[.499976992607117,.70593398809433],[.499976992607117,.719385027885437],[.499976992607117,.737019002437592],[.499967992305756,.781370997428894],[.499816000461578,.562981009483337],[.473773002624512,.573909997940063],[.104906998574734,.254140973091125],[.365929991006851,.409575998783112],[.338757991790771,.41302502155304],[.311120003461838,.409460008144379],[.274657994508743,.389131009578705],[.393361985683441,.403706014156342],[.345234006643295,.344011008739471],[.370094001293182,.346076011657715],[.319321990013123,.347265005111694],[.297903001308441,.353591024875641],[.24779200553894,.410809993743896],[.396889001131058,.842755019664764],[.280097991228104,.375599980354309],[.106310002505779,.399955987930298],[.2099249958992,.391353011131287],[.355807989835739,.534406006336212],[.471751004457474,.65040397644043],[.474155008792877,.680191993713379],[.439785003662109,.657229006290436],[.414617002010345,.66654098033905],[.450374007225037,.680860996246338],[.428770989179611,.682690978050232],[.374971002340317,.727805018424988],[.486716985702515,.547628998756409],[.485300987958908,.527395009994507],[.257764995098114,.314490020275116],[.401223003864288,.455172002315521],[.429818987846375,.548614978790283],[.421351999044418,.533740997314453],[.276895999908447,.532056987285614],[.483370006084442,.499586999416351],[.33721199631691,.282882988452911],[.296391993761063,.293242990970612],[.169294998049736,.193813979625702],[.447580009698868,.302609980106354],[.392390012741089,.353887975215912],[.354490011930466,.696784019470215],[.067304998636246,.730105042457581],[.442739009857178,.572826027870178],[.457098007202148,.584792017936707],[.381974011659622,.694710969924927],[.392388999462128,.694203019142151],[.277076005935669,.271932005882263],[.422551989555359,.563233017921448],[.385919004678726,.281364023685455],[.383103013038635,.255840003490448],[.331431001424789,.119714021682739],[.229923993349075,.232002973556519],[.364500999450684,.189113974571228],[.229622006416321,.299540996551514],[.173287004232407,.278747975826263],[.472878992557526,.666198015213013],[.446828007698059,.668527007102966],[.422762006521225,.673889994621277],[.445307999849319,.580065965652466],[.388103008270264,.693961024284363],[.403039008378983,.706539988517761],[.403629004955292,.693953037261963],[.460041999816895,.557139039039612],[.431158006191254,.692366003990173],[.452181994915009,.692366003990173],[.475387006998062,.692366003990173],[.465828001499176,.779190003871918],[.472328990697861,.736225962638855],[.473087012767792,.717857003211975],[.473122000694275,.704625964164734],[.473033010959625,.695277988910675],[.427942007780075,.695277988910675],[.426479011774063,.703539967536926],[.423162013292313,.711845993995667],[.4183090031147,.720062971115112],[.390094995498657,.639572978019714],[.013953999616206,.560034036636353],[.499913990497589,.58014702796936],[.413199990987778,.69539999961853],[.409626007080078,.701822996139526],[.468080013990402,.601534962654114],[.422728985548019,.585985004901886],[.463079988956451,.593783974647522],[.37211999297142,.47341400384903],[.334562003612518,.496073007583618],[.411671012639999,.546965003013611],[.242175996303558,.14767599105835],[.290776997804642,.201445996761322],[.327338010072708,.256527006626129],[.399509996175766,.748921036720276],[.441727995872498,.261676013469696],[.429764986038208,.187834024429321],[.412198007106781,.108901023864746],[.288955003023148,.398952007293701],[.218936994671822,.435410976409912],[.41278201341629,.398970007896423],[.257135003805161,.355440020561218],[.427684992551804,.437960982322693],[.448339998722076,.536936044692993],[.178560003638268,.45755398273468],[.247308000922203,.457193970680237],[.286267012357712,.467674970626831],[.332827985286713,.460712015628815],[.368755996227264,.447206974029541],[.398963987827301,.432654976844788],[.476410001516342,.405806005001068],[.189241006970406,.523923993110657],[.228962004184723,.348950982093811],[.490725994110107,.562400996685028],[.404670000076294,.485132992267609],[.019469000399113,.401564002037048],[.426243007183075,.420431017875671],[.396993011236191,.548797011375427],[.266469985246658,.376977026462555],[.439121007919312,.51895797252655],[.032313998788595,.644356966018677],[.419054001569748,.387154996395111],[.462783008813858,.505746960639954],[.238978996872902,.779744982719421],[.198220998048782,.831938028335571],[.107550002634525,.540755033493042],[.183610007166862,.740257024765015],[.134409993886948,.333683013916016],[.385764002799988,.883153975009918],[.490967005491257,.579378008842468],[.382384985685349,.508572995662689],[.174399003386497,.397670984268188],[.318785011768341,.39623498916626],[.343364000320435,.400596976280212],[.396100014448166,.710216999053955],[.187885001301765,.588537991046906],[.430987000465393,.944064974784851],[.318993002176285,.898285031318665],[.266247987747192,.869701027870178],[.500023007392883,.190576016902924],[.499976992607117,.954452991485596],[.366169989109039,.398822009563446],[.393207013607025,.39553701877594],[.410373002290726,.391080021858215],[.194993004202843,.342101991176605],[.388664990663528,.362284004688263],[.365961998701096,.355970978736877],[.343364000320435,.355356991291046],[.318785011768341,.35834002494812],[.301414996385574,.363156020641327],[.058132998645306,.319076001644135],[.301414996385574,.387449026107788],[.499987989664078,.618434011936188],[.415838003158569,.624195992946625],[.445681989192963,.566076993942261],[.465844005346298,.620640993118286],[.49992299079895,.351523995399475],[.288718998432159,.819945991039276],[.335278987884521,.852819979190826],[.440512001514435,.902418971061707],[.128294005990028,.791940987110138],[.408771991729736,.373893976211548],[.455606997013092,.451801002025604],[.499877005815506,.908990025520325],[.375436991453171,.924192011356354],[.11421000212431,.615022003650665],[.448662012815475,.695277988910675],[.4480200111866,.704632043838501],[.447111994028091,.715808033943176],[.444831997156143,.730794012546539],[.430011987686157,.766808986663818],[.406787008047104,.685672998428345],[.400738000869751,.681069016456604],[.392399996519089,.677703022956848],[.367855995893478,.663918972015381],[.247923001646996,.601333022117615],[.452769994735718,.420849978923798],[.43639200925827,.359887003898621],[.416164010763168,.368713974952698],[.413385987281799,.692366003990173],[.228018000721931,.683571994304657],[.468268007040024,.352671027183533],[.411361992359161,.804327011108398],[.499989002943039,.469825029373169],[.479153990745544,.442654013633728],[.499974012374878,.439637005329132],[.432112008333206,.493588984012604],[.499886006116867,.866917014122009],[.49991300702095,.821729004383087],[.456548988819122,.819200992584229],[.344549000263214,.745438992977142],[.37890899181366,.574010014533997],[.374292999505997,.780184984207153],[.319687992334366,.570737957954407],[.357154995203018,.604269981384277],[.295284003019333,.621580958366394],[.447750002145767,.862477004528046],[.410986006259918,.508723020553589],[.31395098567009,.775308012962341],[.354128003120422,.812552988529205],[.324548006057739,.703992962837219],[.189096003770828,.646299958229065],[.279776990413666,.71465802192688],[.1338230073452,.682700991630554],[.336768001317978,.644733011722565],[.429883986711502,.466521978378296],[.455527991056442,.548622965812683],[.437114000320435,.558896005153656],[.467287987470627,.529924988746643],[.414712011814117,.335219979286194],[.37704598903656,.322777986526489],[.344107985496521,.320150971412659],[.312875986099243,.32233202457428],[.283526003360748,.333190023899078],[.241245999932289,.382785975933075],[.102986000478268,.468762993812561],[.267612010240555,.424560010433197],[.297879010438919,.433175981044769],[.333433985710144,.433878004550934],[.366427004337311,.426115989685059],[.396012008190155,.416696012020111],[.420121014118195,.41022801399231],[.007561000064015,.480777025222778],[.432949006557465,.569517970085144],[.458638995885849,.479089021682739],[.473466008901596,.545744001865387],[.476087987422943,.563830018043518],[.468472003936768,.555056989192963],[.433990985155106,.582361996173859],[.483518004417419,.562983989715576],[.482482999563217,.57784903049469],[.42645001411438,.389798998832703],[.438998997211456,.39649498462677],[.450067013502121,.400434017181396],[.289712011814117,.368252992630005],[.276670008897781,.363372981548309],[.517862021923065,.471948027610779],[.710287988185883,.380764007568359],[.526226997375488,.573909997940063],[.895093023777008,.254140973091125],[.634069979190826,.409575998783112],[.661242008209229,.41302502155304],[.688880026340485,.409460008144379],[.725341975688934,.389131009578705],[.606630027294159,.40370500087738],[.654766023159027,.344011008739471],[.629905998706818,.346076011657715],[.680678009986877,.347265005111694],[.702096998691559,.353591024875641],[.75221198797226,.410804986953735],[.602918028831482,.842862963676453],[.719901978969574,.375599980354309],[.893692970275879,.399959981441498],[.790081977844238,.391354024410248],[.643998026847839,.534487962722778],[.528249025344849,.65040397644043],[.525849997997284,.680191040039062],[.560214996337891,.657229006290436],[.585384011268616,.66654098033905],[.549625992774963,.680860996246338],[.57122802734375,.682691991329193],[.624852001667023,.72809898853302],[.513050019741058,.547281980514526],[.51509702205658,.527251958847046],[.742246985435486,.314507007598877],[.598631024360657,.454979002475739],[.570338010787964,.548575043678284],[.578631997108459,.533622980117798],[.723087012767792,.532054007053375],[.516445994377136,.499638974666595],[.662801027297974,.282917976379395],[.70362401008606,.293271005153656],[.830704987049103,.193813979625702],[.552385985851288,.302568018436432],[.607609987258911,.353887975215912],[.645429015159607,.696707010269165],[.932694971561432,.730105042457581],[.557260990142822,.572826027870178],[.542901992797852,.584792017936707],[.6180260181427,.694710969924927],[.607590973377228,.694203019142151],[.722943007946014,.271963000297546],[.577413976192474,.563166975975037],[.614082992076874,.281386971473694],[.616907000541687,.255886018276215],[.668509006500244,.119913995265961],[.770092010498047,.232020974159241],[.635536015033722,.189248979091644],[.77039098739624,.299556016921997],[.826722025871277,.278755009174347],[.527121007442474,.666198015213013],[.553171992301941,.668527007102966],[.577238023281097,.673889994621277],[.554691970348358,.580065965652466],[.611896991729736,.693961024284363],[.59696102142334,.706539988517761],[.596370995044708,.693953037261963],[.539958000183105,.557139039039612],[.568841993808746,.692366003990173],[.547818005084991,.692366003990173],[.52461302280426,.692366003990173],[.534089982509613,.779141008853912],[.527670979499817,.736225962638855],[.526912987232208,.717857003211975],[.526877999305725,.704625964164734],[.526966989040375,.695277988910675],[.572058022022247,.695277988910675],[.573521018028259,.703539967536926],[.57683801651001,.711845993995667],[.581691026687622,.720062971115112],[.609944999217987,.639909982681274],[.986046016216278,.560034036636353],[.5867999792099,.69539999961853],[.590372025966644,.701822996139526],[.531915009021759,.601536989212036],[.577268004417419,.585934996604919],[.536915004253387,.593786001205444],[.627542972564697,.473352015018463],[.665585994720459,.495950996875763],[.588353991508484,.546862006187439],[.757824003696442,.14767599105835],[.709249973297119,.201507985591888],[.672684013843536,.256581008434296],[.600408971309662,.74900496006012],[.55826598405838,.261672019958496],[.570303976535797,.187870979309082],[.588165998458862,.109044015407562],[.711045026779175,.398952007293701],[.781069993972778,.435405015945435],[.587247014045715,.398931980133057],[.742869973182678,.355445981025696],[.572156012058258,.437651991844177],[.55186802148819,.536570012569427],[.821442008018494,.457556009292603],[.752701997756958,.457181990146637],[.71375697851181,.467626988887787],[.66711300611496,.460672974586487],[.631101012229919,.447153985500336],[.6008620262146,.432473003864288],[.523481011390686,.405627012252808],[.810747981071472,.523926019668579],[.771045982837677,.348959028720856],[.509127020835876,.562718033790588],[.595292985439301,.485023975372314],[.980530977249146,.401564002037048],[.573499977588654,.420000016689301],[.602994978427887,.548687994480133],[.733529984951019,.376977026462555],[.560611009597778,.519016981124878],[.967685997486115,.644356966018677],[.580985009670258,.387160003185272],[.537728011608124,.505385041236877],[.760966002941132,.779752969741821],[.801778972148895,.831938028335571],[.892440974712372,.54076099395752],[.816350996494293,.740260004997253],[.865594983100891,.333687007427216],[.614073991775513,.883246004581451],[.508952975273132,.579437971115112],[.617941975593567,.508316040039062],[.825608015060425,.397674977779388],[.681214988231659,.39623498916626],[.656635999679565,.400596976280212],[.603900015354156,.710216999053955],[.81208598613739,.588539004325867],[.56801301240921,.944564998149872],[.681007981300354,.898285031318665],[.733752012252808,.869701027870178],[.633830010890961,.398822009563446],[.606792986392975,.39553701877594],[.589659988880157,.391062021255493],[.805015981197357,.342108011245728],[.611334979534149,.362284004688263],[.634037971496582,.355970978736877],[.656635999679565,.355356991291046],[.681214988231659,.35834002494812],[.698584973812103,.363156020641327],[.941866993904114,.319076001644135],[.698584973812103,.387449026107788],[.584177017211914,.624107003211975],[.554318010807037,.566076993942261],[.534153997898102,.62064003944397],[.711217999458313,.819975018501282],[.664629995822906,.852871000766754],[.559099972248077,.902631998062134],[.871706008911133,.791940987110138],[.591234028339386,.373893976211548],[.544341027736664,.451583981513977],[.624562978744507,.924192011356354],[.88577002286911,.615028977394104],[.551338016986847,.695277988910675],[.551980018615723,.704632043838501],[.552887976169586,.715808033943176],[.555167973041534,.730794012546539],[.569944024085999,.767035007476807],[.593203008174896,.685675978660583],[.599261999130249,.681069016456604],[.607599973678589,.677703022956848],[.631937980651855,.663500010967255],[.752032995223999,.601315021514893],[.547226011753082,.420395016670227],[.563543975353241,.359827995300293],[.583841025829315,.368713974952698],[.586614012718201,.692366003990173],[.771915018558502,.683578014373779],[.531597018241882,.352482974529266],[.588370978832245,.804440975189209],[.52079701423645,.442565023899078],[.567984998226166,.493479013442993],[.543282985687256,.819254994392395],[.655317008495331,.745514988899231],[.621008992195129,.574018001556396],[.625559985637665,.78031200170517],[.680198013782501,.570719003677368],[.64276397228241,.604337990283966],[.704662978649139,.621529996395111],[.552012026309967,.862591981887817],[.589071989059448,.508637011051178],[.685944974422455,.775357007980347],[.645735025405884,.812640011310577],[.675342977046967,.703978002071381],[.810858011245728,.646304965019226],[.72012197971344,.714666962623596],[.866151988506317,.682704985141754],[.663187026977539,.644596993923187],[.570082008838654,.466325998306274],[.544561982154846,.548375964164734],[.562758982181549,.558784961700439],[.531987011432648,.530140042304993],[.585271000862122,.335177004337311],[.622952997684479,.32277899980545],[.655896008014679,.320163011550903],[.687132000923157,.322345972061157],[.716481983661652,.333200991153717],[.758756995201111,.382786989212036],[.897013008594513,.468769013881683],[.732392013072968,.424547016620636],[.70211398601532,.433162987232208],[.66652500629425,.433866024017334],[.633504986763,.426087975502014],[.603875994682312,.416586995124817],[.579657971858978,.409945011138916],[.992439985275269,.480777025222778],[.567192018032074,.569419980049133],[.54136598110199,.478899002075195],[.526564002037048,.546118021011353],[.523913025856018,.563830018043518],[.531529009342194,.555056989192963],[.566035985946655,.582329034805298],[.51631098985672,.563053965568542],[.5174720287323,.577877044677734],[.573594987392426,.389806985855103],[.560697972774506,.395331978797913],[.549755990505219,.399751007556915],[.710287988185883,.368252992630005],[.723330020904541,.363372981548309]],ZX=[127,34,139,11,0,37,232,231,120,72,37,39,128,121,47,232,121,128,104,69,67,175,171,148,157,154,155,118,50,101,73,39,40,9,151,108,48,115,131,194,204,211,74,40,185,80,42,183,40,92,186,230,229,118,202,212,214,83,18,17,76,61,146,160,29,30,56,157,173,106,204,194,135,214,192,203,165,98,21,71,68,51,45,4,144,24,23,77,146,91,205,50,187,201,200,18,91,106,182,90,91,181,85,84,17,206,203,36,148,171,140,92,40,39,193,189,244,159,158,28,247,246,161,236,3,196,54,68,104,193,168,8,117,228,31,189,193,55,98,97,99,126,47,100,166,79,218,155,154,26,209,49,131,135,136,150,47,126,217,223,52,53,45,51,134,211,170,140,67,69,108,43,106,91,230,119,120,226,130,247,63,53,52,238,20,242,46,70,156,78,62,96,46,53,63,143,34,227,173,155,133,123,117,111,44,125,19,236,134,51,216,206,205,154,153,22,39,37,167,200,201,208,36,142,100,57,212,202,20,60,99,28,158,157,35,226,113,160,159,27,204,202,210,113,225,46,43,202,204,62,76,77,137,123,116,41,38,72,203,129,142,64,98,240,49,102,64,41,73,74,212,216,207,42,74,184,169,170,211,170,149,176,105,66,69,122,6,168,123,147,187,96,77,90,65,55,107,89,90,180,101,100,120,63,105,104,93,137,227,15,86,85,129,102,49,14,87,86,55,8,9,100,47,121,145,23,22,88,89,179,6,122,196,88,95,96,138,172,136,215,58,172,115,48,219,42,80,81,195,3,51,43,146,61,171,175,199,81,82,38,53,46,225,144,163,110,246,33,7,52,65,66,229,228,117,34,127,234,107,108,69,109,108,151,48,64,235,62,78,191,129,209,126,111,35,143,163,161,246,117,123,50,222,65,52,19,125,141,221,55,65,3,195,197,25,7,33,220,237,44,70,71,139,122,193,245,247,130,33,71,21,162,153,158,159,170,169,150,188,174,196,216,186,92,144,160,161,2,97,167,141,125,241,164,167,37,72,38,12,145,159,160,38,82,13,63,68,71,226,35,111,158,153,154,101,50,205,206,92,165,209,198,217,165,167,97,220,115,218,133,112,243,239,238,241,214,135,169,190,173,133,171,208,32,125,44,237,86,87,178,85,86,179,84,85,180,83,84,181,201,83,182,137,93,132,76,62,183,61,76,184,57,61,185,212,57,186,214,207,187,34,143,156,79,239,237,123,137,177,44,1,4,201,194,32,64,102,129,213,215,138,59,166,219,242,99,97,2,94,141,75,59,235,24,110,228,25,130,226,23,24,229,22,23,230,26,22,231,112,26,232,189,190,243,221,56,190,28,56,221,27,28,222,29,27,223,30,29,224,247,30,225,238,79,20,166,59,75,60,75,240,147,177,215,20,79,166,187,147,213,112,233,244,233,128,245,128,114,188,114,217,174,131,115,220,217,198,236,198,131,134,177,132,58,143,35,124,110,163,7,228,110,25,356,389,368,11,302,267,452,350,349,302,303,269,357,343,277,452,453,357,333,332,297,175,152,377,384,398,382,347,348,330,303,304,270,9,336,337,278,279,360,418,262,431,304,408,409,310,415,407,270,409,410,450,348,347,422,430,434,313,314,17,306,307,375,387,388,260,286,414,398,335,406,418,364,367,416,423,358,327,251,284,298,281,5,4,373,374,253,307,320,321,425,427,411,421,313,18,321,405,406,320,404,405,315,16,17,426,425,266,377,400,369,322,391,269,417,465,464,386,257,258,466,260,388,456,399,419,284,332,333,417,285,8,346,340,261,413,441,285,327,460,328,355,371,329,392,439,438,382,341,256,429,420,360,364,394,379,277,343,437,443,444,283,275,440,363,431,262,369,297,338,337,273,375,321,450,451,349,446,342,467,293,334,282,458,461,462,276,353,383,308,324,325,276,300,293,372,345,447,382,398,362,352,345,340,274,1,19,456,248,281,436,427,425,381,256,252,269,391,393,200,199,428,266,330,329,287,273,422,250,462,328,258,286,384,265,353,342,387,259,257,424,431,430,342,353,276,273,335,424,292,325,307,366,447,345,271,303,302,423,266,371,294,455,460,279,278,294,271,272,304,432,434,427,272,407,408,394,430,431,395,369,400,334,333,299,351,417,168,352,280,411,325,319,320,295,296,336,319,403,404,330,348,349,293,298,333,323,454,447,15,16,315,358,429,279,14,15,316,285,336,9,329,349,350,374,380,252,318,402,403,6,197,419,318,319,325,367,364,365,435,367,397,344,438,439,272,271,311,195,5,281,273,287,291,396,428,199,311,271,268,283,444,445,373,254,339,263,466,249,282,334,296,449,347,346,264,447,454,336,296,299,338,10,151,278,439,455,292,407,415,358,371,355,340,345,372,390,249,466,346,347,280,442,443,282,19,94,370,441,442,295,248,419,197,263,255,359,440,275,274,300,383,368,351,412,465,263,467,466,301,368,389,380,374,386,395,378,379,412,351,419,436,426,322,373,390,388,2,164,393,370,462,461,164,0,267,302,11,12,374,373,387,268,12,13,293,300,301,446,261,340,385,384,381,330,266,425,426,423,391,429,355,437,391,327,326,440,457,438,341,382,362,459,457,461,434,430,394,414,463,362,396,369,262,354,461,457,316,403,402,315,404,403,314,405,404,313,406,405,421,418,406,366,401,361,306,408,407,291,409,408,287,410,409,432,436,410,434,416,411,264,368,383,309,438,457,352,376,401,274,275,4,421,428,262,294,327,358,433,416,367,289,455,439,462,370,326,2,326,370,305,460,455,254,449,448,255,261,446,253,450,449,252,451,450,256,452,451,341,453,452,413,464,463,441,413,414,258,442,441,257,443,442,259,444,443,260,445,444,467,342,445,459,458,250,289,392,290,290,328,460,376,433,435,250,290,392,411,416,433,341,463,464,453,464,465,357,465,412,343,412,399,360,363,440,437,399,456,420,456,363,401,435,288,372,383,353,339,255,249,448,261,255,133,243,190,133,155,112,33,246,247,33,130,25,398,384,286,362,398,414,362,463,341,263,359,467,263,249,255,466,467,260,75,60,166,238,239,79,162,127,139,72,11,37,121,232,120,73,72,39,114,128,47,233,232,128,103,104,67,152,175,148,173,157,155,119,118,101,74,73,40,107,9,108,49,48,131,32,194,211,184,74,185,191,80,183,185,40,186,119,230,118,210,202,214,84,83,17,77,76,146,161,160,30,190,56,173,182,106,194,138,135,192,129,203,98,54,21,68,5,51,4,145,144,23,90,77,91,207,205,187,83,201,18,181,91,182,180,90,181,16,85,17,205,206,36,176,148,140,165,92,39,245,193,244,27,159,28,30,247,161,174,236,196,103,54,104,55,193,8,111,117,31,221,189,55,240,98,99,142,126,100,219,166,218,112,155,26,198,209,131,169,135,150,114,47,217,224,223,53,220,45,134,32,211,140,109,67,108,146,43,91,231,230,120,113,226,247,105,63,52,241,238,242,124,46,156,95,78,96,70,46,63,116,143,227,116,123,111,1,44,19,3,236,51,207,216,205,26,154,22,165,39,167,199,200,208,101,36,100,43,57,202,242,20,99,56,28,157,124,35,113,29,160,27,211,204,210,124,113,46,106,43,204,96,62,77,227,137,116,73,41,72,36,203,142,235,64,240,48,49,64,42,41,74,214,212,207,183,42,184,210,169,211,140,170,176,104,105,69,193,122,168,50,123,187,89,96,90,66,65,107,179,89,180,119,101,120,68,63,104,234,93,227,16,15,85,209,129,49,15,14,86,107,55,9,120,100,121,153,145,22,178,88,179,197,6,196,89,88,96,135,138,136,138,215,172,218,115,219,41,42,81,5,195,51,57,43,61,208,171,199,41,81,38,224,53,225,24,144,110,105,52,66,118,229,117,227,34,234,66,107,69,10,109,151,219,48,235,183,62,191,142,129,126,116,111,143,7,163,246,118,117,50,223,222,52,94,19,141,222,221,65,196,3,197,45,220,44,156,70,139,188,122,245,139,71,162,145,153,159,149,170,150,122,188,196,206,216,92,163,144,161,164,2,167,242,141,241,0,164,37,11,72,12,144,145,160,12,38,13,70,63,71,31,226,111,157,158,154,36,101,205,203,206,165,126,209,217,98,165,97,237,220,218,237,239,241,210,214,169,140,171,32,241,125,237,179,86,178,180,85,179,181,84,180,182,83,181,194,201,182,177,137,132,184,76,183,185,61,184,186,57,185,216,212,186,192,214,187,139,34,156,218,79,237,147,123,177,45,44,4,208,201,32,98,64,129,192,213,138,235,59,219,141,242,97,97,2,141,240,75,235,229,24,228,31,25,226,230,23,229,231,22,230,232,26,231,233,112,232,244,189,243,189,221,190,222,28,221,223,27,222,224,29,223,225,30,224,113,247,225,99,60,240,213,147,215,60,20,166,192,187,213,243,112,244,244,233,245,245,128,188,188,114,174,134,131,220,174,217,236,236,198,134,215,177,58,156,143,124,25,110,7,31,228,25,264,356,368,0,11,267,451,452,349,267,302,269,350,357,277,350,452,357,299,333,297,396,175,377,381,384,382,280,347,330,269,303,270,151,9,337,344,278,360,424,418,431,270,304,409,272,310,407,322,270,410,449,450,347,432,422,434,18,313,17,291,306,375,259,387,260,424,335,418,434,364,416,391,423,327,301,251,298,275,281,4,254,373,253,375,307,321,280,425,411,200,421,18,335,321,406,321,320,405,314,315,17,423,426,266,396,377,369,270,322,269,413,417,464,385,386,258,248,456,419,298,284,333,168,417,8,448,346,261,417,413,285,326,327,328,277,355,329,309,392,438,381,382,256,279,429,360,365,364,379,355,277,437,282,443,283,281,275,363,395,431,369,299,297,337,335,273,321,348,450,349,359,446,467,283,293,282,250,458,462,300,276,383,292,308,325,283,276,293,264,372,447,346,352,340,354,274,19,363,456,281,426,436,425,380,381,252,267,269,393,421,200,428,371,266,329,432,287,422,290,250,328,385,258,384,446,265,342,386,387,257,422,424,430,445,342,276,422,273,424,306,292,307,352,366,345,268,271,302,358,423,371,327,294,460,331,279,294,303,271,304,436,432,427,304,272,408,395,394,431,378,395,400,296,334,299,6,351,168,376,352,411,307,325,320,285,295,336,320,319,404,329,330,349,334,293,333,366,323,447,316,15,315,331,358,279,317,14,316,8,285,9,277,329,350,253,374,252,319,318,403,351,6,419,324,318,325,397,367,365,288,435,397,278,344,439,310,272,311,248,195,281,375,273,291,175,396,199,312,311,268,276,283,445,390,373,339,295,282,296,448,449,346,356,264,454,337,336,299,337,338,151,294,278,455,308,292,415,429,358,355,265,340,372,388,390,466,352,346,280,295,442,282,354,19,370,285,441,295,195,248,197,457,440,274,301,300,368,417,351,465,251,301,389,385,380,386,394,395,379,399,412,419,410,436,322,387,373,388,326,2,393,354,370,461,393,164,267,268,302,12,386,374,387,312,268,13,298,293,301,265,446,340,380,385,381,280,330,425,322,426,391,420,429,437,393,391,326,344,440,438,458,459,461,364,434,394,428,396,262,274,354,457,317,316,402,316,315,403,315,314,404,314,313,405,313,421,406,323,366,361,292,306,407,306,291,408,291,287,409,287,432,410,427,434,411,372,264,383,459,309,457,366,352,401,1,274,4,418,421,262,331,294,358,435,433,367,392,289,439,328,462,326,94,2,370,289,305,455,339,254,448,359,255,446,254,253,449,253,252,450,252,256,451,256,341,452,414,413,463,286,441,414,286,258,441,258,257,442,257,259,443,259,260,444,260,467,445,309,459,250,305,289,290,305,290,460,401,376,435,309,250,392,376,411,433,453,341,464,357,453,465,343,357,412,437,343,399,344,360,440,420,437,456,360,420,363,361,401,288,265,372,353,390,339,249,339,448,255];function YX(e){const t=e.map((e=>e[0]));return t.push(e[e.length-1][1]),t}function JX(e){const t=e.map((e=>e[0]));return t.push(e[e.length-1][1]),t}[127,234,132,58,172,150,149,148,152,377,378,379,397,288,361,454,356,70,63,105,66,107,336,296,334,293,300,168,6,195,4,98,97,2,326,327,33,160,158,133,153,144,362,385,387,263,373,380,57,40,37,0,267,270,287,321,314,17,84,91,78,81,13,311,308,402,14,178].map((e=>KX[e])),[33,133,362,263,1,62,308,159,145,386,374,6,102,331,2,13,14,70,105,107,336,334,300,54,10,284,50,280,234,454,58,288,152].map((e=>KX[e])),[33,133,362,263,1,78,308].map((e=>KX[evar QX,eK={lips:JX([[61,146],[146,91],[91,181],[181,84],[84,17],[17,314],[314,405],[405,321],[321,375],[375,291],[61,185],[185,40],[40,39],[39,37],[37,0],[0,267],[267,269],[269,270],[270,409],[409,291],[78,95],[95,88],[88,178],[178,87],[87,14],[14,317],[317,402],[402,318],[318,324],[324,308],[78,191],[191,80],[80,81],[81,82],[82,13],[13,312],[312,311],[311,310],[310,415],[415,308]]),leftEye:JX([[263,249],[249,390],[390,373],[373,374],[374,380],[380,381],[381,382],[382,362],[263,466],[466,388],[388,387],[387,386],[386,385],[385,384],[384,398],[398,362]]),leftEyebrow:JX([[276,283],[283,282],[282,295],[295,285],[300,293],[293,334],[334,296],[296,336]]),leftIris:JX([[474,475],[475,476],[476,477],[477,474]]),rightEye:JX([[33,7],[7,163],[163,144],[144,145],[145,153],[153,154],[154,155],[155,133],[33,246],[246,161],[161,160],[160,159],[159,158],[158,157],[157,173],[173,133]]),rightEyebrow:JX([[46,53],[53,52],[52,65],[65,55],[70,63],[63,105],[105,66],[66,107]]),rightIris:JX([[469,470],[470,471],[471,472],[472,469]]),faceOval:JX([[10,338],[338,297],[297,332],[332,284],[284,251],[251,389],[389,356],[356,454],[454,323],[323,361],[361,288],[288,397],[397,365],[365,379],[379,378],[378,400],[400,377],[377,152],[152,148],[148,176],[176,149],[149,150],[150,136],[136,172],[172,58],[58,132],[132,93],[93,234],[234,127],[127,162],[162,21],[21,54],[54,103],[103,67],[67,109],[109,10]])},tK=Object.entries(eK).map((([e,t])=>t.map((t=>[t,e])))).flat(),nK=(new Map(tK),[61,146,91,181,84,17,314,405,321,375,291,185,40,39,37,0,267,269,270,409,78,95,88,178,87,14,317,402,318,324,308,191,80,81,82,13,312,311,310,415,76,77,90,180,85,16,315,404,320,307,306,184,74,73,72,11,302,303,304,408,62,96,89,179,86,15,316,403,319,325,292,183,42,41,38,12,268,271,272,407]),aK=[33,7,163,144,145,153,154,155,133,246,161,160,159,158,157,173,130,25,110,24,23,22,26,112,243,247,30,29,27,28,56,190,226,31,228,229,230,231,232,233,244,113,225,224,223,222,221,189,35,124,46,53,52,65,143,111,117,118,119,120,121,128,245,156,70,63,105,66,107,55,193],rK=[263,249,390,373,374,380,381,382,362,466,388,387,386,385,384,398,359,255,339,254,253,252,256,341,463,467,260,259,257,258,286,414,446,261,448,449,450,451,452,453,464,342,445,444,443,442,441,413,265,353,276,283,282,295,372,340,346,347,348,349,350,357,465,383,300,293,334,296,336,285,417];function iK(e,t){var n,a,r,i,s,o,l,u,d;if(!QX.drawLabels||0===(null==(n=QX.faceLabels)?void 0:n.length))return;let p=QX.faceLabels.slice();if(p=PX(p,"[id]",e.id.toFixed(0)),e.score&&(p=PX(p,"[score]",100*e.score)),e.gender&&(p=PX(p,"[gender]",e.gender)),e.genderScore&&(p=PX(p,"[genderScore]",100*e.genderScore)),e.age&&(p=PX(p,"[age]",e.age)),e.distance&&(p=PX(p,"[distance]",100*e.distance)),e.real&&(p=PX(p,"[real]",100*e.real)),e.live&&(p=PX(p,"[live]",100*e.live)),e.emotion&&e.emotion.length>0){const t=e.emotion.map((e=>`${Math.trunc(100*e.score)}% ${e.emotion}`));t.length>3&&(t.length=3),p=PX(p,"[emotions]",t.join(" "))}(null==(r=null==(a=e.rotation)?void 0:a.angle)?void 0:r.roll)&&(p=PX(p,"[roll]",OX(e.rotation.angle.roll))),(null==(s=null==(i=e.rotation)?void 0:i.angle)?void 0:s.yaw)&&(p=PX(p,"[yaw]",OX(e.rotation.angle.yaw))),(null==(l=null==(o=e.rotation)?void 0:o.angle)?void 0:l.pitch)&&(p=PX(p,"[pitch]",OX(e.rotation.angle.pitch))),(null==(d=null==(u=e.rotation)?void 0:u.gaze)?void 0:d.bearing)&&(p=PX(p,"[gaze]",OX(e.rotation.gaze.bearing))),zX(t,p,e.box[0],e.box[1],QX)}function sK(e,t){var n;if(QX.drawGaze&&(null==(n=e.rotation)?void 0:n.angle)&&"undefined"!=typeof Path2D){t.strokeStyle="pink";const n=e.box[0]+e.box[2]/2-e.box[3]*OX(e.rotation.angle.yaw)/90,a=e.box[1]+e.box[3]/2+e.box[2]*OX(e.rotation.angle.pitch)/90,r=new Path2D(`\n      M ${e.box[0]+e.box[2]/2} ${e.box[1]}\n      C\n        ${n} ${e.box[1]},\n        ${n} ${e.box[1]+e.box[3]},\n        ${e.box[0]+e.box[2]/2} ${e.box[1]+e.box[3]}\n    `),i=new Path2D(`\n      M ${e.box[0]} ${e.box[1]+e.box[3]/2}\n      C \n        ${e.box[0]} ${a},\n        ${e.box[0]+e.box[2]} ${a},\n        ${e.box[0]+e.box[2]} ${e.box[1]+e.box[3]/2}\n    `);t.stroke(i),t.stroke(r)}}function oK(e,t){var n;if(QX.drawGaze&&(null==(n=e.rotation)?void 0:n.gaze.strength)&&e.rotation.gaze.bearing&&e.annotations.leftEyeIris&&e.annotations.rightEyeIris&&e.annotations.leftEyeIris[0]&&e.annotations.rightEyeIris[0]){t.strokeStyle="pink",t.fillStyle="pink";const n=[e.annotations.leftEyeIris[0][0]+Math.sin(e.rotation.gaze.bearing)*e.rotation.gaze.strength*e.box[3],e.annotations.leftEyeIris[0][1]+Math.cos(e.rotation.gaze.bearing)*e.rotation.gaze.strength*e.box[2]];UX(t,[e.annotations.leftEyeIris[0][0],e.annotations.leftEyeIris[0][1]],[n[0],n[1]],4);const a=[e.annotations.rightEyeIris[0][0]+Math.sin(e.rotation.gaze.bearing)*e.rotation.gaze.strength*e.box[3],e.annotations.rightEyeIris[0][1]+Math.cos(e.rotation.gaze.bearing)*e.rotation.gaze.strength*e.box[2]];UX(t,[e.annotations.rightEyeIris[0][0],e.annotations.rightEyeIris[0][1]],[a[0],a[1]],4)}}function lK(e,t){if(QX.drawPolygons&&e.mesh.length>=468){t.lineWidth=1;for(let n=0;n<ZX.length/3;n++)BX(t,[ZX[3*n+0],ZX[3*n+1],ZX[3*n+2]].map((t=>e.mesh[t])),QX);!function(e,t){var n,a,r,i;if((null==(n=e.annotations)?void 0:n.leftEyeIris)&&(null==(a=e.annotations)?void 0:a.leftEyeIris[0])){t.strokeStyle=QX.useDepth?"rgba(255, 200, 255, 0.3)":QX.color,t.beginPath();const n=Math.abs(e.annotations.leftEyeIris[3][0]-e.annotations.leftEyeIris[1][0])/2,a=Math.abs(e.annotations.leftEyeIris[4][1]-e.annotations.leftEyeIris[2][1])/2;t.ellipse(e.annotations.leftEyeIris[0][0],e.annotations.leftEyeIris[0][1],n,a,0,0,2*Math.PI),t.stroke(),QX.fillPolygons&&(t.fillStyle=QX.useDepth?"rgba(255, 255, 200, 0.3)":QX.color,t.fill())}if((null==(r=e.annotations)?void 0:r.rightEyeIris)&&(null==(i=e.annotations)?void 0:i.rightEyeIris[0])){t.strokeStyle=QX.useDepth?"rgba(255, 200, 255, 0.3)":QX.color,t.beginPath();const n=Math.abs(e.annotations.rightEyeIris[3][0]-e.annotations.rightEyeIris[1][0])/2,a=Math.abs(e.annotations.rightEyeIris[4][1]-e.annotations.rightEyeIris[2][1])/2;t.ellipse(e.annotations.rightEyeIris[0][0],e.annotations.rightEyeIris[0][1],n,a,0,0,2*Math.PI),t.stroke(),QX.fillPolygons&&(t.fillStyle=QX.useDepth?"rgba(255, 255, 200, 0.3)":QX.color,t.fill())}}(e,t)}}function uK(e,t){if(QX.drawPoints)if((null==e?void 0:e.mesh.length)>=468)for(let n=0;n<e.mesh.length;n++)LX(t,e.mesh[n][0],e.mesh[n][1],e.mesh[n][2],QX),QX.drawAttention&&(nK.includes(n)&&LX(t,e.mesh[n][0],e.mesh[n][1],e.mesh[n][2]+127,QX),aK.includes(n)&&LX(t,e.mesh[n][0],e.mesh[n][1],e.mesh[n][2]-127,QX),rK.includes(n)&&LX(t,e.mesh[n][0],e.mesh[n][1],e.mesh[n][2]-127,QX));else for(const[n,a]of Object.entries((null==e?void 0:e.annotations)||{})){if(!(null==a?void 0:a[0]))continue;const e=a[0];LX(t,e[0],e[1],0,QX),QX.drawLabels&&zX(t,n,e[0],e[1],QX)}}function dK(e,t){QX.drawBoxes&&WX(t,e.box[0],e.box[1],e.box[2],e.box[3],QX)}function pK(e,t,n){if(QX=jj(GX,n),!t||!e)return;const a=FX(e);if(a){a.font=QX.font,a.strokeStyle=QX.color,a.fillStyle=QX.color;for(const e of t)dK(e,a),iK(e,a),e.mesh&&e.mesh.length>0&&(uK(e,a),lK(e,a),sK(e,a),oK(e,a))}}function cK(e,t,n){var a,r;const i=jj(GX,n);if(!t||!e)return;const s=FX(e);if(s){s.lineJoin="round";for(let e=0;e<t.length;e++){if(s.strokeStyle=i.color,s.fillStyle=i.color,s.lineWidth=i.lineWidth,s.font=i.font,i.drawBoxes&&t[e].box&&4===t[e].box.length&&(WX(s,t[e].box[0],t[e].box[1],t[e].box[2],t[e].box[3],i),i.drawLabels&&(null==(a=i.bodyLabels)?void 0:a.length)>0)){let n=i.bodyLabels.slice();n=PX(n,"[id]",t[e].id.toFixed(0)),n=PX(n,"[score]",100*t[e].score),zX(s,n,t[e].box[0],t[e].box[1],i)}if(i.drawPoints&&t[e].keypoints)for(let n=0;n<t[e].keypoints.length;n++)t[e].keypoints[n].score&&0!==t[e].keypoints[n].score&&(s.fillStyle=DX(t[e].keypoints[n].position[2],i),LX(s,t[e].keypoints[n].position[0],t[e].keypoints[n].position[1],0,i));if(i.drawLabels&&(null==(r=i.bodyPartLabels)?void 0:r.length)>0&&t[e].keypoints){s.font=i.font;for(const n of t[e].keypoints){if(!n.score||0===n.score)continue;let e=i.bodyPartLabels.slice();e=PX(e,"[label]",n.part),e=PX(e,"[score]",100*n.score),zX(s,e,n.position[0],n.position[1],i)}}if(i.drawPolygons&&t[e].keypoints&&t[e].annotations)for(const n of Object.values(t[e].annotations))for(const e of n)VX(s,e,i)}}}function hK(e,t,n){var a,r;const i=jj(GX,n);if(!t||!e)return;const s=FX(e);if(s){s.lineJoin="round",s.font=i.font;for(const e of t){if(i.drawBoxes){if(s.strokeStyle=i.color,s.fillStyle=i.color,WX(s,e.box[0],e.box[1],e.box[2],e.box[3],i),i.drawLabels&&(null==(a=i.handLabels)?void 0:a.length)>0){let t=i.handLabels.slice();t=PX(t,"[id]",e.id.toFixed(0)),t=PX(t,"[label]",e.label),t=PX(t,"[score]",100*e.score),zX(s,t,e.box[0],e.box[1],i)}s.stroke()}if(i.drawPoints&&e.keypoints&&e.keypoints.length>0)for(const t of e.keypoints)s.fillStyle=DX(t[2],i),LX(s,t[0],t[1],0,i);if(i.drawLabels&&e.annotations&&(null==(r=i.fingerLabels)?void 0:r.length)>0)for(const[t,n]of Object.entries(e.annotations)){let e=i.fingerLabels.slice();e=PX(e,"[label]",t),zX(s,e,n[n.length-1][0],n[n.length-1][1],i)}if(i.drawPolygons&&e.annotations){const t=e=>{if(e&&0!==e.length&&e[0])for(let t=0;t<e.length;t++){s.beginPath();const n=e[t][2]||0;s.strokeStyle=DX(t*n,i),s.moveTo(e[t>0?t-1:0][0],e[t>0?t-1:0][1]),s.lineTo(e[t][0],e[t][1]),s.stroke()}};s.lineWidth=i.lineWidth,t(e.annotations.index),t(e.annotations.middle),t(e.annotations.ring),t(e.annotations.pinky),t(e.annotations.thumb)}}}}function fK(e,t,n){var a;const r=jj(GX,n);if(!t||!e)return;const i=FX(e);if(i){i.lineJoin="round",i.font=r.font;for(const e of t)if(r.drawBoxes){if(i.strokeStyle=r.color,i.fillStyle=r.color,WX(i,e.box[0],e.box[1],e.box[2],e.box[3],r),r.drawLabels&&(null==(a=r.objectLabels)?void 0:a.length)>0){let t=r.objectLabels.slice();t=PX(t,"[id]",e.id.toFixed(0)),t=PX(t,"[label]",e.label),t=PX(t,"[score]",100*e.score),zX(i,t,e.box[0],e.box[1],r)}i.stroke()}}}function mK(e,t,n){var a;const r=jj(GX,n);if(t&&e&&r.drawGestures&&(null==(a=r.gestureLabels)?void 0:a.length)>0){const n=FX(e);if(!n)return;n.font=r.font,n.fillStyle=r.color;let a=1;for(let e=0;e<t.length;e++){const[i,s]=Object.entries(t[e]);if(s.length>1&&s[1].length>0){const e=i[1]>0?`#${i[1]}`:"";let t=r.gestureLabels.slice();t=PX(t,"[where]",i[0]),t=PX(t,"[who]",e),t=PX(t,"[what]",s[1]),zX(n,t,8,2+a*r.lineHeight,r),a+=1}}}}var yK={face:"face\n    confidence: [score]%\n    [gender] [genderScore]%\n    age: [age] years\n    distance: [distance]cm\n    real: [real]%\n    live: [live]%\n    [emotions]\n    roll: [roll]° yaw:[yaw]° pitch:[pitch]°\n    gaze: [gaze]°",body:"body [score]%",bodyPart:"[label] [score]%",object:"[label] [score]%",hand:"[label] [score]%",finger:"[label]",gesture:"[where] [who]: [what]"},gK=0;function AK(e,t,n){const a=jj(GX,n);if(!t||!e)return;const r=FX(e);if(r){r.lineJoin="round",r.font=a.font;for(let e=0;e<t.length;e++)if(a.drawBoxes){if(r.strokeStyle=a.color,r.fillStyle=a.color,WX(r,t[e].box[0],t[e].box[1],t[e].box[2],t[e].box[3],a),a.drawLabels){const n=`person #${e}`;a.shadowColor&&""!==a.shadowColor&&(r.fillStyle=a.shadowColor,r.fillText(n,t[e].box[0]+3,1+t[e].box[1]+a.lineHeight,t[e].box[2])),r.fillStyle=a.labelColor,r.fillText(n,t[e].box[0]+2,0+t[e].box[1]+a.lineHeight,t[e].box[2])}r.stroke()}}}function xK(e,t){if(!e||!t)return;const n=FX(t);n&&n.drawImage(e,0,0)}async function bK(e,t,n){if(!(null==t?void 0:t.performance)||!e)return null;const a=Gj(),r=jj(GX,n),i=Promise.all([pK(e,t.face,r),cK(e,t.body,r),hK(e,t.hand,r),fK(e,t.object,r),mK(e,t.gesture,r)]);return gK=gq.perfadd?gK+Math.round(Gj()-a):Math.round(Gj()-a),t.performance.draw=gK,i}function vK(){GX.faceLabels=yK.face,GX.bodyLabels=yK.body,GX.bodyPartLabels=yK.bodyPart,GX.handLabels=yK.hand,GX.fingerLabels=yK.finger,GX.objectLabels=yK.object,GX.gestureLabels=yK.gesture}var wK={};u(wK,{connected:()=>CK,kpt:()=>NK});var kK,IK,SK,NK=["nose","leftEyeInside","leftEye","leftEyeOutside","rightEyeInside","rightEye","rightEyeOutside","leftEar","rightEar","leftMouth","rightMouth","leftShoulder","rightShoulder","leftElbow","rightElbow","leftWrist","rightWrist","leftPinky","rightPinky","leftIndex","rightIndex","leftThumb","rightThumb","leftHip","rightHip","leftKnee","rightKnee","leftAnkle","rightAnkle","leftHeel","rightHeel","leftFoot","rightFoot","bodyCenter","bodyTop","leftPalm","leftHand","rightPalm","rightHand"],CK={shoulders:["leftShoulder","rightShoulder"],hips:["rightHip","leftHip"],mouth:["leftMouth","rightMouth"],leftLegUpper:["leftHip","leftKnee"],leftLegLower:["leftKnee","leftAnkle"],leftFoot:["leftAnkle","leftHeel","leftFoot"],leftTorso:["leftShoulder","leftHip"],leftArmUpper:["leftShoulder","leftElbow"],leftArmLower:["leftElbow","leftWrist"],leftHand:["leftWrist","leftPalm"],leftHandPinky:["leftPalm","leftPinky"],leftHandIndex:["leftPalm","leftIndex"],leftHandThumb:["leftPalm","leftThumb"],leftEyeOutline:["leftEyeInside","leftEyeOutside"],rightLegUpper:["rightHip","rightKnee"],rightLegLower:["rightKnee","rightAnkle"],rightFoot:["rightAnkle","rightHeel","rightFoot"],rightTorso:["rightShoulder","rightHip"],rightArmUpper:["rightShoulder","rightElbow"],rightArmLower:["rightElbow","rightWrist"],rightHand:["rightWrist","rightPalm"],rightHandPinky:["rightPalm","rightPinky"],rightHandIndex:["rightPalm","rightIndex"],rightHandThumb:["rightPalm","rightThumb"],rightEyeOutline:["rightEyeInside","rightEyeOutside"]},TK=224,EK=[8,16,32,32,32],RK=[5,5];function $K(e,t=[1,1]){const n=[e.map((e=>e[0])),e.map((e=>e[1]))],a=[Math.min(...n[0]),Math.min(...n[1])],r=[Math.max(...n[0]),Math.max(...n[1])],i=[a[0],a[1],r[0]-a[0],r[1]-a[1]];return{box:i,boxRaw:[i[0]/t[0],i[1]/t[1],i[2]/t[0],i[3]/t[1]]}}function MK(e,t=[1,1]){const n=[e.map((e=>e[0])),e.map((e=>e[1]))],a=[Math.min(...n[0]),Math.min(...n[1])],r=[Math.max(...n[0]),Math.max(...n[1])],i=[(a[0]+r[0])/2,(a[1]+r[1])/2],s=Math.max(i[0]-a[0],i[1]-a[1],-i[0]+r[0],-i[1]+r[1]),o=[Math.trunc(i[0]-s),Math.trunc(i[1]-s),Math.trunc(2*s),Math.trunc(2*s)];return{box:o,boxRaw:[o[0]/t[0],o[1]/t[1],o[2]/t[0],o[3]/t[1]]}}function _K(e,t){const n=[e[2]*t,e[3]*t];return[e[0]-(n[0]-e[2])/2,e[1]-(n[1]-e[3])/2,n[0],n[1]]}var FK=256,OK=Number.MAX_SAFE_INTEGER,PK={landmarks:["ld_3d","activation_segmentation","activation_heatmap","world_3d","output_poseflag"],detector:[]},DK=[],zK=[[0,0],[0,0],[0,0],[0,0]],LK=0,WK=e=>1-1/(1+Math.exp(e));function BK(e,t,n){var a,r;const i={};if(!(null==(a=null==e?void 0:e.shape)?void 0:a[1])||!(null==(r=null==e?void 0:e.shape)?void 0:r[2]))return e;let s;if(n&&(i.cropped=yh.cropAndResize(e,[n],[0],[e.shape[1],e.shape[2]])),e.shape[1]!==e.shape[2]){const n=[e.shape[2]>e.shape[1]?Math.trunc((e.shape[2]-e.shape[1])/2):0,e.shape[2]>e.shape[1]?Math.trunc((e.shape[2]-e.shape[1])/2):0],a=[e.shape[1]>e.shape[2]?Math.trunc((e.shape[1]-e.shape[2])/2):0,e.shape[1]>e.shape[2]?Math.trunc((e.shape[1]-e.shape[2])/2):0];zK=[[0,0],n,a,[0,0]],i.pad=xd(i.cropped||e,zK),i.resize=yh.resizeBilinear(i.pad,[t,t]),s=bo(i.resize,EX.tf255)}else e.shape[1]!==t?(i.resize=yh.resizeBilinear(i.cropped||e,[t,t]),s=bo(i.resize,EX.tf255)):s=bo(i.cropped||e,EX.tf255);return Object.keys(i).forEach((e=>io(i[e]))),s}async function VK(e,t,n){if(!(null==SK?void 0:SK.executor))return null;const a={};[a.ld,a.segmentation,a.heatmap,a.world,a.poseflag]=null==SK?void 0:SK.execute(e,PK.landmarks);const r=(await a.poseflag.data())[0],i=await a.ld.data(),s=await a.world.data();Object.keys(a).forEach((e=>io(a[e])));const o=[];for(let e=0;e<i.length/5;e++){const t=WK(i[5*e+3]),a=WK(i[5*e+4]),l=Math.trunc(100*t*a*r)/100,u=[i[5*e+0]/FK,i[5*e+1]/FK,i[5*e+2]+0],d=[Math.trunc(n[0]*u[0]),Math.trunc(n[1]*u[1]),u[2]],p=[s[5*e+0],s[5*e+1],s[5*e+2]+0];o.push({part:NK[e],positionRaw:u,position:d,distance:p,score:l})}if(r<(t.body.minConfidence||0))return null;!function(e){const t=e.find((e=>"leftPalm"===e.part)),n=e.find((e=>"leftWrist"===e.part)),a=e.find((e=>"leftIndex"===e.part));t.position[2]=((n.position[2]||0)+(a.position[2]||0))/2;const r=e.find((e=>"rightPalm"===e.part)),i=e.find((e=>"rightWrist"===e.part)),s=e.find((e=>"rightIndex"===e.part));r.position[2]=((i.position[2]||0)+(s.position[2]||0))/2}(o);const l=function(e,t,n){for(const n of e)n.position=[Math.trunc(n.position[0]*(t[0]+zK[2][0]+zK[2][1])/t[0]-zK[2][0]),Math.trunc(n.position[1]*(t[1]+zK[1][0]+zK[1][1])/t[1]-zK[1][0]),n.position[2]],n.positionRaw=[n.position[0]/t[0],n.position[1]/t[1],2*n.position[2]/(t[0]+t[1])];return e}(o,n),u=$K(l.map((e=>e.position)),[n[0],n[1]]),d={};for(const[e,t]of Object.entries(CK)){const n=[];for(let e=0;e<t.length-1;e++){const a=l.find((n=>n.part===t[e])),r=l.find((n=>n.part===t[e+1]));a&&r&&n.push([a.position,r.position])}d[e]=n}return{id:0,score:Math.trunc(100*r)/100,box:u.box,boxRaw:u.boxRaw,keypoints:l,annotations:d}}async function UK(e,t){var n,a,r;const i=[e.shape[2]||0,e.shape[1]||0],s=(t.body.skipTime||0)>Gj()-LK,o=OK<(t.body.skipFrames||0);if(t.skipAllowed&&s&&o&&null!==DK)OK++;else{let s=[];if(null==(a=null==(n=t.body)?void 0:n.detector)?void 0:a.enabled){const n=BK(e,224);s=await async function(e,t,n){const a={};a.res=null==kK?void 0:kK.execute(e,["Identity"]),a.logitsRaw=nl(a.res,[0,0,0],[1,-1,1]),a.boxesRaw=nl(a.res,[0,0,1],[1,-1,-1]),a.logits=Ep(a.logitsRaw),a.boxes=Ep(a.boxesRaw);const r=await async function(e,t,n,a){var r,i;const s=[],o={};o.boxes=function(e,t){return ro((()=>{const n=Np(e,12,1);let a=Ep(n[0]),r=Ep(n[1]),i=Ep(n[2]),s=Ep(n[3]);a=Ao(bo(a,TK),t.x),r=Ao(bo(r,TK),t.y),i=vo(bo(i,TK),RK[0]),s=vo(bo(s,TK),RK[1]);const o=Hu(a,bo(i,2)),l=Hu(r,bo(s,2)),u=Ao(o,i),d=Ao(l,s);return Rp([o,l,u,d],1)}))}(e,IK),o.scores=tl(t),o.nms=await yh.nonMaxSuppressionAsync(o.boxes,o.scores,1,(null==(r=n.body.detector)?void 0:r.minConfidence)||.1,(null==(i=n.body.detector)?void 0:i.iouThreshold)||.1);const l=await o.nms.data(),u=await o.scores.data(),d=await o.boxes.array();for(const e of Array.from(l)){const t=u[e],n=d[e],r={score:t,boxRaw:n,box:[Math.round(n[0]*a[0]),Math.round(n[1]*a[1]),Math.round(n[2]*a[0]),Math.round(n[3]*a[1])]};s.push(r)}return Object.keys(o).forEach((e=>io(o[e]))),s}(a.boxes,a.logits,t,n);return Object.keys(a).forEach((e=>io(a[e]))),r}(n,t,i),io(n)}else s=[{box:[0,0,0,0],boxRaw:[0,0,1,1],score:0}];for(let n=0;n<s.length;n++){const a=BK(e,256,null==(r=s[n])?void 0:r.boxRaw);DK.length=0;const o=await VK(a,t,i);io(a),o&&(o.id=n,DK.push(o))}LK=Gj(),OK=0}return DK}var GK,HK=[{class:1,label:"person"},{class:2,label:"bicycle"},{class:3,label:"car"},{class:4,label:"motorcycle"},{class:5,label:"airplane"},{class:6,label:"bus"},{class:7,label:"train"},{class:8,label:"truck"},{class:9,label:"boat"},{class:10,label:"traffic light"},{class:11,label:"fire hydrant"},{class:12,label:"stop sign"},{class:13,label:"parking meter"},{class:14,label:"bench"},{class:15,label:"bird"},{class:16,label:"cat"},{class:17,label:"dog"},{class:18,label:"horse"},{class:19,label:"sheep"},{class:20,label:"cow"},{class:21,label:"elephant"},{class:22,label:"bear"},{class:23,label:"zebra"},{class:24,label:"giraffe"},{class:25,label:"backpack"},{class:26,label:"umbrella"},{class:27,label:"handbag"},{class:28,label:"tie"},{class:29,label:"suitcase"},{class:30,label:"frisbee"},{class:31,label:"skis"},{class:32,label:"snowboard"},{class:33,label:"sports ball"},{class:34,label:"kite"},{class:35,label:"baseball bat"},{class:36,label:"baseball glove"},{class:37,label:"skateboard"},{class:38,label:"surfboard"},{class:39,label:"tennis racket"},{class:40,label:"bottle"},{class:41,label:"wine glass"},{class:42,label:"cup"},{class:43,label:"fork"},{class:44,label:"knife"},{class:45,label:"spoon"},{class:46,label:"bowl"},{class:47,label:"banana"},{class:48,label:"apple"},{class:49,label:"sandwich"},{class:50,label:"orange"},{class:51,label:"broccoli"},{class:52,label:"carrot"},{class:53,label:"hot dog"},{class:54,label:"pizza"},{class:55,label:"donut"},{class:56,label:"cake"},{class:57,label:"chair"},{class:58,label:"couch"},{class:59,label:"potted plant"},{class:60,label:"bed"},{class:61,label:"dining table"},{class:62,label:"toilet"},{class:63,label:"tv"},{class:64,label:"laptop"},{class:65,label:"mouse"},{class:66,label:"remote"},{class:67,label:"keyboard"},{class:68,label:"cell phone"},{class:69,label:"microwave"},{class:70,label:"oven"},{class:71,label:"toaster"},{class:72,label:"sink"},{class:73,label:"refrigerator"},{class:74,label:"book"},{class:75,label:"clock"},{class:76,label:"vase"},{class:77,label:"scissors"},{class:78,label:"teddy bear"},{class:79,label:"hair drier"},{class:80,label:"toothbrush"}],jK=0,qK=[],XK=0,KK=Number.MAX_SAFE_INTEGER;async function ZK(e,t){if(!(null==GK?void 0:GK.executor))return[];const n=(t.object.skipTime||0)>Gj()-XK,a=KK<(t.object.skipFrames||0);return t.skipAllowed&&n&&a&&qK.length>0?(KK++,qK):(KK=0,new Promise((async n=>{const a=[e.shape[2]||0,e.shape[1]||0],r=yh.resizeBilinear(e,[jK,jK]),i=t.object.enabled?null==GK?void 0:GK.execute(r,["tower_0/detections"]):null;XK=Gj(),io(r);const s=await async function(e,t,n){if(!e)return[];const a={},r=[],i=await e.array();a.squeeze=Ep(e);const s=Np(a.squeeze,6,1);a.stack=Rp([s[1],s[0],s[3],s[2]],1),a.boxes=Ep(a.stack),a.scores=Ep(s[4]),a.classes=Ep(s[5]),io([e,...s]),a.nms=await yh.nonMaxSuppressionAsync(a.boxes,a.scores,n.object.maxDetected||0,n.object.iouThreshold,n.object.minConfidence||0);const o=await a.nms.data();let l=0;for(const e of Array.from(o)){const n=Math.trunc(100*i[0][e][4])/100,a=i[0][e][5];if(Number.isNaN(a))continue;const s=HK[a].label,[o,u]=[i[0][e][0]/jK,i[0][e][1]/jK],d=[o,u,i[0][e][2]/jK-o,i[0][e][3]/jK-u],p=[Math.trunc(d[0]*t[0]),Math.trunc(d[1]*t[1]),Math.trunc(d[2]*t[0]),Math.trunc(d[3]*t[1])];r.push({id:l++,score:n,class:a,label:s,box:p,boxRaw:d})}return Object.keys(a).forEach((e=>io(a[e]))),r}(i,a,t);qK=s,n(s)})))}var YK={};u(YK,{connected:()=>eZ,kpt:()=>QK});var JK,QK=["head","neck","rightShoulder","rightElbow","rightWrist","chest","leftShoulder","leftElbow","leftWrist","bodyCenter","rightHip","rightKnee","rightAnkle","leftHip","leftKnee","leftAnkle"],eZ={leftLeg:["leftHip","leftKnee","leftAnkle"],rightLeg:["rightHip","rightKnee","rightAnkle"],torso:["leftShoulder","rightShoulder","rightHip","leftHip","leftShoulder"],leftArm:["leftShoulder","leftElbow","leftWrist"],rightArm:["rightShoulder","rightElbow","rightWrist"],head:[]},tZ=0,nZ={id:0,keypoints:[],box:[0,0,0,0],boxRaw:[0,0,0,0],score:0,annotations:{}},aZ=Number.MAX_SAFE_INTEGER;async function rZ(e,t){const[n,a]=e.shape,r=Zo(e,[a*n]),i=iu(r,0),s=(await i.data())[0];if(s>t){const e=To(r,0),t=pd(e,n),a=(await t.data())[0],o=bo(e,n),l=(await o.data())[0];return io([r,i,e,t,o]),[a,l,s]}return io([r,i]),[0,0,s]}async function iZ(e,t){if(!(null==JK?void 0:JK.executor)||!(null==JK?void 0:JK.inputs[0].shape))return[];const n=(t.body.skipTime||0)>Gj()-tZ,a=aZ<(t.body.skipFrames||0);return t.skipAllowed&&n&&a&&Object.keys(nZ.keypoints).length>0?(aZ++,[nZ]):(aZ=0,new Promise((async n=>{const a=ro((()=>{var t,n;const a=yh.resizeBilinear(e,[(null==(t=null==JK?void 0:JK.inputs[0].shape)?void 0:t[2])||0,(null==(n=null==JK?void 0:JK.inputs[0].shape)?void 0:n[1])||0],!1),r=vo(a,EX.tf2);return Hu(r,EX.tf1)}));let r;if(t.body.enabled&&(r=null==JK?void 0:JK.execute(a)),tZ=Gj(),io(a),r){nZ.keypoints.length=0;const n=Ep(r);io(r);const a=Kp(n,2);io(n);for(let n=0;n<a.length;n++){const[r,i,s]=await rZ(a[n],t.body.minConfidence);s>(t.body.minConfidence||0)&&nZ.keypoints.push({score:Math.round(100*s)/100,part:QK[n],positionRaw:[r/JK.inputs[0].shape[2],i/JK.inputs[0].shape[1]],position:[Math.round(e.shape[2]*r/JK.inputs[0].shape[2]),Math.round(e.shape[1]*i/JK.inputs[0].shape[1])]})}a.forEach((e=>io(e)))}nZ.score=nZ.keypoints.reduce(((e,t)=>t.score>e?t.score:e),0);const i=nZ.keypoints.map((e=>e.position[0])),s=nZ.keypoints.map((e=>e.position[1]));nZ.box=[Math.min(...i),Math.min(...s),Math.max(...i)-Math.min(...i),Math.max(...s)-Math.min(...s)];const o=nZ.keypoints.map((e=>e.positionRaw[0])),l=nZ.keypoints.map((e=>e.positionRaw[1]));nZ.boxRaw=[Math.min(...o),Math.min(...l),Math.max(...o)-Math.min(...o),Math.max(...l)-Math.min(...l)];for(const[e,n]of Object.entries(eZ)){const a=[];for(let e=0;e<n.length-1;e++){const r=nZ.keypoints.find((t=>t.part===n[e])),i=nZ.keypoints.find((t=>t.part===n[e+1]));r&&i&&r.score>(t.body.minConfidence||0)&&i.score>(t.body.minConfidence||0)&&a.push([r.position,i.position])}nZ.annotations[e]=a}n([nZ])})))}var sZ=e=>[Math.abs(e.endPoint[0]-e.startPoint[0]),Math.abs(e.endPoint[1]-e.startPoint[1])],oZ=e=>[e.startPoint[0]+(e.endPoint[0]-e.startPoint[0])/2,e.startPoint[1]+(e.endPoint[1]-e.startPoint[1])/2,1],lZ=(e,t)=>e?[Math.trunc(Math.max(0,e.startPoint[0])),Math.trunc(Math.max(0,e.startPoint[1])),Math.trunc(Math.min(t.shape[2]||0,e.endPoint[0])-Math.max(0,e.startPoint[0])),Math.trunc(Math.min(t.shape[1]||0,e.endPoint[1])-Math.max(0,e.startPoint[1]))]:[0,0,0,0],uZ=(e,t)=>e?[e.startPoint[0]/(t.shape[2]||0),e.startPoint[1]/(t.shape[1]||0),(e.endPoint[0]-e.startPoint[0])/(t.shape[2]||0),(e.endPoint[1]-e.startPoint[1])/(t.shape[1]||0)]:[0,0,0,0],dZ=(e,t,n)=>({startPoint:[e.startPoint[0]*t[0],e.startPoint[1]*t[1]],endPoint:[e.endPoint[0]*t[0],e.endPoint[1]*t[1]],landmarks:e.landmarks.map((e=>[(e[0]+n[0])*t[0],(e[1]+n[1])*t[1]])),confidence:e.confidence}),pZ=(e,t,n)=>{const a=t.shape[1],r=t.shape[2],i=[e.startPoint[1]/a,e.startPoint[0]/r,e.endPoint[1]/a,e.endPoint[0]/r],s=yh.cropAndResize(t,[i],[0],n),o=bo(s,EX.tf255);return io(s),o},cZ=(e,t)=>{const n=oZ(e),a=sZ(e),r=[t*a[0]/2,t*a[1]/2];return{startPoint:[n[0]-r[0],n[1]-r[1]],endPoint:[n[0]+r[0],n[1]+r[1]],landmarks:e.landmarks,confidence:e.confidence,size:a}},hZ=e=>{const t=oZ(e),n=sZ(e),a=Math.max(...n)/2;return{startPoint:[Math.round(t[0]-a),Math.round(t[1]-a)],endPoint:[Math.round(t[0]+a),Math.round(t[1]+a)],landmarks:e.landmarks,confidence:e.confidence,size:[Math.round(n[0]),Math.round(n[1])]}},fZ=[[1,0,0],[0,1,0],[0,0,1]],mZ=(e,t)=>[[1,0,e],[0,1,t],[0,0,1]],yZ=(e,t)=>{let n=0;for(let a=0;a<e.length;a++)n+=e[a]*t[a];return n},gZ=(e,t)=>{const n=[];for(let a=0;a<e.length;a++)n.push(e[a][t]);return n},AZ=(e,t)=>{const n=[],a=e.length;for(let r=0;r<a;r++){n.push([]);for(let i=0;i<a;i++)n[r].push(yZ(e[r],gZ(t,i)))}return n},xZ=(e,t)=>{const n=Math.cos(e),a=Math.sin(e),r=[[n,-a,0],[a,n,0],[0,0,1]],i=mZ(t[0],t[1]),s=AZ(i,r),o=mZ(-t[0],-t[1]);return AZ(s,o)},bZ=(e,t)=>[yZ(e,t[0]),yZ(e,t[1])];function vZ(e,t,n,a,r){const i=sZ(t),s=e.map((e=>[i[0]/r*(e[0]-r/2),i[1]/r*(e[1]-r/2),e[2]||0])),o=n&&0!==n&&Math.abs(n)>.2,l=o?xZ(n,[0,0]):fZ,u=o?s.map((e=>[...bZ(e,l),e[2]])):s,d=o?(e=>{const t=[[e[0][0],e[1][0]],[e[0][1],e[1][1]]],n=[e[0][2],e[1][2]],a=[-yZ(t[0],n),-yZ(t[1],n)];return[t[0].concat(a[0]),t[1].concat(a[1]),[0,0,1]]})(a):fZ,p=oZ(t),c=[yZ(p,d[0]),yZ(p,d[1])];return u.map((e=>[Math.trunc(e[0]+c[0]),Math.trunc(e[1]+c[1]),Math.trunc(e[2]||0)]))}function wZ(e,t,n,a){const r=t.landmarks.length>=jX.count?jX.symmetryLine:qX.symmetryLine;let i,s=0,o=fZ;if(e&&gq.kernels.includes("rotatewithoffset"))if(s=((e,t)=>{return(n=Math.PI/2-Math.atan2(-(t[1]-e[1]),t[0]-e[0]))-2*Math.PI*Math.floor((n+Math.PI)/(2*Math.PI));var n})(t.landmarks[r[0]],t.landmarks[r[1]]),s&&0!==s&&Math.abs(s)>.2){const e=oZ(t),r=[e[0]/n.shape[2],e[1]/n.shape[1]],l=yh.rotateWithOffset(n,s,0,[r[0],r[1]]);o=xZ(-s,e),i=pZ(t,l,[a,a]),io(l)}else i=pZ(t,n,[a,a]);else i=pZ(t,n,[a,a]);return[s,o,i]}var kZ,IZ,SZ=(e,t)=>{const n=(e=>{const t=e.map((e=>e[0])),n=e.map((e=>e[1]));return[Math.min(...t)+(Math.max(...t)-Math.min(...t))/2,Math.min(...n)+(Math.max(...n)-Math.min(...n))/2]})(e),a=sZ(t);return{startPoint:[n[0]-a[0]/2,n[1]-a[1]/2],endPoint:[n[0]+a[0]/2,n[1]+a[1]/2]}},NZ=null,CZ=0,TZ=null,EZ=0,RZ=HX.leftEyeLower0,$Z=HX.rightEyeLower0,MZ={leftBounds:[RZ[0],RZ[RZ.length-1]],rightBounds:[$Z[0],$Z[$Z.length-1]]};function _Z(e,t,n,a){for(let r=0;r<XX.length;r++){const{key:i,indices:s}=XX[r],o=HX[`${n}${i}`];if(!a||a.includes(i))for(let n=0;n<s.length;n++){const a=s[n];e[o[n]]=[t[a][0],t[a][1],(t[a][2]+e[o[n]][2])/2]}}}var FZ=(e,t,n,a,r,i=!1)=>{const s=hZ(cZ((e=>{const t=e.map((e=>e[0])),n=e.map((e=>e[1]));return{startPoint:[Math.min(...t),Math.min(...n)],endPoint:[Math.max(...t),Math.max(...n)],landmarks:e}})([e[n],e[a]]),2.3)),o=sZ(s);let l=yh.cropAndResize(t,[[s.startPoint[1]/r,s.startPoint[0]/r,s.endPoint[1]/r,s.endPoint[0]/r]],[0],[EZ,EZ]);if(i&&gq.kernels.includes("flipleftright")){const e=yh.flipLeftRight(l);io(l),l=e}return{box:s,boxSize:o,crop:l}},OZ=(e,t,n,a=!1)=>{const r=[];for(let i=0;i<76;i++){const s=e[3*i],o=e[3*i+1],l=e[3*i+2];r.push([(a?1-s/EZ:s/EZ)*n[0]+t.startPoint[0],o/EZ*n[1]+t.startPoint[1],l])}return{rawCoords:r,iris:r.slice(71)}},PZ=(e,t,n)=>{const a=e[HX[`${n}EyeUpper0`][3]][2],r=e[HX[`${n}EyeLower0`][4]][2],i=(a+r)/2;return t.map(((e,t)=>{let n=i;return 2===t?n=a:4===t&&(n=r),[e[0],e[1],n]}))};async function DZ(e,t,n){if(!(null==IZ?void 0:IZ.executor))return e;const{box:a,boxSize:r,crop:i}=FZ(e,t,MZ.leftBounds[0],MZ.leftBounds[1],n,!0),{box:s,boxSize:o,crop:l}=FZ(e,t,MZ.rightBounds[0],MZ.rightBounds[1],n,!0),u=Qo([i,l]);io(i),io(l);const d=IZ.execute(u);io(u);const p=await d.data();io(d);const c=p.slice(0,228),{rawCoords:h,iris:f}=OZ(c,a,r,!0),m=p.slice(228),{rawCoords:y,iris:g}=OZ(m,s,o,!1),A=(e=>e[MZ.leftBounds[0]][2]-e[MZ.rightBounds[0]][2])(e);Math.abs(A)<30?(_Z(e,h,"left",null),_Z(e,y,"right",null)):A<1?_Z(e,h,"left",["EyeUpper0","EyeLower0"]):_Z(e,y,"right",["EyeUpper0","EyeLower0"]);const x=PZ(e,f,"left"),b=PZ(e,g,"right");return e.concat(x).concat(b)}async function zZ(e,t){var n,a,r,i,s,o,l,u,d,p;const c={lips:await(null==(a=null==(n=t.filter((e=>160===e.size)))?void 0:n[0])?void 0:a.data()),irisL:await(null==(i=null==(r=t.filter((e=>10===e.size)))?void 0:r[0])?void 0:i.data()),eyeL:await(null==(o=null==(s=t.filter((e=>142===e.size)))?void 0:s[0])?void 0:o.data()),irisR:await(null==(u=null==(l=t.filter((e=>10===e.size)))?void 0:l[1])?void 0:u.data()),eyeR:await(null==(p=null==(d=t.filter((e=>142===e.size)))?void 0:d[1])?void 0:p.data())};for(const t of Object.values(c))if(!t)return e;const h=aK.reduce(((t,n)=>t+e[n][2]),0)/aK.length;for(let t=0;t<c.irisL.length/2;t++)e.push([c.irisL[2*t+0],c.irisL[2*t+1],h]);const f=rK.reduce(((t,n)=>t+e[n][2]),0)/rK.length;for(let t=0;t<c.irisR.length/2;t++)e.push([c.irisR[2*t+0],c.irisR[2*t+1],f]);for(let t=0;t<c.eyeL.length/2;t++)e[aK[t]]=[c.eyeL[2*t+0],c.eyeL[2*t+1],e[aK[t]][2]];for(let t=0;t<c.eyeR.length/2;t++)e[rK[t]]=[c.eyeR[2*t+0],c.eyeR[2*t+1],e[rK[t]][2]];for(let t=0;t<c.lips.length/2;t++)e[nK[t]]=[c.lips[2*t+0],c.lips[2*t+1],e[nK[t]][2]];return e}var LZ,WZ,BZ={boxes:[],skipped:Number.MAX_SAFE_INTEGER,timestamp:0},VZ=null,UZ=0,GZ=ZX,HZ=KX,jZ=[],qZ=[],XZ=0,KZ=0,ZZ=Number.MAX_SAFE_INTEGER,YZ=!1;async function JZ(e,t,n,a){var r,i;if(!LZ)return[];const s=ZZ<((null==(r=t.face.emotion)?void 0:r.skipFrames)||0),o=((null==(i=t.face.emotion)?void 0:i.skipTime)||0)>Gj()-KZ;return t.skipAllowed&&o&&s&&XZ===a&&qZ[n]&&qZ[n].length>0?(ZZ++,qZ[n]):(ZZ=0,new Promise((async r=>{var i,s,o;const l=[];if(null==(i=t.face.emotion)?void 0:i.enabled){const n={},a=(null==LZ?void 0:LZ.inputs[0].shape)?LZ.inputs[0].shape[2]:0;if((null==(s=t.face.emotion)?void 0:s.crop)>0){const r=null==(o=t.face.emotion)?void 0:o.crop,i=[[r,r,1-r,1-r]];n.resize=yh.cropAndResize(e,i,[0],[a,a])}else n.resize=yh.resizeBilinear(e,[a,a],!1);YZ?(n.mul=vo(n.resize,255),n.normalize=Hu(n.mul,[103.939,116.779,123.68]),n.emotion=null==LZ?void 0:LZ.execute(n.normalize)):(n.channels=vo(n.resize,EX.rgb),n.grayscale=pu(n.channels,3,!0),n.grayscaleSub=Hu(n.grayscale,EX.tf05),n.grayscaleMul=vo(n.grayscaleSub,EX.tf2),n.emotion=null==LZ?void 0:LZ.execute(n.grayscaleMul)),KZ=Gj();const r=await n.emotion.data();for(let e=0;e<r.length;e++)r[e]>(t.face.emotion.minConfidence||0)&&l.push({score:Math.min(.99,Math.trunc(100*r[e])/100),emotion:jZ[e]});l.sort(((e,t)=>t.score-e.score)),Object.keys(n).forEach((e=>io(n[e])))}qZ[n]=l,XZ=a,r(l)})))}var QZ=[],eY=0,tY=0,nY=Number.MAX_SAFE_INTEGER;async function aY(e,t,n,a){var r,i,s,o;const l={age:0,gender:"unknown",genderScore:0,descriptor:[]};if(!(null==WZ?void 0:WZ.executor))return l;const u=nY<((null==(r=t.face.description)?void 0:r.skipFrames)||0),d=((null==(i=t.face.description)?void 0:i.skipTime)||0)>Gj()-eY;return t.skipAllowed&&u&&d&&tY===a&&(null==(s=null==QZ?void 0:QZ[n])?void 0:s.age)>0&&(null==(o=null==QZ?void 0:QZ[n])?void 0:o.genderScore)>0?(nY++,QZ[n]):(nY=0,new Promise((async r=>{var i;if(null==(i=t.face.description)?void 0:i.enabled){const n=function(e,t){var n,a;const r=e.image||e.tensor||e;if(!(null==WZ?void 0:WZ.inputs[0].shape))return r;let i;if((null==(n=t.face.description)?void 0:n.crop)>0){const e=null==(a=t.face.description)?void 0:a.crop,n=[[e,e,1-e,1-e]];i=yh.cropAndResize(r,n,[0],[WZ.inputs[0].shape[2],WZ.inputs[0].shape[1]])}else i=yh.resizeBilinear(r,[WZ.inputs[0].shape[2],WZ.inputs[0].shape[1]],!1);const s=vo(i,EX.tf255);return io(i),s}(e,t),a=null==WZ?void 0:WZ.execute(n);eY=Gj(),io(n);const r=a.find((e=>1===e.shape[1])),i=await r.data(),s=Math.trunc(200*Math.abs(i[0]-.5))/100;s>(t.face.description.minConfidence||0)&&(l.gender=i[0]<=.5?"female":"male",l.genderScore=Math.min(.99,s));const o=To(a.find((e=>100===e.shape[1])),1),u=(await o.data())[0];io(o);const d=a.find((e=>100===e.shape[1])),p=await d.data();l.age=Math.round(p[u-1]>p[u+1]?10*u-100*p[u-1]:10*u+100*p[u+1])/10,(Number.isNaN(i[0])||Number.isNaN(p[0]))&&Uj("faceres error:",{model:WZ,result:a});const c=a.find((e=>1024===e.shape[1])),h=c?await c.data():[];l.descriptor=Array.from(h),a.forEach((e=>io(e)))}QZ[n]=l,tY=a,r(l)})))}var rY,iY=.1;function sY(e,t,n){let a=!1,r=n.length-1;for(let i=0;i<n.length;r=i++)n[i].y>t!=n[r].y>t&&e<(n[r].x-n[i].x)*(t-n[i].y)/(n[r].y-n[i].y)+n[i].x&&(a=!a);return a}async function oY(e){if(!e.tensor)return e.tensor;if(!e.mesh||e.mesh.length<100)return e.tensor;const t=e.tensor.shape[2]||0,n=e.tensor.shape[1]||0,a=await e.tensor.buffer();let r=[];for(const t of HX.silhouette)r.push({x:(e.mesh[t][0]-e.box[0])/e.box[2],y:(e.mesh[t][1]-e.box[1])/e.box[3]});r=r.map((e=>({x:e.x>.5?e.x+iY:e.x-iY,y:e.y>.5?e.y+iY:e.y-iY})));for(let e=0;e<t;e++)for(let i=0;i<n;i++)sY(e/t,i/t,r)||(a.set(.5*a.get(0,i,e,0),0,i,e,0),a.set(.5*a.get(0,i,e,1),0,i,e,1),a.set(.5*a.get(0,i,e,2),0,i,e,2));return a.toTensor()}var lY,uY=[],dY=Number.MAX_SAFE_INTEGER,pY=0,cY=0;async function hY(e,t,n,a){var r,i;if(!(null==rY?void 0:rY.executor))return 0;const s=((null==(r=t.face.antispoof)?void 0:r.skipTime)||0)>Gj()-cY,o=dY<((null==(i=t.face.antispoof)?void 0:i.skipFrames)||0);return t.skipAllowed&&s&&o&&pY===a&&uY[n]?(dY++,uY[n]):(dY=0,new Promise((async t=>{const r=yh.resizeBilinear(e,[(null==rY?void 0:rY.inputs[0].shape)?rY.inputs[0].shape[2]:0,(null==rY?void 0:rY.inputs[0].shape)?rY.inputs[0].shape[1]:0],!1),i=null==rY?void 0:rY.execute(r),s=(await i.data())[0];uY[n]=Math.round(100*s)/100,pY=a,cY=Gj(),io([r,i]),t(uY[n])})))}var fY,mY=[],yY=Number.MAX_SAFE_INTEGER,gY=0,AY=0;async function xY(e,t,n,a){var r,i;if(!(null==lY?void 0:lY.executor))return 0;const s=((null==(r=t.face.liveness)?void 0:r.skipTime)||0)>Gj()-AY,o=yY<((null==(i=t.face.liveness)?void 0:i.skipFrames)||0);return t.skipAllowed&&s&&o&&gY===a&&mY[n]?(yY++,mY[n]):(yY=0,new Promise((async t=>{const r=yh.resizeBilinear(e,[(null==lY?void 0:lY.inputs[0].shape)?lY.inputs[0].shape[2]:0,(null==lY?void 0:lY.inputs[0].shape)?lY.inputs[0].shape[1]:0],!1),i=null==lY?void 0:lY.execute(r),s=(await i.data())[0];mY[n]=Math.round(100*s)/100,gY=a,AY=Gj(),io([r,i]),t(mY[n])})))}var bY,vY=[],wY=["white","black","asian","indian","other"],kY=[15,23,28,35.5,45.5,55.5,65],IY=0,SY=0,NY=Number.MAX_SAFE_INTEGER;async function CY(e,t,n,a){var r,i;if(!fY)return{age:0,gender:"unknown",genderScore:0,race:[]};const s=NY<((null==(r=t.face.gear)?void 0:r.skipFrames)||0),o=((null==(i=t.face.gear)?void 0:i.skipTime)||0)>Gj()-SY;return t.skipAllowed&&o&&s&&IY===a&&vY[n]?(NY++,vY[n]):(NY=0,new Promise((async r=>{var i,s,o,l;if(!(null==fY?void 0:fY.inputs[0].shape))return;const u={};let d=[[0,.1,.9,.9]];if((null==(i=t.face.gear)?void 0:i.crop)>0){const e=null==(s=t.face.gear)?void 0:s.crop;d=[[e,e,1-e,1-e]]}u.resize=yh.cropAndResize(e,d,[0],[fY.inputs[0].shape[2],fY.inputs[0].shape[1]]);const p={age:0,gender:"unknown",genderScore:0,race:[]};(null==(o=t.face.gear)?void 0:o.enabled)&&([u.age,u.gender,u.race]=fY.execute(u.resize,["age_output","gender_output","race_output"]));const c=await u.gender.data();p.gender=c[0]>c[1]?"male":"female",p.genderScore=Math.round(100*(c[0]>c[1]?c[0]:c[1]))/100;const h=await u.race.data();for(let e=0;e<h.length;e++)h[e]>((null==(l=t.face.gear)?void 0:l.minConfidence)||.2)&&p.race.push({score:Math.round(100*h[e])/100,race:wY[e]});p.race.sort(((e,t)=>t.score-e.score));const f=Array.from(await u.age.data()).map(((e,t)=>[kY[t],e])).sort(((e,t)=>t[1]-e[1]));let m=f[0][0];for(let e=1;e<f.length;e++)m+=f[e][1]*(f[e][0]-m);p.age=Math.round(10*m)/10,Object.keys(u).forEach((e=>io(u[e]))),vY[n]=p,IY=a,SY=Gj(),r(p)})))}var TY,EY=[],RY=0,$Y=0,MY=Number.MAX_SAFE_INTEGER;async function _Y(e,t,n,a){var r,i,s,o;if(!bY)return{age:0};const l=MY<((null==(r=t.face.ssrnet)?void 0:r.skipFrames)||0),u=((null==(i=t.face.ssrnet)?void 0:i.skipTime)||0)>Gj()-$Y;return t.skipAllowed&&l&&u&&RY===a&&(null==(s=EY[n])?void 0:s.age)&&(null==(o=EY[n])?void 0:o.age)>0?(MY++,EY[n]):(MY=0,new Promise((async r=>{var i,s,o;if(!(null==bY?void 0:bY.inputs)||!bY.inputs[0]||!bY.inputs[0].shape)return;const l={};if((null==(i=t.face.ssrnet)?void 0:i.crop)>0){const n=null==(s=t.face.ssrnet)?void 0:s.crop,a=[[n,n,1-n,1-n]];l.resize=yh.cropAndResize(e,a,[0],[bY.inputs[0].shape[2],bY.inputs[0].shape[1]])}else l.resize=yh.resizeBilinear(e,[bY.inputs[0].shape[2],bY.inputs[0].shape[1]],!1);l.enhance=vo(l.resize,EX.tf255);const u={age:0};if((null==(o=t.face.ssrnet)?void 0:o.enabled)&&(l.age=bY.execute(l.enhance)),l.age){const e=await l.age.data();u.age=Math.trunc(10*e[0])/10}Object.keys(l).forEach((e=>io(l[e]))),EY[n]=u,RY=a,$Y=Gj(),r(u)})))}var FY,OY=[],PY=0,DY=0,zY=Number.MAX_SAFE_INTEGER,LY=[.2989,.587,.114];async function WY(e,t,n,a){var r,i,s,o;if(!TY)return{gender:"unknown",genderScore:0};const l=zY<((null==(r=t.face.ssrnet)?void 0:r.skipFrames)||0),u=((null==(i=t.face.ssrnet)?void 0:i.skipTime)||0)>Gj()-DY;return t.skipAllowed&&l&&u&&PY===a&&(null==(s=OY[n])?void 0:s.gender)&&(null==(o=OY[n])?void 0:o.genderScore)>0?(zY++,OY[n]):(zY=0,new Promise((async r=>{var i,s,o;if(!(null==TY?void 0:TY.inputs[0].shape))return;const l={};if((null==(i=t.face.ssrnet)?void 0:i.crop)>0){const n=null==(s=t.face.ssrnet)?void 0:s.crop,a=[[n,n,1-n,1-n]];l.resize=yh.cropAndResize(e,a,[0],[TY.inputs[0].shape[2],TY.inputs[0].shape[1]])}else l.resize=yh.resizeBilinear(e,[TY.inputs[0].shape[2],TY.inputs[0].shape[1]],!1);l.enhance=ro((()=>{var e,t;let n;if(1===(null==(t=null==(e=null==TY?void 0:TY.inputs)?void 0:e[0].shape)?void 0:t[3])){const[e,t,a]=Np(l.resize,3,3),r=vo(e,LY[0]),i=vo(t,LY[1]),s=vo(a,LY[2]),o=So([r,i,s]);n=vo(Hu(o,EX.tf05),2)}else n=vo(Hu(l.resize,EX.tf05),2);return n}));const u={gender:"unknown",genderScore:0};(null==(o=t.face.ssrnet)?void 0:o.enabled)&&(l.gender=TY.execute(l.enhance));const d=await l.gender.data();u.gender=d[0]>d[1]?"female":"male",u.genderScore=d[0]>d[1]?Math.trunc(100*d[0])/100:Math.trunc(100*d[1])/100,Object.keys(l).forEach((e=>io(l[e]))),OY[n]=u,PY=a,DY=Gj(),r(u)})))}var BY,VY=[],UY=0,GY=0,HY=Number.MAX_SAFE_INTEGER;async function jY(e,t,n,a){var r,i;if(!(null==FY?void 0:FY.executor))return[];const s=HY<((null==(r=t.face.mobilefacenet)?void 0:r.skipFrames)||0),o=((null==(i=t.face.mobilefacenet)?void 0:i.skipTime)||0)>Gj()-GY;return t.skipAllowed&&o&&s&&UY===a&&VY[n]?(HY++,VY[n]):new Promise((async r=>{var i;let s=[];if((null==(i=t.face.mobilefacenet)?void 0:i.enabled)&&(null==FY?void 0:FY.inputs[0].shape)){const t={};t.crop=yh.resizeBilinear(e,[FY.inputs[0].shape[2],FY.inputs[0].shape[1]],!1),t.data=FY.execute(t.crop);const n=await t.data.data();s=Array.from(n),Object.keys(t).forEach((e=>io(t[e])))}VY[n]=s,UY=a,GY=Gj(),r(s)}))}var qY=[],XY=0,KY=0,ZY=Number.MAX_SAFE_INTEGER;async function YY(e,t,n,a){var r,i;if(!(null==BY?void 0:BY.executor))return[];const s=ZY<((null==(r=t.face.insightface)?void 0:r.skipFrames)||0),o=((null==(i=t.face.insightface)?void 0:i.skipTime)||0)>Gj()-KY;return t.skipAllowed&&o&&s&&XY===a&&qY[n]?(ZY++,qY[n]):new Promise((async r=>{var i;let s=[];if((null==(i=t.face.insightface)?void 0:i.enabled)&&(null==BY?void 0:BY.inputs[0].shape)){const t={};t.crop=yh.resizeBilinear(e,[BY.inputs[0].shape[2],BY.inputs[0].shape[1]],!1),t.data=BY.execute(t.crop);const n=await t.data.data();s=Array.from(n),Object.keys(t).forEach((e=>io(t[e])))}qY[n]=s,XY=a,KY=Gj(),r(s)}))}var JY=(e,t)=>{const n=e=>{const t=Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);return e[0]/=t,e[1]/=t,e[2]/=t,e},a=(e,t)=>[e[0]-t[0],e[1]-t[1],e[2]-t[2]],r=(e,t)=>[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]],i=e.meshRaw;if(!i||i.length<300)return{angle:{pitch:0,yaw:0,roll:0},matrix:[1,0,0,0,1,0,0,0,1],gaze:{bearing:0,strength:0}};const s=Math.max(e.boxRaw[2]*t[0],e.boxRaw[3]*t[1])/1.5,o=[i[10],i[152],i[234],i[454]].map((e=>[e[0]*t[0]/s,e[1]*t[1]/s,e[2]])),l=n(a(o[1],o[0]));let u=n(a(o[3],o[2]));const d=n(r(u,l));u=r(l,d);const p=[u[0],u[1],u[2],l[0],l[1],l[2],d[0],d[1],d[2]],c=(e=>{const[t,n,a,r,i,s,o,l,u]=e;let d,p,c;return r<1?r>-1?(c=Math.asin(r),p=Math.atan2(-o,t),d=Math.atan2(-s,i)):(c=-Math.PI/2,p=-Math.atan2(l,u),d=0):(c=Math.PI/2,p=Math.atan2(l,u),d=0),Number.isNaN(d)&&(d=0),Number.isNaN(p)&&(p=0),Number.isNaN(c)&&(c=0),{pitch:2*-d,yaw:2*-p,roll:2*-c}})(p),h=478===i.length?(e=>{if(!e.annotations.rightEyeIris||!e.annotations.leftEyeIris)return{bearing:0,strength:0};const t=[0,-.1],n=(e.mesh[33][2]||0)>(e.mesh[263][2]||0),a=n?e.mesh[473]:e.mesh[468],r=n?[(e.mesh[133][0]+e.mesh[33][0])/2,(e.mesh[133][1]+e.mesh[33][1])/2]:[(e.mesh[263][0]+e.mesh[362][0])/2,(e.mesh[263][1]+e.mesh[362][1])/2],i=n?[e.mesh[133][0]-e.mesh[33][0],e.mesh[23][1]-e.mesh[27][1]]:[e.mesh[263][0]-e.mesh[362][0],e.mesh[253][1]-e.mesh[257][1]],s=[(r[0]-a[0])/i[0]-t[0],1*(a[1]-r[1])/i[1]-t[1]];let o=Math.sqrt(s[0]*s[0]+s[1]*s[1]);var l,u;return o=Math.min(o,e.boxRaw[2]/2,e.boxRaw[3]/2),{bearing:(l=[0,0],u=s,(Math.atan2(l[1]-u[1],l[0]-u[0])+Math.PI/2)%Math.PI),strength:o}})(e):{bearing:0,strength:0};return{angle:c,matrix:p,gaze:h}};function QY(e,t){const n=null==e?void 0:e.annotations;if(!(null==n?void 0:n.leftEyeIris)||!(null==n?void 0:n.rightEyeIris))return 0;const a=Math.max(Math.abs(n.leftEyeIris[3][0]-n.leftEyeIris[1][0]),Math.abs(n.rightEyeIris[3][0]-n.rightEyeIris[1][0]))/t;return Math.round(1.17/a)/100}var eJ=async(e,t)=>{var n,a,r,i,s,o,l,u,d,p,c,h,f,m,y,g,A,x,b,v,w,k,I;let S,N,C,T,E,R,$,M,_,F=Gj();const O=[];e.state="run:face";const P=await async function(e,t){var n,a,r,i,s,o,l,u,d,p;const c=((null==(n=t.face.detector)?void 0:n.skipTime)||0)>Gj()-BZ.timestamp,h=BZ.skipped<((null==(a=t.face.detector)?void 0:a.skipFrames)||0);t.skipAllowed&&c&&h&&0!==BZ.boxes.length?BZ.skipped++:(BZ.boxes=await async function(e,t){var n,a,r,i,s,o;if(!e||e.isDisposedInternal||4!==e.shape.length||e.shape[1]<1||e.shape[2]<1)return[];const l={};l.resized=yh.resizeBilinear(e,[CZ,CZ]),l.div=bo(l.resized,EX.tf127),l.normalized=Hu(l.div,EX.tf05);const u=null==kZ?void 0:kZ.execute(l.normalized);if(Array.isArray(u)&&u.length>2){const e=u.sort(((e,t)=>e.size-t.size));l.concat384=Qo([e[0],e[2]],2),l.concat512=Qo([e[1],e[3]],2),l.concat=Qo([l.concat512,l.concat384],1),l.batch=Ep(l.concat,[0])}else Array.isArray(u)?l.batch=Ep(u[0]):l.batch=Ep(u);io(u),l.boxes=function(e){if(!NZ||!TZ)return sd([0,0]);const t={};t.boxStarts=nl(e,[0,1],[-1,2]),t.centers=Ao(t.boxStarts,NZ),t.boxSizes=nl(e,[0,3],[-1,2]),t.boxSizesNormalized=bo(t.boxSizes,TZ),t.centersNormalized=bo(t.centers,TZ),t.halfBoxSize=bo(t.boxSizesNormalized,EX.tf2),t.starts=Hu(t.centersNormalized,t.halfBoxSize),t.ends=Ao(t.centersNormalized,t.halfBoxSize),t.startNormalized=vo(t.starts,TZ),t.endNormalized=vo(t.ends,TZ);const n=xl([t.startNormalized,t.endNormalized],1);return Object.keys(t).forEach((e=>io(t[e]))),n}(l.batch),l.logits=nl(l.batch,[0,0],[-1,1]),l.sigmoid=tl(l.logits),l.scores=Ep(l.sigmoid),l.nms=await yh.nonMaxSuppressionAsync(l.boxes,l.scores,(null==(n=t.face.detector)?void 0:n.maxDetected)||0,(null==(a=t.face.detector)?void 0:a.iouThreshold)||0,(null==(r=t.face.detector)?void 0:r.minConfidence)||0);const d=await l.nms.array(),p=[],c=await l.scores.data();for(let n=0;n<d.length;n++){const a=c[d[n]];if(a>((null==(i=t.face.detector)?void 0:i.minConfidence)||0)){const r={};r.bbox=nl(l.boxes,[d[n],0],[1,-1]),r.slice=nl(l.batch,[d[n],5],[1,-1]),r.squeeze=Ep(r.slice),r.landmarks=Zo(r.squeeze,[6,-1]);const i=await r.bbox.data(),u={startPoint:[i[0],i[1]],endPoint:[i[2],i[3]],landmarks:await r.landmarks.array(),confidence:a};r.anchor=nl(NZ,[d[n],0],[1,2]);const c=await r.anchor.data(),h=dZ(u,[(e.shape[2]||0)/CZ,(e.shape[1]||0)/CZ],c),f=cZ(h,t.face.scale||1.4),m=hZ(f);m.size[0]>((null==(s=t.face.detector)?void 0:s.minSize)||0)&&m.size[1]>((null==(o=t.face.detector)?void 0:o.minSize)||0)&&p.push(m),Object.keys(r).forEach((e=>io(r[e])))}}return Object.keys(l).forEach((e=>io(l[e]))),p}(e,t),BZ.timestamp=Gj(),BZ.skipped=0);const f=[],m=[];let y=0;const g=UZ;for(let n=0;n<BZ.boxes.length;n++){const a=BZ.boxes[n];let c,h=0;const A={id:y++,mesh:[],meshRaw:[],box:[0,0,0,0],boxRaw:[0,0,0,0],score:0,boxScore:0,faceScore:0,size:[0,0],annotations:{}};if([h,c,A.tensor]=wZ(null==(r=t.face.detector)?void 0:r.rotation,a,e,(null==(i=t.face.mesh)?void 0:i.enabled)?UZ:CZ),t.filter.equalization){const e=A.tensor?await aq(A.tensor):void 0;io(A.tensor),e&&(A.tensor=e)}if(A.boxScore=Math.round(100*a.confidence)/100,(null==(s=t.face.mesh)?void 0:s.enabled)&&(null==VZ?void 0:VZ.executor))if(VZ){if((null==(o=t.face.attention)?void 0:o.enabled)&&!gq.kernels.includes("atan2"))return t.face.attention.enabled=!1,io(A.tensor),f;const n=VZ.execute(A.tensor),r=n.find((e=>1===e.shape[e.shape.length-1])),i=await r.data();if(A.faceScore=Math.round(100*i[0])/100,A.faceScore<((null==(l=t.face.detector)?void 0:l.minConfidence)||1)){if(a.confidence=A.faceScore,t.face.mesh.keepInvalid){A.box=lZ(a,e),A.boxRaw=uZ(a,e),A.size=a.size,A.score=A.boxScore,A.mesh=a.landmarks,A.meshRaw=A.mesh.map((t=>[t[0]/(e.shape[2]||1),t[1]/(e.shape[1]||1),(t[2]||0)/g]));for(const e of Object.keys(qX))A.annotations[e]=[A.mesh[qX[e]]]}}else{const r=n.find((e=>1404===e.shape[e.shape.length-1])),i=Zo(r,[-1,3]);let s=await i.array();io(i),(null==(u=t.face.attention)?void 0:u.enabled)?s=await zZ(s,n):(null==(d=t.face.iris)?void 0:d.enabled)&&(s=await DZ(s,A.tensor,UZ)),A.mesh=vZ(s,a,h,c,UZ),A.meshRaw=A.mesh.map((t=>[t[0]/(e.shape[2]||0),t[1]/(e.shape[1]||0),(t[2]||0)/g]));for(const e of Object.keys(HX))A.annotations[e]=HX[e].map((e=>A.mesh[e]));A.score=A.faceScore;const o={...SZ(A.mesh,a),confidence:a.confidence,landmarks:a.landmarks,size:a.size};A.box=lZ(o,e),A.boxRaw=uZ(o,e),A.size=o.size,m.push(o)}io(n)}else t.debug&&Uj("face mesh detection requested, but model is not loaded");else{A.box=lZ(a,e),A.boxRaw=uZ(a,e),A.score=A.boxScore,A.size=a.size,A.mesh=a.landmarks,A.meshRaw=A.mesh.map((t=>[t[0]/(e.shape[2]||0),t[1]/(e.shape[1]||0),(t[2]||0)/g]));for(const e of Object.keys(qX))A.annotations[e]=[A.mesh[qX[e]]]}A.score>((null==(p=t.face.detector)?void 0:p.minConfidence)||1)?f.push(A):io(A.tensor)}return BZ.boxes=m,f}(t,e.config);if(e.performance.face=gq.perfadd?(e.performance.face||0)+Math.trunc(Gj()-F):Math.trunc(Gj()-F),!t.shape||4!==t.shape.length)return[];if(!P)return[];for(let D=0;D<P.length;D++){if(e.analyze("Get Face"),!P[D].tensor||P[D].tensor.isDisposedInternal){Uj("Face object is disposed:",P[D].tensor);continue}if(null==(n=e.config.face.detector)?void 0:n.mask){const e=await oY(P[D]);io(P[D].tensor),e&&(P[D].tensor=e)}const z=P[D].mesh&&P[D].mesh.length>200?JY(P[D],[t.shape[2],t.shape[1]]):null;e.analyze("Start Emotion:"),e.config.async?T=(null==(a=e.config.face.emotion)?void 0:a.enabled)?JZ(P[D].tensor||Zi([]),e.config,D,P.length):[]:(e.state="run:emotion",F=Gj(),T=(null==(r=e.config.face.emotion)?void 0:r.enabled)?await JZ(P[D].tensor||Zi([]),e.config,D,P.length):[],e.performance.emotion=gq.perfadd?(e.performance.emotion||0)+Math.trunc(Gj()-F):Math.trunc(Gj()-F)),e.analyze("End Emotion:"),e.analyze("Start AntiSpoof:"),e.config.async?$=(null==(i=e.config.face.antispoof)?void 0:i.enabled)?hY(P[D].tensor||Zi([]),e.config,D,P.length):0:(e.state="run:antispoof",F=Gj(),$=(null==(s=e.config.face.antispoof)?void 0:s.enabled)?await hY(P[D].tensor||Zi([]),e.config,D,P.length):0,e.performance.antispoof=gq.perfadd?(e.performance.antispoof||0)+Math.trunc(Gj()-F):Math.trunc(Gj()-F)),e.analyze("End AntiSpoof:"),e.analyze("Start Liveness:"),e.config.async?M=(null==(o=e.config.face.liveness)?void 0:o.enabled)?xY(P[D].tensor||Zi([]),e.config,D,P.length):0:(e.state="run:liveness",F=Gj(),M=(null==(l=e.config.face.liveness)?void 0:l.enabled)?await xY(P[D].tensor||Zi([]),e.config,D,P.length):0,e.performance.liveness=gq.perfadd?(e.performance.antispoof||0)+Math.trunc(Gj()-F):Math.trunc(Gj()-F)),e.analyze("End Liveness:"),e.analyze("Start GEAR:"),e.config.async?N=(null==(u=e.config.face.gear)?void 0:u.enabled)?CY(P[D].tensor||Zi([]),e.config,D,P.length):null:(e.state="run:gear",F=Gj(),N=(null==(d=e.config.face.gear)?void 0:d.enabled)?await CY(P[D].tensor||Zi([]),e.config,D,P.length):null,e.performance.gear=Math.trunc(Gj()-F)),e.analyze("End GEAR:"),e.analyze("Start SSRNet:"),e.config.async?(S=(null==(p=e.config.face.ssrnet)?void 0:p.enabled)?_Y(P[D].tensor||Zi([]),e.config,D,P.length):null,C=(null==(c=e.config.face.ssrnet)?void 0:c.enabled)?WY(P[D].tensor||Zi([]),e.config,D,P.length):null):(e.state="run:ssrnet",F=Gj(),S=(null==(h=e.config.face.ssrnet)?void 0:h.enabled)?await _Y(P[D].tensor||Zi([]),e.config,D,P.length):null,C=(null==(f=e.config.face.ssrnet)?void 0:f.enabled)?await WY(P[D].tensor||Zi([]),e.config,D,P.length):null,e.performance.ssrnet=Math.trunc(Gj()-F)),e.analyze("End SSRNet:"),e.analyze("Start MobileFaceNet:"),e.config.async?E=(null==(m=e.config.face.mobilefacenet)?void 0:m.enabled)?jY(P[D].tensor||Zi([]),e.config,D,P.length):null:(e.state="run:mobilefacenet",F=Gj(),E=(null==(y=e.config.face.mobilefacenet)?void 0:y.enabled)?await jY(P[D].tensor||Zi([]),e.config,D,P.length):null,e.performance.mobilefacenet=Math.trunc(Gj()-F)),e.analyze("End MobileFaceNet:"),e.analyze("Start InsightFace:"),e.config.async?R=(null==(g=e.config.face.insightface)?void 0:g.enabled)?YY(P[D].tensor||Zi([]),e.config,D,P.length):null:(e.state="run:mobilefacenet",F=Gj(),R=(null==(A=e.config.face.insightface)?void 0:A.enabled)?await YY(P[D].tensor||Zi([]),e.config,D,P.length):null,e.performance.mobilefacenet=Math.trunc(Gj()-F)),e.analyze("End InsightFace:"),e.analyze("Start Description:"),e.config.async?_=aY(P[D].tensor||Zi([]),e.config,D,P.length):(e.state="run:description",F=Gj(),_=await aY(P[D].tensor||Zi([]),e.config,D,P.length),e.performance.description=gq.perfadd?(e.performance.description||0)+Math.trunc(Gj()-F):Math.trunc(Gj()-F)),e.analyze("End Description:"),e.config.async&&([S,C,T,E,R,_,N,$,M]=await Promise.all([S,C,T,E,R,_,N,$,M])),e.analyze("Finish Face:"),(null==(x=e.config.face.ssrnet)?void 0:x.enabled)&&S&&C&&(_={..._,age:S.age,gender:C.gender,genderScore:C.genderScore}),(null==(b=e.config.face.gear)?void 0:b.enabled)&&N&&(_={..._,age:N.age,gender:N.gender,genderScore:N.genderScore,race:N.race}),(null==(v=e.config.face.mobilefacenet)?void 0:v.enabled)&&E&&(_.descriptor=E),(null==(w=e.config.face.insightface)?void 0:w.enabled)&&R&&(_.descriptor=R);const L=(null==(k=e.config.face.iris)?void 0:k.enabled)?QY(P[D],t.shape[2]):0,W=(null==(I=e.config.face.detector)?void 0:I.return)?Ep(P[D].tensor):null;io(P[D].tensor),P[D].tensor&&delete P[D].tensor;const B={...P[D],id:D};_.age&&(B.age=_.age),_.gender&&(B.gender=_.gender),_.genderScore&&(B.genderScore=_.genderScore),_.descriptor&&(B.embedding=_.descriptor),_.race&&(B.race=_.race),T&&(B.emotion=T),$&&(B.real=$),M&&(B.live=M),L>0&&(B.distance=L),z&&(B.rotation=z),W&&(B.tensor=W),O.push(B),e.analyze("End Face")}return e.analyze("End FaceMesh:"),e.config.async&&(e.performance.face&&delete e.performance.face,e.performance.age&&delete e.performance.age,e.performance.gender&&delete e.performance.gender,e.performance.emotion&&delete e.performance.emotion),O},tJ={thumb:0,index:1,middle:2,ring:3,pinky:4,all:[0,1,2,3,4],nameMapping:{0:"thumb",1:"index",2:"middle",3:"ring",4:"pinky"},pointsMapping:{0:[[0,1],[1,2],[2,3],[3,4]],1:[[0,5],[5,6],[6,7],[7,8]],2:[[0,9],[9,10],[10,11],[11,12]],3:[[0,13],[13,14],[14,15],[15,16]],4:[[0,17],[17,18],[18,19],[19,20]]},getName:e=>tJ.nameMapping[e],getPoints:e=>tJ.pointsMapping[e]},nJ={none:0,half:1,full:2,nameMapping:{0:"none",1:"half",2:"full"},getName:e=>nJ.nameMapping[e]},aJ={verticalUp:0,verticalDown:1,horizontalLeft:2,horizontalRight:3,diagonalUpRight:4,diagonalUpLeft:5,diagonalDownRight:6,diagonalDownLeft:7,nameMapping:{0:"verticalUp",1:"verticalDown",2:"horizontalLeft",3:"horizontalRight",4:"diagonalUpRight",5:"diagonalUpLeft",6:"diagonalDownRight",7:"diagonalDownLeft"},getName:e=>aJ.nameMapping[e]},rJ=class{constructor(e){d(this,"name"),d(this,"curls"),d(this,"directions"),d(this,"weights"),d(this,"weightsRelative"),this.name=e,this.curls={},this.directions={},this.weights=[1,1,1,1,1],this.weightsRelative=[1,1,1,1,1]}curl(e,t,n){void 0===this.curls[e]&&(this.curls[e]=[]),this.curls[e].push([t,n])}direction(e,t,n){this.directions[e]||(this.directions[e]=[]),this.directions[e].push([t,n])}weight(e,t){this.weights[e]=t;const n=this.weights.reduce(((e,t)=>e+t),0);this.weightsRelative=this.weights.map((e=>5*e/n))}matchAgainst(e,t){let n=0;for(const t in e){const a=e[t],r=this.curls[t];if(void 0!==r){for(const[e,i]of r)if(a===e){n+=i*this.weightsRelative[t];break}}else n+=this.weightsRelative[t]}for(const e in t){const a=t[e],r=this.directions[e];if(void 0!==r){for(const[t,i]of r)if(a===t){n+=i*this.weightsRelative[e];break}}else n+=this.weightsRelative[e]}return n/10}},{thumb:iJ,index:sJ,middle:oJ,ring:lJ,pinky:uJ}=tJ,{none:dJ,half:pJ,full:cJ}=nJ,{verticalUp:hJ,verticalDown:fJ,horizontalLeft:mJ,horizontalRight:yJ,diagonalUpRight:gJ,diagonalUpLeft:AJ,diagonalDownRight:xJ,diagonalDownLeft:bJ}=aJ,vJ=new rJ("thumbs up");vJ.curl(iJ,dJ,1),vJ.direction(iJ,hJ,1),vJ.direction(iJ,AJ,.25),vJ.direction(iJ,gJ,.25);for(const e of[tJ.index,tJ.middle,tJ.ring,tJ.pinky])vJ.curl(e,cJ,1),vJ.direction(e,mJ,1),vJ.direction(e,yJ,1);var wJ=new rJ("victory");wJ.curl(iJ,pJ,.5),wJ.curl(iJ,dJ,.5),wJ.direction(iJ,hJ,1),wJ.direction(iJ,AJ,1),wJ.curl(sJ,dJ,1),wJ.direction(sJ,hJ,.75),wJ.direction(sJ,AJ,1),wJ.curl(oJ,dJ,1),wJ.direction(oJ,hJ,1),wJ.direction(oJ,AJ,.75),wJ.curl(lJ,cJ,1),wJ.direction(lJ,hJ,.2),wJ.direction(lJ,AJ,1),wJ.direction(lJ,mJ,.2),wJ.curl(uJ,cJ,1),wJ.direction(uJ,hJ,.2),wJ.direction(uJ,AJ,1),wJ.direction(uJ,mJ,.2),wJ.weight(sJ,2),wJ.weight(oJ,2);var kJ=new rJ("point");kJ.curl(iJ,cJ,1),kJ.curl(sJ,dJ,.5),kJ.curl(oJ,cJ,.5),kJ.curl(lJ,cJ,.5),kJ.curl(uJ,cJ,.5),kJ.weight(sJ,2),kJ.weight(oJ,2);var IJ=new rJ("middle finger");IJ.curl(iJ,dJ,1),IJ.curl(sJ,cJ,.5),IJ.curl(oJ,cJ,.5),IJ.curl(lJ,cJ,.5),IJ.curl(uJ,cJ,.5),IJ.weight(sJ,2),IJ.weight(oJ,2);var SJ=new rJ("open palm");SJ.curl(iJ,dJ,.75),SJ.curl(sJ,dJ,.75),SJ.curl(oJ,dJ,.75),SJ.curl(lJ,dJ,.75),SJ.curl(uJ,dJ,.75);var NJ=[vJ,wJ,kJ,IJ,SJ],CJ={HALF_CURL_START_LIMIT:60,NO_CURL_START_LIMIT:130,DISTANCE_VOTE_POWER:1.1,SINGLE_ANGLE_VOTE_POWER:.9,TOTAL_ANGLE_VOTE_POWER:1.6};function TJ(e,t,n,a){const r=(t-a)/(e-n);let i=180*Math.atan(r)/Math.PI;return i<=0?i=-i:i>0&&(i=180-i),i}function EJ(e,t){if(!e||!t)return[0,0];const n=TJ(e[0],e[1],t[0],t[1]);return 2===e.length?n:[n,TJ(e[1],e[2],t[1],t[2])]}function RJ(e,t=1){let n=0,a=0,r=0;return e>=75&&e<=105?n=1*t:e>=25&&e<=155?a=1*t:r=1*t,[n,a,r]}function $J(e,t,n){const a=e[0]-t[0],r=e[0]-n[0],i=t[0]-n[0],s=e[1]-t[1],o=e[1]-n[1],l=t[1]-n[1],u=e[2]-t[2],d=e[2]-n[2],p=t[2]-n[2],c=Math.sqrt(a*a+s*s+u*u),h=Math.sqrt(r*r+o*o+d*d),f=Math.sqrt(i*i+l*l+p*p);let m=(f*f+c*c-h*h)/(2*f*c);m>1?m=1:m<-1&&(m=-1);let y,g=Math.acos(m);return g=57.2958*g%180,y=g>CJ.NO_CURL_START_LIMIT?nJ.none:g>CJ.HALF_CURL_START_LIMIT?nJ.half:nJ.full,y}function MJ(e,t,n,a){let r;return r=a===Math.abs(e)?e>0?aJ.horizontalLeft:aJ.horizontalRight:a===Math.abs(t)?t>0?aJ.horizontalLeft:aJ.horizontalRight:n>0?aJ.horizontalLeft:aJ.horizontalRight,r}function _J(e,t,n,a){let r;return r=a===Math.abs(e)?e<0?aJ.verticalDown:aJ.verticalUp:a===Math.abs(t)?t<0?aJ.verticalDown:aJ.verticalUp:n<0?aJ.verticalDown:aJ.verticalUp,r}function FJ(e,t,n,a){const r=e[0]-t[0],i=e[0]-n[0],s=t[0]-n[0],o=e[1]-t[1],l=e[1]-n[1],u=t[1]-n[1],d=Math.max(Math.abs(r),Math.abs(i),Math.abs(s)),p=Math.max(Math.abs(o),Math.abs(l),Math.abs(u));let c=0,h=0,f=0;const m=p/(d+1e-5);m>1.5?c+=CJ.DISTANCE_VOTE_POWER:m>.66?h+=CJ.DISTANCE_VOTE_POWER:f+=CJ.DISTANCE_VOTE_POWER;const y=Math.sqrt(r*r+o*o),g=Math.sqrt(i*i+l*l),A=Math.sqrt(s*s+u*u),x=Math.max(y,g,A);let b=e[0],v=e[1],w=n[0],k=n[1];x===y?(w=n[0],k=n[1]):x===A&&(b=t[0],v=t[1]);const I=RJ(EJ([b,v],[w,k]),CJ.TOTAL_ANGLE_VOTE_POWER);c+=I[0],h+=I[1],f+=I[2];for(const e of a){const t=RJ(e,CJ.SINGLE_ANGLE_VOTE_POWER);c+=t[0],h+=t[1],f+=t[2]}let S;return S=c===Math.max(c,h,f)?_J(l,o,u,p):f===Math.max(h,f)?MJ(i,r,s,d):function(e,t,n,a,r,i,s,o){let l;const u=_J(e,t,n,a),d=MJ(r,i,s,o);return l=u===aJ.verticalUp?d===aJ.horizontalLeft?aJ.diagonalUpLeft:aJ.diagonalUpRight:d===aJ.horizontalLeft?aJ.diagonalDownLeft:aJ.diagonalDownRight,l}(l,o,u,p,i,r,s,d),S}function OJ(e){const t=[],n=[],a=[],r=[];if(!e)return{curls:a,directions:r};for(const a of tJ.all){const r=tJ.getPoints(a),i=[],s=[];for(const t of r){const n=EJ(e[t[0]],e[t[1]]),a=n[0],r=n[1];i.push(a),s.push(r)}t.push(i),n.push(s)}for(const n of tJ.all){const i=n===tJ.thumb?1:0,s=tJ.getPoints(n),o=e[s[i][0]],l=e[s[i+1][1]],u=e[s[3][1]],d=$J(o,l,u),p=FJ(o,l,u,t[n].slice(i));a[n]=d,r[n]=p}return{curls:a,directions:r}}function PJ(e){if(!e||0===e.length)return null;const t=OJ(e),n={};for(const e of tJ.all)n[tJ.getName(e)]={curl:nJ.getName(t.curls[e]),direction:aJ.getName(t.directions[e])};return n}function DJ(e){const t=[];if(!e||0===e.length)return t;const n=OJ(e);for(const e of NJ){const a=e.matchAgainst(n.curls,n.directions);a>=.7&&t.push({name:e.name,confidence:a})}return t}var zJ=e=>{if(!e)return[];const t=[];for(let n=0;n<e.length;n++){const a=e[n].keypoints.find((e=>"leftWrist"===e.part)),r=e[n].keypoints.find((e=>"rightWrist"===e.part)),i=e[n].keypoints.find((e=>"nose"===e.part));i&&a&&r&&a.position[1]<i.position[1]&&r.position[1]<i.position[1]?t.push({body:n,gesture:"i give up"}):i&&a&&a.position[1]<i.position[1]?t.push({body:n,gesture:"raise left hand"}):i&&r&&r.position[1]<i.position[1]&&t.push({body:n,gesture:"raise right hand"});const s=e[n].keypoints.find((e=>"leftShoulder"===e.part)),o=e[n].keypoints.find((e=>"rightShoulder"===e.part));s&&o&&Math.abs(s.positionRaw[1]-o.positionRaw[1])>.1&&t.push({body:n,gesture:"leaning "+(s.position[1]>o.position[1]?"left":"right")})}return t},LJ=e=>{if(!e)return[];const t=[];for(let n=0;n<e.length;n++)if(e[n].mesh&&e[n].mesh.length>450){const a=(e[n].mesh[33][2]||0)-(e[n].mesh[263][2]||0),r=e[n].mesh[33][0]-e[n].mesh[263][0];Math.abs(a/r)<=.15?t.push({face:n,gesture:"facing center"}):t.push({face:n,gesture:"facing "+(a<0?"left":"right")}),Math.abs(e[n].mesh[374][1]-e[n].mesh[386][1])/Math.abs(e[n].mesh[443][1]-e[n].mesh[450][1])<.2&&t.push({face:n,gesture:"blink left eye"}),Math.abs(e[n].mesh[145][1]-e[n].mesh[159][1])/Math.abs(e[n].mesh[223][1]-e[n].mesh[230][1])<.2&&t.push({face:n,gesture:"blink right eye"});const i=Math.min(100,500*Math.abs(e[n].mesh[13][1]-e[n].mesh[14][1])/Math.abs(e[n].mesh[10][1]-e[n].mesh[152][1]));i>10&&t.push({face:n,gesture:`mouth ${Math.trunc(i)}% open`});const s=e[n].mesh[152][2]||0;Math.abs(s)>10&&t.push({face:n,gesture:"head "+(s<0?"up":"down")})}return t},WJ=e=>{var t,n,a,r;if(!e)return[];const i=[];for(let s=0;s<e.length;s++){if(!(null==(n=null==(t=e[s].annotations)?void 0:t.leftEyeIris)?void 0:n[0])||!(null==(r=null==(a=e[s].annotations)?void 0:a.rightEyeIris)?void 0:r[0]))continue;const o=e[s].annotations.leftEyeIris[3][0]-e[s].annotations.leftEyeIris[1][0],l=e[s].annotations.leftEyeIris[4][1]-e[s].annotations.leftEyeIris[2][1],u=Math.abs(o*l),d=e[s].annotations.rightEyeIris[3][0]-e[s].annotations.rightEyeIris[1][0],p=e[s].annotations.rightEyeIris[4][1]-e[s].annotations.rightEyeIris[2][1],c=Math.abs(d*p);let h=!1;Math.abs(u-c)/Math.max(u,c)<.25&&(h=!0,i.push({iris:s,gesture:"facing center"}));const f=Math.abs(e[s].mesh[263][0]-e[s].annotations.leftEyeIris[0][0])/e[s].box[2],m=Math.abs(e[s].mesh[33][0]-e[s].annotations.rightEyeIris[0][0])/e[s].box[2];(f>.06||m>.06)&&(h=!1),f>m?m>.04&&i.push({iris:s,gesture:"looking right"}):f>.04&&i.push({iris:s,gesture:"looking left"});const y=Math.abs(e[s].mesh[145][1]-e[s].annotations.rightEyeIris[0][1])/e[s].box[3],g=Math.abs(e[s].mesh[374][1]-e[s].annotations.leftEyeIris[0][1])/e[s].box[3];(g<.01||y<.01||g>.022||y>.022)&&(h=!1),(g<.01||y<.01)&&i.push({iris:s,gesture:"looking down"}),(g>.022||y>.022)&&i.push({iris:s,gesture:"looking up"}),h&&i.push({iris:s,gesture:"looking center"})}return i},BJ=e=>{if(!e)return[];const t=[];for(let n=0;n<e.length;n++){const a=[];if(e[n].annotations)for(const[t,r]of Object.entries(e[n].annotations))"palmBase"!==t&&Array.isArray(r)&&r[0]&&a.push({name:t.toLowerCase(),position:r[0]});if(a&&a.length>0){const e=a.reduce(((e,t)=>(e.position[2]||0)<(t.position[2]||0)?e:t));t.push({hand:n,gesture:`${e.name} forward`});const r=a.reduce(((e,t)=>e.position[1]<t.position[1]?e:t));t.push({hand:n,gesture:`${r.name} up`})}if(e[n].keypoints){const a=DJ(e[n].keypoints);for(const e of a)t.push({hand:n,gesture:e.name})}}return t};function VJ(e){return[Math.abs(e.endPoint[0]-e.startPoint[0]),Math.abs(e.endPoint[1]-e.startPoint[1])]}function UJ(e){return[e.startPoint[0]+(e.endPoint[0]-e.startPoint[0])/2,e.startPoint[1]+(e.endPoint[1]-e.startPoint[1])/2]}function GJ(e,t,n){const a=t.shape[1],r=t.shape[2],i=[[e.startPoint[1]/a,e.startPoint[0]/r,e.endPoint[1]/a,e.endPoint[0]/r]];return yh.cropAndResize(t,i,[0],n)}function HJ(e,t){return{startPoint:[e.startPoint[0]*t[0],e.startPoint[1]*t[1]],endPoint:[e.endPoint[0]*t[0],e.endPoint[1]*t[1]],palmLandmarks:e.palmLandmarks.map((e=>[e[0]*t[0],e[1]*t[1]])),confidence:e.confidence}}function jJ(e,t=1.5){const n=UJ(e),a=VJ(e),r=[t*a[0]/2,t*a[1]/2];return{startPoint:[n[0]-r[0],n[1]-r[1]],endPoint:[n[0]+r[0],n[1]+r[1]],palmLandmarks:e.palmLandmarks}}function qJ(e){const t=UJ(e),n=VJ(e),a=Math.max(...n)/2;return{startPoint:[t[0]-a,t[1]-a],endPoint:[t[0]+a,t[1]+a],palmLandmarks:e.palmLandmarks}}function XJ(e,t){return(n=Math.PI/2-Math.atan2(-(t[1]-e[1]),t[0]-e[0]))-2*Math.PI*Math.floor((n+Math.PI)/(2*Math.PI));var n}var KJ=(e,t)=>[[1,0,e],[0,1,t],[0,0,1]];function ZJ(e,t){let n=0;for(let a=0;a<e.length;a++)n+=e[a]*t[a];return n}function YJ(e,t){const n=[];for(let a=0;a<e.length;a++)n.push(e[a][t]);return n}function JJ(e,t){const n=[],a=e.length;for(let r=0;r<a;r++){n.push([]);for(let i=0;i<a;i++)n[r].push(ZJ(e[r],YJ(t,i)))}return n}function QJ(e,t){const n=Math.cos(e),a=Math.sin(e),r=[[n,-a,0],[a,n,0],[0,0,1]],i=JJ(KJ(t[0],t[1]),r);return JJ(i,KJ(-t[0],-t[1]))}function eQ(e,t){return[ZJ(e,t[0]),ZJ(e,t[1])]}var tQ,nQ,aQ,rQ=[{x:.015625,y:.015625},{x:.015625,y:.015625},{x:.046875,y:.015625},{x:.046875,y:.015625},{x:.078125,y:.015625},{x:.078125,y:.015625},{x:.109375,y:.015625},{x:.109375,y:.015625},{x:.140625,y:.015625},{x:.140625,y:.015625},{x:.171875,y:.015625},{x:.171875,y:.015625},{x:.203125,y:.015625},{x:.203125,y:.015625},{x:.234375,y:.015625},{x:.234375,y:.015625},{x:.265625,y:.015625},{x:.265625,y:.015625},{x:.296875,y:.015625},{x:.296875,y:.015625},{x:.328125,y:.015625},{x:.328125,y:.015625},{x:.359375,y:.015625},{x:.359375,y:.015625},{x:.390625,y:.015625},{x:.390625,y:.015625},{x:.421875,y:.015625},{x:.421875,y:.015625},{x:.453125,y:.015625},{x:.453125,y:.015625},{x:.484375,y:.015625},{x:.484375,y:.015625},{x:.515625,y:.015625},{x:.515625,y:.015625},{x:.546875,y:.015625},{x:.546875,y:.015625},{x:.578125,y:.015625},{x:.578125,y:.015625},{x:.609375,y:.015625},{x:.609375,y:.015625},{x:.640625,y:.015625},{x:.640625,y:.015625},{x:.671875,y:.015625},{x:.671875,y:.015625},{x:.703125,y:.015625},{x:.703125,y:.015625},{x:.734375,y:.015625},{x:.734375,y:.015625},{x:.765625,y:.015625},{x:.765625,y:.015625},{x:.796875,y:.015625},{x:.796875,y:.015625},{x:.828125,y:.015625},{x:.828125,y:.015625},{x:.859375,y:.015625},{x:.859375,y:.015625},{x:.890625,y:.015625},{x:.890625,y:.015625},{x:.921875,y:.015625},{x:.921875,y:.015625},{x:.953125,y:.015625},{x:.953125,y:.015625},{x:.984375,y:.015625},{x:.984375,y:.015625},{x:.015625,y:.046875},{x:.015625,y:.046875},{x:.046875,y:.046875},{x:.046875,y:.046875},{x:.078125,y:.046875},{x:.078125,y:.046875},{x:.109375,y:.046875},{x:.109375,y:.046875},{x:.140625,y:.046875},{x:.140625,y:.046875},{x:.171875,y:.046875},{x:.171875,y:.046875},{x:.203125,y:.046875},{x:.203125,y:.046875},{x:.234375,y:.046875},{x:.234375,y:.046875},{x:.265625,y:.046875},{x:.265625,y:.046875},{x:.296875,y:.046875},{x:.296875,y:.046875},{x:.328125,y:.046875},{x:.328125,y:.046875},{x:.359375,y:.046875},{x:.359375,y:.046875},{x:.390625,y:.046875},{x:.390625,y:.046875},{x:.421875,y:.046875},{x:.421875,y:.046875},{x:.453125,y:.046875},{x:.453125,y:.046875},{x:.484375,y:.046875},{x:.484375,y:.046875},{x:.515625,y:.046875},{x:.515625,y:.046875},{x:.546875,y:.046875},{x:.546875,y:.046875},{x:.578125,y:.046875},{x:.578125,y:.046875},{x:.609375,y:.046875},{x:.609375,y:.046875},{x:.640625,y:.046875},{x:.640625,y:.046875},{x:.671875,y:.046875},{x:.671875,y:.046875},{x:.703125,y:.046875},{x:.703125,y:.046875},{x:.734375,y:.046875},{x:.734375,y:.046875},{x:.765625,y:.046875},{x:.765625,y:.046875},{x:.796875,y:.046875},{x:.796875,y:.046875},{x:.828125,y:.046875},{x:.828125,y:.046875},{x:.859375,y:.046875},{x:.859375,y:.046875},{x:.890625,y:.046875},{x:.890625,y:.046875},{x:.921875,y:.046875},{x:.921875,y:.046875},{x:.953125,y:.046875},{x:.953125,y:.046875},{x:.984375,y:.046875},{x:.984375,y:.046875},{x:.015625,y:.078125},{x:.015625,y:.078125},{x:.046875,y:.078125},{x:.046875,y:.078125},{x:.078125,y:.078125},{x:.078125,y:.078125},{x:.109375,y:.078125},{x:.109375,y:.078125},{x:.140625,y:.078125},{x:.140625,y:.078125},{x:.171875,y:.078125},{x:.171875,y:.078125},{x:.203125,y:.078125},{x:.203125,y:.078125},{x:.234375,y:.078125},{x:.234375,y:.078125},{x:.265625,y:.078125},{x:.265625,y:.078125},{x:.296875,y:.078125},{x:.296875,y:.078125},{x:.328125,y:.078125},{x:.328125,y:.078125},{x:.359375,y:.078125},{x:.359375,y:.078125},{x:.390625,y:.078125},{x:.390625,y:.078125},{x:.421875,y:.078125},{x:.421875,y:.078125},{x:.453125,y:.078125},{x:.453125,y:.078125},{x:.484375,y:.078125},{x:.484375,y:.078125},{x:.515625,y:.078125},{x:.515625,y:.078125},{x:.546875,y:.078125},{x:.546875,y:.078125},{x:.578125,y:.078125},{x:.578125,y:.078125},{x:.609375,y:.078125},{x:.609375,y:.078125},{x:.640625,y:.078125},{x:.640625,y:.078125},{x:.671875,y:.078125},{x:.671875,y:.078125},{x:.703125,y:.078125},{x:.703125,y:.078125},{x:.734375,y:.078125},{x:.734375,y:.078125},{x:.765625,y:.078125},{x:.765625,y:.078125},{x:.796875,y:.078125},{x:.796875,y:.078125},{x:.828125,y:.078125},{x:.828125,y:.078125},{x:.859375,y:.078125},{x:.859375,y:.078125},{x:.890625,y:.078125},{x:.890625,y:.078125},{x:.921875,y:.078125},{x:.921875,y:.078125},{x:.953125,y:.078125},{x:.953125,y:.078125},{x:.984375,y:.078125},{x:.984375,y:.078125},{x:.015625,y:.109375},{x:.015625,y:.109375},{x:.046875,y:.109375},{x:.046875,y:.109375},{x:.078125,y:.109375},{x:.078125,y:.109375},{x:.109375,y:.109375},{x:.109375,y:.109375},{x:.140625,y:.109375},{x:.140625,y:.109375},{x:.171875,y:.109375},{x:.171875,y:.109375},{x:.203125,y:.109375},{x:.203125,y:.109375},{x:.234375,y:.109375},{x:.234375,y:.109375},{x:.265625,y:.109375},{x:.265625,y:.109375},{x:.296875,y:.109375},{x:.296875,y:.109375},{x:.328125,y:.109375},{x:.328125,y:.109375},{x:.359375,y:.109375},{x:.359375,y:.109375},{x:.390625,y:.109375},{x:.390625,y:.109375},{x:.421875,y:.109375},{x:.421875,y:.109375},{x:.453125,y:.109375},{x:.453125,y:.109375},{x:.484375,y:.109375},{x:.484375,y:.109375},{x:.515625,y:.109375},{x:.515625,y:.109375},{x:.546875,y:.109375},{x:.546875,y:.109375},{x:.578125,y:.109375},{x:.578125,y:.109375},{x:.609375,y:.109375},{x:.609375,y:.109375},{x:.640625,y:.109375},{x:.640625,y:.109375},{x:.671875,y:.109375},{x:.671875,y:.109375},{x:.703125,y:.109375},{x:.703125,y:.109375},{x:.734375,y:.109375},{x:.734375,y:.109375},{x:.765625,y:.109375},{x:.765625,y:.109375},{x:.796875,y:.109375},{x:.796875,y:.109375},{x:.828125,y:.109375},{x:.828125,y:.109375},{x:.859375,y:.109375},{x:.859375,y:.109375},{x:.890625,y:.109375},{x:.890625,y:.109375},{x:.921875,y:.109375},{x:.921875,y:.109375},{x:.953125,y:.109375},{x:.953125,y:.109375},{x:.984375,y:.109375},{x:.984375,y:.109375},{x:.015625,y:.140625},{x:.015625,y:.140625},{x:.046875,y:.140625},{x:.046875,y:.140625},{x:.078125,y:.140625},{x:.078125,y:.140625},{x:.109375,y:.140625},{x:.109375,y:.140625},{x:.140625,y:.140625},{x:.140625,y:.140625},{x:.171875,y:.140625},{x:.171875,y:.140625},{x:.203125,y:.140625},{x:.203125,y:.140625},{x:.234375,y:.140625},{x:.234375,y:.140625},{x:.265625,y:.140625},{x:.265625,y:.140625},{x:.296875,y:.140625},{x:.296875,y:.140625},{x:.328125,y:.140625},{x:.328125,y:.140625},{x:.359375,y:.140625},{x:.359375,y:.140625},{x:.390625,y:.140625},{x:.390625,y:.140625},{x:.421875,y:.140625},{x:.421875,y:.140625},{x:.453125,y:.140625},{x:.453125,y:.140625},{x:.484375,y:.140625},{x:.484375,y:.140625},{x:.515625,y:.140625},{x:.515625,y:.140625},{x:.546875,y:.140625},{x:.546875,y:.140625},{x:.578125,y:.140625},{x:.578125,y:.140625},{x:.609375,y:.140625},{x:.609375,y:.140625},{x:.640625,y:.140625},{x:.640625,y:.140625},{x:.671875,y:.140625},{x:.671875,y:.140625},{x:.703125,y:.140625},{x:.703125,y:.140625},{x:.734375,y:.140625},{x:.734375,y:.140625},{x:.765625,y:.140625},{x:.765625,y:.140625},{x:.796875,y:.140625},{x:.796875,y:.140625},{x:.828125,y:.140625},{x:.828125,y:.140625},{x:.859375,y:.140625},{x:.859375,y:.140625},{x:.890625,y:.140625},{x:.890625,y:.140625},{x:.921875,y:.140625},{x:.921875,y:.140625},{x:.953125,y:.140625},{x:.953125,y:.140625},{x:.984375,y:.140625},{x:.984375,y:.140625},{x:.015625,y:.171875},{x:.015625,y:.171875},{x:.046875,y:.171875},{x:.046875,y:.171875},{x:.078125,y:.171875},{x:.078125,y:.171875},{x:.109375,y:.171875},{x:.109375,y:.171875},{x:.140625,y:.171875},{x:.140625,y:.171875},{x:.171875,y:.171875},{x:.171875,y:.171875},{x:.203125,y:.171875},{x:.203125,y:.171875},{x:.234375,y:.171875},{x:.234375,y:.171875},{x:.265625,y:.171875},{x:.265625,y:.171875},{x:.296875,y:.171875},{x:.296875,y:.171875},{x:.328125,y:.171875},{x:.328125,y:.171875},{x:.359375,y:.171875},{x:.359375,y:.171875},{x:.390625,y:.171875},{x:.390625,y:.171875},{x:.421875,y:.171875},{x:.421875,y:.171875},{x:.453125,y:.171875},{x:.453125,y:.171875},{x:.484375,y:.171875},{x:.484375,y:.171875},{x:.515625,y:.171875},{x:.515625,y:.171875},{x:.546875,y:.171875},{x:.546875,y:.171875},{x:.578125,y:.171875},{x:.578125,y:.171875},{x:.609375,y:.171875},{x:.609375,y:.171875},{x:.640625,y:.171875},{x:.640625,y:.171875},{x:.671875,y:.171875},{x:.671875,y:.171875},{x:.703125,y:.171875},{x:.703125,y:.171875},{x:.734375,y:.171875},{x:.734375,y:.171875},{x:.765625,y:.171875},{x:.765625,y:.171875},{x:.796875,y:.171875},{x:.796875,y:.171875},{x:.828125,y:.171875},{x:.828125,y:.171875},{x:.859375,y:.171875},{x:.859375,y:.171875},{x:.890625,y:.171875},{x:.890625,y:.171875},{x:.921875,y:.171875},{x:.921875,y:.171875},{x:.953125,y:.171875},{x:.953125,y:.171875},{x:.984375,y:.171875},{x:.984375,y:.171875},{x:.015625,y:.203125},{x:.015625,y:.203125},{x:.046875,y:.203125},{x:.046875,y:.203125},{x:.078125,y:.203125},{x:.078125,y:.203125},{x:.109375,y:.203125},{x:.109375,y:.203125},{x:.140625,y:.203125},{x:.140625,y:.203125},{x:.171875,y:.203125},{x:.171875,y:.203125},{x:.203125,y:.203125},{x:.203125,y:.203125},{x:.234375,y:.203125},{x:.234375,y:.203125},{x:.265625,y:.203125},{x:.265625,y:.203125},{x:.296875,y:.203125},{x:.296875,y:.203125},{x:.328125,y:.203125},{x:.328125,y:.203125},{x:.359375,y:.203125},{x:.359375,y:.203125},{x:.390625,y:.203125},{x:.390625,y:.203125},{x:.421875,y:.203125},{x:.421875,y:.203125},{x:.453125,y:.203125},{x:.453125,y:.203125},{x:.484375,y:.203125},{x:.484375,y:.203125},{x:.515625,y:.203125},{x:.515625,y:.203125},{x:.546875,y:.203125},{x:.546875,y:.203125},{x:.578125,y:.203125},{x:.578125,y:.203125},{x:.609375,y:.203125},{x:.609375,y:.203125},{x:.640625,y:.203125},{x:.640625,y:.203125},{x:.671875,y:.203125},{x:.671875,y:.203125},{x:.703125,y:.203125},{x:.703125,y:.203125},{x:.734375,y:.203125},{x:.734375,y:.203125},{x:.765625,y:.203125},{x:.765625,y:.203125},{x:.796875,y:.203125},{x:.796875,y:.203125},{x:.828125,y:.203125},{x:.828125,y:.203125},{x:.859375,y:.203125},{x:.859375,y:.203125},{x:.890625,y:.203125},{x:.890625,y:.203125},{x:.921875,y:.203125},{x:.921875,y:.203125},{x:.953125,y:.203125},{x:.953125,y:.203125},{x:.984375,y:.203125},{x:.984375,y:.203125},{x:.015625,y:.234375},{x:.015625,y:.234375},{x:.046875,y:.234375},{x:.046875,y:.234375},{x:.078125,y:.234375},{x:.078125,y:.234375},{x:.109375,y:.234375},{x:.109375,y:.234375},{x:.140625,y:.234375},{x:.140625,y:.234375},{x:.171875,y:.234375},{x:.171875,y:.234375},{x:.203125,y:.234375},{x:.203125,y:.234375},{x:.234375,y:.234375},{x:.234375,y:.234375},{x:.265625,y:.234375},{x:.265625,y:.234375},{x:.296875,y:.234375},{x:.296875,y:.234375},{x:.328125,y:.234375},{x:.328125,y:.234375},{x:.359375,y:.234375},{x:.359375,y:.234375},{x:.390625,y:.234375},{x:.390625,y:.234375},{x:.421875,y:.234375},{x:.421875,y:.234375},{x:.453125,y:.234375},{x:.453125,y:.234375},{x:.484375,y:.234375},{x:.484375,y:.234375},{x:.515625,y:.234375},{x:.515625,y:.234375},{x:.546875,y:.234375},{x:.546875,y:.234375},{x:.578125,y:.234375},{x:.578125,y:.234375},{x:.609375,y:.234375},{x:.609375,y:.234375},{x:.640625,y:.234375},{x:.640625,y:.234375},{x:.671875,y:.234375},{x:.671875,y:.234375},{x:.703125,y:.234375},{x:.703125,y:.234375},{x:.734375,y:.234375},{x:.734375,y:.234375},{x:.765625,y:.234375},{x:.765625,y:.234375},{x:.796875,y:.234375},{x:.796875,y:.234375},{x:.828125,y:.234375},{x:.828125,y:.234375},{x:.859375,y:.234375},{x:.859375,y:.234375},{x:.890625,y:.234375},{x:.890625,y:.234375},{x:.921875,y:.234375},{x:.921875,y:.234375},{x:.953125,y:.234375},{x:.953125,y:.234375},{x:.984375,y:.234375},{x:.984375,y:.234375},{x:.015625,y:.265625},{x:.015625,y:.265625},{x:.046875,y:.265625},{x:.046875,y:.265625},{x:.078125,y:.265625},{x:.078125,y:.265625},{x:.109375,y:.265625},{x:.109375,y:.265625},{x:.140625,y:.265625},{x:.140625,y:.265625},{x:.171875,y:.265625},{x:.171875,y:.265625},{x:.203125,y:.265625},{x:.203125,y:.265625},{x:.234375,y:.265625},{x:.234375,y:.265625},{x:.265625,y:.265625},{x:.265625,y:.265625},{x:.296875,y:.265625},{x:.296875,y:.265625},{x:.328125,y:.265625},{x:.328125,y:.265625},{x:.359375,y:.265625},{x:.359375,y:.265625},{x:.390625,y:.265625},{x:.390625,y:.265625},{x:.421875,y:.265625},{x:.421875,y:.265625},{x:.453125,y:.265625},{x:.453125,y:.265625},{x:.484375,y:.265625},{x:.484375,y:.265625},{x:.515625,y:.265625},{x:.515625,y:.265625},{x:.546875,y:.265625},{x:.546875,y:.265625},{x:.578125,y:.265625},{x:.578125,y:.265625},{x:.609375,y:.265625},{x:.609375,y:.265625},{x:.640625,y:.265625},{x:.640625,y:.265625},{x:.671875,y:.265625},{x:.671875,y:.265625},{x:.703125,y:.265625},{x:.703125,y:.265625},{x:.734375,y:.265625},{x:.734375,y:.265625},{x:.765625,y:.265625},{x:.765625,y:.265625},{x:.796875,y:.265625},{x:.796875,y:.265625},{x:.828125,y:.265625},{x:.828125,y:.265625},{x:.859375,y:.265625},{x:.859375,y:.265625},{x:.890625,y:.265625},{x:.890625,y:.265625},{x:.921875,y:.265625},{x:.921875,y:.265625},{x:.953125,y:.265625},{x:.953125,y:.265625},{x:.984375,y:.265625},{x:.984375,y:.265625},{x:.015625,y:.296875},{x:.015625,y:.296875},{x:.046875,y:.296875},{x:.046875,y:.296875},{x:.078125,y:.296875},{x:.078125,y:.296875},{x:.109375,y:.296875},{x:.109375,y:.296875},{x:.140625,y:.296875},{x:.140625,y:.296875},{x:.171875,y:.296875},{x:.171875,y:.296875},{x:.203125,y:.296875},{x:.203125,y:.296875},{x:.234375,y:.296875},{x:.234375,y:.296875},{x:.265625,y:.296875},{x:.265625,y:.296875},{x:.296875,y:.296875},{x:.296875,y:.296875},{x:.328125,y:.296875},{x:.328125,y:.296875},{x:.359375,y:.296875},{x:.359375,y:.296875},{x:.390625,y:.296875},{x:.390625,y:.296875},{x:.421875,y:.296875},{x:.421875,y:.296875},{x:.453125,y:.296875},{x:.453125,y:.296875},{x:.484375,y:.296875},{x:.484375,y:.296875},{x:.515625,y:.296875},{x:.515625,y:.296875},{x:.546875,y:.296875},{x:.546875,y:.296875},{x:.578125,y:.296875},{x:.578125,y:.296875},{x:.609375,y:.296875},{x:.609375,y:.296875},{x:.640625,y:.296875},{x:.640625,y:.296875},{x:.671875,y:.296875},{x:.671875,y:.296875},{x:.703125,y:.296875},{x:.703125,y:.296875},{x:.734375,y:.296875},{x:.734375,y:.296875},{x:.765625,y:.296875},{x:.765625,y:.296875},{x:.796875,y:.296875},{x:.796875,y:.296875},{x:.828125,y:.296875},{x:.828125,y:.296875},{x:.859375,y:.296875},{x:.859375,y:.296875},{x:.890625,y:.296875},{x:.890625,y:.296875},{x:.921875,y:.296875},{x:.921875,y:.296875},{x:.953125,y:.296875},{x:.953125,y:.296875},{x:.984375,y:.296875},{x:.984375,y:.296875},{x:.015625,y:.328125},{x:.015625,y:.328125},{x:.046875,y:.328125},{x:.046875,y:.328125},{x:.078125,y:.328125},{x:.078125,y:.328125},{x:.109375,y:.328125},{x:.109375,y:.328125},{x:.140625,y:.328125},{x:.140625,y:.328125},{x:.171875,y:.328125},{x:.171875,y:.328125},{x:.203125,y:.328125},{x:.203125,y:.328125},{x:.234375,y:.328125},{x:.234375,y:.328125},{x:.265625,y:.328125},{x:.265625,y:.328125},{x:.296875,y:.328125},{x:.296875,y:.328125},{x:.328125,y:.328125},{x:.328125,y:.328125},{x:.359375,y:.328125},{x:.359375,y:.328125},{x:.390625,y:.328125},{x:.390625,y:.328125},{x:.421875,y:.328125},{x:.421875,y:.328125},{x:.453125,y:.328125},{x:.453125,y:.328125},{x:.484375,y:.328125},{x:.484375,y:.328125},{x:.515625,y:.328125},{x:.515625,y:.328125},{x:.546875,y:.328125},{x:.546875,y:.328125},{x:.578125,y:.328125},{x:.578125,y:.328125},{x:.609375,y:.328125},{x:.609375,y:.328125},{x:.640625,y:.328125},{x:.640625,y:.328125},{x:.671875,y:.328125},{x:.671875,y:.328125},{x:.703125,y:.328125},{x:.703125,y:.328125},{x:.734375,y:.328125},{x:.734375,y:.328125},{x:.765625,y:.328125},{x:.765625,y:.328125},{x:.796875,y:.328125},{x:.796875,y:.328125},{x:.828125,y:.328125},{x:.828125,y:.328125},{x:.859375,y:.328125},{x:.859375,y:.328125},{x:.890625,y:.328125},{x:.890625,y:.328125},{x:.921875,y:.328125},{x:.921875,y:.328125},{x:.953125,y:.328125},{x:.953125,y:.328125},{x:.984375,y:.328125},{x:.984375,y:.328125},{x:.015625,y:.359375},{x:.015625,y:.359375},{x:.046875,y:.359375},{x:.046875,y:.359375},{x:.078125,y:.359375},{x:.078125,y:.359375},{x:.109375,y:.359375},{x:.109375,y:.359375},{x:.140625,y:.359375},{x:.140625,y:.359375},{x:.171875,y:.359375},{x:.171875,y:.359375},{x:.203125,y:.359375},{x:.203125,y:.359375},{x:.234375,y:.359375},{x:.234375,y:.359375},{x:.265625,y:.359375},{x:.265625,y:.359375},{x:.296875,y:.359375},{x:.296875,y:.359375},{x:.328125,y:.359375},{x:.328125,y:.359375},{x:.359375,y:.359375},{x:.359375,y:.359375},{x:.390625,y:.359375},{x:.390625,y:.359375},{x:.421875,y:.359375},{x:.421875,y:.359375},{x:.453125,y:.359375},{x:.453125,y:.359375},{x:.484375,y:.359375},{x:.484375,y:.359375},{x:.515625,y:.359375},{x:.515625,y:.359375},{x:.546875,y:.359375},{x:.546875,y:.359375},{x:.578125,y:.359375},{x:.578125,y:.359375},{x:.609375,y:.359375},{x:.609375,y:.359375},{x:.640625,y:.359375},{x:.640625,y:.359375},{x:.671875,y:.359375},{x:.671875,y:.359375},{x:.703125,y:.359375},{x:.703125,y:.359375},{x:.734375,y:.359375},{x:.734375,y:.359375},{x:.765625,y:.359375},{x:.765625,y:.359375},{x:.796875,y:.359375},{x:.796875,y:.359375},{x:.828125,y:.359375},{x:.828125,y:.359375},{x:.859375,y:.359375},{x:.859375,y:.359375},{x:.890625,y:.359375},{x:.890625,y:.359375},{x:.921875,y:.359375},{x:.921875,y:.359375},{x:.953125,y:.359375},{x:.953125,y:.359375},{x:.984375,y:.359375},{x:.984375,y:.359375},{x:.015625,y:.390625},{x:.015625,y:.390625},{x:.046875,y:.390625},{x:.046875,y:.390625},{x:.078125,y:.390625},{x:.078125,y:.390625},{x:.109375,y:.390625},{x:.109375,y:.390625},{x:.140625,y:.390625},{x:.140625,y:.390625},{x:.171875,y:.390625},{x:.171875,y:.390625},{x:.203125,y:.390625},{x:.203125,y:.390625},{x:.234375,y:.390625},{x:.234375,y:.390625},{x:.265625,y:.390625},{x:.265625,y:.390625},{x:.296875,y:.390625},{x:.296875,y:.390625},{x:.328125,y:.390625},{x:.328125,y:.390625},{x:.359375,y:.390625},{x:.359375,y:.390625},{x:.390625,y:.390625},{x:.390625,y:.390625},{x:.421875,y:.390625},{x:.421875,y:.390625},{x:.453125,y:.390625},{x:.453125,y:.390625},{x:.484375,y:.390625},{x:.484375,y:.390625},{x:.515625,y:.390625},{x:.515625,y:.390625},{x:.546875,y:.390625},{x:.546875,y:.390625},{x:.578125,y:.390625},{x:.578125,y:.390625},{x:.609375,y:.390625},{x:.609375,y:.390625},{x:.640625,y:.390625},{x:.640625,y:.390625},{x:.671875,y:.390625},{x:.671875,y:.390625},{x:.703125,y:.390625},{x:.703125,y:.390625},{x:.734375,y:.390625},{x:.734375,y:.390625},{x:.765625,y:.390625},{x:.765625,y:.390625},{x:.796875,y:.390625},{x:.796875,y:.390625},{x:.828125,y:.390625},{x:.828125,y:.390625},{x:.859375,y:.390625},{x:.859375,y:.390625},{x:.890625,y:.390625},{x:.890625,y:.390625},{x:.921875,y:.390625},{x:.921875,y:.390625},{x:.953125,y:.390625},{x:.953125,y:.390625},{x:.984375,y:.390625},{x:.984375,y:.390625},{x:.015625,y:.421875},{x:.015625,y:.421875},{x:.046875,y:.421875},{x:.046875,y:.421875},{x:.078125,y:.421875},{x:.078125,y:.421875},{x:.109375,y:.421875},{x:.109375,y:.421875},{x:.140625,y:.421875},{x:.140625,y:.421875},{x:.171875,y:.421875},{x:.171875,y:.421875},{x:.203125,y:.421875},{x:.203125,y:.421875},{x:.234375,y:.421875},{x:.234375,y:.421875},{x:.265625,y:.421875},{x:.265625,y:.421875},{x:.296875,y:.421875},{x:.296875,y:.421875},{x:.328125,y:.421875},{x:.328125,y:.421875},{x:.359375,y:.421875},{x:.359375,y:.421875},{x:.390625,y:.421875},{x:.390625,y:.421875},{x:.421875,y:.421875},{x:.421875,y:.421875},{x:.453125,y:.421875},{x:.453125,y:.421875},{x:.484375,y:.421875},{x:.484375,y:.421875},{x:.515625,y:.421875},{x:.515625,y:.421875},{x:.546875,y:.421875},{x:.546875,y:.421875},{x:.578125,y:.421875},{x:.578125,y:.421875},{x:.609375,y:.421875},{x:.609375,y:.421875},{x:.640625,y:.421875},{x:.640625,y:.421875},{x:.671875,y:.421875},{x:.671875,y:.421875},{x:.703125,y:.421875},{x:.703125,y:.421875},{x:.734375,y:.421875},{x:.734375,y:.421875},{x:.765625,y:.421875},{x:.765625,y:.421875},{x:.796875,y:.421875},{x:.796875,y:.421875},{x:.828125,y:.421875},{x:.828125,y:.421875},{x:.859375,y:.421875},{x:.859375,y:.421875},{x:.890625,y:.421875},{x:.890625,y:.421875},{x:.921875,y:.421875},{x:.921875,y:.421875},{x:.953125,y:.421875},{x:.953125,y:.421875},{x:.984375,y:.421875},{x:.984375,y:.421875},{x:.015625,y:.453125},{x:.015625,y:.453125},{x:.046875,y:.453125},{x:.046875,y:.453125},{x:.078125,y:.453125},{x:.078125,y:.453125},{x:.109375,y:.453125},{x:.109375,y:.453125},{x:.140625,y:.453125},{x:.140625,y:.453125},{x:.171875,y:.453125},{x:.171875,y:.453125},{x:.203125,y:.453125},{x:.203125,y:.453125},{x:.234375,y:.453125},{x:.234375,y:.453125},{x:.265625,y:.453125},{x:.265625,y:.453125},{x:.296875,y:.453125},{x:.296875,y:.453125},{x:.328125,y:.453125},{x:.328125,y:.453125},{x:.359375,y:.453125},{x:.359375,y:.453125},{x:.390625,y:.453125},{x:.390625,y:.453125},{x:.421875,y:.453125},{x:.421875,y:.453125},{x:.453125,y:.453125},{x:.453125,y:.453125},{x:.484375,y:.453125},{x:.484375,y:.453125},{x:.515625,y:.453125},{x:.515625,y:.453125},{x:.546875,y:.453125},{x:.546875,y:.453125},{x:.578125,y:.453125},{x:.578125,y:.453125},{x:.609375,y:.453125},{x:.609375,y:.453125},{x:.640625,y:.453125},{x:.640625,y:.453125},{x:.671875,y:.453125},{x:.671875,y:.453125},{x:.703125,y:.453125},{x:.703125,y:.453125},{x:.734375,y:.453125},{x:.734375,y:.453125},{x:.765625,y:.453125},{x:.765625,y:.453125},{x:.796875,y:.453125},{x:.796875,y:.453125},{x:.828125,y:.453125},{x:.828125,y:.453125},{x:.859375,y:.453125},{x:.859375,y:.453125},{x:.890625,y:.453125},{x:.890625,y:.453125},{x:.921875,y:.453125},{x:.921875,y:.453125},{x:.953125,y:.453125},{x:.953125,y:.453125},{x:.984375,y:.453125},{x:.984375,y:.453125},{x:.015625,y:.484375},{x:.015625,y:.484375},{x:.046875,y:.484375},{x:.046875,y:.484375},{x:.078125,y:.484375},{x:.078125,y:.484375},{x:.109375,y:.484375},{x:.109375,y:.484375},{x:.140625,y:.484375},{x:.140625,y:.484375},{x:.171875,y:.484375},{x:.171875,y:.484375},{x:.203125,y:.484375},{x:.203125,y:.484375},{x:.234375,y:.484375},{x:.234375,y:.484375},{x:.265625,y:.484375},{x:.265625,y:.484375},{x:.296875,y:.484375},{x:.296875,y:.484375},{x:.328125,y:.484375},{x:.328125,y:.484375},{x:.359375,y:.484375},{x:.359375,y:.484375},{x:.390625,y:.484375},{x:.390625,y:.484375},{x:.421875,y:.484375},{x:.421875,y:.484375},{x:.453125,y:.484375},{x:.453125,y:.484375},{x:.484375,y:.484375},{x:.484375,y:.484375},{x:.515625,y:.484375},{x:.515625,y:.484375},{x:.546875,y:.484375},{x:.546875,y:.484375},{x:.578125,y:.484375},{x:.578125,y:.484375},{x:.609375,y:.484375},{x:.609375,y:.484375},{x:.640625,y:.484375},{x:.640625,y:.484375},{x:.671875,y:.484375},{x:.671875,y:.484375},{x:.703125,y:.484375},{x:.703125,y:.484375},{x:.734375,y:.484375},{x:.734375,y:.484375},{x:.765625,y:.484375},{x:.765625,y:.484375},{x:.796875,y:.484375},{x:.796875,y:.484375},{x:.828125,y:.484375},{x:.828125,y:.484375},{x:.859375,y:.484375},{x:.859375,y:.484375},{x:.890625,y:.484375},{x:.890625,y:.484375},{x:.921875,y:.484375},{x:.921875,y:.484375},{x:.953125,y:.484375},{x:.953125,y:.484375},{x:.984375,y:.484375},{x:.984375,y:.484375},{x:.015625,y:.515625},{x:.015625,y:.515625},{x:.046875,y:.515625},{x:.046875,y:.515625},{x:.078125,y:.515625},{x:.078125,y:.515625},{x:.109375,y:.515625},{x:.109375,y:.515625},{x:.140625,y:.515625},{x:.140625,y:.515625},{x:.171875,y:.515625},{x:.171875,y:.515625},{x:.203125,y:.515625},{x:.203125,y:.515625},{x:.234375,y:.515625},{x:.234375,y:.515625},{x:.265625,y:.515625},{x:.265625,y:.515625},{x:.296875,y:.515625},{x:.296875,y:.515625},{x:.328125,y:.515625},{x:.328125,y:.515625},{x:.359375,y:.515625},{x:.359375,y:.515625},{x:.390625,y:.515625},{x:.390625,y:.515625},{x:.421875,y:.515625},{x:.421875,y:.515625},{x:.453125,y:.515625},{x:.453125,y:.515625},{x:.484375,y:.515625},{x:.484375,y:.515625},{x:.515625,y:.515625},{x:.515625,y:.515625},{x:.546875,y:.515625},{x:.546875,y:.515625},{x:.578125,y:.515625},{x:.578125,y:.515625},{x:.609375,y:.515625},{x:.609375,y:.515625},{x:.640625,y:.515625},{x:.640625,y:.515625},{x:.671875,y:.515625},{x:.671875,y:.515625},{x:.703125,y:.515625},{x:.703125,y:.515625},{x:.734375,y:.515625},{x:.734375,y:.515625},{x:.765625,y:.515625},{x:.765625,y:.515625},{x:.796875,y:.515625},{x:.796875,y:.515625},{x:.828125,y:.515625},{x:.828125,y:.515625},{x:.859375,y:.515625},{x:.859375,y:.515625},{x:.890625,y:.515625},{x:.890625,y:.515625},{x:.921875,y:.515625},{x:.921875,y:.515625},{x:.953125,y:.515625},{x:.953125,y:.515625},{x:.984375,y:.515625},{x:.984375,y:.515625},{x:.015625,y:.546875},{x:.015625,y:.546875},{x:.046875,y:.546875},{x:.046875,y:.546875},{x:.078125,y:.546875},{x:.078125,y:.546875},{x:.109375,y:.546875},{x:.109375,y:.546875},{x:.140625,y:.546875},{x:.140625,y:.546875},{x:.171875,y:.546875},{x:.171875,y:.546875},{x:.203125,y:.546875},{x:.203125,y:.546875},{x:.234375,y:.546875},{x:.234375,y:.546875},{x:.265625,y:.546875},{x:.265625,y:.546875},{x:.296875,y:.546875},{x:.296875,y:.546875},{x:.328125,y:.546875},{x:.328125,y:.546875},{x:.359375,y:.546875},{x:.359375,y:.546875},{x:.390625,y:.546875},{x:.390625,y:.546875},{x:.421875,y:.546875},{x:.421875,y:.546875},{x:.453125,y:.546875},{x:.453125,y:.546875},{x:.484375,y:.546875},{x:.484375,y:.546875},{x:.515625,y:.546875},{x:.515625,y:.546875},{x:.546875,y:.546875},{x:.546875,y:.546875},{x:.578125,y:.546875},{x:.578125,y:.546875},{x:.609375,y:.546875},{x:.609375,y:.546875},{x:.640625,y:.546875},{x:.640625,y:.546875},{x:.671875,y:.546875},{x:.671875,y:.546875},{x:.703125,y:.546875},{x:.703125,y:.546875},{x:.734375,y:.546875},{x:.734375,y:.546875},{x:.765625,y:.546875},{x:.765625,y:.546875},{x:.796875,y:.546875},{x:.796875,y:.546875},{x:.828125,y:.546875},{x:.828125,y:.546875},{x:.859375,y:.546875},{x:.859375,y:.546875},{x:.890625,y:.546875},{x:.890625,y:.546875},{x:.921875,y:.546875},{x:.921875,y:.546875},{x:.953125,y:.546875},{x:.953125,y:.546875},{x:.984375,y:.546875},{x:.984375,y:.546875},{x:.015625,y:.578125},{x:.015625,y:.578125},{x:.046875,y:.578125},{x:.046875,y:.578125},{x:.078125,y:.578125},{x:.078125,y:.578125},{x:.109375,y:.578125},{x:.109375,y:.578125},{x:.140625,y:.578125},{x:.140625,y:.578125},{x:.171875,y:.578125},{x:.171875,y:.578125},{x:.203125,y:.578125},{x:.203125,y:.578125},{x:.234375,y:.578125},{x:.234375,y:.578125},{x:.265625,y:.578125},{x:.265625,y:.578125},{x:.296875,y:.578125},{x:.296875,y:.578125},{x:.328125,y:.578125},{x:.328125,y:.578125},{x:.359375,y:.578125},{x:.359375,y:.578125},{x:.390625,y:.578125},{x:.390625,y:.578125},{x:.421875,y:.578125},{x:.421875,y:.578125},{x:.453125,y:.578125},{x:.453125,y:.578125},{x:.484375,y:.578125},{x:.484375,y:.578125},{x:.515625,y:.578125},{x:.515625,y:.578125},{x:.546875,y:.578125},{x:.546875,y:.578125},{x:.578125,y:.578125},{x:.578125,y:.578125},{x:.609375,y:.578125},{x:.609375,y:.578125},{x:.640625,y:.578125},{x:.640625,y:.578125},{x:.671875,y:.578125},{x:.671875,y:.578125},{x:.703125,y:.578125},{x:.703125,y:.578125},{x:.734375,y:.578125},{x:.734375,y:.578125},{x:.765625,y:.578125},{x:.765625,y:.578125},{x:.796875,y:.578125},{x:.796875,y:.578125},{x:.828125,y:.578125},{x:.828125,y:.578125},{x:.859375,y:.578125},{x:.859375,y:.578125},{x:.890625,y:.578125},{x:.890625,y:.578125},{x:.921875,y:.578125},{x:.921875,y:.578125},{x:.953125,y:.578125},{x:.953125,y:.578125},{x:.984375,y:.578125},{x:.984375,y:.578125},{x:.015625,y:.609375},{x:.015625,y:.609375},{x:.046875,y:.609375},{x:.046875,y:.609375},{x:.078125,y:.609375},{x:.078125,y:.609375},{x:.109375,y:.609375},{x:.109375,y:.609375},{x:.140625,y:.609375},{x:.140625,y:.609375},{x:.171875,y:.609375},{x:.171875,y:.609375},{x:.203125,y:.609375},{x:.203125,y:.609375},{x:.234375,y:.609375},{x:.234375,y:.609375},{x:.265625,y:.609375},{x:.265625,y:.609375},{x:.296875,y:.609375},{x:.296875,y:.609375},{x:.328125,y:.609375},{x:.328125,y:.609375},{x:.359375,y:.609375},{x:.359375,y:.609375},{x:.390625,y:.609375},{x:.390625,y:.609375},{x:.421875,y:.609375},{x:.421875,y:.609375},{x:.453125,y:.609375},{x:.453125,y:.609375},{x:.484375,y:.609375},{x:.484375,y:.609375},{x:.515625,y:.609375},{x:.515625,y:.609375},{x:.546875,y:.609375},{x:.546875,y:.609375},{x:.578125,y:.609375},{x:.578125,y:.609375},{x:.609375,y:.609375},{x:.609375,y:.609375},{x:.640625,y:.609375},{x:.640625,y:.609375},{x:.671875,y:.609375},{x:.671875,y:.609375},{x:.703125,y:.609375},{x:.703125,y:.609375},{x:.734375,y:.609375},{x:.734375,y:.609375},{x:.765625,y:.609375},{x:.765625,y:.609375},{x:.796875,y:.609375},{x:.796875,y:.609375},{x:.828125,y:.609375},{x:.828125,y:.609375},{x:.859375,y:.609375},{x:.859375,y:.609375},{x:.890625,y:.609375},{x:.890625,y:.609375},{x:.921875,y:.609375},{x:.921875,y:.609375},{x:.953125,y:.609375},{x:.953125,y:.609375},{x:.984375,y:.609375},{x:.984375,y:.609375},{x:.015625,y:.640625},{x:.015625,y:.640625},{x:.046875,y:.640625},{x:.046875,y:.640625},{x:.078125,y:.640625},{x:.078125,y:.640625},{x:.109375,y:.640625},{x:.109375,y:.640625},{x:.140625,y:.640625},{x:.140625,y:.640625},{x:.171875,y:.640625},{x:.171875,y:.640625},{x:.203125,y:.640625},{x:.203125,y:.640625},{x:.234375,y:.640625},{x:.234375,y:.640625},{x:.265625,y:.640625},{x:.265625,y:.640625},{x:.296875,y:.640625},{x:.296875,y:.640625},{x:.328125,y:.640625},{x:.328125,y:.640625},{x:.359375,y:.640625},{x:.359375,y:.640625},{x:.390625,y:.640625},{x:.390625,y:.640625},{x:.421875,y:.640625},{x:.421875,y:.640625},{x:.453125,y:.640625},{x:.453125,y:.640625},{x:.484375,y:.640625},{x:.484375,y:.640625},{x:.515625,y:.640625},{x:.515625,y:.640625},{x:.546875,y:.640625},{x:.546875,y:.640625},{x:.578125,y:.640625},{x:.578125,y:.640625},{x:.609375,y:.640625},{x:.609375,y:.640625},{x:.640625,y:.640625},{x:.640625,y:.640625},{x:.671875,y:.640625},{x:.671875,y:.640625},{x:.703125,y:.640625},{x:.703125,y:.640625},{x:.734375,y:.640625},{x:.734375,y:.640625},{x:.765625,y:.640625},{x:.765625,y:.640625},{x:.796875,y:.640625},{x:.796875,y:.640625},{x:.828125,y:.640625},{x:.828125,y:.640625},{x:.859375,y:.640625},{x:.859375,y:.640625},{x:.890625,y:.640625},{x:.890625,y:.640625},{x:.921875,y:.640625},{x:.921875,y:.640625},{x:.953125,y:.640625},{x:.953125,y:.640625},{x:.984375,y:.640625},{x:.984375,y:.640625},{x:.015625,y:.671875},{x:.015625,y:.671875},{x:.046875,y:.671875},{x:.046875,y:.671875},{x:.078125,y:.671875},{x:.078125,y:.671875},{x:.109375,y:.671875},{x:.109375,y:.671875},{x:.140625,y:.671875},{x:.140625,y:.671875},{x:.171875,y:.671875},{x:.171875,y:.671875},{x:.203125,y:.671875},{x:.203125,y:.671875},{x:.234375,y:.671875},{x:.234375,y:.671875},{x:.265625,y:.671875},{x:.265625,y:.671875},{x:.296875,y:.671875},{x:.296875,y:.671875},{x:.328125,y:.671875},{x:.328125,y:.671875},{x:.359375,y:.671875},{x:.359375,y:.671875},{x:.390625,y:.671875},{x:.390625,y:.671875},{x:.421875,y:.671875},{x:.421875,y:.671875},{x:.453125,y:.671875},{x:.453125,y:.671875},{x:.484375,y:.671875},{x:.484375,y:.671875},{x:.515625,y:.671875},{x:.515625,y:.671875},{x:.546875,y:.671875},{x:.546875,y:.671875},{x:.578125,y:.671875},{x:.578125,y:.671875},{x:.609375,y:.671875},{x:.609375,y:.671875},{x:.640625,y:.671875},{x:.640625,y:.671875},{x:.671875,y:.671875},{x:.671875,y:.671875},{x:.703125,y:.671875},{x:.703125,y:.671875},{x:.734375,y:.671875},{x:.734375,y:.671875},{x:.765625,y:.671875},{x:.765625,y:.671875},{x:.796875,y:.671875},{x:.796875,y:.671875},{x:.828125,y:.671875},{x:.828125,y:.671875},{x:.859375,y:.671875},{x:.859375,y:.671875},{x:.890625,y:.671875},{x:.890625,y:.671875},{x:.921875,y:.671875},{x:.921875,y:.671875},{x:.953125,y:.671875},{x:.953125,y:.671875},{x:.984375,y:.671875},{x:.984375,y:.671875},{x:.015625,y:.703125},{x:.015625,y:.703125},{x:.046875,y:.703125},{x:.046875,y:.703125},{x:.078125,y:.703125},{x:.078125,y:.703125},{x:.109375,y:.703125},{x:.109375,y:.703125},{x:.140625,y:.703125},{x:.140625,y:.703125},{x:.171875,y:.703125},{x:.171875,y:.703125},{x:.203125,y:.703125},{x:.203125,y:.703125},{x:.234375,y:.703125},{x:.234375,y:.703125},{x:.265625,y:.703125},{x:.265625,y:.703125},{x:.296875,y:.703125},{x:.296875,y:.703125},{x:.328125,y:.703125},{x:.328125,y:.703125},{x:.359375,y:.703125},{x:.359375,y:.703125},{x:.390625,y:.703125},{x:.390625,y:.703125},{x:.421875,y:.703125},{x:.421875,y:.703125},{x:.453125,y:.703125},{x:.453125,y:.703125},{x:.484375,y:.703125},{x:.484375,y:.703125},{x:.515625,y:.703125},{x:.515625,y:.703125},{x:.546875,y:.703125},{x:.546875,y:.703125},{x:.578125,y:.703125},{x:.578125,y:.703125},{x:.609375,y:.703125},{x:.609375,y:.703125},{x:.640625,y:.703125},{x:.640625,y:.703125},{x:.671875,y:.703125},{x:.671875,y:.703125},{x:.703125,y:.703125},{x:.703125,y:.703125},{x:.734375,y:.703125},{x:.734375,y:.703125},{x:.765625,y:.703125},{x:.765625,y:.703125},{x:.796875,y:.703125},{x:.796875,y:.703125},{x:.828125,y:.703125},{x:.828125,y:.703125},{x:.859375,y:.703125},{x:.859375,y:.703125},{x:.890625,y:.703125},{x:.890625,y:.703125},{x:.921875,y:.703125},{x:.921875,y:.703125},{x:.953125,y:.703125},{x:.953125,y:.703125},{x:.984375,y:.703125},{x:.984375,y:.703125},{x:.015625,y:.734375},{x:.015625,y:.734375},{x:.046875,y:.734375},{x:.046875,y:.734375},{x:.078125,y:.734375},{x:.078125,y:.734375},{x:.109375,y:.734375},{x:.109375,y:.734375},{x:.140625,y:.734375},{x:.140625,y:.734375},{x:.171875,y:.734375},{x:.171875,y:.734375},{x:.203125,y:.734375},{x:.203125,y:.734375},{x:.234375,y:.734375},{x:.234375,y:.734375},{x:.265625,y:.734375},{x:.265625,y:.734375},{x:.296875,y:.734375},{x:.296875,y:.734375},{x:.328125,y:.734375},{x:.328125,y:.734375},{x:.359375,y:.734375},{x:.359375,y:.734375},{x:.390625,y:.734375},{x:.390625,y:.734375},{x:.421875,y:.734375},{x:.421875,y:.734375},{x:.453125,y:.734375},{x:.453125,y:.734375},{x:.484375,y:.734375},{x:.484375,y:.734375},{x:.515625,y:.734375},{x:.515625,y:.734375},{x:.546875,y:.734375},{x:.546875,y:.734375},{x:.578125,y:.734375},{x:.578125,y:.734375},{x:.609375,y:.734375},{x:.609375,y:.734375},{x:.640625,y:.734375},{x:.640625,y:.734375},{x:.671875,y:.734375},{x:.671875,y:.734375},{x:.703125,y:.734375},{x:.703125,y:.734375},{x:.734375,y:.734375},{x:.734375,y:.734375},{x:.765625,y:.734375},{x:.765625,y:.734375},{x:.796875,y:.734375},{x:.796875,y:.734375},{x:.828125,y:.734375},{x:.828125,y:.734375},{x:.859375,y:.734375},{x:.859375,y:.734375},{x:.890625,y:.734375},{x:.890625,y:.734375},{x:.921875,y:.734375},{x:.921875,y:.734375},{x:.953125,y:.734375},{x:.953125,y:.734375},{x:.984375,y:.734375},{x:.984375,y:.734375},{x:.015625,y:.765625},{x:.015625,y:.765625},{x:.046875,y:.765625},{x:.046875,y:.765625},{x:.078125,y:.765625},{x:.078125,y:.765625},{x:.109375,y:.765625},{x:.109375,y:.765625},{x:.140625,y:.765625},{x:.140625,y:.765625},{x:.171875,y:.765625},{x:.171875,y:.765625},{x:.203125,y:.765625},{x:.203125,y:.765625},{x:.234375,y:.765625},{x:.234375,y:.765625},{x:.265625,y:.765625},{x:.265625,y:.765625},{x:.296875,y:.765625},{x:.296875,y:.765625},{x:.328125,y:.765625},{x:.328125,y:.765625},{x:.359375,y:.765625},{x:.359375,y:.765625},{x:.390625,y:.765625},{x:.390625,y:.765625},{x:.421875,y:.765625},{x:.421875,y:.765625},{x:.453125,y:.765625},{x:.453125,y:.765625},{x:.484375,y:.765625},{x:.484375,y:.765625},{x:.515625,y:.765625},{x:.515625,y:.765625},{x:.546875,y:.765625},{x:.546875,y:.765625},{x:.578125,y:.765625},{x:.578125,y:.765625},{x:.609375,y:.765625},{x:.609375,y:.765625},{x:.640625,y:.765625},{x:.640625,y:.765625},{x:.671875,y:.765625},{x:.671875,y:.765625},{x:.703125,y:.765625},{x:.703125,y:.765625},{x:.734375,y:.765625},{x:.734375,y:.765625},{x:.765625,y:.765625},{x:.765625,y:.765625},{x:.796875,y:.765625},{x:.796875,y:.765625},{x:.828125,y:.765625},{x:.828125,y:.765625},{x:.859375,y:.765625},{x:.859375,y:.765625},{x:.890625,y:.765625},{x:.890625,y:.765625},{x:.921875,y:.765625},{x:.921875,y:.765625},{x:.953125,y:.765625},{x:.953125,y:.765625},{x:.984375,y:.765625},{x:.984375,y:.765625},{x:.015625,y:.796875},{x:.015625,y:.796875},{x:.046875,y:.796875},{x:.046875,y:.796875},{x:.078125,y:.796875},{x:.078125,y:.796875},{x:.109375,y:.796875},{x:.109375,y:.796875},{x:.140625,y:.796875},{x:.140625,y:.796875},{x:.171875,y:.796875},{x:.171875,y:.796875},{x:.203125,y:.796875},{x:.203125,y:.796875},{x:.234375,y:.796875},{x:.234375,y:.796875},{x:.265625,y:.796875},{x:.265625,y:.796875},{x:.296875,y:.796875},{x:.296875,y:.796875},{x:.328125,y:.796875},{x:.328125,y:.796875},{x:.359375,y:.796875},{x:.359375,y:.796875},{x:.390625,y:.796875},{x:.390625,y:.796875},{x:.421875,y:.796875},{x:.421875,y:.796875},{x:.453125,y:.796875},{x:.453125,y:.796875},{x:.484375,y:.796875},{x:.484375,y:.796875},{x:.515625,y:.796875},{x:.515625,y:.796875},{x:.546875,y:.796875},{x:.546875,y:.796875},{x:.578125,y:.796875},{x:.578125,y:.796875},{x:.609375,y:.796875},{x:.609375,y:.796875},{x:.640625,y:.796875},{x:.640625,y:.796875},{x:.671875,y:.796875},{x:.671875,y:.796875},{x:.703125,y:.796875},{x:.703125,y:.796875},{x:.734375,y:.796875},{x:.734375,y:.796875},{x:.765625,y:.796875},{x:.765625,y:.796875},{x:.796875,y:.796875},{x:.796875,y:.796875},{x:.828125,y:.796875},{x:.828125,y:.796875},{x:.859375,y:.796875},{x:.859375,y:.796875},{x:.890625,y:.796875},{x:.890625,y:.796875},{x:.921875,y:.796875},{x:.921875,y:.796875},{x:.953125,y:.796875},{x:.953125,y:.796875},{x:.984375,y:.796875},{x:.984375,y:.796875},{x:.015625,y:.828125},{x:.015625,y:.828125},{x:.046875,y:.828125},{x:.046875,y:.828125},{x:.078125,y:.828125},{x:.078125,y:.828125},{x:.109375,y:.828125},{x:.109375,y:.828125},{x:.140625,y:.828125},{x:.140625,y:.828125},{x:.171875,y:.828125},{x:.171875,y:.828125},{x:.203125,y:.828125},{x:.203125,y:.828125},{x:.234375,y:.828125},{x:.234375,y:.828125},{x:.265625,y:.828125},{x:.265625,y:.828125},{x:.296875,y:.828125},{x:.296875,y:.828125},{x:.328125,y:.828125},{x:.328125,y:.828125},{x:.359375,y:.828125},{x:.359375,y:.828125},{x:.390625,y:.828125},{x:.390625,y:.828125},{x:.421875,y:.828125},{x:.421875,y:.828125},{x:.453125,y:.828125},{x:.453125,y:.828125},{x:.484375,y:.828125},{x:.484375,y:.828125},{x:.515625,y:.828125},{x:.515625,y:.828125},{x:.546875,y:.828125},{x:.546875,y:.828125},{x:.578125,y:.828125},{x:.578125,y:.828125},{x:.609375,y:.828125},{x:.609375,y:.828125},{x:.640625,y:.828125},{x:.640625,y:.828125},{x:.671875,y:.828125},{x:.671875,y:.828125},{x:.703125,y:.828125},{x:.703125,y:.828125},{x:.734375,y:.828125},{x:.734375,y:.828125},{x:.765625,y:.828125},{x:.765625,y:.828125},{x:.796875,y:.828125},{x:.796875,y:.828125},{x:.828125,y:.828125},{x:.828125,y:.828125},{x:.859375,y:.828125},{x:.859375,y:.828125},{x:.890625,y:.828125},{x:.890625,y:.828125},{x:.921875,y:.828125},{x:.921875,y:.828125},{x:.953125,y:.828125},{x:.953125,y:.828125},{x:.984375,y:.828125},{x:.984375,y:.828125},{x:.015625,y:.859375},{x:.015625,y:.859375},{x:.046875,y:.859375},{x:.046875,y:.859375},{x:.078125,y:.859375},{x:.078125,y:.859375},{x:.109375,y:.859375},{x:.109375,y:.859375},{x:.140625,y:.859375},{x:.140625,y:.859375},{x:.171875,y:.859375},{x:.171875,y:.859375},{x:.203125,y:.859375},{x:.203125,y:.859375},{x:.234375,y:.859375},{x:.234375,y:.859375},{x:.265625,y:.859375},{x:.265625,y:.859375},{x:.296875,y:.859375},{x:.296875,y:.859375},{x:.328125,y:.859375},{x:.328125,y:.859375},{x:.359375,y:.859375},{x:.359375,y:.859375},{x:.390625,y:.859375},{x:.390625,y:.859375},{x:.421875,y:.859375},{x:.421875,y:.859375},{x:.453125,y:.859375},{x:.453125,y:.859375},{x:.484375,y:.859375},{x:.484375,y:.859375},{x:.515625,y:.859375},{x:.515625,y:.859375},{x:.546875,y:.859375},{x:.546875,y:.859375},{x:.578125,y:.859375},{x:.578125,y:.859375},{x:.609375,y:.859375},{x:.609375,y:.859375},{x:.640625,y:.859375},{x:.640625,y:.859375},{x:.671875,y:.859375},{x:.671875,y:.859375},{x:.703125,y:.859375},{x:.703125,y:.859375},{x:.734375,y:.859375},{x:.734375,y:.859375},{x:.765625,y:.859375},{x:.765625,y:.859375},{x:.796875,y:.859375},{x:.796875,y:.859375},{x:.828125,y:.859375},{x:.828125,y:.859375},{x:.859375,y:.859375},{x:.859375,y:.859375},{x:.890625,y:.859375},{x:.890625,y:.859375},{x:.921875,y:.859375},{x:.921875,y:.859375},{x:.953125,y:.859375},{x:.953125,y:.859375},{x:.984375,y:.859375},{x:.984375,y:.859375},{x:.015625,y:.890625},{x:.015625,y:.890625},{x:.046875,y:.890625},{x:.046875,y:.890625},{x:.078125,y:.890625},{x:.078125,y:.890625},{x:.109375,y:.890625},{x:.109375,y:.890625},{x:.140625,y:.890625},{x:.140625,y:.890625},{x:.171875,y:.890625},{x:.171875,y:.890625},{x:.203125,y:.890625},{x:.203125,y:.890625},{x:.234375,y:.890625},{x:.234375,y:.890625},{x:.265625,y:.890625},{x:.265625,y:.890625},{x:.296875,y:.890625},{x:.296875,y:.890625},{x:.328125,y:.890625},{x:.328125,y:.890625},{x:.359375,y:.890625},{x:.359375,y:.890625},{x:.390625,y:.890625},{x:.390625,y:.890625},{x:.421875,y:.890625},{x:.421875,y:.890625},{x:.453125,y:.890625},{x:.453125,y:.890625},{x:.484375,y:.890625},{x:.484375,y:.890625},{x:.515625,y:.890625},{x:.515625,y:.890625},{x:.546875,y:.890625},{x:.546875,y:.890625},{x:.578125,y:.890625},{x:.578125,y:.890625},{x:.609375,y:.890625},{x:.609375,y:.890625},{x:.640625,y:.890625},{x:.640625,y:.890625},{x:.671875,y:.890625},{x:.671875,y:.890625},{x:.703125,y:.890625},{x:.703125,y:.890625},{x:.734375,y:.890625},{x:.734375,y:.890625},{x:.765625,y:.890625},{x:.765625,y:.890625},{x:.796875,y:.890625},{x:.796875,y:.890625},{x:.828125,y:.890625},{x:.828125,y:.890625},{x:.859375,y:.890625},{x:.859375,y:.890625},{x:.890625,y:.890625},{x:.890625,y:.890625},{x:.921875,y:.890625},{x:.921875,y:.890625},{x:.953125,y:.890625},{x:.953125,y:.890625},{x:.984375,y:.890625},{x:.984375,y:.890625},{x:.015625,y:.921875},{x:.015625,y:.921875},{x:.046875,y:.921875},{x:.046875,y:.921875},{x:.078125,y:.921875},{x:.078125,y:.921875},{x:.109375,y:.921875},{x:.109375,y:.921875},{x:.140625,y:.921875},{x:.140625,y:.921875},{x:.171875,y:.921875},{x:.171875,y:.921875},{x:.203125,y:.921875},{x:.203125,y:.921875},{x:.234375,y:.921875},{x:.234375,y:.921875},{x:.265625,y:.921875},{x:.265625,y:.921875},{x:.296875,y:.921875},{x:.296875,y:.921875},{x:.328125,y:.921875},{x:.328125,y:.921875},{x:.359375,y:.921875},{x:.359375,y:.921875},{x:.390625,y:.921875},{x:.390625,y:.921875},{x:.421875,y:.921875},{x:.421875,y:.921875},{x:.453125,y:.921875},{x:.453125,y:.921875},{x:.484375,y:.921875},{x:.484375,y:.921875},{x:.515625,y:.921875},{x:.515625,y:.921875},{x:.546875,y:.921875},{x:.546875,y:.921875},{x:.578125,y:.921875},{x:.578125,y:.921875},{x:.609375,y:.921875},{x:.609375,y:.921875},{x:.640625,y:.921875},{x:.640625,y:.921875},{x:.671875,y:.921875},{x:.671875,y:.921875},{x:.703125,y:.921875},{x:.703125,y:.921875},{x:.734375,y:.921875},{x:.734375,y:.921875},{x:.765625,y:.921875},{x:.765625,y:.921875},{x:.796875,y:.921875},{x:.796875,y:.921875},{x:.828125,y:.921875},{x:.828125,y:.921875},{x:.859375,y:.921875},{x:.859375,y:.921875},{x:.890625,y:.921875},{x:.890625,y:.921875},{x:.921875,y:.921875},{x:.921875,y:.921875},{x:.953125,y:.921875},{x:.953125,y:.921875},{x:.984375,y:.921875},{x:.984375,y:.921875},{x:.015625,y:.953125},{x:.015625,y:.953125},{x:.046875,y:.953125},{x:.046875,y:.953125},{x:.078125,y:.953125},{x:.078125,y:.953125},{x:.109375,y:.953125},{x:.109375,y:.953125},{x:.140625,y:.953125},{x:.140625,y:.953125},{x:.171875,y:.953125},{x:.171875,y:.953125},{x:.203125,y:.953125},{x:.203125,y:.953125},{x:.234375,y:.953125},{x:.234375,y:.953125},{x:.265625,y:.953125},{x:.265625,y:.953125},{x:.296875,y:.953125},{x:.296875,y:.953125},{x:.328125,y:.953125},{x:.328125,y:.953125},{x:.359375,y:.953125},{x:.359375,y:.953125},{x:.390625,y:.953125},{x:.390625,y:.953125},{x:.421875,y:.953125},{x:.421875,y:.953125},{x:.453125,y:.953125},{x:.453125,y:.953125},{x:.484375,y:.953125},{x:.484375,y:.953125},{x:.515625,y:.953125},{x:.515625,y:.953125},{x:.546875,y:.953125},{x:.546875,y:.953125},{x:.578125,y:.953125},{x:.578125,y:.953125},{x:.609375,y:.953125},{x:.609375,y:.953125},{x:.640625,y:.953125},{x:.640625,y:.953125},{x:.671875,y:.953125},{x:.671875,y:.953125},{x:.703125,y:.953125},{x:.703125,y:.953125},{x:.734375,y:.953125},{x:.734375,y:.953125},{x:.765625,y:.953125},{x:.765625,y:.953125},{x:.796875,y:.953125},{x:.796875,y:.953125},{x:.828125,y:.953125},{x:.828125,y:.953125},{x:.859375,y:.953125},{x:.859375,y:.953125},{x:.890625,y:.953125},{x:.890625,y:.953125},{x:.921875,y:.953125},{x:.921875,y:.953125},{x:.953125,y:.953125},{x:.953125,y:.953125},{x:.984375,y:.953125},{x:.984375,y:.953125},{x:.015625,y:.984375},{x:.015625,y:.984375},{x:.046875,y:.984375},{x:.046875,y:.984375},{x:.078125,y:.984375},{x:.078125,y:.984375},{x:.109375,y:.984375},{x:.109375,y:.984375},{x:.140625,y:.984375},{x:.140625,y:.984375},{x:.171875,y:.984375},{x:.171875,y:.984375},{x:.203125,y:.984375},{x:.203125,y:.984375},{x:.234375,y:.984375},{x:.234375,y:.984375},{x:.265625,y:.984375},{x:.265625,y:.984375},{x:.296875,y:.984375},{x:.296875,y:.984375},{x:.328125,y:.984375},{x:.328125,y:.984375},{x:.359375,y:.984375},{x:.359375,y:.984375},{x:.390625,y:.984375},{x:.390625,y:.984375},{x:.421875,y:.984375},{x:.421875,y:.984375},{x:.453125,y:.984375},{x:.453125,y:.984375},{x:.484375,y:.984375},{x:.484375,y:.984375},{x:.515625,y:.984375},{x:.515625,y:.984375},{x:.546875,y:.984375},{x:.546875,y:.984375},{x:.578125,y:.984375},{x:.578125,y:.984375},{x:.609375,y:.984375},{x:.609375,y:.984375},{x:.640625,y:.984375},{x:.640625,y:.984375},{x:.671875,y:.984375},{x:.671875,y:.984375},{x:.703125,y:.984375},{x:.703125,y:.984375},{x:.734375,y:.984375},{x:.734375,y:.984375},{x:.765625,y:.984375},{x:.765625,y:.984375},{x:.796875,y:.984375},{x:.796875,y:.984375},{x:.828125,y:.984375},{x:.828125,y:.984375},{x:.859375,y:.984375},{x:.859375,y:.984375},{x:.890625,y:.984375},{x:.890625,y:.984375},{x:.921875,y:.984375},{x:.921875,y:.984375},{x:.953125,y:.984375},{x:.953125,y:.984375},{x:.984375,y:.984375},{x:.984375,y:.984375},{x:.03125,y:.03125},{x:.03125,y:.03125},{x:.09375,y:.03125},{x:.09375,y:.03125},{x:.15625,y:.03125},{x:.15625,y:.03125},{x:.21875,y:.03125},{x:.21875,y:.03125},{x:.28125,y:.03125},{x:.28125,y:.03125},{x:.34375,y:.03125},{x:.34375,y:.03125},{x:.40625,y:.03125},{x:.40625,y:.03125},{x:.46875,y:.03125},{x:.46875,y:.03125},{x:.53125,y:.03125},{x:.53125,y:.03125},{x:.59375,y:.03125},{x:.59375,y:.03125},{x:.65625,y:.03125},{x:.65625,y:.03125},{x:.71875,y:.03125},{x:.71875,y:.03125},{x:.78125,y:.03125},{x:.78125,y:.03125},{x:.84375,y:.03125},{x:.84375,y:.03125},{x:.90625,y:.03125},{x:.90625,y:.03125},{x:.96875,y:.03125},{x:.96875,y:.03125},{x:.03125,y:.09375},{x:.03125,y:.09375},{x:.09375,y:.09375},{x:.09375,y:.09375},{x:.15625,y:.09375},{x:.15625,y:.09375},{x:.21875,y:.09375},{x:.21875,y:.09375},{x:.28125,y:.09375},{x:.28125,y:.09375},{x:.34375,y:.09375},{x:.34375,y:.09375},{x:.40625,y:.09375},{x:.40625,y:.09375},{x:.46875,y:.09375},{x:.46875,y:.09375},{x:.53125,y:.09375},{x:.53125,y:.09375},{x:.59375,y:.09375},{x:.59375,y:.09375},{x:.65625,y:.09375},{x:.65625,y:.09375},{x:.71875,y:.09375},{x:.71875,y:.09375},{x:.78125,y:.09375},{x:.78125,y:.09375},{x:.84375,y:.09375},{x:.84375,y:.09375},{x:.90625,y:.09375},{x:.90625,y:.09375},{x:.96875,y:.09375},{x:.96875,y:.09375},{x:.03125,y:.15625},{x:.03125,y:.15625},{x:.09375,y:.15625},{x:.09375,y:.15625},{x:.15625,y:.15625},{x:.15625,y:.15625},{x:.21875,y:.15625},{x:.21875,y:.15625},{x:.28125,y:.15625},{x:.28125,y:.15625},{x:.34375,y:.15625},{x:.34375,y:.15625},{x:.40625,y:.15625},{x:.40625,y:.15625},{x:.46875,y:.15625},{x:.46875,y:.15625},{x:.53125,y:.15625},{x:.53125,y:.15625},{x:.59375,y:.15625},{x:.59375,y:.15625},{x:.65625,y:.15625},{x:.65625,y:.15625},{x:.71875,y:.15625},{x:.71875,y:.15625},{x:.78125,y:.15625},{x:.78125,y:.15625},{x:.84375,y:.15625},{x:.84375,y:.15625},{x:.90625,y:.15625},{x:.90625,y:.15625},{x:.96875,y:.15625},{x:.96875,y:.15625},{x:.03125,y:.21875},{x:.03125,y:.21875},{x:.09375,y:.21875},{x:.09375,y:.21875},{x:.15625,y:.21875},{x:.15625,y:.21875},{x:.21875,y:.21875},{x:.21875,y:.21875},{x:.28125,y:.21875},{x:.28125,y:.21875},{x:.34375,y:.21875},{x:.34375,y:.21875},{x:.40625,y:.21875},{x:.40625,y:.21875},{x:.46875,y:.21875},{x:.46875,y:.21875},{x:.53125,y:.21875},{x:.53125,y:.21875},{x:.59375,y:.21875},{x:.59375,y:.21875},{x:.65625,y:.21875},{x:.65625,y:.21875},{x:.71875,y:.21875},{x:.71875,y:.21875},{x:.78125,y:.21875},{x:.78125,y:.21875},{x:.84375,y:.21875},{x:.84375,y:.21875},{x:.90625,y:.21875},{x:.90625,y:.21875},{x:.96875,y:.21875},{x:.96875,y:.21875},{x:.03125,y:.28125},{x:.03125,y:.28125},{x:.09375,y:.28125},{x:.09375,y:.28125},{x:.15625,y:.28125},{x:.15625,y:.28125},{x:.21875,y:.28125},{x:.21875,y:.28125},{x:.28125,y:.28125},{x:.28125,y:.28125},{x:.34375,y:.28125},{x:.34375,y:.28125},{x:.40625,y:.28125},{x:.40625,y:.28125},{x:.46875,y:.28125},{x:.46875,y:.28125},{x:.53125,y:.28125},{x:.53125,y:.28125},{x:.59375,y:.28125},{x:.59375,y:.28125},{x:.65625,y:.28125},{x:.65625,y:.28125},{x:.71875,y:.28125},{x:.71875,y:.28125},{x:.78125,y:.28125},{x:.78125,y:.28125},{x:.84375,y:.28125},{x:.84375,y:.28125},{x:.90625,y:.28125},{x:.90625,y:.28125},{x:.96875,y:.28125},{x:.96875,y:.28125},{x:.03125,y:.34375},{x:.03125,y:.34375},{x:.09375,y:.34375},{x:.09375,y:.34375},{x:.15625,y:.34375},{x:.15625,y:.34375},{x:.21875,y:.34375},{x:.21875,y:.34375},{x:.28125,y:.34375},{x:.28125,y:.34375},{x:.34375,y:.34375},{x:.34375,y:.34375},{x:.40625,y:.34375},{x:.40625,y:.34375},{x:.46875,y:.34375},{x:.46875,y:.34375},{x:.53125,y:.34375},{x:.53125,y:.34375},{x:.59375,y:.34375},{x:.59375,y:.34375},{x:.65625,y:.34375},{x:.65625,y:.34375},{x:.71875,y:.34375},{x:.71875,y:.34375},{x:.78125,y:.34375},{x:.78125,y:.34375},{x:.84375,y:.34375},{x:.84375,y:.34375},{x:.90625,y:.34375},{x:.90625,y:.34375},{x:.96875,y:.34375},{x:.96875,y:.34375},{x:.03125,y:.40625},{x:.03125,y:.40625},{x:.09375,y:.40625},{x:.09375,y:.40625},{x:.15625,y:.40625},{x:.15625,y:.40625},{x:.21875,y:.40625},{x:.21875,y:.40625},{x:.28125,y:.40625},{x:.28125,y:.40625},{x:.34375,y:.40625},{x:.34375,y:.40625},{x:.40625,y:.40625},{x:.40625,y:.40625},{x:.46875,y:.40625},{x:.46875,y:.40625},{x:.53125,y:.40625},{x:.53125,y:.40625},{x:.59375,y:.40625},{x:.59375,y:.40625},{x:.65625,y:.40625},{x:.65625,y:.40625},{x:.71875,y:.40625},{x:.71875,y:.40625},{x:.78125,y:.40625},{x:.78125,y:.40625},{x:.84375,y:.40625},{x:.84375,y:.40625},{x:.90625,y:.40625},{x:.90625,y:.40625},{x:.96875,y:.40625},{x:.96875,y:.40625},{x:.03125,y:.46875},{x:.03125,y:.46875},{x:.09375,y:.46875},{x:.09375,y:.46875},{x:.15625,y:.46875},{x:.15625,y:.46875},{x:.21875,y:.46875},{x:.21875,y:.46875},{x:.28125,y:.46875},{x:.28125,y:.46875},{x:.34375,y:.46875},{x:.34375,y:.46875},{x:.40625,y:.46875},{x:.40625,y:.46875},{x:.46875,y:.46875},{x:.46875,y:.46875},{x:.53125,y:.46875},{x:.53125,y:.46875},{x:.59375,y:.46875},{x:.59375,y:.46875},{x:.65625,y:.46875},{x:.65625,y:.46875},{x:.71875,y:.46875},{x:.71875,y:.46875},{x:.78125,y:.46875},{x:.78125,y:.46875},{x:.84375,y:.46875},{x:.84375,y:.46875},{x:.90625,y:.46875},{x:.90625,y:.46875},{x:.96875,y:.46875},{x:.96875,y:.46875},{x:.03125,y:.53125},{x:.03125,y:.53125},{x:.09375,y:.53125},{x:.09375,y:.53125},{x:.15625,y:.53125},{x:.15625,y:.53125},{x:.21875,y:.53125},{x:.21875,y:.53125},{x:.28125,y:.53125},{x:.28125,y:.53125},{x:.34375,y:.53125},{x:.34375,y:.53125},{x:.40625,y:.53125},{x:.40625,y:.53125},{x:.46875,y:.53125},{x:.46875,y:.53125},{x:.53125,y:.53125},{x:.53125,y:.53125},{x:.59375,y:.53125},{x:.59375,y:.53125},{x:.65625,y:.53125},{x:.65625,y:.53125},{x:.71875,y:.53125},{x:.71875,y:.53125},{x:.78125,y:.53125},{x:.78125,y:.53125},{x:.84375,y:.53125},{x:.84375,y:.53125},{x:.90625,y:.53125},{x:.90625,y:.53125},{x:.96875,y:.53125},{x:.96875,y:.53125},{x:.03125,y:.59375},{x:.03125,y:.59375},{x:.09375,y:.59375},{x:.09375,y:.59375},{x:.15625,y:.59375},{x:.15625,y:.59375},{x:.21875,y:.59375},{x:.21875,y:.59375},{x:.28125,y:.59375},{x:.28125,y:.59375},{x:.34375,y:.59375},{x:.34375,y:.59375},{x:.40625,y:.59375},{x:.40625,y:.59375},{x:.46875,y:.59375},{x:.46875,y:.59375},{x:.53125,y:.59375},{x:.53125,y:.59375},{x:.59375,y:.59375},{x:.59375,y:.59375},{x:.65625,y:.59375},{x:.65625,y:.59375},{x:.71875,y:.59375},{x:.71875,y:.59375},{x:.78125,y:.59375},{x:.78125,y:.59375},{x:.84375,y:.59375},{x:.84375,y:.59375},{x:.90625,y:.59375},{x:.90625,y:.59375},{x:.96875,y:.59375},{x:.96875,y:.59375},{x:.03125,y:.65625},{x:.03125,y:.65625},{x:.09375,y:.65625},{x:.09375,y:.65625},{x:.15625,y:.65625},{x:.15625,y:.65625},{x:.21875,y:.65625},{x:.21875,y:.65625},{x:.28125,y:.65625},{x:.28125,y:.65625},{x:.34375,y:.65625},{x:.34375,y:.65625},{x:.40625,y:.65625},{x:.40625,y:.65625},{x:.46875,y:.65625},{x:.46875,y:.65625},{x:.53125,y:.65625},{x:.53125,y:.65625},{x:.59375,y:.65625},{x:.59375,y:.65625},{x:.65625,y:.65625},{x:.65625,y:.65625},{x:.71875,y:.65625},{x:.71875,y:.65625},{x:.78125,y:.65625},{x:.78125,y:.65625},{x:.84375,y:.65625},{x:.84375,y:.65625},{x:.90625,y:.65625},{x:.90625,y:.65625},{x:.96875,y:.65625},{x:.96875,y:.65625},{x:.03125,y:.71875},{x:.03125,y:.71875},{x:.09375,y:.71875},{x:.09375,y:.71875},{x:.15625,y:.71875},{x:.15625,y:.71875},{x:.21875,y:.71875},{x:.21875,y:.71875},{x:.28125,y:.71875},{x:.28125,y:.71875},{x:.34375,y:.71875},{x:.34375,y:.71875},{x:.40625,y:.71875},{x:.40625,y:.71875},{x:.46875,y:.71875},{x:.46875,y:.71875},{x:.53125,y:.71875},{x:.53125,y:.71875},{x:.59375,y:.71875},{x:.59375,y:.71875},{x:.65625,y:.71875},{x:.65625,y:.71875},{x:.71875,y:.71875},{x:.71875,y:.71875},{x:.78125,y:.71875},{x:.78125,y:.71875},{x:.84375,y:.71875},{x:.84375,y:.71875},{x:.90625,y:.71875},{x:.90625,y:.71875},{x:.96875,y:.71875},{x:.96875,y:.71875},{x:.03125,y:.78125},{x:.03125,y:.78125},{x:.09375,y:.78125},{x:.09375,y:.78125},{x:.15625,y:.78125},{x:.15625,y:.78125},{x:.21875,y:.78125},{x:.21875,y:.78125},{x:.28125,y:.78125},{x:.28125,y:.78125},{x:.34375,y:.78125},{x:.34375,y:.78125},{x:.40625,y:.78125},{x:.40625,y:.78125},{x:.46875,y:.78125},{x:.46875,y:.78125},{x:.53125,y:.78125},{x:.53125,y:.78125},{x:.59375,y:.78125},{x:.59375,y:.78125},{x:.65625,y:.78125},{x:.65625,y:.78125},{x:.71875,y:.78125},{x:.71875,y:.78125},{x:.78125,y:.78125},{x:.78125,y:.78125},{x:.84375,y:.78125},{x:.84375,y:.78125},{x:.90625,y:.78125},{x:.90625,y:.78125},{x:.96875,y:.78125},{x:.96875,y:.78125},{x:.03125,y:.84375},{x:.03125,y:.84375},{x:.09375,y:.84375},{x:.09375,y:.84375},{x:.15625,y:.84375},{x:.15625,y:.84375},{x:.21875,y:.84375},{x:.21875,y:.84375},{x:.28125,y:.84375},{x:.28125,y:.84375},{x:.34375,y:.84375},{x:.34375,y:.84375},{x:.40625,y:.84375},{x:.40625,y:.84375},{x:.46875,y:.84375},{x:.46875,y:.84375},{x:.53125,y:.84375},{x:.53125,y:.84375},{x:.59375,y:.84375},{x:.59375,y:.84375},{x:.65625,y:.84375},{x:.65625,y:.84375},{x:.71875,y:.84375},{x:.71875,y:.84375},{x:.78125,y:.84375},{x:.78125,y:.84375},{x:.84375,y:.84375},{x:.84375,y:.84375},{x:.90625,y:.84375},{x:.90625,y:.84375},{x:.96875,y:.84375},{x:.96875,y:.84375},{x:.03125,y:.90625},{x:.03125,y:.90625},{x:.09375,y:.90625},{x:.09375,y:.90625},{x:.15625,y:.90625},{x:.15625,y:.90625},{x:.21875,y:.90625},{x:.21875,y:.90625},{x:.28125,y:.90625},{x:.28125,y:.90625},{x:.34375,y:.90625},{x:.34375,y:.90625},{x:.40625,y:.90625},{x:.40625,y:.90625},{x:.46875,y:.90625},{x:.46875,y:.90625},{x:.53125,y:.90625},{x:.53125,y:.90625},{x:.59375,y:.90625},{x:.59375,y:.90625},{x:.65625,y:.90625},{x:.65625,y:.90625},{x:.71875,y:.90625},{x:.71875,y:.90625},{x:.78125,y:.90625},{x:.78125,y:.90625},{x:.84375,y:.90625},{x:.84375,y:.90625},{x:.90625,y:.90625},{x:.90625,y:.90625},{x:.96875,y:.90625},{x:.96875,y:.90625},{x:.03125,y:.96875},{x:.03125,y:.96875},{x:.09375,y:.96875},{x:.09375,y:.96875},{x:.15625,y:.96875},{x:.15625,y:.96875},{x:.21875,y:.96875},{x:.21875,y:.96875},{x:.28125,y:.96875},{x:.28125,y:.96875},{x:.34375,y:.96875},{x:.34375,y:.96875},{x:.40625,y:.96875},{x:.40625,y:.96875},{x:.46875,y:.96875},{x:.46875,y:.96875},{x:.53125,y:.96875},{x:.53125,y:.96875},{x:.59375,y:.96875},{x:.59375,y:.96875},{x:.65625,y:.96875},{x:.65625,y:.96875},{x:.71875,y:.96875},{x:.71875,y:.96875},{x:.78125,y:.96875},{x:.78125,y:.96875},{x:.84375,y:.96875},{x:.84375,y:.96875},{x:.90625,y:.96875},{x:.90625,y:.96875},{x:.96875,y:.96875},{x:.96875,y:.96875},{x:.0625,y:.0625},{x:.0625,y:.0625},{x:.0625,y:.0625},{x:.0625,y:.0625},{x:.0625,y:.0625},{x:.0625,y:.0625},{x:.1875,y:.0625},{x:.1875,y:.0625},{x:.1875,y:.0625},{x:.1875,y:.0625},{x:.1875,y:.0625},{x:.1875,y:.0625},{x:.3125,y:.0625},{x:.3125,y:.0625},{x:.3125,y:.0625},{x:.3125,y:.0625},{x:.3125,y:.0625},{x:.3125,y:.0625},{x:.4375,y:.0625},{x:.4375,y:.0625},{x:.4375,y:.0625},{x:.4375,y:.0625},{x:.4375,y:.0625},{x:.4375,y:.0625},{x:.5625,y:.0625},{x:.5625,y:.0625},{x:.5625,y:.0625},{x:.5625,y:.0625},{x:.5625,y:.0625},{x:.5625,y:.0625},{x:.6875,y:.0625},{x:.6875,y:.0625},{x:.6875,y:.0625},{x:.6875,y:.0625},{x:.6875,y:.0625},{x:.6875,y:.0625},{x:.8125,y:.0625},{x:.8125,y:.0625},{x:.8125,y:.0625},{x:.8125,y:.0625},{x:.8125,y:.0625},{x:.8125,y:.0625},{x:.9375,y:.0625},{x:.9375,y:.0625},{x:.9375,y:.0625},{x:.9375,y:.0625},{x:.9375,y:.0625},{x:.9375,y:.0625},{x:.0625,y:.1875},{x:.0625,y:.1875},{x:.0625,y:.1875},{x:.0625,y:.1875},{x:.0625,y:.1875},{x:.0625,y:.1875},{x:.1875,y:.1875},{x:.1875,y:.1875},{x:.1875,y:.1875},{x:.1875,y:.1875},{x:.1875,y:.1875},{x:.1875,y:.1875},{x:.3125,y:.1875},{x:.3125,y:.1875},{x:.3125,y:.1875},{x:.3125,y:.1875},{x:.3125,y:.1875},{x:.3125,y:.1875},{x:.4375,y:.1875},{x:.4375,y:.1875},{x:.4375,y:.1875},{x:.4375,y:.1875},{x:.4375,y:.1875},{x:.4375,y:.1875},{x:.5625,y:.1875},{x:.5625,y:.1875},{x:.5625,y:.1875},{x:.5625,y:.1875},{x:.5625,y:.1875},{x:.5625,y:.1875},{x:.6875,y:.1875},{x:.6875,y:.1875},{x:.6875,y:.1875},{x:.6875,y:.1875},{x:.6875,y:.1875},{x:.6875,y:.1875},{x:.8125,y:.1875},{x:.8125,y:.1875},{x:.8125,y:.1875},{x:.8125,y:.1875},{x:.8125,y:.1875},{x:.8125,y:.1875},{x:.9375,y:.1875},{x:.9375,y:.1875},{x:.9375,y:.1875},{x:.9375,y:.1875},{x:.9375,y:.1875},{x:.9375,y:.1875},{x:.0625,y:.3125},{x:.0625,y:.3125},{x:.0625,y:.3125},{x:.0625,y:.3125},{x:.0625,y:.3125},{x:.0625,y:.3125},{x:.1875,y:.3125},{x:.1875,y:.3125},{x:.1875,y:.3125},{x:.1875,y:.3125},{x:.1875,y:.3125},{x:.1875,y:.3125},{x:.3125,y:.3125},{x:.3125,y:.3125},{x:.3125,y:.3125},{x:.3125,y:.3125},{x:.3125,y:.3125},{x:.3125,y:.3125},{x:.4375,y:.3125},{x:.4375,y:.3125},{x:.4375,y:.3125},{x:.4375,y:.3125},{x:.4375,y:.3125},{x:.4375,y:.3125},{x:.5625,y:.3125},{x:.5625,y:.3125},{x:.5625,y:.3125},{x:.5625,y:.3125},{x:.5625,y:.3125},{x:.5625,y:.3125},{x:.6875,y:.3125},{x:.6875,y:.3125},{x:.6875,y:.3125},{x:.6875,y:.3125},{x:.6875,y:.3125},{x:.6875,y:.3125},{x:.8125,y:.3125},{x:.8125,y:.3125},{x:.8125,y:.3125},{x:.8125,y:.3125},{x:.8125,y:.3125},{x:.8125,y:.3125},{x:.9375,y:.3125},{x:.9375,y:.3125},{x:.9375,y:.3125},{x:.9375,y:.3125},{x:.9375,y:.3125},{x:.9375,y:.3125},{x:.0625,y:.4375},{x:.0625,y:.4375},{x:.0625,y:.4375},{x:.0625,y:.4375},{x:.0625,y:.4375},{x:.0625,y:.4375},{x:.1875,y:.4375},{x:.1875,y:.4375},{x:.1875,y:.4375},{x:.1875,y:.4375},{x:.1875,y:.4375},{x:.1875,y:.4375},{x:.3125,y:.4375},{x:.3125,y:.4375},{x:.3125,y:.4375},{x:.3125,y:.4375},{x:.3125,y:.4375},{x:.3125,y:.4375},{x:.4375,y:.4375},{x:.4375,y:.4375},{x:.4375,y:.4375},{x:.4375,y:.4375},{x:.4375,y:.4375},{x:.4375,y:.4375},{x:.5625,y:.4375},{x:.5625,y:.4375},{x:.5625,y:.4375},{x:.5625,y:.4375},{x:.5625,y:.4375},{x:.5625,y:.4375},{x:.6875,y:.4375},{x:.6875,y:.4375},{x:.6875,y:.4375},{x:.6875,y:.4375},{x:.6875,y:.4375},{x:.6875,y:.4375},{x:.8125,y:.4375},{x:.8125,y:.4375},{x:.8125,y:.4375},{x:.8125,y:.4375},{x:.8125,y:.4375},{x:.8125,y:.4375},{x:.9375,y:.4375},{x:.9375,y:.4375},{x:.9375,y:.4375},{x:.9375,y:.4375},{x:.9375,y:.4375},{x:.9375,y:.4375},{x:.0625,y:.5625},{x:.0625,y:.5625},{x:.0625,y:.5625},{x:.0625,y:.5625},{x:.0625,y:.5625},{x:.0625,y:.5625},{x:.1875,y:.5625},{x:.1875,y:.5625},{x:.1875,y:.5625},{x:.1875,y:.5625},{x:.1875,y:.5625},{x:.1875,y:.5625},{x:.3125,y:.5625},{x:.3125,y:.5625},{x:.3125,y:.5625},{x:.3125,y:.5625},{x:.3125,y:.5625},{x:.3125,y:.5625},{x:.4375,y:.5625},{x:.4375,y:.5625},{x:.4375,y:.5625},{x:.4375,y:.5625},{x:.4375,y:.5625},{x:.4375,y:.5625},{x:.5625,y:.5625},{x:.5625,y:.5625},{x:.5625,y:.5625},{x:.5625,y:.5625},{x:.5625,y:.5625},{x:.5625,y:.5625},{x:.6875,y:.5625},{x:.6875,y:.5625},{x:.6875,y:.5625},{x:.6875,y:.5625},{x:.6875,y:.5625},{x:.6875,y:.5625},{x:.8125,y:.5625},{x:.8125,y:.5625},{x:.8125,y:.5625},{x:.8125,y:.5625},{x:.8125,y:.5625},{x:.8125,y:.5625},{x:.9375,y:.5625},{x:.9375,y:.5625},{x:.9375,y:.5625},{x:.9375,y:.5625},{x:.9375,y:.5625},{x:.9375,y:.5625},{x:.0625,y:.6875},{x:.0625,y:.6875},{x:.0625,y:.6875},{x:.0625,y:.6875},{x:.0625,y:.6875},{x:.0625,y:.6875},{x:.1875,y:.6875},{x:.1875,y:.6875},{x:.1875,y:.6875},{x:.1875,y:.6875},{x:.1875,y:.6875},{x:.1875,y:.6875},{x:.3125,y:.6875},{x:.3125,y:.6875},{x:.3125,y:.6875},{x:.3125,y:.6875},{x:.3125,y:.6875},{x:.3125,y:.6875},{x:.4375,y:.6875},{x:.4375,y:.6875},{x:.4375,y:.6875},{x:.4375,y:.6875},{x:.4375,y:.6875},{x:.4375,y:.6875},{x:.5625,y:.6875},{x:.5625,y:.6875},{x:.5625,y:.6875},{x:.5625,y:.6875},{x:.5625,y:.6875},{x:.5625,y:.6875},{x:.6875,y:.6875},{x:.6875,y:.6875},{x:.6875,y:.6875},{x:.6875,y:.6875},{x:.6875,y:.6875},{x:.6875,y:.6875},{x:.8125,y:.6875},{x:.8125,y:.6875},{x:.8125,y:.6875},{x:.8125,y:.6875},{x:.8125,y:.6875},{x:.8125,y:.6875},{x:.9375,y:.6875},{x:.9375,y:.6875},{x:.9375,y:.6875},{x:.9375,y:.6875},{x:.9375,y:.6875},{x:.9375,y:.6875},{x:.0625,y:.8125},{x:.0625,y:.8125},{x:.0625,y:.8125},{x:.0625,y:.8125},{x:.0625,y:.8125},{x:.0625,y:.8125},{x:.1875,y:.8125},{x:.1875,y:.8125},{x:.1875,y:.8125},{x:.1875,y:.8125},{x:.1875,y:.8125},{x:.1875,y:.8125},{x:.3125,y:.8125},{x:.3125,y:.8125},{x:.3125,y:.8125},{x:.3125,y:.8125},{x:.3125,y:.8125},{x:.3125,y:.8125},{x:.4375,y:.8125},{x:.4375,y:.8125},{x:.4375,y:.8125},{x:.4375,y:.8125},{x:.4375,y:.8125},{x:.4375,y:.8125},{x:.5625,y:.8125},{x:.5625,y:.8125},{x:.5625,y:.8125},{x:.5625,y:.8125},{x:.5625,y:.8125},{x:.5625,y:.8125},{x:.6875,y:.8125},{x:.6875,y:.8125},{x:.6875,y:.8125},{x:.6875,y:.8125},{x:.6875,y:.8125},{x:.6875,y:.8125},{x:.8125,y:.8125},{x:.8125,y:.8125},{x:.8125,y:.8125},{x:.8125,y:.8125},{x:.8125,y:.8125},{x:.8125,y:.8125},{x:.9375,y:.8125},{x:.9375,y:.8125},{x:.9375,y:.8125},{x:.9375,y:.8125},{x:.9375,y:.8125},{x:.9375,y:.8125},{x:.0625,y:.9375},{x:.0625,y:.9375},{x:.0625,y:.9375},{x:.0625,y:.9375},{x:.0625,y:.9375},{x:.0625,y:.9375},{x:.1875,y:.9375},{x:.1875,y:.9375},{x:.1875,y:.9375},{x:.1875,y:.9375},{x:.1875,y:.9375},{x:.1875,y:.9375},{x:.3125,y:.9375},{x:.3125,y:.9375},{x:.3125,y:.9375},{x:.3125,y:.9375},{x:.3125,y:.9375},{x:.3125,y:.9375},{x:.4375,y:.9375},{x:.4375,y:.9375},{x:.4375,y:.9375},{x:.4375,y:.9375},{x:.4375,y:.9375},{x:.4375,y:.9375},{x:.5625,y:.9375},{x:.5625,y:.9375},{x:.5625,y:.9375},{x:.5625,y:.9375},{x:.5625,y:.9375},{x:.5625,y:.9375},{x:.6875,y:.9375},{x:.6875,y:.9375},{x:.6875,y:.9375},{x:.6875,y:.9375},{x:.6875,y:.9375},{x:.6875,y:.9375},{x:.8125,y:.9375},{x:.8125,y:.9375},{x:.8125,y:.9375},{x:.8125,y:.9375},{x:.8125,y:.9375},{x:.8125,y:.9375},{x:.9375,y:.9375},{x:.9375,y:.9375},{x:.9375,y:.9375},{x:.9375,y:.9375},{x:.9375,y:.9375},{x:.9375,y:.9375}],iQ=[0,5,9,13,17,1,2],sQ=0,oQ={thumb:[1,2,3,4],index:[5,6,7,8],middle:[9,10,11,12],ring:[13,14,15,16],pinky:[17,18,19,20],palm:[0]};async function lQ(e,t){aQ||function(){const e=tQ?new class{constructor(e){var t,n,a,r;d(this,"model"),d(this,"anchors"),d(this,"anchorsTensor"),d(this,"inputSize"),d(this,"inputSizeTensor"),d(this,"doubleInputSizeTensor"),this.model=e,this.anchors=rQ.map((e=>[e.x,e.y])),this.anchorsTensor=Op(this.anchors),this.inputSize=(null==(r=null==(a=null==(n=null==(t=null==this?void 0:this.model)?void 0:t.inputs)?void 0:n[0])?void 0:a.shape)?void 0:r[2])||0,this.inputSizeTensor=Fp([this.inputSize,this.inputSize]),this.doubleInputSizeTensor=Fp([2*this.inputSize,2*this.inputSize])}normalizeBoxes(e){const t={};t.boxOffsets=nl(e,[0,0],[-1,2]),t.boxSizes=nl(e,[0,2],[-1,2]),t.div=bo(t.boxOffsets,this.inputSizeTensor),t.boxCenterPoints=Ao(t.div,this.anchorsTensor),t.halfBoxSizes=bo(t.boxSizes,this.doubleInputSizeTensor),t.sub=Hu(t.boxCenterPoints,t.halfBoxSizes),t.startPoints=vo(t.sub,this.inputSizeTensor),t.add=Ao(t.boxCenterPoints,t.halfBoxSizes),t.endPoints=vo(t.add,this.inputSizeTensor);const n=xl([t.startPoints,t.endPoints],1);return Object.keys(t).forEach((e=>io(t[e]))),n}normalizeLandmarks(e,t){const n={};n.reshape=Zo(e,[-1,7,2]),n.div=bo(n.reshape,this.inputSizeTensor),n.landmarks=Ao(n.div,this.anchors[t]?this.anchors[t]:0);const a=vo(n.landmarks,this.inputSizeTensor);return Object.keys(n).forEach((e=>io(n[e]))),a}async predict(e,t){var n;const a={};a.resize=yh.resizeBilinear(e,[this.inputSize,this.inputSize]),a.div=bo(a.resize,EX.tf127),a.image=Hu(a.div,EX.tf1),a.batched=this.model.execute(a.image),a.predictions=Ep(a.batched),a.slice=nl(a.predictions,[0,0],[-1,1]),a.sigmoid=tl(a.slice),a.scores=Ep(a.sigmoid);const r=await a.scores.data();a.boxes=nl(a.predictions,[0,1],[-1,4]),a.norm=this.normalizeBoxes(a.boxes),a.nms=await yh.nonMaxSuppressionAsync(a.norm,a.scores,3*((null==(n=t.hand)?void 0:n.maxDetected)||1),t.hand.iouThreshold,t.hand.minConfidence);const i=await a.nms.array(),s=[];for(const t of i){const n={};n.box=nl(a.norm,[t,0],[1,-1]),n.slice=nl(a.predictions,[t,5],[1,14]),n.norm=this.normalizeLandmarks(n.slice,t),n.palmLandmarks=Zo(n.norm,[-1,2]);const i=await n.box.data(),o=HJ({startPoint:i.slice(0,2),endPoint:i.slice(2,4),palmLandmarks:await n.palmLandmarks.array(),confidence:r[t]},[(e.shape[2]||1)/this.inputSize,(e.shape[1]||0)/this.inputSize]);s.push(o),Object.keys(n).forEach((e=>io(n[e])))}return Object.keys(a).forEach((e=>io(a[e]))),s}}(tQ):void 0;e&&nQ&&(aQ=new class{constructor(e,t){var n,a,r;d(this,"handDetector"),d(this,"handPoseModel"),d(this,"inputSize"),d(this,"storedBoxes"),d(this,"skipped"),d(this,"detectedHands"),this.handDetector=e,this.handPoseModel=t,this.inputSize=(null==(r=null==(a=null==(n=this.handPoseModel)?void 0:n.inputs)?void 0:a[0].shape)?void 0:r[2])||0,this.storedBoxes=[],this.skipped=Number.MAX_SAFE_INTEGER,this.detectedHands=0}calculateLandmarksBoundingBox(e){const t=e.map((e=>e[0])),n=e.map((e=>e[1]));return{startPoint:[Math.min(...t),Math.min(...n)],endPoint:[Math.max(...t),Math.max(...n)]}}getBoxForPalmLandmarks(e,t){const n=e.map((e=>eQ([...e,1],t)));return jJ(qJ(this.calculateLandmarksBoundingBox(n)),5)}getBoxForHandLandmarks(e){const t=jJ(qJ(this.calculateLandmarksBoundingBox(e)),1.65);t.palmLandmarks=[];for(let n=0;n<iQ.length;n++)t.palmLandmarks.push(e[iQ[n]].slice(0,2));return t}transformRawCoords(e,t,n,a){const r=VJ(t),i=[r[0]/this.inputSize,r[1]/this.inputSize,(r[0]+r[1])/this.inputSize/2],s=e.map((e=>[i[0]*(e[0]-this.inputSize/2),i[1]*(e[1]-this.inputSize/2),i[2]*e[2]])),o=QJ(n,[0,0]),l=s.map((e=>[...eQ(e,o),e[2]])),u=function(e){const t=[[e[0][0],e[1][0]],[e[0][1],e[1][1]]],n=[e[0][2],e[1][2]],a=[-ZJ(t[0],n),-ZJ(t[1],n)];return[t[0].concat(a[0]),t[1].concat(a[1]),[0,0,1]]}(a),d=[...UJ(t),1],p=[ZJ(d,u[0]),ZJ(d,u[1])];return l.map((e=>[Math.trunc(e[0]+p[0]),Math.trunc(e[1]+p[1]),Math.trunc(e[2])]))}async estimateHands(e,t){let n,a=!1;const r=(t.hand.skipTime||0)>Gj()-sQ,i=this.skipped<(t.hand.skipFrames||0);t.skipAllowed&&r&&i?this.skipped++:(n=await this.handDetector.predict(e,t),this.skipped=0),n&&n.length>0&&(n.length!==this.detectedHands&&this.detectedHands!==t.hand.maxDetected||!t.hand.landmarks)&&(this.detectedHands=0,this.storedBoxes=[...n],this.storedBoxes.length>0&&(a=!0));const s=[];for(let n=0;n<this.storedBoxes.length;n++){const r=this.storedBoxes[n];if(r)if(t.hand.landmarks){const i=t.hand.rotation?XJ(r.palmLandmarks[0],r.palmLandmarks[2]):0,o=UJ(r),l=[o[0]/e.shape[2],o[1]/e.shape[1]],u=t.hand.rotation&&gq.kernels.includes("rotatewithoffset")?yh.rotateWithOffset(e,i,0,l):e.clone(),d=QJ(-i,o),p=a?this.getBoxForPalmLandmarks(r.palmLandmarks,d):r,c=GJ(p,u,[this.inputSize,this.inputSize]),h=bo(c,EX.tf255);io(c),io(u);const[f,m]=this.handPoseModel.execute(h);sQ=Gj(),io(h);const y=(await f.data())[0];if(io(f),y>=t.hand.minConfidence/4){const e=Zo(m,[-1,3]),t=await e.array();io(m),io(e);const a=this.transformRawCoords(t,p,i,d),o=this.getBoxForHandLandmarks(a);this.storedBoxes[n]={...o,confidence:y};const l={landmarks:a,confidence:y,boxConfidence:r.confidence,fingerConfidence:y,box:{topLeft:o.startPoint,bottomRight:o.endPoint}};s.push(l)}else this.storedBoxes[n]=null;io(m)}else{const e=jJ(qJ(r),1.65),t={confidence:r.confidence,boxConfidence:r.confidence,fingerConfidence:0,box:{topLeft:e.startPoint,bottomRight:e.endPoint},landmarks:[]};s.push(t)}}return this.storedBoxes=this.storedBoxes.filter((e=>null!==e)),this.detectedHands=s.length,s.length>t.hand.maxDetected&&(s.length=t.hand.maxDetected),s}}(e,nQ))}();const n=await aQ.estimateHands(e,t);if(!n)return[];const a=[];for(let t=0;t<n.length;t++){const r={};if(n[t].landmarks)for(const e of Object.keys(oQ))r[e]=oQ[e].map((e=>n[t].landmarks[e]));const i=n[t].landmarks;let s=[Number.MAX_SAFE_INTEGER,Number.MAX_SAFE_INTEGER,0,0],o=[0,0,0,0];if(i&&i.length>0){for(const e of i)e[0]<s[0]&&(s[0]=e[0]),e[1]<s[1]&&(s[1]=e[1]),e[0]>s[2]&&(s[2]=e[0]),e[1]>s[3]&&(s[3]=e[1]);s[2]-=s[0],s[3]-=s[1],o=[s[0]/(e.shape[2]||0),s[1]/(e.shape[1]||0),s[2]/(e.shape[2]||0),s[3]/(e.shape[1]||0)]}else s=n[t].box?[Math.trunc(Math.max(0,n[t].box.topLeft[0])),Math.trunc(Math.max(0,n[t].box.topLeft[1])),Math.trunc(Math.min(e.shape[2]||0,n[t].box.bottomRight[0])-Math.max(0,n[t].box.topLeft[0])),Math.trunc(Math.min(e.shape[1]||0,n[t].box.bottomRight[1])-Math.max(0,n[t].box.topLeft[1]))]:[0,0,0,0],o=[n[t].box.topLeft[0]/(e.shape[2]||0),n[t].box.topLeft[1]/(e.shape[1]||0),(n[t].box.bottomRight[0]-n[t].box.topLeft[0])/(e.shape[2]||0),(n[t].box.bottomRight[1]-n[t].box.topLeft[1])/(e.shape[1]||0)];const l=PJ(i);a.push({id:t,score:Math.round(100*n[t].confidence)/100,boxScore:Math.round(100*n[t].boxConfidence)/100,fingerScore:Math.round(100*n[t].fingerConfidence)/100,label:"hand",box:s,boxRaw:o,keypoints:i,annotations:r,landmarks:l})}return a}var uQ=[null,null],dQ=["StatefulPartitionedCall/Postprocessor/Slice","StatefulPartitionedCall/Postprocessor/ExpandDims_1"],pQ=[[0,0],[0,0]],cQ=["hand","fist","pinch","point","face","tip","pinchtip"],hQ=Number.MAX_SAFE_INTEGER,fQ=0,mQ=[0,0],yQ={boxes:[],hands:[]},gQ={thumb:[1,2,3,4],index:[5,6,7,8],middle:[9,10,11,12],ring:[13,14,15,16],pinky:[17,18,19,20],base:[0],palm:[0,17,13,9,5,1,0]};async function AQ(e,t,n){const a={id:t.id,score:Math.round(100*t.score)/100,boxScore:Math.round(100*t.score)/100,fingerScore:0,box:t.box,boxRaw:t.boxRaw,label:t.label,keypoints:[],landmarks:{},annotations:{}};if(e&&uQ[1]&&n.hand.landmarks&&t.score>(n.hand.minConfidence||0)){const r={},i=[t.boxRaw[1],t.boxRaw[0],t.boxRaw[3]+t.boxRaw[1],t.boxRaw[2]+t.boxRaw[0]];r.crop=yh.cropAndResize(e,[i],[0],[pQ[1][0],pQ[1][1]],"bilinear"),r.div=bo(r.crop,EX.tf255),[r.score,r.keypoints]=uQ[1].execute(r.div,["Identity_1","Identity"]);const s=(await r.score.data())[0],o=(100-Math.trunc(100/(1+Math.exp(s))))/100;if(o>=(n.hand.minConfidence||0)){a.fingerScore=o,r.reshaped=Zo(r.keypoints,[-1,3]);const e=(await r.reshaped.array()).map((e=>[e[0]/pQ[1][1],e[1]/pQ[1][0],e[2]||0])).map((e=>[e[0]*t.boxRaw[2],e[1]*t.boxRaw[3],e[2]||0]));a.keypoints=e.map((e=>[mQ[0]*(e[0]+t.boxRaw[0]),mQ[1]*(e[1]+t.boxRaw[1]),e[2]||0])),a.landmarks=PJ(a.keypoints);for(const e of Object.keys(gQ))a.annotations[e]=gQ[e].map((e=>a.landmarks&&a.keypoints[e]?a.keypoints[e]:null))}Object.keys(r).forEach((e=>io(r[e])))}return a}async function xQ(e,t){var n,a;if(!((null==(n=uQ[0])?void 0:n.executor)&&(null==(a=uQ[1])?void 0:a.executor)&&uQ[0].inputs[0].shape&&uQ[1].inputs[0].shape))return[];mQ=[e.shape[2]||0,e.shape[1]||0],hQ++;const r=(t.hand.skipTime||0)>Gj()-fQ,i=hQ<(t.hand.skipFrames||0);return t.skipAllowed&&r&&i?yQ.hands:new Promise((async n=>{const a=3*(t.hand.skipTime||0)>Gj()-fQ,r=hQ<3*(t.hand.skipFrames||0);t.skipAllowed&&yQ.hands.length===t.hand.maxDetected||t.skipAllowed&&a&&r&&yQ.hands.length>0?yQ.hands=await Promise.all(yQ.boxes.map((n=>AQ(e,n,t)))):(yQ.boxes=await async function(e,t){const n=[];if(!e||!uQ[0])return n;const a={},r=(e.shape[2]||1)/(e.shape[1]||1),i=Math.min(8*Math.round((e.shape[1]||0)/8),512),s=8*Math.round(i*r/8);a.resize=yh.resizeBilinear(e,[i,s]),a.cast=qs(a.resize,"int32"),[a.rawScores,a.rawBoxes]=await uQ[0].executeAsync(a.cast,dQ),a.boxes=Ep(a.rawBoxes,[0,2]),a.scores=Ep(a.rawScores,[0]);const o=Kp(a.scores,1);io(o[4]),o.splice(4,1),a.filtered=Rp(o,1),io(o),a.max=iu(a.filtered,1),a.argmax=To(a.filtered,1);let l=0;a.nms=await yh.nonMaxSuppressionAsync(a.boxes,a.max,(t.hand.maxDetected||0)+1,t.hand.iouThreshold||0,t.hand.minConfidence||1);const u=await a.nms.data(),d=await a.max.data(),p=await a.argmax.data();for(const e of Array.from(u)){const t=nl(a.boxes,e,1),r=await t.data();io(t);const i=[r[1],r[0],r[3]-r[1],r[2]-r[0]],s=_K(i,1.4),o=[Math.trunc(i[0]*mQ[0]),Math.trunc(i[1]*mQ[1]),Math.trunc(i[2]*mQ[0]),Math.trunc(i[3]*mQ[1])],u={id:l++,score:d[e],box:o,boxRaw:s,label:cQ[p[e]]};n.push(u)}return Object.keys(a).forEach((e=>io(a[e]))),n.sort(((e,t)=>t.score-e.score)),n.length>(t.hand.maxDetected||1)&&(n.length=t.hand.maxDetected||1),n}(e,t),fQ=Gj(),yQ.hands=await Promise.all(yQ.boxes.map((n=>AQ(e,n,t)))),hQ=0);const i=[...yQ.boxes];if(yQ.boxes.length=0,t.cacheSensitivity>0)for(let n=0;n<yQ.hands.length;n++){const a=MK(yQ.hands[n].keypoints,mQ);if(a.box[2]/(e.shape[2]||1)>.05&&a.box[3]/(e.shape[1]||1)>.05&&yQ.hands[n].fingerScore&&yQ.hands[n].fingerScore>(t.hand.minConfidence||0)){const e=_K(a.box,1.6),t=_K(a.boxRaw,1.6);yQ.boxes.push({...i[n],box:e,boxRaw:t})}}for(let e=0;e<yQ.hands.length;e++){const t=$K(yQ.hands[e].keypoints,mQ);yQ.hands[e].box=t.box,yQ.hands[e].boxRaw=t.boxRaw}n(yQ.hands)}))}var bQ=(e=null)=>({face:[],body:[],hand:[],gesture:[],object:[],persons:[],performance:{},timestamp:0,width:0,height:0,error:e}),vQ={};u(vQ,{connected:()=>CQ,horizontal:()=>IQ,kpt:()=>kQ,relative:()=>NQ,vertical:()=>SQ});var wQ,kQ=["nose","leftEye","rightEye","leftEar","rightEar","leftShoulder","rightShoulder","leftElbow","rightElbow","leftWrist","rightWrist","leftHip","rightHip","leftKnee","rightKnee","leftAnkle","rightAnkle"],IQ=[["leftEye","rightEye"],["leftEar","rightEar"],["leftShoulder","rightShoulder"],["leftElbow","rightElbow"],["leftWrist","rightWrist"],["leftHip","rightHip"],["leftKnee","rightKnee"],["leftAnkle","rightAnkle"]],SQ=[["leftKnee","leftShoulder"],["rightKnee","rightShoulder"],["leftAnkle","leftKnee"],["rightAnkle","rightKnee"]],NQ=[[["leftHip","rightHip"],["leftShoulder","rightShoulder"]],[["leftElbow","rightElbow"],["leftShoulder","rightShoulder"]]],CQ={leftLeg:["leftHip","leftKnee","leftAnkle"],rightLeg:["rightHip","rightKnee","rightAnkle"],torso:["leftShoulder","rightShoulder","rightHip","leftHip","leftShoulder"],leftArm:["leftShoulder","leftElbow","leftWrist"],rightArm:["rightShoulder","rightElbow","rightWrist"],head:[]},TQ=bQ(),EQ=0;async function RQ(e){return!wQ||gq.initial?wQ=await NX(e.segmentation.modelPath):e.debug&&Uj("cached model:",wQ.modelUrl),wQ}var $Q={};function MQ(e,t,n={order:2,multiplier:25}){if(!e||!e)return Number.MAX_SAFE_INTEGER;let a=0;for(let r=0;r<e.length;r++){const i=n.order&&2!==n.order?Math.abs(e[r]-t[r]):e[r]-t[r];a+=n.order&&2!==n.order?i**n.order:i*i}return(n.multiplier||20)*a}u($Q,{distance:()=>MQ,find:()=>OQ,similarity:()=>FQ});var _Q=(e,t,n,a)=>{if(0===e)return 1;const r=(1-(2===t?Math.sqrt(e):e**(1/t))/100-n)/(a-n);return Math.max(Math.min(r,1),0)};function FQ(e,t,n={order:2,multiplier:25,min:.2,max:.8}){const a=MQ(e,t,n);return _Q(a,n.order||2,n.min||0,n.max||1)}function OQ(e,t,n={order:2,multiplier:25,threshold:0,min:.2,max:.8}){if(!Array.isArray(e)||!Array.isArray(t)||e.length<64||0===t.length)return{index:-1,distance:Number.POSITIVE_INFINITY,similarity:0};let a=Number.MAX_SAFE_INTEGER,r=-1;for(let i=0;i<t.length;i++){const s=t[i].length===e.length?MQ(e,t[i],n):Number.MAX_SAFE_INTEGER;if(s<a&&(a=s,r=i),a<(n.threshold||0))break}return{index:r,distance:a,similarity:_Q(a,n.order||2,n.min||0,n.max||1)}}u({},{Models:()=>P1,validateModel:()=>R1});var PQ,DQ=.005,zQ={keypoints:[],padding:[[0,0],[0,0],[0,0],[0,0]]};function LQ(e){for(const t of IQ){const n=e.keypoints.findIndex((e=>e.part===t[0])),a=e.keypoints.findIndex((e=>e.part===t[1]));if(e.keypoints[n]&&e.keypoints[a]&&e.keypoints[n].position[0]<e.keypoints[a].position[0]){const t=e.keypoints[n];e.keypoints[n]=e.keypoints[a],e.keypoints[a]=t}}for(const t of SQ){const n=e.keypoints.findIndex((e=>e&&e.part===t[0])),a=e.keypoints.findIndex((e=>e&&e.part===t[1]));e.keypoints[n]&&e.keypoints[a]&&e.keypoints[n].position[1]<e.keypoints[a].position[1]&&e.keypoints.splice(n,1)}for(const[t,n]of NQ){const a=e.keypoints.findIndex((e=>e&&e.part===t[0])),r=e.keypoints.findIndex((e=>e&&e.part===t[1])),i=e.keypoints.findIndex((e=>e&&e.part===n[0])),s=e.keypoints.findIndex((e=>e&&e.part===n[1]));if(!e.keypoints[i]||!e.keypoints[s])continue;const o=e.keypoints[a]?[Math.abs(e.keypoints[i].position[0]-e.keypoints[a].position[0]),Math.abs(e.keypoints[s].position[0]-e.keypoints[a].position[0])]:[0,0],l=e.keypoints[r]?[Math.abs(e.keypoints[s].position[0]-e.keypoints[r].position[0]),Math.abs(e.keypoints[i].position[0]-e.keypoints[r].position[0])]:[0,0];if(o[0]>o[1]||l[0]>l[1]){const t=e.keypoints[a];e.keypoints[a]=e.keypoints[r],e.keypoints[r]=t}}}function WQ(e){for(let t=0;t<e.length;t++)if(e[t]&&zQ.keypoints[t]){const n=[Math.abs(e[t].positionRaw[0]-zQ.keypoints[t].positionRaw[0]),Math.abs(e[t].positionRaw[1]-zQ.keypoints[t].positionRaw[1])];n[0]<DQ&&n[1]<DQ?e[t]=zQ.keypoints[t]:zQ.keypoints[t]=e[t]}else zQ.keypoints[t]=e[t];return e}function BQ(e,t){e.keypoints=e.keypoints.filter((e=>null==e?void 0:e.position));for(const n of e.keypoints)n.position=[n.position[0]*(t[0]+zQ.padding[2][0]+zQ.padding[2][1])/t[0]-zQ.padding[2][0],n.position[1]*(t[1]+zQ.padding[1][0]+zQ.padding[1][1])/t[1]-zQ.padding[1][0]],n.positionRaw=[n.position[0]/t[0],n.position[1]/t[1]];const n=$K(e.keypoints.map((e=>e.position)),t);return e.box=n.box,e.boxRaw=n.boxRaw,e}var VQ,UQ=0,GQ=Number.MAX_SAFE_INTEGER,HQ={boxes:[],bodies:[],last:0};async function jQ(e,t){var n;if(!(null==PQ?void 0:PQ.executor)||!(null==(n=null==PQ?void 0:PQ.inputs)?void 0:n[0].shape))return[];t.skipAllowed||(HQ.boxes.length=0),GQ++;const a=(t.body.skipTime||0)>Gj()-HQ.last,r=GQ<(t.body.skipFrames||0);return t.skipAllowed&&a&&r?HQ.bodies:new Promise((async n=>{const a={};GQ=0,a.input=function(e,t){var n,a;const r={};if(!(null==(n=null==e?void 0:e.shape)?void 0:n[1])||!(null==(a=null==e?void 0:e.shape)?void 0:a[2]))return e;zQ.padding=[[0,0],[e.shape[2]>e.shape[1]?Math.trunc((e.shape[2]-e.shape[1])/2):0,e.shape[2]>e.shape[1]?Math.trunc((e.shape[2]-e.shape[1])/2):0],[e.shape[1]>e.shape[2]?Math.trunc((e.shape[1]-e.shape[2])/2):0,e.shape[1]>e.shape[2]?Math.trunc((e.shape[1]-e.shape[2])/2):0],[0,0]],r.pad=xd(e,zQ.padding),r.resize=yh.resizeBilinear(r.pad,[t,t]);const i=qs(r.resize,"int32");return Object.keys(r).forEach((e=>io(r[e]))),i}(e,UQ),a.res=null==PQ?void 0:PQ.execute(a.input),HQ.last=Gj();const r=await a.res.array();HQ.bodies=17===a.res.shape[2]?function(e,t,n){const a=e[0][0],r=[];let i=0;for(let e=0;e<a.length;e++)if(i=a[e][2],i>t.body.minConfidence){const t=[a[e][1],a[e][0]];r.push({score:Math.round(100*i)/100,part:kQ[e],positionRaw:t,position:[Math.round((n.shape[2]||0)*t[0]),Math.round((n.shape[1]||0)*t[1])]})}i=r.reduce(((e,t)=>t.score>e?t.score:e),0);const s=[],o=$K(r.map((e=>e.position)),[n.shape[2],n.shape[1]]),l={};for(const[e,n]of Object.entries(CQ)){const a=[];for(let e=0;e<n.length-1;e++){const i=r.find((t=>t.part===n[e])),s=r.find((t=>t.part===n[e+1]));i&&s&&i.score>(t.body.minConfidence||0)&&s.score>(t.body.minConfidence||0)&&a.push([i.position,s.position])}l[e]=a}const u={id:0,score:i,box:o.box,boxRaw:o.boxRaw,keypoints:r,annotations:l};return LQ(u),s.push(u),s}(r,t,e):function(e,t,n){const a=[];for(let r=0;r<e[0].length;r++){const i=e[0][r],s=Math.round(100*i[55])/100;if(s>t.body.minConfidence){const e=[];for(let a=0;a<17;a++){const r=i[3*a+2];if(r>t.body.minConfidence){const t=[i[3*a+1],i[3*a+0]];e.push({part:kQ[a],score:Math.round(100*r)/100,positionRaw:t,position:[Math.round((n.shape[2]||0)*t[0]),Math.round((n.shape[1]||0)*t[1])]})}}const o=[i[52],i[51],i[54]-i[52],i[53]-i[51]],l=[Math.trunc(o[0]*(n.shape[2]||0)),Math.trunc(o[1]*(n.shape[1]||0)),Math.trunc(o[2]*(n.shape[2]||0)),Math.trunc(o[3]*(n.shape[1]||0))],u={};for(const[n,a]of Object.entries(CQ)){const r=[];for(let n=0;n<a.length-1;n++){const i=e.find((e=>e.part===a[n])),s=e.find((e=>e.part===a[n+1]));i&&s&&i.score>(t.body.minConfidence||0)&&s.score>(t.body.minConfidence||0)&&r.push([i.position,s.position])}u[n]=r}const d={id:r,score:s,box:l,boxRaw:o,keypoints:[...e],annotations:u};LQ(d),a.push(d)}}return a.sort(((e,t)=>t.score-e.score)),a.length>t.body.maxDetected&&(a.length=t.body.maxDetected),a}(r,t,e);for(const t of HQ.bodies)BQ(t,[e.shape[2]||1,e.shape[1]||1]),WQ(t.keypoints);Object.keys(a).forEach((e=>io(a[e]))),n(HQ.bodies)}))}var qQ=[],XQ=0,KQ=Number.MAX_SAFE_INTEGER,ZQ=0,YQ=2.5;async function JQ(e,t){if(!(null==VQ?void 0:VQ.executor))return[];const n=(t.object.skipTime||0)>Gj()-XQ,a=KQ<(t.object.skipFrames||0);return t.skipAllowed&&n&&a&&qQ.length>0?(KQ++,qQ):(KQ=0,gq.kernels.includes("mod")&&gq.kernels.includes("sparsetodense")?new Promise((async n=>{const a=[e.shape[2]||0,e.shape[1]||0],r=yh.resizeBilinear(e,[ZQ,ZQ],!1),i=bo(r,EX.tf255),s=tc(i,[0,3,1,2]);let o;t.object.enabled&&(o=VQ.execute(s)),XQ=Gj();const l=await async function(e,t,n){var a,r;let i=0,s=[];const o=ZQ;for(const l of[1,2,4]){const u=13*l,d=Ep(e.find((e=>e.shape[1]===u**2&&(e.shape[2]||0)===HK.length))),p=await d.array(),c=Ep(e.find((e=>e.shape[1]===u**2&&(e.shape[2]||0)<HK.length))),h=Zo(c,[-1,4,((null==(a=c.shape)?void 0:a[1])||0)/4]),f=To(h,2),m=await f.array();for(let e=0;e<d.shape[0];e++)for(let a=0;a<((null==(r=d.shape)?void 0:r[1])||0);a++){const r=p[e][a];if(r>(n.object.minConfidence||0)&&61!==a){const n=(.5+Math.trunc(e%u))/u,d=(.5+Math.trunc(e/u))/u,p=m[e].map((e=>e*(u/l/o))),[c,h]=[n-YQ/l*p[0],d-YQ/l*p[1]],[f,y]=[n+YQ/l*p[2]-c,d+YQ/l*p[3]-h];let g=[c,h,f,y];g=g.map((e=>Math.max(0,Math.min(e,1))));const A=[g[0]*t[0],g[1]*t[1],g[2]*t[0],g[3]*t[1]],x={id:i++,score:Math.round(100*r)/100,class:a+1,label:HK[a].label,box:A.map((e=>Math.trunc(e))),boxRaw:g};s.push(x)}}io([d,c,h,f])}const l=s.map((e=>[e.boxRaw[1],e.boxRaw[0],e.boxRaw[3],e.boxRaw[2]])),u=s.map((e=>e.score));let d=[];if(l&&l.length>0){const e=await yh.nonMaxSuppressionAsync(l,u,n.object.maxDetected||0,n.object.iouThreshold,n.object.minConfidence);d=Array.from(await e.data()),io(e)}return s=s.filter(((e,t)=>d.includes(t))).sort(((e,t)=>t.score-e.score)),s}(o,a,t);qQ=l,io([r,i,s,...o]),n(l)})):qQ)}var QQ=["nose","leftEye","rightEye","leftEar","rightEar","leftShoulder","rightShoulder","leftElbow","rightElbow","leftWrist","rightWrist","leftHip","rightHip","leftKnee","rightKnee","leftAnkle","rightAnkle"],e1=QQ.length,t1=QQ.reduce(((e,t,n)=>(e[t]=n,e)),{}),n1=([["leftHip","leftShoulder"],["leftElbow","leftShoulder"],["leftElbow","leftWrist"],["leftHip","leftKnee"],["leftKnee","leftAnkle"],["rightHip","rightShoulder"],["rightElbow","rightShoulder"],["rightElbow","rightWrist"],["rightHip","rightKnee"],["rightKnee","rightAnkle"],["leftShoulder","rightShoulder"],["leftHip","rightHip"]].map((([e,t])=>[t1[e],t1[t]])),[["nose","leftEye"],["leftEye","leftEar"],["nose","rightEye"],["rightEye","rightEar"],["nose","leftShoulder"],["leftShoulder","leftElbow"],["leftElbow","leftWrist"],["leftShoulder","leftHip"],["leftHip","leftKnee"],["leftKnee","leftAnkle"],["nose","rightShoulder"],["rightShoulder","rightElbow"],["rightElbow","rightWrist"],["rightShoulder","rightHip"],["rightHip","rightKnee"],["rightKnee","rightAnkle"]]);function a1(e){const t=e.reduce((({maxX:e,maxY:t,minX:n,minY:a},{position:{x:r,y:i}})=>({maxX:Math.max(e,r),maxY:Math.max(t,i),minX:Math.min(n,r),minY:Math.min(a,i)})),{maxX:Number.NEGATIVE_INFINITY,maxY:Number.NEGATIVE_INFINITY,minX:Number.POSITIVE_INFINITY,minY:Number.POSITIVE_INFINITY});return[t.minX,t.minY,t.maxX-t.minX,t.maxY-t.minY]}var r1,i1=class{constructor(e,t){d(this,"priorityQueue"),d(this,"numberOfElements"),d(this,"getElementValue"),this.priorityQueue=new Array(e),this.numberOfElements=-1,this.getElementValue=t}enqueue(e){this.priorityQueue[++this.numberOfElements]=e,this.swim(this.numberOfElements)}dequeue(){const e=this.priorityQueue[0];return this.exchange(0,this.numberOfElements--),this.sink(0),this.priorityQueue[this.numberOfElements+1]=null,e}empty(){return-1===this.numberOfElements}size(){return this.numberOfElements+1}all(){return this.priorityQueue.slice(0,this.numberOfElements+1)}max(){return this.priorityQueue[0]}swim(e){for(;e>0&&this.less(Math.floor(e/2),e);)this.exchange(e,Math.floor(e/2)),e=Math.floor(e/2)}sink(e){for(;2*e<=this.numberOfElements;){let t=2*e;if(t<this.numberOfElements&&this.less(t,t+1)&&t++,!this.less(e,t))break;this.exchange(e,t),e=t}}getValueAt(e){return this.getElementValue(this.priorityQueue[e])}less(e,t){return this.getValueAt(e)<this.getValueAt(t)}exchange(e,t){const n=this.priorityQueue[e];this.priorityQueue[e]=this.priorityQueue[t],this.priorityQueue[t]=n}};function s1(e,t,n,a){return{y:a.get(e,t,n),x:a.get(e,t,n+e1)}}function o1(e,t,n){const{heatmapY:a,heatmapX:r,id:i}=e,{y:s,x:o}=s1(a,r,i,n);return{x:e.heatmapX*t+o,y:e.heatmapY*t+s}}function l1(e,t,n){return e<t?t:e>n?n:e}function u1(e,t){return{x:e.x+t.x,y:e.y+t.y}}var d1,p1=["MobilenetV1/offset_2/BiasAdd","MobilenetV1/heatmap_2/BiasAdd","MobilenetV1/displacement_fwd_2/BiasAdd","MobilenetV1/displacement_bwd_2/BiasAdd"],c1=1,h1=16,f1=2500;function m1(e,t,n,a,r,i,s=2){const o=(e,t,n)=>({y:l1(Math.round(e.y/h1),0,t-1),x:l1(Math.round(e.x/h1),0,n-1)}),[l,u]=a.shape,d=(p=o(t.position,l,u),{y:i.get(p.y,p.x,e),x:i.get(p.y,p.x,i.shape[2]/2+e)});var p;let c=u1(t.position,d);for(let e=0;e<s;e++){const e=o(c,l,u),t=s1(e.y,e.x,n,r);c=u1({x:e.x*h1,y:e.y*h1},{x:t.x,y:t.y})}const h=o(c,l,u),f=a.get(h.y,h.x,n);return{position:c,part:QQ[n],score:f}}function y1(e,t,n,a,r){const i=n1.map((([e,t])=>[t1[e],t1[t]])),s=i.map((([,e])=>e)),o=i.map((([e])=>e)),l=t.shape[2],u=s.length,d=new Array(l),p=o1(e.part,h1,n);d[e.part.id]={score:e.score,part:QQ[e.part.id],position:p};for(let e=u-1;e>=0;--e){const a=s[e],i=o[e];d[a]&&!d[i]&&(d[i]=m1(e,d[a],i,t,n,r))}for(let e=0;e<u;++e){const r=o[e],i=s[e];d[r]&&!d[i]&&(d[i]=m1(e,d[r],i,t,n,a))}return d}function g1(e,t,n,a,r){const[i,s]=r.shape;let o=!0;const l=Math.max(n-c1,0),u=Math.min(n+c1+1,i);for(let n=l;n<u;++n){const i=Math.max(a-c1,0),l=Math.min(a+c1+1,s);for(let a=i;a<l;++a)if(r.get(n,a,e)>t){o=!1;break}if(!o)break}return o}function A1(e,{x:t,y:n},a){return e.some((({keypoints:e})=>{var r;const i=null==(r=e[a])?void 0:r.position;return!!i&&function(e,t,n,a){const r=n-e,i=a-t;return r*r+i*i}(n,t,i.y,i.x)<=f1}))}function x1(e,t){return t.reduce(((t,{position:n,score:a},r)=>(A1(e,n,r)||(t+=a),t)),0)/t.length}async function b1(e,t){if(!(null==r1?void 0:r1.executor))return[];const n=ro((()=>{if(!r1.inputs[0].shape)return[];const t=yh.resizeBilinear(e,[r1.inputs[0].shape[2],r1.inputs[0].shape[1]]),n=Hu(bo(qs(t,"float32"),127.5),1),a=r1.execute(n,p1).map((e=>Ep(e,[0])));return a[1]=tl(a[1]),a})),a=await Promise.all(n.map((e=>e.buffer())));for(const e of n)io(e);const r=function(e,t,n,a,r,i){const s=[],o=function(e,t){const[n,a,r]=t.shape,i=new i1(n*a*r,(({score:e})=>e));for(let s=0;s<n;++s)for(let n=0;n<a;++n)for(let a=0;a<r;++a){const r=t.get(s,n,a);r<e||g1(a,r,s,n,t)&&i.enqueue({score:r,part:{heatmapY:s,heatmapX:n,id:a}})}return i}(i,t);for(;s.length<r&&!o.empty();){const r=o.dequeue();if(A1(s,o1(r.part,h1,e),r.part.id))continue;let l=y1(r,t,e,n,a);l=l.filter((e=>e.score>i));const u=x1(s,l),d=a1(l);u>i&&s.push({keypoints:l,box:d,score:Math.round(100*u)/100})}return s}(a[0],a[1],a[2],a[3],t.body.maxDetected,t.body.minConfidence);return r1.inputs[0].shape?function(e,[t,n],[a,r]){const i=t/a,s=n/r;return e.map(((e,t)=>((e,t)=>({id:t,score:e.score,boxRaw:[e.box[0]/r,e.box[1]/a,e.box[2]/r,e.box[3]/a],box:[Math.trunc(e.box[0]*s),Math.trunc(e.box[1]*i),Math.trunc(e.box[2]*s),Math.trunc(e.box[3]*i)],keypoints:e.keypoints.map((({score:e,part:t,position:n})=>({score:e,part:t,position:[Math.trunc(n.x*s),Math.trunc(n.y*i)],positionRaw:[n.x/a,n.y/a]}))),annotations:{}}))(e,t)))}(r,[e.shape[1],e.shape[2]],[r1.inputs[0].shape[2],r1.inputs[0].shape[1]]):[]}var v1=["fgr","pha","r1o","r2o","r3o","r4o"],w1={},k1=0;function I1(e){io([w1.r1i,w1.r2i,w1.r3i,w1.r4i,w1.downsample_ratio]),w1.r1i=Zi(0),w1.r2i=Zi(0),w1.r3i=Zi(0),w1.r4i=Zi(0),k1=e.segmentation.ratio||.5,w1.downsample_ratio=Zi(k1)}async function S1(e){return!d1||gq.initial?d1=await NX(e.segmentation.modelPath):e.debug&&Uj("cached model:",d1.modelUrl),I1(e),d1}var N1,C1=e=>ro((()=>{const t=Ep(e,[0]),n=vo(t,EX.tf255);return qs(n,"int32")}));function T1(e,t){const n=e?C1(e):yl([t.shape[1]||0,t.shape[2]||0,3],255,"int32"),a=t?C1(t):yl([e.shape[1]||0,e.shape[2]||0,1],255,"int32"),r=Qo([n,a],-1);return io([n,a]),r}async function E1(e){return!N1||gq.initial?N1=await NX(e.segmentation.modelPath):e.debug&&Uj("cached model:",N1.modelUrl),N1}function R1(e,t,n){var a,r;if(!t)return null;if(!(null==(a=null==e?void 0:e.config)?void 0:a.validateModels))return null;const i=["const","placeholder","noop","pad","squeeze","add","sub","mul","div"],s=["biasadd","fusedbatchnormv3","matmul","switch","shape","merge","split","broadcastto"],o=[],l=[],u=t.modelUrl,d=t.executor;if(null==(r=null==d?void 0:d.graph)?void 0:r.nodes)for(const e of Object.values(d.graph.nodes)){const t=e.op.toLowerCase();o.includes(t)||o.push(t)}else!d&&e.config.debug&&Uj("model not loaded",n);for(const t of o)i.includes(t)||s.includes(t)||e.env.kernels.includes(t)||e.env.kernels.includes(t.replace("_",""))||e.env.kernels.includes(t.replace("native",""))||e.env.kernels.includes(t.replace("v2",""))||l.push(t);return e.config.debug&&l.length>0&&Uj("model validation failed:",n,l),l.length>0?{name:n,missing:l,ops:o,url:u}:null}var $1,M1,_1,F1,O1,P1=class{constructor(e){d(this,"instance"),d(this,"models",{}),this.models={},this.instance=e}stats(){let e=0,t=0,n=0;for(const a of Object.values(SX))e+=a.sizeFromManifest,t+=a.sizeLoadedWeights,n+=a.sizeDesired;const a=n>0?t/n:0;return{numLoadedModels:Object.values(SX).length,numDefinedModels:Object.keys(this.models).length,percentageLoaded:a,totalSizeFromManifest:e,totalSizeWeights:t,totalSizeLoading:n,modelStats:Object.values(SX)}}reset(){for(const e of Object.keys(this.models))this.models[e]=null}async load(e){var t,n,a,r,i,s,o,l,u,d,p,c,h,f,m,y,g,A,x,b,v,w,k,I,S,N,C;gq.initial&&this.reset(),e&&(this.instance=e);const T={};T.blazeface=this.instance.config.face.enabled&&!this.models.blazeface?async function(e){var t;return gq.initial&&(kZ=null),kZ?e.debug&&Uj("cached model:",kZ.modelUrl):kZ=await NX(null==(t=e.face.detector)?void 0:t.modelPath),CZ=kZ.executor&&kZ.inputs[0].shape?kZ.inputs[0].shape[2]:256,TZ=lu(CZ,"int32"),NZ=Op(function(e){const t=192===e?{strides:[4],anchors:[1]}:{strides:[e/16,e/8],anchors:[2,6]},n=[];for(let a=0;a<t.strides.length;a++){const r=t.strides[a],i=Math.floor((e+r-1)/r),s=Math.floor((e+r-1)/r),o=t.anchors[a];for(let e=0;e<i;e++){const t=r*(e+.5);for(let e=0;e<s;e++){const a=r*(e+.5);for(let e=0;e<o;e++)n.push([a,t])}}}return n}(CZ)),kZ}(this.instance.config):null,T.antispoof=this.instance.config.face.enabled&&(null==(t=this.instance.config.face.antispoof)?void 0:t.enabled)&&!this.models.antispoof?async function(e){var t;return gq.initial&&(rY=null),rY?e.debug&&Uj("cached model:",rY.modelUrl):rY=await NX(null==(t=e.face.antispoof)?void 0:t.modelPath),rY}(this.instance.config):null,T.liveness=this.instance.config.face.enabled&&(null==(n=this.instance.config.face.liveness)?void 0:n.enabled)&&!this.models.liveness?async function(e){var t;return gq.initial&&(lY=null),lY?e.debug&&Uj("cached model:",lY.modelUrl):lY=await NX(null==(t=e.face.liveness)?void 0:t.modelPath),lY}(this.instance.config):null,T.faceres=this.instance.config.face.enabled&&(null==(a=this.instance.config.face.description)?void 0:a.enabled)&&!this.models.faceres?async function(e){var t;return gq.initial&&(WZ=null),WZ?e.debug&&Uj("cached model:",WZ.modelUrl):WZ=await NX(null==(t=e.face.description)?void 0:t.modelPath),WZ}(this.instance.config):null,T.emotion=this.instance.config.face.enabled&&(null==(r=this.instance.config.face.emotion)?void 0:r.enabled)&&!this.models.emotion?async function(e){var t,n,a;return gq.initial&&(LZ=null),LZ?e.debug&&Uj("cached model:",LZ.modelUrl):(LZ=await NX(null==(t=e.face.emotion)?void 0:t.modelPath),YZ=3===(null==(a=null==(n=null==LZ?void 0:LZ.inputs)?void 0:n[0].shape)?void 0:a[3]),jZ=YZ?["angry","disgust","fear","happy","neutral","sad","surprise"]:["angry","disgust","fear","happy","sad","surprise","neutral"]),LZ}(this.instance.config):null,T.iris=this.instance.config.face.enabled&&(null==(i=this.instance.config.face.iris)?void 0:i.enabled)&&!(null==(s=this.instance.config.face.attention)?void 0:s.enabled)&&!this.models.iris?async function(e){var t,n;return gq.initial&&(IZ=null),IZ?e.debug&&Uj("cached model:",IZ.modelUrl):IZ=await NX(null==(t=e.face.iris)?void 0:t.modelPath),-1===(EZ=(null==IZ?void 0:IZ.executor)&&(null==(n=IZ.inputs)?void 0:n[0].shape)?IZ.inputs[0].shape[2]:0)&&(EZ=64),IZ}(this.instance.config):null,T.facemesh=this.instance.config.face.enabled&&(null==(o=this.instance.config.face.mesh)?void 0:o.enabled)&&!this.models.facemesh?async function(e){var t,n,a,r,i,s;return gq.initial&&(VZ=null),(null==(t=e.face.attention)?void 0:t.enabled)&&(null==VZ?void 0:VZ.signature)&&Object.keys((null==(n=null==VZ?void 0:VZ.signature)?void 0:n.outputs)||{}).length<6&&(VZ=null),VZ?e.debug&&Uj("cached model:",VZ.modelUrl):VZ=(null==(a=e.face.attention)?void 0:a.enabled)?await NX(e.face.attention.modelPath):await NX(null==(r=e.face.mesh)?void 0:r.modelPath),UZ=VZ.executor&&(null==(i=null==VZ?void 0:VZ.inputs)?void 0:i[0].shape)?null==(s=null==VZ?void 0:VZ.inputs)?void 0:s[0].shape[2]:256,VZ}(this.instance.config):null,T.gear=this.instance.config.face.enabled&&(null==(l=this.instance.config.face.gear)?void 0:l.enabled)&&!this.models.gear?async function(e){var t;return gq.initial&&(fY=null),fY?e.debug&&Uj("cached model:",fY.modelUrl):fY=await NX(null==(t=e.face.gear)?void 0:t.modelPath),fY}(this.instance.config):null,T.ssrnetage=this.instance.config.face.enabled&&(null==(u=this.instance.config.face.ssrnet)?void 0:u.enabled)&&!this.models.ssrnetage?async function(e){return gq.initial&&(bY=null),bY?e.debug&&Uj("cached model:",bY.modelUrl):bY=await NX(e.face.ssrnet.modelPathAge),bY}(this.instance.config):null,T.ssrnetgender=this.instance.config.face.enabled&&(null==(d=this.instance.config.face.ssrnet)?void 0:d.enabled)&&!this.models.ssrnetgender?async function(e){var t;return gq.initial&&(TY=null),TY?e.debug&&Uj("cached model:",TY.modelUrl):TY=await NX(null==(t=e.face.ssrnet)?void 0:t.modelPathGender),TY}(this.instance.config):null,T.mobilefacenet=this.instance.config.face.enabled&&(null==(p=this.instance.config.face.mobilefacenet)?void 0:p.enabled)&&!this.models.mobilefacenet?async function(e){var t;return gq.initial&&(FY=null),FY?e.debug&&Uj("cached model:",FY.modelUrl):FY=await NX(null==(t=e.face.mobilefacenet)?void 0:t.modelPath),FY}(this.instance.config):null,T.insightface=this.instance.config.face.enabled&&(null==(c=this.instance.config.face.insightface)?void 0:c.enabled)&&!this.models.insightface?async function(e){return gq.initial&&(BY=null),BY?e.debug&&Uj("cached model:",BY.modelUrl):BY=await NX(e.face.insightface.modelPath),BY}(this.instance.config):null,T.blazepose=this.instance.config.body.enabled&&!this.models.blazepose&&(null==(h=this.instance.config.body.modelPath)?void 0:h.includes("blazepose"))?async function(e){if(gq.initial&&(SK=null),SK)e.debug&&Uj("cached model:",SK.modelUrl);else{const t=(null==(SK=await NX(e.body.modelPath))?void 0:SK.executor)?Object.values(SK.modelSignature.inputs):void 0;FK=Array.isArray(t)?parseInt(t[0].tensorShape.dim[1].size):0}return SK}(this.instance.config):null,T.blazeposedetect=this.instance.config.body.enabled&&!this.models.blazeposedetect&&this.instance.config.body.detector&&this.instance.config.body.detector.modelPath?async function(e){if(gq.initial&&(kK=null),!kK&&e.body.detector&&e.body.detector.modelPath){const t=(null==(kK=await NX(e.body.detector.modelPath))?void 0:kK.executor)?Object.values(kK.modelSignature.inputs):void 0;TK=Array.isArray(t)?parseInt(t[0].tensorShape.dim[1].size):0}else e.debug&&kK&&Uj("cached model:",kK.modelUrl);return function(){const e=[];let t=0;for(;t<5;){let n=0,a=t;for(;a<EK.length&&EK[a]===EK[t];)n+=2,a++;const r=EK[t],i=Math.ceil(TK/r),s=Math.ceil(TK/r);for(let t=0;t<i;++t)for(let a=0;a<s;++a)for(let r=0;r<n;++r)e.push({x:(a+.5)/s,y:(t+.5)/i});t=a}IK={x:Fp(e.map((e=>e.x))),y:Fp(e.map((e=>e.y)))}}(),kK}(this.instance.config):null,T.efficientpose=this.instance.config.body.enabled&&!this.models.efficientpose&&(null==(f=this.instance.config.body.modelPath)?void 0:f.includes("efficientpose"))?async function(e){return gq.initial&&(JK=null),JK?e.debug&&Uj("cached model:",JK.modelUrl):JK=await NX(e.body.modelPath),JK}(this.instance.config):null,T.movenet=this.instance.config.body.enabled&&!this.models.movenet&&(null==(m=this.instance.config.body.modelPath)?void 0:m.includes("movenet"))?async function(e){var t;return gq.initial&&(PQ=null),PQ?e.debug&&Uj("cached model:",PQ.modelUrl):(MX(["size"],e),PQ=await NX(e.body.modelPath)),(UQ=(null==PQ?void 0:PQ.executor)&&(null==(t=null==PQ?void 0:PQ.inputs)?void 0:t[0].shape)?PQ.inputs[0].shape[2]:0)<64&&(UQ=256),He().flagRegistry.WEBGL_USE_SHAPES_UNIFORMS&&He().set("WEBGL_USE_SHAPES_UNIFORMS",!1),PQ}(this.instance.config):null,T.posenet=this.instance.config.body.enabled&&!this.models.posenet&&(null==(y=this.instance.config.body.modelPath)?void 0:y.includes("posenet"))?async function(e){return!r1||gq.initial?r1=await NX(e.body.modelPath):e.debug&&Uj("cached model:",r1.modelUrl),r1}(this.instance.config):null,T.handtrack=this.instance.config.hand.enabled&&!this.models.handtrack&&(null==(A=null==(g=this.instance.config.hand.detector)?void 0:g.modelPath)?void 0:A.includes("handtrack"))?async function(e){var t;if(gq.initial&&(uQ[0]=null),uQ[0])e.debug&&Uj("cached model:",uQ[0].modelUrl);else{MX(["tensorlistreserve","enter","tensorlistfromtensor","merge","loopcond","switch","exit","tensorliststack","nextiteration","tensorlistsetitem","tensorlistgetitem","reciprocal","shape","split","where"],e),uQ[0]=await NX(null==(t=e.hand.detector)?void 0:t.modelPath);const n=uQ[0].executor?Object.values(uQ[0].modelSignature.inputs):void 0;pQ[0][0]=Array.isArray(n)?parseInt(n[0].tensorShape.dim[1].size):0,pQ[0][1]=Array.isArray(n)?parseInt(n[0].tensorShape.dim[2].size):0}return uQ[0]}(this.instance.config):null,T.handskeleton=this.instance.config.hand.enabled&&this.instance.config.hand.landmarks&&!this.models.handskeleton&&(null==(b=null==(x=this.instance.config.hand.detector)?void 0:x.modelPath)?void 0:b.includes("handtrack"))?async function(e){var t;if(gq.initial&&(uQ[1]=null),uQ[1])e.debug&&Uj("cached model:",uQ[1].modelUrl);else{uQ[1]=await NX(null==(t=e.hand.skeleton)?void 0:t.modelPath);const n=uQ[1].executor?Object.values(uQ[1].modelSignature.inputs):void 0;pQ[1][0]=Array.isArray(n)?parseInt(n[0].tensorShape.dim[1].size):0,pQ[1][1]=Array.isArray(n)?parseInt(n[0].tensorShape.dim[2].size):0}return uQ[1]}(this.instance.config):null,this.instance.config.hand.enabled&&!this.models.handdetect&&(null==(w=null==(v=this.instance.config.hand.detector)?void 0:v.modelPath)?void 0:w.includes("handdetect"))&&(T.handdetect=async function(e){var t;return gq.initial&&(tQ=null),tQ?e.debug&&Uj("cached model:",tQ.modelUrl):tQ=await NX(null==(t=e.hand.detector)?void 0:t.modelPath),tQ}(this.instance.config),T.handskeleton=async function(e){var t;return gq.initial&&(nQ=null),nQ?e.debug&&Uj("cached model:",nQ.modelUrl):nQ=await NX(null==(t=e.hand.skeleton)?void 0:t.modelPath),nQ}(this.instance.config)),T.centernet=this.instance.config.object.enabled&&!this.models.centernet&&(null==(k=this.instance.config.object.modelPath)?void 0:k.includes("centernet"))?async function(e){if(gq.initial&&(GK=null),GK)e.debug&&Uj("cached model:",GK.modelUrl);else{const t=(null==(GK=await NX(e.object.modelPath))?void 0:GK.executor)?Object.values(GK.modelSignature.inputs):void 0;jK=Array.isArray(t)?parseInt(t[0].tensorShape.dim[2].size):0}return GK}(this.instance.config):null,T.nanodet=this.instance.config.object.enabled&&!this.models.nanodet&&(null==(I=this.instance.config.object.modelPath)?void 0:I.includes("nanodet"))?async function(e){if(!VQ||gq.initial){const t=(null==(VQ=await NX(e.object.modelPath))?void 0:VQ.executor)?Object.values(VQ.modelSignature.inputs):void 0;ZQ=Array.isArray(t)?parseInt(t[0].tensorShape.dim[2].size):416}else e.debug&&Uj("cached model:",VQ.modelUrl);return VQ}(this.instance.config):null,T.selfie=this.instance.config.segmentation.enabled&&!this.models.selfie&&(null==(S=this.instance.config.segmentation.modelPath)?void 0:S.includes("selfie"))?E1(this.instance.config):null,T.meet=this.instance.config.segmentation.enabled&&!this.models.meet&&(null==(N=this.instance.config.segmentation.modelPath)?void 0:N.includes("meet"))?RQ(this.instance.config):null,T.rvm=this.instance.config.segmentation.enabled&&!this.models.rvm&&(null==(C=this.instance.config.segmentation.modelPath)?void 0:C.includes("rvm"))?S1(this.instance.config):null;for(const[e,t]of Object.entries(T))(null==t?void 0:t.then)&&t.then((t=>this.models[e]=t));await Promise.all(Object.values(T))}list(){const e=Object.keys(this.models).map((e=>{var t;return{name:e,loaded:null!==this.models[e],size:0,url:this.models[e]?null==(t=this.models[e])?void 0:t.modelUrl:null}}));for(const t of e){const e=Object.keys(SX).find((e=>e.startsWith(t.name)));e&&(t.size=SX[e].sizeLoadedWeights,t.url=SX[e].url)}return e}loaded(){return this.list().filter((e=>e.loaded)).map((e=>e.name))}validate(){const e=[];for(const t of Object.keys(this.models)){const n=this.models[t];if(!n)continue;const a=R1(this.instance,n,t);a&&e.push(a)}return e}},D1="\n/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUA\nAAABAAAARgEoAAMAAAABAAIAAAExAAIAAAARAAAATgAAAAAAAABgAAAAAQAAAGAAAAABcGFpbnQu\nbmV0IDQuMi4xMwAA/9sAQwAGBAUGBQQGBgUGBwcGCAoQCgoJCQoUDg8MEBcUGBgXFBYWGh0lHxob\nIxwWFiAsICMmJykqKRkfLTAtKDAlKCko/9sAQwEHBwcKCAoTCgoTKBoWGigoKCgoKCgoKCgoKCgo\nKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo/8AAEQgBAAEAAwEhAAIRAQMRAf/E\nAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAE\nEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZH\nSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1\ntre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEB\nAQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXET\nIjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFla\nY2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG\nx8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8A+qaKACigApGOKAML\nXp8xlF5A7V4X8RtYs7PzfNImnx8sa8Kp9z3q2tEgp6angWs62ZZ5CTGoJ6DArGNz5p+UrID6EUrF\nPUlW1EuN0XNW7PQ2L5j3JnoKXN0KijqNP0eYoqXBdgPuuo+ZPeupisWn2Jd4+0r924XgsQOCff3/\nAJ1FzRKxDqGii6m3siiQ8F1XGfXI6YNWLfRbiRQMkcZI9fpTDluT2/h6Qy8gDPbtmtG38JeY480Z\n5zSLUTZg8M28YwYxjAArXtdPt402qgHbpSaLWhma3o0Uqk7Nx9DWLaaVblgPs6qRyds2M/gRSQp9\nzZOni2iWS2hlQ+kjYz9OMGrdjq89vIPPVhj+8M/lQyDq9P1WOYBlMZz1AOD+VdDaTiReOKulK0jO\ntHmi0WDTlr0TyxRVhT8tJjIX+9SUxHXUV553BRQAVBcPhSBTSuxPY86+IGti0s5I7dsORy9fM3i6\n8e8mfDO5P90ZrWWiJicNPpZZtxV/xrW0jQt4DOv6Vk2dEEdTY6BHuB25rpbPSo0QARjP0qTRI17W\nwA/hFaMWmoQMgflQXYsDS142rU9tpqqenfNA7GgtihxkdKuRW6qMY/GkDZY8sY4Ap4hXbyB+VArk\nEtuH4wPyrk/EGkOm+a3jw3suRQLc5i38SX9hJ9nnY+XnBUdPyNdFY6pa3KkkAE9l6f8AfJ/pSJT6\nGhDmI+Zb4ZRycdv6ium0nUhKFydrelTsNnS2829RnrVgV6NKXNG55lWPLIM81Op+WrZkRMfmNNzT\nA7GivPO4KKAEY4XNYWt3vkwPg4OK0giJdjw/xrqhm87Zs8tc7pX5A+leSajf6aHYJ50kn4AZpTep\nrBWRm2Vobm4BXfyehPFdnpmnBFUY5rI2SN63tlToK0YI+KZpFF+3QdavwoKTLtoW0Toaswpk5pCb\nLCxipAhoIuP2dKevHXoaYDylRyxhlwRQI4nxVoCXWZI1GfpXGtbSWjYPGP73+NIGupt6TqMsLruZ\nih4xnP5V09mQ+JLd8gn0xSYJnVaVdkook69K34zuUGunDS3Rx4qOzHVIp4rrOMY3NJQI7GivPO8K\nKAILt9kZrz3xlebYiu8KCCWb0XvW0NFch6ysfO3jLVjfXLIn+pQkKorl7WxNxIPl71g2dUUdpo+l\npBGvHPet23iC8ihFosrxirkHQUFo0IF4FXI1O726CpKLacCrMJoJLYHAPpTwucHpSRJJ5e4AZI9x\nUqpxzVpCuOC8cUpQUMRnXttuB4rjNdsYyeVwfXpmpGmcvcQyafMCFJjPY10eg34BUg4DcZP8jUO4\nHaRq3lLNF+IHet7R7jz7c56rwa2wz9+xhiVeFy/T1PFegeaNPWigDsc0ZrzzvDNIaAM7VpNqdegr\nxL4l6kywyRhseZ19lrdfAZL4jxYg3Fw20d63tJsdrDI5rm3Z3R0R0Mce1eKnQYAplIkWrMJ45oZS\nNO3PHbNXIyfpSGWowSOasxLUiZdjFSqtNEMkUemKlAGKsRJjAppFAiORMjmsTVrNZEO4cfSoZSOD\n1eJ7WXBUzQZ+7nkfSo7e2Ei+ZaMzxntjBX2NSU1Y6/wxqojiEFzkA8KTXYaUoWRyv3W5rSjpNHPX\n+BmpSg8V6J5gUUAdhRXnneFFAGHrTfu5PpXzj8S70/aZtxzztXFbv4DKHxHI+H4GZiz9zxXXW8G3\nGBXMjvLRXAx0oPGPSmMVeOnWrMTYpFI0bcg1fh54xmgovRcD3qxETSIZcRvzp+/BpEkqsBUqsM9K\nq4Em4Gkxk0yRGXrVW6i8yFhkg+tJjRxGsWrxllkUMh9eK5uMz6bcebbnfG33kPcVkay2OntPKuo0\nnhXI67c8qa7Lw3c+adjcEDGK1paSRhVV4s6A0or0jyRRQ1AHX0V553hRQBz+vNtt5z3xXzX8Qbdm\nuic5YnOMdK3l8JnTXvlbwpYl+WySOgrp5YfLOOB9O1c62O7qQkc+9RsKChFPWp4DluOlSykaNruH\nArUgHShFNF2NT1qxGO3NBmyxGcE1N2560CFzjrUysO9JAPDDjFOVuKoQuSRTWouBkazbCa3cd8cV\nwF7IISQccHBzUSWpV9C3o1x5b5GAjdQD1rs9DjC3kckbEhqKfxIzn8LOupRXqnkPccBSkUAzraK8\n87wooA5rxMSI3HqK8B8bQl9Q8sffY5b/AAraXwkUviNrw9pH2W1ViMMRTdRjw4HpWNtDti9TPc4P\nFQs2M5qdyyMHLcfjV63HTAoBGtap0wK0YxigpsuRDtVhVYd6GQydVwwIqdRnqKCR23I5pCMUW6gD\nYNKuetAEise9KTxQBWuFyhrznxNZkXjFeN3I+tTIZg2OqmzmxNF0PO3vXp/g2+hukVl4zyPanTXv\nJmVR+60dpThXpnlPceopWFAbnV0V553hSGgRynjC5FujOey14Ssp1HxNmTnc+a3kvcIpv37HoEYQ\nQmMdVHSsnVbYJF5jVk0dsNzlruVIsl2wKxbjWrVHILjg1CRbZJb+ILHPzyhfStODWLQgFJFYd+el\nUJM27HUIXxhga1Y5lLVLKLkMnoauxnPPrSEx7ShF+Y/n2qrc6xBbhizDAqkK1zJuvG9nbg8ZA681\nly/Ei052RO3uKAsZlx8QGd8xxvt9Aa1NH8dK7AXMcip64zigdkdrZX8F7EJLdwwNXMkrz1qRMRly\nCK4TxmpidWI49felPYSOMmi80NIoOV6qRzXYeA5SskYPfirpfEjGr8LPWVHyD6U4CvQPL3ZItOYc\nUDOoNFeed4Uhpks4H4iE/Z5MeleMeGULeLgjds10S+BGdL+Jc9OSBU2Huc5Nc74yvUtrcDBrJnZF\n63PJdXvLy/lKWw46bvQVz82jXhkLO5Y+9ZlsYthcRnbIjY9R3q3awTRkEM3WmJI6C0ea3dGRsr1x\nXY6TqW9FLHnjrUs0izpLK5DDjofSta3ckH09KRUkZuuTvFGdvPauE1Y3U6Mqbssf/rUxHPTaJPK2\nZmJPbBqzY6DCZh5xJC9s9aBJHU6dpemJjfEmfetJtI0+VPkUr/unFOxdiextHs33W07YHQHk11mk\nXb3KbZ1xIvcd6LEyWho4Nct41sTPYb16ipexCPPZN+wYGCvH1rrPAEJmvkPoc1VL4kZVvgZ6yFwK\ncBXoHkkqinFaVyzo80GuE7WJRQSziPiGdthK5HQV4x4J/wBI8WPIewNdEvgRNL42emO/yj1UHNef\neNpRczbC+I17DvWT2OqJxc0sMK4TCisy41q0hfEkqj8aixdwTXNOlwvmqD9anS9tXH7uVG+hosO4\n/wC0oOhrR0+6G4YNIEzsNEuCxAPNdjZruA4xxUmjINSjURksOlcbqFykbnjFA1sYGoassaknCqO5\nrl7rxhGm7yBnBxuJq0rkSlYpw+NLlsfd5P8AerVsvHEqSBHwPVgcgVpyMyVXU3rXxcHYETAk+hru\n/DWti6ZSTyOKzZqndHaxvvUGq2rQ+dYyqR24qWI8dvbr7LqDxyDAzXpvw6FvIxePGSM06Xxoyr/A\nzviKFHNegeX1J41zUhXioGbuaSuM6wpCaBHG/EcA6HN/exxXjXw2jL67cv8A3Qa6H8CFR+NnoWpO\nI4XI44rxLxrqjQzSEsQM1gdSPM9U1uR1YbmWIdXHf2rmpIb67YS28UrRlsLI3c/jW0VZGUpO5pW1\njfLNOjahawzwReYI5cjzMkDavHJ5/SrVv9uhtPtVxCPLBwzxnlT9KGghLU3tKvvPjHzbl7EGuisJ\nGRxWLOg7nRXJEbDjmvSNK+aFSfSoZr0KutRkphc4NcRrdkVjL9aVio7Hk3iqS8ubhrWzUlsZY9kG\ncZNc5D4aee5MclzJIFTzHAO0MfatqSOWu7bFS1srDUZEis0vIZoUxPvfcC+4/dx2xjr712XiTwXb\nWmlQ6hol3cRhoFd4rlg3zY5wR0GelavQwjq7GD4etdVvSnk2wAB+9v8A8mvcfA2kXiRo0/UdcDis\nZnTTulqeoWqbUAJqWUb42X1FZlnjfjSwlGrr5S/eNdD4RkvLAAQ4yRyaUZcruVKl7TQ9I0G+mnzH\nckFwM8VuIK7ac3KF2eXiKapz5UWYxipNtMyNejNch0jSar3cjR27uoyQCRVRWom9DxTx54gu5fMi\nlbKdMVjfCZPNlv5v9rFbVHpYqjGzbOn8SzFI9o715L4u0r7arYzk+lYdTqSujy7U/C0u4vHk+WwO\nxuh9q3J9dgvbdVukMV1EwbDDgn04rZMwlHoZ+orZ6hfQ3RWVnQYCgZAq+8U0ln5NtBsV2yxYcfgK\nJtW0CnB31LlroVwJ1nQLGDjeP7w+lb0dsFxjrWB0tHS6NuWPJ6A16ToUm63T3Gallr4S7cxiTjrX\nPaxaF7dlVeSMUhxZ5jd+H7qCa4eF3DSE5x3zXN3Wk6jbyeaiFWUY6ZyPStYS5SalPmVipFbX0E4c\nW0alvmPHJrag0rVvEE6LdljGpG2NRtQD+tW5XMI0uU9M8NeFo9PiQhecDIIrtrOMIoG3H4VlJm9t\nC6CB06VPGM1IHLeItGS6uw+ORT7e3jsbQvj7gzUNam0JaWE+HN7NqOqX80n3FO1RXo8YzXdS+BHk\n4z+KyzGPapcU2YIv7qQtiuaxvcaWqG4O6FwfSrS1JbPnrxoxkv7qIfejcitj4V2f2exumI+8+aKn\nxHTT+G5d8Txlm4rjLxMsQwzWT3OiK0Mm6sEkVsAcjFc1d+FEmlGwEDPQVopaEuOpr6f4ZWNAu3tW\nvHpAj5ZQcUFIWaDjGMVUMQ3cVDBmvbhY7QAV2nh+T/R1yeKhlrY31+b61FcQK6nIoJMi401WblRi\nqr6PCw5UYq9y+YgOgWzNkRrx3xWjp+nx2v3FQcelAbmko9anQ4GBUNisPHWr1qMrQhS2K11HvmYV\nhamcxSRZ5xRIqluS/DKAQQXZxyXrvo2FdlL4EeZjH+/ZbjNSZpswLNBrE1Gt7VE4ODVIlnh/j61F\nj4lmeTGyUbq6LwdEqWbeX0YbhSqfEddP4Bddj4JIrhL5d8h7VjI6oLQqKNzelWre3yc4/ClFjaL6\nwqBxxUUxwCKu5BmXRA6c+9ZjP83FSBoQuPs4BrsNBlUW659KmRrDY6G1lyQtW3Hy0lqQ1qVJnAbm\noy3b9KYJCqRj3o4zRctIlhjLHmpSuOBRbQOpLGpPFaES7UqkZzKN1KsEc87/AHUUmvPLTVGv72aQ\nk7WJwKmRrQ3ud74Ltilgz4++2a6iNDXdS0gjyMU71my7GpqTbxSbMki3SViajTTHqkSeR/GeyZmg\nnQHkEE1S+F+oPPavBL96I4/Cia1udVF+4dVrkW+Fq8+v4tjMDWUkdVJ6WM0cNV+F+MVmjUcZgqnP\n1qpNNnkcVRLiZtxIS1UzzIF7mghlxUZpVQdq6nTVdAoAOKzkbQWhvwM6gMM1twOJYx3NOJE11Kt1\nH1/pVVlwBkk+9NocXoOQ45FPj+fkUJFF2NSB700v/hTEty5ZpkjvVyUgcCq6GM9zC14/8Se6GcZQ\n1574Xs5WkI2HBPHFQ1dm1KSSZ7Rotn9l0+KPHIHNacae1dy0Vjxaj5ptlhVp+2s2CJ9ppCKzuWNx\nzSFc1SYrHNeNdIGpaYw25ZeRXmvheyk0jVpEdcLJ0q3ZxNKTa0O3vQHg/DNcHrsJDmsmjspnNzNt\nfFIJ24GazOhC+azDmgZIOOKBsp3J2qSaZodubq58yQ4QAnmhGT3NO18pb7BORmu205LfYpyKVkWp\nOxr5gKYWoIZWgfGfloFq1qTPLubnGO1RPtxg4P0oBAkY/hBz6VNDDkZ6AU0W2WSdqkdKr9ZOaGSj\nVtcLHmnOcgmmYvcz7mBLy3MbdD1q9ouiRK6bUAVeelOC1InPlidSsWMDFOCEdq3uefykqrinYqGy\nrFvApMVka2DAowKAsMkRXQqwyDXn/iWyitNQ3qPl6itIvRoF8RXinW4tQ6HI6GuW8SIVBPalc6qe\n5x9x97r3qruwTjrWZ0ksZ9TUmcDNAmZ9/wAoao63rR0+w22MLPtAzt6mghmfofiB76LdJBJBIp5D\nd/oa7bSdWLIPnpDi9TM8TeKdas51XTbIyxd3J/pXS+E/EFxqNoFu7do5OmD60maHWrnZyDRkn/69\nMlEyOR0xntVoNx+FUgYjPxg4FLCuWDZyKQr2RoRnP0qO+nEFpJITgAUzLqZnhu6+0rknOTXpOmwJ\nFbrt5yMmnHYyr6Oxb2ijaKLnPYMClwKQWK3n0hn+lachHOJ9pNNN0apQFzsY10a4v4hXQh0xpieQ\nMA1XLZNjhK80cT8OdV+3Wl3A7ZZJCw+hrR1qLcjZ/CsbnfHRnFXseHJArOYYbrUs1uPhYbuatqFP\nByfSkMq3UIINYkto+87Tx6GkSxfsDbflGD7CtTw/pk4nzITtPIFMFudsukh4Rxz71paTpKwP5jcn\n0qTRy0NORMDgVCqewoJTJgAoxjntTiTu7fWmFxAcnn1q3EPl+X8KZMi4gKqB1Peob/Tv7Us5bfeU\nyOoq4R5nYxqT5I8xieH9J1DTbvyJELRg8ODwa9Ms5mSFV9BWiptbnNVrKdmif7Q1KLg96XIZc5Is\npNL5pqeUrmMtZs0jzV08phchaY00zH1p2ZNxjS1g+LdJOt6U9ssmxjyGp2urDjLlaZzng/wUPDqz\nTSTmWeTrjpVjVk3Rvjr2rnqQ5dDvo1XUd2cTqSNk9OKxXGCeKxZ1DAxHTr2q5C/y8GokUhsz54qu\nuCxzSQjQ0+FZblR2ro4bZYiMVQ0dBb7Qi5x0qzuG5QOh71LYErDufpSeWrHnimIXbjkUjLkH1Hem\ngGxryc+tXI19KYmWegq9YLiLJ7mtqS945cS7QsWehqxA9dEjz4krPSxyZqbFFhGxUm6smjRM55Lk\nHvSvNxXTY57kLT+9MNwKdhXGm5FIbkU7Bca1wMEVhaiuQcVhXWiZ14R6tHGanGBI2OtYkqEHjgVy\ns9ErEeo6UBsHipKEZs5qpPdRxcbhx70NCSuybTNWihc5brW9Fq6vjMnFSdEIdDRi8RRKygZbHFbu\nm6nb3RA3gMegNJhOm0jbXGOoxTuCc1Rz3FyoGKawz9KaAVcZqeMgCmIkB4FaUTbYwB6V00Fuzixb\n0SFMuDU8Mlbs4UPeXHeiOXkUrDuXYnyKk3cVk0ap6HMxxketSMhrcwRC0dMMZFMQ3yzSeVQAeUaz\n9Vj8uPd271nVV4m+GdpnHX67pCeKyLtBtNcR6xlk9RVeWTb3qRnO6trgttyIfm71z7ai8j7/AJmN\nDNqUVa5Yi1AnjynHuBV+11YJhWWXcP8AZNSzqgmaEerSsf3NtIQP4mGKtRavdRgMIpVI9KjU0a7n\nR6T43uYQI7qN2Tpkqciu503VVuQGAYZHQjFVc4alPlZrpKGAznpTwxOc9+lWjIlUACnM4XApiLNk\nnmvnsK0NvpXZRVonmYqV52GsmanhXitTmFkSiJTSAvwrxUxXIrJ7miOfjf1pzNWxkRlqYWpgJupu\n6gQbuahvIxPA6eo4pNXVioS5WmefakGhndH4INZs5DJXA10PaTurmLO21uKpSZqGMoXGnRzBiyjd\n9Kx5rcQS428fSkjanLoaOliHGZFB56VswW+mtPufcBsGOAfmxz+tFkd8HpoaUx09FAtFY8DO71qb\nSms/Nb7RbecG6AEjFLS5c78t+p0djpVs9wsyQiJAdyr1rW+zqjErzSe559Sbk9S3C+MA1bjbgE1S\nMSXzMVG0vNUI2tPKrAuCMnrVzNd0PhR49W/O2xrHmp4TxVMzQshpIzzQBehqesnuaI5VGzT2bitz\nFEbNTC1ADS1JupgG6l3UAc14s04yR/aYRll+8BXCtLncDXFWjys9TCz5oW7GddH5qqNzWDOgQnC8\nVSuo1kHzAGkPYopEY2+RWxV23Vzj5G/Kg3jWaNazhZuqNXS6TaKhB2c0jR1nJWOlhOxRxU4YkCgx\nY0OQatQyDbyaaFYe8uF4NY3iC9ltbVGj43NTIL3h7WzMihjzXVQXYYDdW9Cf2WcOJpfaRZ3g9KsQ\nmupnCLIabGeaAL0LcVY3cVmzRHIxtUhetzEjZqjLUAIWpN1ArhupwagAfDKQ3Q1594v0c2bm6tx+\n5Y8j+6ayrR5onThp8s7dzkZjuqAAmuBnqC7c0iwgtzSA0rWzjfGRW3ZadDu4AoNYo2rfS4v7orSh\n05UA2r0pDbsTm29KRottBNyJ0wpJ9KhD7f6U0ikNWffIFBz60zVUW52ow4UcUN6EPcx44WsbgOmd\nua7TT5Bd24KHnFKnLlZFSN4koluLdueRWvp14swweG9DXoxldHlTjYtzGoo25qzEvwtUxas2jRPQ\n5CNqkLVsYoYzUzdQA3dSFqBBmnqaBhuqhriCXTpVIzxUz+Fl03aSPI9QTypW2/dz0qKNw3SvOPZR\nMqin8VLKRcs3O4Cuk0w/MDjt1NBtHY6O2IIHY1pxgFaETIRwMkjtVSUEk4570MlFW5bap6dKzWm8\n1tqH8aY+hp2FvGoGayNevVt7/ap4xzUvYjqTLtvLPcvJxSaVcyWsxTnFZlnT2t15xHmCtOBYwQy4\nB9q7cPO+jPPxFO2qLEj5HWo42+aus4HpoX4W4FTF+KlotbHII9SFuK0MUNZqiLUDE3UbqBBupwag\nBc1DefPbyD/ZND2KjujyPWlKzuPesRZjHJXms9lMuw3StjnmphKDSLTJ7OfE3JrpbO4GQc9qlnRA\n3LO82k5NbFvdADkjBoCSHyXIIIzgVQvdRigT7wzjgUzO1jHknlvG7qnp61etYFQDIpCZoqVijzXn\n3iC8EmsOuaCGb/heR/s0ijkVv6fbxy3QMg5xmsnuX0Ldzut3+UYTPWk+2GJSe+M1pFtamcldalmx\n1eO4XaThhWnC+TXqR2PHqL3maUJ4qRjxSEjj42qXdxVmaGs1MJoATfSbqBAG5p6mgAzTJTmNvpQU\ntzzHXY83D/U1zF5FhjgV5r3Pa6FMsV5HWnLe7RhqBRdmTwagN2d2K2rPU1C5LAnPrUs6Iysbdrq6\nf3gK0BrUKj/WClY05iM6xLOcQAj3NT29uznfKSzHuadzNu7NSBFjHNSm5VO9IRnajqoWMhTzXFtA\nbvUfMduSeg702Qz0rS7FbTToQFwzjJqaGTFyfK5PQViyzUuFmuIdgGABya5u/vTaN5cnUHFUmLoZ\nzyskwlgJweSK6zQdUEwVJeGr0aUrxPLxEfe0OrhPAqVjxWhznGRtUwatDK4jNxURbmkAm6jNABup\n6tQAFqhupNtu59qUnZFwV5JHnWsHdIx96w5lz15rzT2uhRmt85xWbcxMnUGmZlB0bdxmrNvFIcfM\n350mWjbs7YkDJY/jW5ZWW4jikWkdNp9mqYJFaJdEHHakUULu/VB1rLn1Ld/FgetMGYd/qWSQmSa0\n/AemS32pfa7piLeLkg9z6UmQtz0W7uQ2cZx0A9BVzR7cAea6j2rPqX0L99KRat5A6Dk1wOoKZ52a\nYfMORTYRLujiGWEq6/NWza2yKQVHNdOHerRy4laJo6TTnbbtb8KuM3Fdh5z3OJjbmpt3FaMxAtUZ\nagBN1GaQBzTwaAAms3VbjERUGsa07RsdeFpuUuY4jUjljWTKK4j02RE4IpJYFk6imQkVl0xWarsO\nmAEcUi0bNnZBR0rWtoguMCkUi21wI161mXuocEKaYXMS4u+pY/hVCSWSY4HT0pEmlouiSahdpEBl\nmOceleiwWcNjClvHgJH97Hc1EmVFFi3Czy7mwIl/WtJbjP7uLgd/apQ2VNVvtsBhiPzdK5S4nAuR\nnqOCaTGi9pcytPlU+XpmumtWII44rah8ZjiNIXRuWeNvvViQ/LXpJWPJbu7nCRvVkNxVsxBmqJmo\nEPiXca0YLMuOlJsuKuPlsSi5IrNuG8s4HWs5VEkbwoOTKsk+FJY4rC1K53k1xTk5O7PSpwVNWRzt\n4cms+WpKICtSLTETQj5q0YeBSGiys23pUguGxQMq3E59ayrm4x3yaAKiRtO2WPHcmhruKFxFajzZ\nScA44qRHoXhuMaLpxaUg6hcDLMf4F9KlhuDeXGASIl+8azZslYma68y48m1+7nFW5rtbRNhb5z1p\niMKbUg0zuW4A4rPgb7VdKXOMmpA7HRbMS7nUYiUda0lkQOBngVrS+JGdbWLRt2bAx5BqeQ/LXpnj\nPQ4GJ+ashuK0MhWaoWcA0AaOmASMK7jRNPWYBmHyiuepO2x10qfcv6vYxCzYqoGK4HVYVTJrmb5l\nc6oaM5TUJ8EgGsG4kLNUHT0M64OaqMMikSRsuKbnFMRLG3zVehOaGNE445NNlnVFpDMu6uie9Vo1\n8z5mOAOST2pDK91cNN+5tsrH3PrW54a06KxT7fdrlh/q1Pc+tJ6IUdZGvHPLezMcnBOWbsPap5r3\nylFtbdT1xUWNWzU0/Zbwlgfmx8zGsHWtRHmMqE59aAMyNifvHPc1f0gtPdqkY5JosJHeNci2tktY\neuPnNY+oXWZEVJNrZ9aun8SIq/CzodHuriIokhDIR1ronbKZr0o6o8ipoz//2Q==",z1="\n/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAsICAoIBwsKCQoNDAsNERwSEQ8PESIZGhQcKSQrKigk\nJyctMkA3LTA9MCcnOEw5PUNFSElIKzZPVU5GVEBHSEX/2wBDAQwNDREPESESEiFFLicuRUVFRUVF\nRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUX/wAARCASwBLADASIA\nAhEBAxEB/8QAGwABAAIDAQEAAAAAAAAAAAAAAAEDAgQFBgf/xABDEAEAAgECBAMECQIDBgUFAQAA\nAQIDBBEFEiExE0FRBiJhcRQjMkJSgZGhsWLBJDNyFSVTY3OSNEPR4fAHFjWCokT/xAAYAQEAAwEA\nAAAAAAAAAAAAAAAAAQIDBP/EACARAQEBAQADAQEBAQEBAAAAAAABAhEDITFBEjJRIhP/2gAMAwEA\nAhEDEQA/APqYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAKNTq8OkxzfNkisQC8eb1XtRNbzXT4q7eU2nu0MntRq/D8StMccvW29ZmdvgjsTyvZjxOLj\n+s8WLxn8TFPXs6Oj9oct7c14rkxz22nrB2I49KOdTjelmszfmpMeUxv/AA28OqwZ4icWWtt/SUi4\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmdo3nsPNe0Pt\nFh09Z0+DNWL7+9O/7A3eJcZppsV5raI27esvH6jX5ddM25p79Ilo59VbUZOe2Tm/PeGvfPfT2iKR\nPLv1+DO678XmW/a97U6TtOyzTbTF538/T9WjTNecm9a7126tqk3rSYxY5ta1plRZqZNXGjyZcPXl\nmZmsx+qjBrsuO16xM7eXRt04JrdTltk5OWJnfaWf0a2lty5MdZnfzSn+WOHiOutFpjHa9e8bQ2fp\n+alYy462pk7zXbuxjPesbRS0f6ZZV1ET1tErzXFLHo+A+1ddZf6NrI8PJHa1vN6iJi0bxMTHwfOa\nzhzd61v1846utwniM6DUdb3nBaNrVmd9vjC/ZVePYirBqMWppz4rxaPgtEAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAItaK1m09ojcHnvarjM8P0vh49+a/eY8ng9D\nh1fGM1rxjtGPfvbzdbjuTJxHX48cTPNltM/KsS9Dw7S49Jp6UpHaGe2vjz1y9J7LYK13vHWe7bj2\nex1tvM80ekuxW3RnW3Vm6P5jRx8H0+OYmMcb+bapo8GKPdpC6bQwtdHU8JpWkdJ/JweL6e23iU67\nd4dubSqyVi9Zi0bwIs68XGp36TtEq7ZJmZmevzdbifCKWtbJinkt6eTgZPFw32t+sRurbWVzxs1y\nRv6T8V1NZNPtfq0seTm+Kevr+SZuxXjvaPiV8N4viycto9HseG6+uu08W6Rkj7UPmFck1tE1nlmP\nLd3eA8V8HVVi1pjq6Ma/pnqce/ERMTETHaUrKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAADW19+TQ5p/p2bLS4v04Zmt5VjeQeJ4bjnLqsupv+Ka1+ERLv4reTmcNxcuC\nvy3l0qdI2hlr66sT02ot0ZV7qqrInruzrVZLGSZ37JjqgYTG0K5lbaFVhDT1Ub456RPweY4hixWi\neSdpjvD1eWejz3FNHWYtkpvFo9EIseb3tS3SerOms22rfpPqZKzvvHSYUz70TExG6Gdbs2rljeJ/\nMx5L0vEzPaelnOi98c9J2bFNTFpit47+a+PVUvx9T9nOIfT+GV5p3yY/ds67wvsXqpxau+G09Lx+\nr3TqrEAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADV4ljnLw3U0jvO\nO0fs2lWqyUw6XLkyfYrWZkHldBEV09eveG3Fq1mI3jd4vPrOIaid8G9MP3Y38k6fNrt/rMk9Ou8s\ntfXXn49rGWInuy8SO/k5Gl1E3rG/fzbOe94wTy99mbRvTrMOOvNfJWsesywniukrG/jU6fF43WYN\nTmtEeJtEQ06aSmK2+bNtEd+qfSO17unF9Hmvy1y13XWyVmN4tExLxVK8PmNq5NrT58zawam+m/yc\n0Xj8NpRYSvQZ7xEOdqI3rPozxayNRXe0ct/ON03jmrKB5nV4q1yTO20Obmv4c+cx8HoeI6WZpNoj\nq83niYmYscU0r8aJ6T1n49zeJ+Meqm1drb9J+Kd5p136StGVem9l9TbHxLDFp7W7+sS+q1nesT6w\n+PcAzVjiGHftzQ+v4f8AJpv6On8jH9ZgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAABp8VrW/C9TW0ztOO3b5Nxp8VmI4bn37TWYB8f1HFtTfUfR9FWJmsdZ9I7MtJxDX5s\nd8ta1y0xzteaR2277rcuhycP12SceLxMeWNpjttHwlu8I0mfQ1y+D7k5YmJmY36T36Ka43z/AF1t\ncI1ds+qxVj7/AEej19PCw9HJ4NoK4OIU5Y35YmZdzVTGebVZabx5jJS+Tmns81rNLm1Wrzc9rVw4\nYibbem72mXTTS0w0M3BvEta1bWrM95ie5EanY87wXgNOL6XPfxraXLhra/W28bR/dzYzarBqJxRe\nbzE7Rt5vWU9n8mPHOGmS0Ypnea1naJb+k9ncNLR7u2y/WcxXO4TOoyUrN6zD0FaW5Y3hu49FiwUi\nKxCvLMR0hlW0jn6ukWw3iXjOJzbDlneOj3GaN6zDzfFOH+LE7SRGo83XNSZ2lbG2/WfdlvaT2cy6\nrNFInlrv1mfJ37cK4PwTTxOoidRm2+/2/KFuyMp47XB4LivXiunrH2b2iH2qn2K/J8x4fGDNxTSZ\n9Nh8OviRvTyfT6xtWI+DeXs9MNZubypASqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAOZx6/LoOWPvWiHTcf2hiZ0e8fc2mf1E5+vP/AEeuSd7RC2uKtI6QjHfeINTfwtPf\nJvty9WPfbt/lucP03gxfJf7d/wBoReYpm97zaNeLb4Ims9Nt94auDjem1Wo5PFi1onylS+1o7l8V\nbxvtupjDMdNkYtXS1+Stt+m63xImEJ4xjHER2ZxMUjeUTO3VRmydBbjLJqPi08mbeVOXJPq1sl5Q\nVbkz9+rRy35rxHqzmZlVEe/Ez5LRlW5iyfR6zffaIjq1OSNZps2a21rZInafSPJhxGMl9LStLRWM\nlorM/A4dkrWbYfLZC2W/7K6eubX6b4RzT+W76K8b7G6X62cu3Sten59nsm3j+OXz3/0ANGIAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0OIYfpOHPijvNNo+fdvtXJO18k/\n/OwPFYbz2ls3jx8VqW6xMdWPEdP9D4lkx/dt79flLLHbkxTPwY6nt2512ORTRzE2x4/dpE7cvkme\nE4IrW3hRMxO8THRtU1FKWtvtvK2upx22rzRCtXkqzh2jtF7ZbT122b01ndnpuWuP3Z3+Ky20qDVv\nfauzVy3mejZzNK8dVjqi87KLRLYtXruqvXzkQp7Qoid88R6rcl+WGlW0/Sa22mfhCZOq2x082ix6\njkm822pO8VrPdr4dNObVeDo8XW3uzMbzK+mvxT7szE27cvnu9j7PcNjSaXx8mOIzZevbrEeic5tN\n+SZnpt8J4fHD9HXHO3PPW0x/DeBtJxx29vaAJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAKNRim9Z5e89Nl4DzXtVh5babURHrSf7f3ec1+qnDorWrvvt5Pccb0n0zhmWk\nRvevv1+cPE2rGTFNZU26PFfxwa5dVkjelI2772nZnX6bbrEUq3o0d678u8wmuDL2ittvVjXdneeK\ncGv4jpJ6U56+kS7+j118+GLXpakzHaWlp9NNY3tv+bbiYiNoQy1y30uyZJlrWmZnuym6q1iIJnop\nyW2Te8bdWnnypQqzZOadokiIpSZntWN5lrxki19vNRxrUeBwnNNd+fJEY6/OejXLn3Xe/wDp9wyn\nE8uo4lqqxblv7lJ26T6vpD5X7G8QycKzeBMbzMRM1/FH/wA/h9QwZ6ajDXLitvWzRgsAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeL45w+dDrZvWv1OWd4+E+j2jX\n12jx67TWw5Y6T2nzifU+rZ1y9eHwzDYxxEy18+DJodXfT5o96vafWPVbjyxDn1OOzHudbM0rt2UW\niI69mVtRXZq5tREb9VUoy2iIlRbJ0UX1VZ6btTLrI7V6yk62M2oisT1c7JmtkttVMUyZp6x0beDS\nRWOvdKijDimvWd3G9pNRMfRcNfvZOb9Hpb0itJeP47k/3hgjaZnbaP1XxWW3T0movbNS0W645nbf\n0nrMPpXs3xamoxdJiLbe/X1n8Uf3fKsOTw4jbaXo+EarJhtGTHMxeJ6xH7Sti9Zaj6x3HM4NxXFx\nDS1mtoi8dJrv2l011QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAGjxLhODieOIye7kr9m8d4eM4to9RwjPXFa0ZIvG9bR0fQXmPbDFvTTZPOJmEWS/V8bs9R43NxLL\nG8eFbePg1bajU5/s0l1ceKLx1hbjwRE9mOpx0y2uRTSZsm3PMw2aaKtIjo6kYo9EXpET0hVLXxYK\nxC6MZvyx1lFs0RHfaPiCnU12pLyHGNDbUajBekWma2npWN3p8+opa20e9LSyZLxExTlpM+vdOdcZ\na9tPS8MyUvFrzWlI6727u1pYxYrbVmb7x+TQx6au3Nqcl7/0rcmW9axGnwZJj1novmxnZXV0fFp4\nZxLBPgTGK8xzXr5fOH0bFlpmxVyY7Rato3iYfNuG2x56Wrqa8s2jz+7Lu8O12bS6jkwzN6THNNI6\ntvrN68Y4rxlx1vHa0bskAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAA4XtTTm0OKfTJ/aXdcL2pyRGjwU362yb7fkJz9eTxxyZJjyltRXzUZK7TFtl9Lbwy06YzrHwa+\nfJFd/wCVt8m0bQ0eS2qzcm+1K/an+zNZFL5M1pjFXeI72ky48eGnPkvNp27+TPU6nHpMfLXaIjpE\nerk5dRMxOfN1mPeisfshW1ne1a1577Y6x5R3U0zze31FOWI6ze0byU098kRlzbxM9qrMlPDpyRMR\nMd5Vt/Ihp5898mWZm1pjftE91uCt7fCI7dWeHDEW3t723l6rslqxWZnasR+SYhFbzhnfxJ2jyeq9\nlcGXWZcmW0zWKxHLaI7794eJx5fpfEKabT8t8l5isddo3l9S4VjrwrRUwzSJt3tav3pdOL6Y6dXD\nj8HFWm+/KsU4NRXPvtWazHquWVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAa+fXYNP9u8b+kdZBsDkZOO135cWOZn4y5Wu4xqctbe9y19Kp4njt6vi+PDm8DFMWybbzPlV\n5PiGtz67UxbNbeKTtWIjaIXYpnwuaftT5tXJT3vmi1pMsrU5qIrG1V1a+5DCa7b9GFbRr5J6Wnbt\nCu+Wmk0m8956z8ZWZNorbfzcbX5rZslazPux3hUt41NTntktObJ13+zX1bek01r4/HzVm0bxPXy/\n+bNfDgjVa2uOY92kdfg6ufJOKvLXtttVVSqbcta2vM7zXtHpLQy5ZtMd+vWd+7Zy3mdJHXra3f0c\nvUarw7zFY5rT2hH1Lavnrgx81p3U49Pk4nE5L35MO/StfNRXR5tXnrS8W67WvfyiPSPi7uLHFK1p\njrtSsbR5Lc4RzsXBaYreP4l45esRD2HD9fnw6evvWvO3Tfr0aGk0U55ra0TFInv6uzgrXFXlx0i0\n77RPlC83Yj+JW7oddqr6vHzTTw9/f6dod+L1t9m0T8pcbFSmPHER3892W0zPuz+jSbVvidkcqmfP\nSel7bekrI4n4dZnPWIrHeYnZee2Wpy8dEaml4npNZblw5qzb8M9JbYgAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAABEzFYmZnaI7yCXL1XGa0jJXT0571nbee27DiXEprp8nhbxG20W8\n5cbD0ikfnKO+urTPvjoZdXqctdsmTaPSvRpWmsdZ6yztfaGplvv3lWW1tyRlz1x0vkn7Vo5atTNe\nY0+1o79V2KsZsvX7Ne5mwxnyTNvsx2iGneM/rCdRSuOsTasTt5kRFtpjqmOH4t4nk7estiMNa97R\nHwhna0iuKTEdmGWa4672nZtRele1N59Zlq6vLOSsYorEc07qcW65euzRvtXvPZy52naZ7ujr6fXV\nrWdukREK8+njHgmZmPc67bq6ivVWhxxgxZLztNrT1mZ/SP4VZs0zaOvfp84WUtNsXLvtv3699+rU\nz7+Jtt5qURqMnPpctaR1rMSw4ZoK57eNk6xHaJRh97Ltt7lo5Z+L1HAPZvVauZ2nFTSzMTzeJEz8\nto6xPfvsZntPZ9rXxabmxzefdrv0j1dXh/BcmstW1qxTHHasR3+b0GPhGl+kWmd64dNEVjf73T7X\ny8vy+Ddx6O3iRakxTH5RXrMw1/lX+3Itw2MFIraN48qRHdZi0cUjmmPen9noox1iO0fNzdXEYrTt\nstcmd9aX0bJ+HePmiKTitO8TMLZ1cVjrMfqpz6ys4pjfrPRWZ9rXXptUit6zO+23VyaRHEc05L1/\nw9J9ys/en1ljqdVbwYw452tlnl3jyjzbmmiMeKtYjpEbLeTXPUU8ee/+qjJpsV5rbkrFqzE1tEbT\nDpYNbW21Mnu29fKWna0KbqTdjXXjld0cvQ63ltGHNPSfs2n+HUbS9c2s2UASqAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAOVxPWe99HpP8ArmP4b+r1EabT3yT3iOkesvMVtN7za07zad5l\nXV5GmM9vVfEstvDx0jtaVVMlq+UJ18b5cMRvPeSuK87bUt+i2Z3PtG7zXpjkzXt6R+TXyTMzvM7t\nydHqZ+zhv1+Cv/ZuqvPTHMfOYaTMil1a1K2vHSLTELq2v+KWzThGo84rH5rq8JzedqR+ZeI7WnOS\n34pYTafWXR/2Pln/AMyrKOCWnvmiPyR6O1y9585lhWJvl557Q6eo4T4dYiMvW3b3UanhldHpJtGX\ne09unmjsT7eb1l4trI2t0hsZfrdNO0bzy+nzU20/+NmkzO9esz+TZxWis9dttvPv+Tn21jjaW8zn\n26bTG3mp1M/Wzv3t0jyWXiKZJmsTERaZhXXDbNl8WaztWenxZLstPp5pau8frDtVrNMM5cfTfpMf\n3aunxxbes9d/R09Dp8ebJi09ptFr3jtt2WyrW9wy1Jx132mK+Xq9PotT0iIU19ntLtExa3T47T+q\n6nBaYvsZstZ+cT/LeMnUi0TXffo1s2m8Ws2/OIMWk5Jib5L328rS2t94Sh5TV4ppklpW6PT6rh+P\nNbebTHyas8E081mZy5P2W6OFhjxNTE/hr/LoRO0Kvo9dPqctKzMxEx1la5t3tdnjnMs4noievcrO\nyZjeFF1OSnNV0OG62cn1GWffj7Mz5w05joovzY7xes7TE7w0xrjPeex6Ua+j1UarBFu1o6Wj0lsN\n3JfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACrU5o0+nvlt92P3BxuM6nxNRGCs+7Tv8\n2hToxm1r3m9utrTvMsonqyt7XTmcja0u3O6FMfi5t/u0/lzdJM81p9O3zdvHTwsUR5+bfPqOfX1h\ndqV+3O7bs1+T31oqmI3TEM4rvCdkDGIIhlFd2daboS0NXG2bD6bufxXU1vlmu/u4us/N0+L1tTSx\nkr9qk7w89j1FNZMV3jxLzvaJ8mer+LSOZqK2xZotbvljfr/89U453rXt9lse081xZtNjx7TGKu0t\nDHlrevSevaN5Y6+tJ8c7VRNMt63n3ub+6/R54rERMztDYy4a5omclYmfxKcenrjtHLvtPrCnVmdb\neFe3JXmjy6eS/DrMuLVYsta9Mdt++6qLxO+0dEc8UmInr18iUfReHcXrqccb9Z27Q61Lb13eJ9nc\n1Z35rTvE9avY4bTkpG8xEfB05vYxqybc07R281naGMREdoT5JQqy9mply7Q3bV3iXG1eXw7TWSka\nc258t7+tpT5/BjT7MfHqndz12Z+M4lMMKyziUJJiN1WSu9fku23RaOgKNJqbaTU1t9yelo+D0cTE\nxEx1iXmM1Nt3W4PqvFweDaffx9vjDbGvxz+TP66QDRiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAOJxzU73rp6z296zsZMkYsdr2naKxvLyObNOfNfJbvad1dXkaeOdpvsc2yuZVzfbfqybutwu\ns5s8R92J3dvJb3tnO4HSMegtmt3nfZvYp8SZl0z45NfSK7onH1bNcfRFqnUKJr0Y7dVtq7prjEsK\n0XVpEM6028mW20IHK41aPo3J6zs4ODhdcvPnvExFevNXpMOrxi/PlrTee7PLX6Pwa09uaNlKtHg9\ndM3z5d7ReOu02nu0JzZMfblrv5R5uvrcdImZ26T1mYhxs1Os7RH93PZ7axuafNfLitvbaYU3yZYt\nPXs9NwHhui1HBa5LVicsb81onrEuVqNNSuS8Y67dZ6xPZa59Il9uX41vEitImZme3q2Kxbxora0T\nMd/ROSa4Ztkj7c9OafL5LuGYubmyX3iu/TfbdSfVnpvZLT/XZK233+Mbbva1xRXyiPk8pwbH4N6T\nadq5a71n0tD1WDL4tPe6Xr0tDpz8YVnJHWEXYxbqlBedoef4tW0XraO09HdyztSZcbUz43C+ee9b\nSVMaeOfqq7+jGckQ1Yz7+7v2RN/WXPXZPjci2+2yyJaVMuy+uSJlA2d+pNoVRbeDcSxyTE+TDDlt\npdRXLTynrHrDOyiyZeVFnY9TjvXJjres71tG8MnJ4Nqt4tp7T1jrV1nRL1x2cvABKAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAHJ49qfD09cNZ97JPX5PPw2uI6j6Vrsl/ux7tfk1mWr7dOM8iLdm\nvfebREefRsWldw7SxqNbWbR7lPesrn3Vteo7dYjDpMGCvfbeXQ0uLlxRLRxROfUc34p6fCHYrXlr\nEejqrjY8uzCYW7MZjdVKqK9VlaxCYrsnYExBMRMJRPZA8/xPHtmpP9W2xx76vhWOInvt/C7ike7N\nvwzE9kcapGfhlevTaFbFo8RqJ5vy8/RoW09ek0msxHfp3dzNoLzp4zUmZpMbT8HJyYJi20X2n0lh\nZY1li/RaidBF4w2mK3jrHaFGp1lN+tptPp5IjBkid5mIp16TKu0abBPv33vPlM7z+iPdFNcWXU5I\ntkrNce/b1W5db1nTaf3ax9q0fxDW1ebNk2phty1mOu09VOm8W19orEz23j1TwfSeERFuEYMddptW\nd43dvBn21eKJ75KbW+cf/JcTgMxXTb3nbljz+TpcPmc2uyZO1KRtVtGVdi0bx07qJnllsRO6rNTe\nN4XVamsy8mnvPwc3R2jPwe8TPbdlxXNOPSZfhWWpwO85OFzv57qrODkzeHntSe8Sn6Rv0a3EZ218\n8nXekfr1a0ZLVnqx19dWb6demXybOO7lYMvNMdW9S/VVLo0us7tPHdtUtEwJiZU3jq2Jhham8CVG\nPNODNTJXvWd3qcWSubFXJWd4tG8PK3pPd1OB6veLaa89Y61/u2xfxh5c/rsgNHOAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAANLimq+i6O0xPv392rdeZ4rq/pOqnlnelOkIt5F8Z7Wj27I2I6sb25YY\nV1ImY3dbQ08LRc23vZp2j5OJG+XJWle9p2h6HHtbJXFT7OOIpX+7TxT31j5rycdTh+Dpz+XaG/sw\nw18PHWseULN2trBE9UcrJKBhFU7JAQi0dEomegNDUYovM7x3jb5tO1ZvpbaTLtzRExWfWPJ08kbT\nEx5NXWYYyV5omYtHWJieyeDzuizfRs19Jn6TM7Ru1uMcJxZqTkw+5f4ebqa7SV1MR4tdrx2vEfy1\naxqsNOTLjnLXytVXi3Xj8+nmsxTLM16d5npPyUzpekTtSK+U7vS6vQ/SYmK1vWPS1HOn2dvvvvE/\ntDO5XlcO+LbfHSd/W3o6/BdDOXPTnj3Kz38rS6Wm4FNrRyRzTH3p6RH/AKvR8L4dXSzE3jmtHn5I\nmbfqLV+m4dbLSsZInHjr3iI6zLpYaxS01rHuxHRHiT9mv6s67Vj1aqL6326MrWiYa+/Q54BxPaGe\nXRZpj8MquB4+Xg8zPnB7SX30to379GxpK1xcHiKz5IS8xr8PLPixH2bftLTy05o6dHYyVjLhy0t1\nizjZa3pMVv3iO/qz1G2L+NbSajbNyW7xLsY8kTDz+fJXFqKZN4iZnafi6WHL0iYlStI7OO+7axW2\ncrFl7dW9jvE9ULN+J3ZbdFGOy+AYWpEqN7afNXLj+1Wd23KrJVMvCzseh0+auow1yU7WhY4fCdV4\nOadPefcvPuz6S7jol649Tl4AJVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAV581NPhtkvO0R+4NPi2\nr8DB4dJ9+/7Q83Po2NTqLanNbLfvPaPSFDHV66sZ5ET0hRknyW2lTtMyouz0c8usx2n7s7vScKwx\nzc1vu/y85p+maJh6Th+SOWeveXR4/wDLm8v+nX5mUWa9bbrInolmu5jdTNkxYFk2Isr3TuCzeGMz\n+THdEyDDJO9Ja823rt2XWnya946pGvktDXta0ztWu/ybvLE9dkcoOf4GbJPWK1j49VmLh9JtE33v\nMevb9G7WsW8l1ccREISophiJ2jpDYpijbaOjOuOJ8ujOdqxsgVcsUjaETYvbaFFrgu5lVsm0yUtu\nryg43H5m+GIj1XcJzePoL4pnrWGtxmfchr8JvfHS1622if3QljzTTLes+qrNjrkiYtCzPMxnm095\nYZJ6boS5teB49Tqscza97VtvWvlv8V/FOF34RrIxTM2xXjelp/eHoeA6XnzReY3ivX/0dfivDcfE\n9HbDbaLx1pb0lOs+jO7K8Lis3cN+0NKcd9PmthzV5clJ2mF9J9GHHVL108dm1SznYr/Ft0tuhLb8\nmNohFbMhLWy0mJ3rPXvDvcO1karBG8/WV6Wj+7kWrvDDBlvpdRGSnbzj1hpjX4z8mOx6UYYstc2O\nuSk71tG7Ns5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZ2jeXneJ62dVl5KT9VTt8Z9W9xbWclPo+O\nfft9qfSHEU1pv48ftYST23ZTDC/p0YtlVuvVjMbM5+LCZjYGWGdrTPxiHY4ffaf3cjTxz1v6xMS6\nOlty2iXVj/Dk8n+ndrkhnGRo1v8AFdW3RCrZ5uiYsqrboncSu508yjmZRYQt50TfowYTbYGVrKrT\nuTZjvukQnYhMIGVY2ZxPVWyrHVCWzXpVXkt3TE7Va+W4K7X3jv1auTNy3jdba0RZpamfroQN7Hk3\n6wr1GTaN2OOJiu6Mu98NvgDi8Wy74d/yZ8PiPAiO2zU4nb6qIn1bugjfFE/ASp1ke9u15mbbRDZ1\nMb823kx0Ontn1OOkedoJCvT8I03gaKsz9q/WW+isRWsVjtHRKyrhe0XCfpWL6Vgr9fjjrEfeh5fF\nfeH0V5Dj3DPoOo+k4a/U5J6xH3ZZ7z3228evytOk7NvFbo0cdols47bSybt7HbddHVqUs2aW3Qnq\nxVeu8LILR3SlZw3V/R8nhXn6u0/pLuPMXjeHT4Zruf6jLPvR9mZ8/g1xrvpz+TH7HUAaMAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAABRq9VXSYJyW79qx6yvmdo3l5viGs+maqYrO+OnSvx+KLeLZz2te1rZL2v\ned7WneZYWnZl5K72YV1xEyxmeqJljzIEWlVkszvbZp5soN3h2SJz3pP3odCnuWmPRxuERfJrZmtZ\nmtY96fR28kbX3dXj/wAuTyf6bmK+9YX1s0cNtm3Sd4LFY2K23W1s16StiUJW7bp22RW3RluBuruz\nmWEgrmCGWyNkoExKE1QlPmsqRDKeyBjaejWy2W3ttDUyz1QKslvehVqKTNosyyTvELabXptIJpaP\nB39Ia2mz+JGpr51jdZefDx2hzuHZObNq58poJaGtjxJ2+LoaKP8ADRPo5+T3skx5OhpOmC0fBNQ0\n5yTbn+bt8A0u9raiY6RHLVwY62mI6zMvaaHBGn0mPHt1iN5+aYVsACBXqMFNTgviyxvW0bSsAeE1\nmkvw7V2w5Ote9besJx2er4rw2nEdNNekZa9aW9JeQjnxZLYskTW9Z2mJY7zz26fHrrdpbZsY7NGt\nmxjvso1b9NmUwpx33XRO4K7VUTE1nmrvEx1bVo2VWiJE/XY4frY1WPlt0y17x6/FuPM0m+HJGTHO\n1qu9pNVXVYt46Xj7VfRtnXXL5MfzexsALsgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHM4jxOMFJphmJv529Dq\nZLfjDjPEIx450+K3v2+1MeUOHSOWFc3nJkmZnf4yujpVlqunOeFpV2nctLCZUXRM7MJtsWlRkv3Q\nky5NmpWt9RnrixVm17TtEQnJabXisRMzPSIew9n+CRoccajURvqLx5/chfOest642OGcIpoOG2w7\nROW9d72+LQvXevyejcPUU5M+SvpLeOataraw2a0dLbLqTtK1G3Es4lVWWUSoldFtmcXUbpidgXzK\nGEW3TuCUSncnsDFMMLSms9EC6J6FpVzbZE5ALy0809ZbFr9GtfrEoFMzuuwz0Ueey3HbaBLDXe7i\ntMOfwWnP9I+NZbuttvhs1uBRtXPb4SDm3iIvf57N7Dbl0VrS5+XrltEd+Z1Jx7cNms9N4TURRw3T\n+PrcO3WszEvZOD7P6aYiMlvu16S7y1QAIAABxOPcLnUY/pWCv1tI96I+9DtgmXl68Biy7/NtUu3+\nO8HnFa2s0tfd75KR5fFyMWTdhrPHVnX9R0cd21S3Rzsdm1iuqs256wrmGcT0RYSx5d047X02SMmO\nesd49YRE9WcdSXhZ2O1p89NRji9J+cei1xMc3wXi+KZj1j1dTTaqmor06WjvWW+ddcu8XK8BZmAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAMMmWmKu952UZ9XFZmuP3revlDTtzWnmvO8q3XGmfHb9ZanV3yxtWeWn7y4es\nvPNtDqZJ6Ts5mppvdl/XXRMyfGvSNlu/RVvtOzLfoipLT1VTKbSpvfogRkvtDVyZOhkyvQcA4Dzz\nXV6yvTvTHMfvK+c9U3rkW+zvA/D21urr789cdZ8vi9KDb45rejl8Rry6iJ/FV1HP4vXbBTJEfYt1\n+UpiHM295bXsqrO9l8QkZ0lZEqqLeyBZHZLGvZkhIndADKJ3TMoqWQMZ6pjsxll2jsCLSrmU2lFY\n36gieyu0LJk3jbsga0wdqzK20QpyztQGprL/AFMrOE05NLkt6qdVWZxNrSe5o9vWBLiUjnzXn0vL\nq555dHt8HOwV928/1z/LpzXxbYccRvzTB+jucOwxh0dI22mY3ltIrHLWIjyjZKyoAAAAACJiJjaY\n3iXleM8InR5J1GniZw2n3oj7s/8Ao9Wi9a3rNbRE1mNpifNFnVs65XhcWTdt47bnFuF24dm8TFEz\np7T0/pn0a+HJux1OOrOux08d1ndqY7tillVkzExLOk7yd4YxGwluViJhE45raL0na0dtlWO0+bZr\n1TKi+2zptZGTamT3b/tLacvJjiY3XaTWdYxZZ6/dtPm1zrv1z78fPcbwC7EAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABhkyV\nxUm152iAZWtFazNp2iGhm1Vss8uP3aevnKrNntqLdelI7VRHRnrX/HRjx/tZREVjZXeybW6KbWZt\npCZ6S08tN7Nmbb7zCrJtyoS5145bSx5mWafelr3tsKmS/o08uXyhlly7RPV2+AcBnPNdZrK+53pS\nfP4ytnPVda4y4BwHxOXV6uvu96Unz+MvVxG0bQRG0bR2G0nHLb2gCUDX12LxtFmpHeazt82wT1gH\nmMN4tWs+rcr2aEV8DU5sM/cvO3yb+O0csLUTSdrLphRE8tlkZI7Atr2ZMazDJVKTYSCawi7Ksq7z\n1QERvLK3ZGPrKbyCrbdnMcsbeaa18/RhvvM7oGEwTG0JmYYTIML22a2e28xELM19oURPNO4lOem+\nn3ZY5+prVnMc2GYU4/L4A0a15cNf6rz/AC6fC6+NxCPOuOu/5tHJTbHj+F5/l1+BYumXJMd9o3/d\nMRXYASgAAAAAAABhlxUz4rY8lYtS0bTEvH8R4ffhmo6bzhtPu29Pg9mq1Gnx6rDbFmrzVsizq2df\nzXkMWTeIbNL7tbXaHLwzUctvexWn3bmPL8WFnHVL326VZ91MfFVjvvVlz79kLrcf2m7j7bNHH3bl\nJ2SirLQoy4t1++7G0dBC/RanxI8PJPv18/WG241+alovSdrV6w6mDNGfFF4/OPSW2b1zeTPL1aAs\nzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAVZ9RXBTe3WZ7R6iZOpzZq4ac1p+UermZMl89+a/byj0Ra9815ted59PQ32hlrXXRjH\nDpCLX6ML5NlNsm/ZRqstfdXzbsZt06sLZNvNB1Za8RDWyZdo7q8udq5Mu/mIMt4md2lmy7JzZuWJ\ndHgfBL8RvGo1MTXTxPSPx/8AstJ1XWpIs4BwSdbeNVqq/URPu0n73/s9hEREbRG0QUpWlYrWIisR\ntER5JbSccur2gCUAAAAPM8Sry8Uyz67fwuxbzVPGsE49XGbvF42V4M0TEL33ERnktsxpk3sumK2j\nadmFdPFZ33VS2Mdui2J3UU6LYlFSsN2O5NkCyJ6K7T1TEsbAsxdpReerKkTFGMxvYEz0rsqtbbpC\nb2VT1QEzuwtbaGUxspuJU3neWdKoiu8rq12gCI92YatLcublnzbEz1aOptyZqTuDHLfxN6R0+t5X\nqdJhjBp6UiPLeXl9NSMnEKxHa1+bb8nrlvxUAAAAAAAAAAABTqtNj1eC2LLXeto/R43VabJw/VTh\nydY+7b1h7ho8V4dXiGlmvbJXrS3xRZ1fGv5rzeHN02bEW3cys3xZJx5ImtqztMS3MeTeGFjqlb2O\n8btql3NpbZtYsnSBLeiWfdTjtutid+ghherHS5p0+f3vsX6T8Fkw181d4lMvEWdnHaGnw/UeNh5L\nT7+PpPxbjdyWcvAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAo1Oprgr63ntAmTqdRqK4K9etp7Q5d7Wy2m953lNrWyWm953mVd77R0\nZa1104xxlN9lV8qnJl2a9s3xUXX2ybsJyRDWtl3YWydEC+2VRkzeW6q+T4tbJm+KRdfK1cmWZnlr\nvNp7RC/R6HU8SycmCk7ed57Q9ZwvgOn4fEXtHi5/O9o7fJaZ6z1uRyOEezVstq6jiEbV71xevzer\nrWtKxWsRFY6REeSRrJxz22gCUAAAAAANbX6aNVpL0npMRvWfSXlKamsRMVvXm+EvZXjmpaPWHzfL\noNRjzXicfWJ8phfPxFejx72x7xMzK+sXiNoiXlq+Pi6fWV/VfTNqfLJl/WTg9Pji8R70LqvMV1Gq\nj/zcv6yz+lanzzZP1lWpelTET6S81Gp1P/Gyf90s412rjtnyfqql6asREdWM9+jz9eJ6yP8Az7uh\nodZqMt458tpB1JvEViI3/RhzRt13/R1MNaziiZiJn5K9ZNceKZiIiQcu/WekT+iYrWI3lzdTrs+8\n8uW0fJzcur1Np/zsn6g79phVaIeetqNR/wAXJ/3SwnUaj/i5P+6UD0ldonum161h5mNRqP8Ai5P1\nlNtRqJjacuT9Qd22WN5aGeZyZd/KHJy59RHbLf8AVq31Gp/4uT9ZEvS8Lr/vSs2npzRtL1z53wK+\noza/HW2XJNd99pmX0Rb8VAAAAAAAAAAAAAAcHj/C5yV+l4I9+v24jzj1cLFk8nu5jeNpeW41wmdL\nknU6ev1Vp96sfdn/ANFdTrXG+eq1q5F2LLtbZoY8m8d11bbSydErsYsm+zZrO/zcnBm226uhiyRK\nEtrvCrJDOJTeu8A1MWX6Lqq5N/dnpb5O5ExMbx2cPNTeJb/DM/iYPDtPvY+nzhri/jDy5/W6AuwA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAa2p1UYo5adbz+xbxMlvqJ1OqjDHLXree0ejmzNrWm953tPmTPWbWneZ7yoy5YhjrXXTjH8s75N\nmtkyxt0VZM2/m175N1V03yTKubMLXVXybeYLLX2VXy7eam+b0bOg4VquJW+rry4/O9uyZOq3UjVm\n9r25axMzPaIdvhns1kzbZddM0p5Y47z8/R2+HcF03Doi1a8+Xzvbv+TotJnjDXkt+K8ODHp8cY8N\nIpSO0RCwF2YAAAAAAAAACvUZYw6fJkntWN3k8dfHz2vLucdz8mkjFE9bz1+UOZosX1UzPm0nqI/W\nMYo9FlcPNklfFGeH/NshLGun+Cz6PtHZtVZWlRLS+jxPkRpIn7rdoupHTdA5s6SI+7H6Mfo+32Y2\n+To3neSIiZ7A0IjPXpXLePlMotGW3272t85datKzHZjbTVnsDj+FG/2Y/RlGP4R+jo20u7H6N1Ql\no+H8I/REY957R+jpfReiK6eOYHLtj2tttH6KrY/6Y/R2c+kjeJiFVtLG24hxpw7/AHY/RRkw9O37\nO99Hrt1YX0tfOBLjcGp4XF8c+u8fs9c4dcVcGemSI61nd3IneN1orQAAAAAAAAAAAAABFqxes1tE\nTE9JiUgPKcX4RbRXnNgiZwWnrH4XPi28PdXpW9JraImsxtMS8pxXhF9DecuGJtgmf+1TWW2N/la1\nL7N7T5e3Vy6W3hsYcvLbqzbO9jvvCzvDR0+XeO7crO6FmGSvRThy/RtVXJ92elvk2rRvDUzU7pl4\nizsd2J3jeBpcNz+Lg5LT7+Pp+Xk3W7js5eAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADs0NTrN96Yp6edkW8Wzm6+LNTq4pvTHO9vOfRoWtt\n1mes95YWvs1s2fZldddOczLPLn2ju0MmebT3YZc2/mpm3qqllN1drsbZIhr3yzvtHf4AsvlYYseb\nV5Yx4KTe0+UQ6nDvZ3UazbJqd8OKeu33peq0eh0+hxcmnxxWPOfOfm0mP+steT/ji8N9mKY9suum\nL37+HHaPm9DSlaVitKxWsdohI0Y22gAgAAAAAAAAAABXnyRhw3yT92Nwef4xm8bVzET0rPJH5d12\nCvLhho3rN9RWs9Z23n5y6O21YhrVYbdGOCfrrLPJRpv863zVS6FS09SvZj3lVZZRdPSqmnSWdrIE\nebOkK4ldTsgW1WKqd1oMZhEVZyRAImOjGI6rJ7IiATNd46qL02bHkiaxaoNGY2n4ImPgtyV2n0Vo\nGvlx7x2beiyTk08RPevSVUxux00+Fn2n7N+n5rRFb4AAAAAAAAAAAAAAACLVres1tETWekxKQHlu\nL8InR2nPp43wz3j8P/s5dLveWrFqzW0bxPeJeV4xwmdFec+CJnDM9Y/CrY1xv8qvTZ+WYdbDk5oh\n5zHk283U0eo3jaZZ2N5XYjrCnLSJhOK+8d1kxvCqzSwZvousrb7k9LfJ3nB1OLeJdLhufx9LEWn3\n6e7LXN9Ofy5/W4AuxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAETaKxMzO0Qi9646Ta07RDmZ9VbPbaOlI7Qi3i+c3TPUaqcu9adKfy0722ZXvFa9\nXO1OrjrESxt66ZJmcjPUanlidmhkzTZVfLN5VWvsC2b7R3U3yqrZZtO1esz2h2+F+zWTUcuXXTNM\nfeKR3n5+iZLVbqRzNJo9TxHLyaekz62ntD1fDOA6fQbZL7Zc/wCKY6R8odLBgxabFGPDSKUjyiFj\nSZkYa3aALKAAAAAAAAAAAAAADQ4pl2pTFH3p3n5Q33E12Tn1eSfKscsLZ+orS00eJqbW+Lfnu1tF\nXaJnZsz3WpCfsyp00fWSvmPdVYOmSUDd8kR3InoQosy7JmUX7MdwZ17ro7KKT1XRPRAsrO0rYndr\n79V1ZBaQiJ6JgCSIJASwrO07MpV2nqBlrv1a1o2bf2qtfLXaQUTO0sb05o3jv3ZXhjS20xEphW5h\nyeJjjf7UdJWNKLziyRePsz0lux1SgAQAAAAAAAAAAAAAADG9K5KTS8Rato2mJZAPIcU4ZbQZuekT\nOC3afT4NXFkmlntc2GmoxWx5K71tG0vHa/RX0GpmlutJ61t6wrY2xr8dXS5uesN+tt4ef0eaa223\n2dnHk3juyreM81OaFGiy/RtZET9jJ7s/2bdutd2jqKeic3iNTsd8a2h1H0jTVtP2o6W+bZbOO+gA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABje9cdJt\nadohGTLXFTmvO0fy52bJfU23t0pHaqLeL5xdK9Rnvqb+cUjtCi94xxvK3JetKuHrdZvaa1ljb10y\ncnIs1Wt3naJc++TmVWvMz1YWybfMGdsm3eWek0mo4jm8PT0mfW3lDf4V7P5tdMZdRviwfvZ6/TaX\nDpMMYsFIpWPTzXmf+steT8jn8L4Dp+HxF77Zc/4pjpHydYGjC3oAAAAAAAAAAAAAAAAADG9opS1p\n7RG7zszN6WtPe0zLua+3Joss/wBOzhzG2OsL5+IrY09dsSyYRijbHEMvOChb7KjF0yS2LQ169Mso\nS24noyrPVXWejNVKbTuw3T3REdQWU6LYlVvsyiUDPfqupPRr79VuOQX1lZEqoZxIMksd0gT2VT0l\nbPZVbuCaW8i8bwr32WxbcGnkjaZa9p2ndv5qbw5+aNugLItF6TEtvTX5sMb969HMpfazc0d9stqe\nvVZDdAQAAAAAAAAAAAAAAAADV1+iprtPOO/2u9bektoB4TJTJpNRbHkja1Z6uto8viVht+0HDvpG\nH6Tjj6zHHvbecONw7Ltfkmeqmo6Ma69DXbbZTkr1mGWO3RneOaGbZRoM30fVzSelMnT83aef1FZ7\nx3h1tBqfpGnjmn369LNc3sc3kzy9bQCzIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAa+q1dNNXr7157VhGp1Xh70x+9f9ocy283m1p5rz3mVbrjXHjt91lz\n5c9+fJ1nyjyhdM8lZlOOIiqrUXikd+kMreunnI5XEdX4dZiZcG+XmtNl/F83PeeWWHDOGanieSKY\nq+5H2rz2hMzWd1Iqx1yajJXHhrNrW6REeb1nCPZumn2z62Ivl7xTyr/6uhwzhGn4Zj2xxzZJ+1kn\nvLoNJnjHW7TbbsAszAAAAAAAAAAAAAAAAAAAAaPFrbaSK/itEOXt0rDf4xb/ACa/GZacRvaF58Q2\nIjasQnzPIhCU92tMbZGzHmotG10C6nZkwpPRmipIllEbMIZIE7solgmJBnCyk9VMM6z1BtVllEqK\nz0WRILYlluriWcSDJVbusV27gwInaSWM9ECyZ3hqamnSWxFmOSOaqRx725bNnSZNs9J+OynVY+WZ\nYYr7TE+nVaIr0Ais81Yn1hKAAAAAAAAAAAAAAAAAABExvG09peU4nov9n66L0j6q/WPg9Y1OJaON\nZpL0+9HWs/EWzeVz9PbmrEtnyc3h9reHy26TWdnSr2YX6657ijLXpLX0+onSamL/AHJ6W+Tbv2aW\nekTv16JzeI1Ox6KJiYiY7Slz+E6jxdN4dp3vj6fl5Og2clnKACAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZ2jeQRMxEbzO0Q08uqtkma4ulfO3r8lefUePMxWf\ncjy9WvlzVxV6T1Z61/x0Y8f7Wc7Ur1lqVy+LqOWJ2hp6rXddon5rOF1tfmz5OkT0qzb8dWbxjp1c\nbiuuilJ5Z6r+IcQrixzEy8zl1E6rNt1tMztFY81sztU1eRucN4ffi2p5esRM72n0h7rS6XFo8FcO\nCkVpX082nwXh3+z9FWLxHi36328vg6TZyW9ABAAAAAAAAAAAAAAAAAAAAAADj8Unm1tK/hqppHvw\ny1k8/EMk+m0GOPeafiFpCZYwolnXspvHvLa9mF46gmnZmwozRUiUCBKYYsoBLOFbKAX0llEqqyzi\nQXRLOJVRLOOwLIljZMEgrlhKyYYTAK5nZPN0RZjugUanHzVlz6xtLq361c+9eXItPpXX0dubTU+E\nbL2lw2++O1fSW6m/VYAISAAAAAAAAAAAAAAAAAp1GbwcfTreelYEydcuMcRrM/L9nnlsV6wqpi2r\ntv133mfWVkRyRtEdGFva7MzkYZNoamWN4bV4mYa9qztKIujhVppxGI8r1mJegeZpknBqKZY+7L0t\nLRekWrO8TG8Ns/HJ5ZypAWZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAADS12fp4VJ6z9qVuq1HgUiI+3bpDl589cOKZmevqprXPTbx477rDJlrhr1nq4+s182tMRP\nRqaziXiZJrWekNG17ZbxWJ336M5LXRbI3dLTJrs07RMY6fan1dHLrowY+X7MVjt6N3R6Kul0EbWm\ns7bz8Z+LnabQX43r7Y53php/mXj+Dnv0f1JO1x/8ZxbUzj02O15mfLtD13AvZqnDds+pmMmo26el\nXX0Wh0/D8EYtNjilY7+s/NstpOOTW7QBKgAAAAAAAAAAAAAAAAAAAAAADG88tLW9I3BwJtz6nNf1\nvK/DHVqYJ3pzT5y3MPZeojOWMQylEKpTVjZnDCwkqzYQyRRICATCITAJZQxhMAshnEq4ZQC2srKq\nqrIBZCWNZZgwswmFloVyCu0dFcx1WyrtCBhv5NTPHXds2U5o3hIz4ffbPt+KHUcTSW5c9Jme0u2v\nVYAKpAAAAAAAAAAAAAAAAYZctcVOa35R6tLrltN795/YvknNqrfhpPLH92V5isd9mWq6fHjk6rn0\nZxG8KK5Jm/wbVZiYZtqrmkqL023bkxvCiY3lJHNyRG81mHS4Rn5sNsNp64+3yaWaNrzOzHBl+i6q\nmT7s9J+S+ay8mex6EIneN47SNXKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAImYiJme0JafEs3h6fkidrZOn5eaLeJk7eOdm1Hi2vmtPTry/CHmOJcUvmvOPF1n09Pm\n6HF9ZGm01qxO3R5vSY7XwzmzTy47zzTEd7en5Mfvt2/PURWdo3tvPrPlKymbktFqTtMTvHzbOLDG\nf63JXbFX7FdnoODcDprZpq9TjiMMTvSn4vj8l5fxnrk91saPSa7i2hpOfbTVt5x1m0fLydzR6PDo\ndPGHBXasd585n1lsRERG0dIF5OOe6tAEqgAAAAAAAAAAAAAAAAAAAAAAADX11+TRZrf0y2Gjxe22\ngtH4piP3TPpXKwxtjhuYo9xq442iIblI2pC1RET2ILd9kxCqRjZmwlCSEohIJAQAAJZISDKGUd2M\nMoBnVbVVCyAWVWeSuqyOwIlXZZKue4MJV2WWYT2QKbKL9YlfdRdIo35b7/Hd3KTzUrPrDh27uxpb\nc2mpPwX/ABX9XAKpAAAAAAAAAAAAAACekTIp1eTwtJmv+GkyJn1oafeazbfpMzLR4jq/o8b823zX\n6XNF8ERCvTcNpxLV5LauvPhx9Irv3lhztdtv8TtaWLicXrt03jzjzb2k1nid56ty3s/w+a7Uwzjn\n1raejlarhmbhl/FpbxMO/fzj5p/ixSeXOvTtRfeI280ZI26tfDm3pWe63LaZx7qtGvniJ6tPLvOK\nfOa9WzbJvTbza02jl3n5SSljscK1MajSxWZ96nSW88xw/VfQ9XMT9nfa3yemid43jtLeXsce88qQ\nEqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADia3UTm1l4j7OP3Y/u\n7Vp2rM+kPJW1PhYcmS0+9MzKm/jbwz31weMzbV8UppazPL9q0/BF4rk1GLDSNqxPWPhCnHmnNrtT\nqPKteWPm6U6OdHaZvO+SaRNvhv12Ub/q3FhtrNVj0uKOt56z6R5y9zix1w4qY6RtWsREOJ7L6OKa\nS2rvX6zNM7T6Vh3mmZyOfya7eACzIAAAAAAAAAAAAAAAAAAAAAAAAAAczjVvqMVfW/8AZ03I41bf\nLp6/OVs/UVrY47NyOzUxd4bUJpEbb3Z7IiOrKIVSjZhMLJYyhKIgmGUQSDESIEbJEgQmCITEAmGU\nIiGUAyhZVhDOoM4Wx2VQtqBKuyyWEgqlhKyyuyBVaGtkbNmvk7A15l1eH2300R6TMORPSXT4ZO+O\n8fFefEX63gEAAAAAAAAAAAAAAAq1WPxdLlp+Kkx+y1Fvsz8gjhaDauGK8sx07y3OE3m1tT6RaP4c\nvU6yMNKUx73zT0ilY3l2eF6a+m0kRl/zbzz3+Ez5M8z26fJruW6wzYq5sV8d43raNpZjRzPPaTmx\n5b6bJ9rHO3zb2WJ8GWPEscY9bgzxH2t62n19GWW0eHOzHU5XbjXZ1x8WTnz2iZ7S2M1IjH2+LX0V\nKTqs8zO9ot0j8nUthi1J3UaOFMTfLFo6xMbS9BwHWTqdHOO8+/hnln5eTjYMFo1WTH5VnePzXcIm\n2k4zlpPSmXy/hfF5eMfJns69OA2cgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAADG/2LfJ874rW845mubliY7bPoto5qzHrDz0+yePNF41OotaJ7RWNtpV1OtfHqZ715fhu\nj8adNpcVfeyzE2/vLuanhOu1nEctIxTTFa/+ZPbZ3eHcF0vDbTfFE2yzG03t32+DokynXl9+leDB\nTTYKYccbUpWIhYCzEAAAAAAAAAAAAAAAAAAAAAAAAAAAAcXjE/4zDH9M/wAu04XF5/3jj/0f3Wz9\nRUYmzDWxS2I7FSyjuzY1ZKpRKEygEwiWUIkGIk2QJNhKQhMIhkCYZQxhlAMoZwwZwgWQshVCyATL\nCWc9ldpBhZXLOVdpQK7NfJPRdaWvknoDVvPvOnwuel4+TlXn3nS4VPvXj4QtEV0wAAAAAAAAAAAA\nAAAAAVV02CmTxK4qRf8AFFeq0AAAanEsfPpZmO9Ji0NDLfkwdOsulrumiyzHlVzJrz4Ovoy26vB8\ncTBa9NffLtMY77Rv8Yegx5ImkKdJoY1HC81Y+3OSbVn0mGGkmbY45u6tnrrTOu2xGO0RxCd+nNVj\nqKxTV1vH2pjaGtnyzXXYdo96ZmGXEMk15b7/AGZiVerWPTYckZcNbx5wzc7hGbnxXxzPWk7x8pdF\n0S9jh1OXgAlUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAcPjEf4/FP9H93ccXjMf4vDP9Mx+62fqKrx+S+GvibEFSsqyYwlVK\nZYsmIMoRKYJQIPIEiQ2ATCUQygCGUIhMAyhnDCGUIFkLIV1ZxIMpVWWSrsCuyqyyyq09ECq8tfJK\n66jJ2Bp5J6upwn7dv9Lk5J951uE/av8AJaIrqAAAAAAAAAAAAAAAAAAAAAAq1Mc2myxPnWf4cmtu\nXT9fR0tffk0WSe28bfq5Wbamm3326MtunwfK6PCv/AxPraZ/dz9PO97/AOqf5dHhdZrw7Dv3mOb9\nXOxRFM+avpe38mvkPHf/AFWlrKba7Tzt99ZxKkfR7euyNXMTrtPHfa0z+zPiM/UR8Zj+Wbdu8HpN\nM2bfzrV13M4dO2pyR61dNvj44/J/oAWZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADj8bj63BPzdhyeNx0wz8ZWz9RWri7Nmv\nVrYu0NmqaRZHZlDGGSiwxZSgCEkCBCQSCQBMJRCYgEsoYx3Z17AlMIhlCBnDOGEM4AlhZZKq4KrK\n7LLKrIFN2vdfZReAaObu6/CO9vk5OePR1uEd7fJeIrqAIAAAAAAAAAAAAAAAAAAAAGtxCk5NFliI\n3mI32+XVyNTyZOHTee946PQKPoeDffw4777eW/yVs60xv+ZxOnr4Okx1t05KRv8Ao41Z5q3yed5m\nXY1szXRZ5jvFJ/hxItP0aOSN9q7yrtr4f2tHFM5+KT16Yq/vK/iGSbXw4vO14UcPx5MGfNbPG18m\n1oj4THRsTw7VanPXVYpi3gzMcnrvCnG11JOupwuN8+a3pEQ6jT4divjxWnJExa09pbjbM5HHu90A\nJUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAHM41H1GOf6nTc/jEf4Ws+lls/UX45uGekNujTwdm5RNIthKIZKLDFlsiQIShIC\nEgCUJ7AmGTGO7IDzZQhMSDJMMYZQgZwzhhDOATuqssmVdgVWVWWyqtCBTeVF19lF+wNLNG7q8I+9\n8nLyupwnt+S8RXUAQAAAAAAAAAAAAAAAAAAAAAAItWL1mto3iY2lyrcLyUxzix2ia2nvPeK+jrCL\nOrTVnxpanhuPPemSs8l6RtE7dJj0ldpNP9GwRSZ3neZmV4cR/Vs4AJQAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANHi1d9H\nM+kt5ra+vPoskfDdOfqK4mn7Q3aNHBPZu0W0RdDOGFWcKLCJZeTGQQlCQSgASBsCYZQxhlAJTAmA\nTsmAgGcM4YQyjsgRLC3VnaVcgwsrt3Z2V2QK7tbJ1bN5a9waeWO7p8Knt8nNyebpcK8vkvlFdQBA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK9RXmwZI+ErEWjesx6wQeZwejeo0cccuW8\nelpblJaaRGxVnCuss4ZrMvJEgCAASISCQIBlCYYpieoM0wx8k7gzIRueYM4Z79FcSy3QEsLJmWFp\nBjaVVpZWlXMoGNmvkXXlr3kGtknu6XCf7OXkl1OEdl8orqgIAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAHmskcmtzV/rls0U62OXiWX4zErcc9GmkRfWVkSqqziWayxCPIANwBIhIJSxS\nCRG6dwZwlhEs4BluMdzfqgZxLLdXuy3AmVdpZTKuZBjaVVpWWV2QlhZRdfZRcGpl7urwfrzfJy8r\nrcH61vPyWitdMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHA4nHLxKZ9awnH2ZcY\njbW459aq8fZpfiI2IZwrqzhmsz3Ebm4JN0AMhCQSIASndiAziWUSriWcAyRujc80DM3RCfIETLCW\nUsZEsJYSslXZAwlTddPZTkBp5e7r8Gj6rJPxhx8k9Xa4PG2C8/FaK10QAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAcfjcbZMFvnDWx9m5x2PqcNvS+zSxT7sNPxH62YZQwqzhRZO6UCB\nKUAJTux3SDIRuAncQAmJZRLBMSgZ7iIAZRKd2DICUSlAljLCYWMLIFVukNfI2bNbIDTyT7zu8Ijb\nSz/qcG/2nf4T/wCE/wD2WnxWt4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHL9oL\n+Hw2cm28VvEuPptfgyVj6yIn0no7/FtJfW8NzYMe3PaPd39d3iMug1WktNc2C9dvPbeP1aZ9xF+v\nT471tHu2iflK2HkqWmvaZj5Surqc9Ps5bx+alTHqYHm68S1Vf/NmfnC2vGNTXvyT84Ql6A3cSvHM\nsfaxVn5Ssrxyv3sM/lKB1xza8bwT3pePyWV4tpZ+/MfOEjfGrXiGlt2zV/PotrqcN/s5aT/+wLRj\nFontMSlAlKEgndO6IAZQljDIEgeQljLCzOVdkCu/SGrkbF56NPNeKxMzMRHxENe0+89DwuNtHHzl\n5PJr8NcnLW3Pbf7r1nCZm2gpae8zMrz4i/W6AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAETETG0xukB4HVaeMHEtRi26RedvkyjBSfX9W77QYvC4xz7dMlYlrU7M929dWJLFc6aPK0q\n7YLxPS0S22FlP6q38Zac0yR92s/KVc3tHfFf8tpbcsLRvB/dR/8ALLVnU0r9uL1+dZI1mnmdvGpv\n6TOy6ym+Oto2tWJ+cJ/tW+KLK5KW+zes/KU7tG+h01p64qx8Y6NXNo6Y+uPJlp8rLf0rfG7MXtHa\n0x8pZxqs9e2a8f8A7Oj7HaTHn0+f6RWM23LETfr6vRW4PoL99NT8ui7F4+vEdXXtnt+fVbXjGsr/\nAOZE/OsPS29nuH27YrV+VpeV9pdPXhOtw49NG9Mld55+vXcTPd42I47qo7xSfyWV9oM8d8VJ/VxM\nd8l46xWF9cV7en6o/qLfxp2I9ob+eCv/AHMo9op89P8A/wBORGmyT5R+qfo2X8P7n9Q/jTsx7RR5\n6ef+4/8AuHftg/8A6cWcOSO9J/WEbWr3pY7Efzp2Lcfv5YK/9zWy8d1E/ZpSv5Oba1/+Hb9lc+LP\nbFt87I7E/wAabWbiurvEx4nL/pjZzc2bJkn372t85ZXx55/BX85lucC0vPxnTxlnnjm32mOiZqUu\nLJ2p4TwnVavNWaYbRTfre0bQ99pcH0bT0xb78vmtiIiNojaErMwAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAHnfarF7umzRHaZrLjYrdIen9ocPi8JyTt1xzF4eUw23rCm3R4r6bMy\nwt6kdTaWLdjswmNoZontsCm0K5XWjopnuDC0dGpqG5bs08/daKV672MjbSaif6oh6Z5f2LtvptRX\n0tEvUN3Jfo8f7cYve0eX4zV7B5z20xc/C8eSPuZIRficfXlcPaG7ino08HWIbePpLF2NuiyOyrHK\n3fZFSwuovHVfaVF4QK5YWTM9UT0EKry6Ps1Tn4zjn8NZn9nOtLseydObiWW34cf918fWfk+PYANn\nKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAq1WKM+ly4p+/WYeBxTNd6zG0xO0\nvobw3FcP0bi2em20Tbmj5Srr418V9sa2Z7qKyzi07MXUylhaU7yjqhLCeiq3ddaFNxFYW7NLNG8t\nzya+WO6Va9J7FW66mvwidnrXiPY3Ny8RyUn71Jj9Ht3RPjk19HK9pMHj8D1ER3rHN+jqqtTjjNps\nuOe16zAifXzfTz7kNyndpYazS9qT0mszDdoxrsi6m8LazMq6zDOsq1ZEyrt1WWlXaUCqyq0rbKbi\nFdp6PReyFd8uqv8ACsfy83aXrPZHHto89/xX2/SP/dpj6y8vx6EBq5gAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAB5n2q03LfDqqx39y39npmlxbS/TOG5se29tuavzgWzeV4mtui2\nO3RRSY2hdVhqO2MvI36iu9lUsrSrvDHn6spnmSiq5jooyV6tq1VV69RC32byTh43h8otMx+r6I+Z\naK/g8TwX7bXh9Mid4iW+fjl8n1ICWb57xLBOm4zqse20Tbmj8+qKdnS9q8PhcTw5tumSm0/OHMxz\n0Za+uzx3sX1t0Zxurr1ZxvspWiZYWZbsbT0QK7KLrZVZJFaqt5vbezNOTg9J/FaZeJns93wCvLwb\nT/GJn92uGHldIBowAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADuAPA67F9H4l\nqMW20VvO3yRWW97T4fC4rXJHSMtI/WGhVlue3b473K2KzMML4+62tujG9pnozXaOSOVFMnVbmq1t\ntrJRW5E7wwvUxTvCyY6CHOt7moxz6Wh9PxTzYaT61h8x1MbZK/OH0zTf+Fxf6I/htj45vL9WgLMn\nmvbPFvocGWO9L7fq85p5maw9d7VYvE4JkmPu2if3eW0+PasdFNOnxfF1Y2hlykRsmY+LJ0MZjZXa\neq2eyi8oQTO0KLdZWzPRjWu6VaqtHR73g0bcI0sf0Q8Nkq93wqNuFaWP+XDTDDytwBowAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAef9q8HNpcGaI60vtPyl56k9Iew49j8ThGe\nPwxFv0l4zH2U26fDfTYiyJljvsjf4sm6vJ1hrXjq2MkqLdZEVbgbMx0auGdmzNt6iHN1Ub5af6of\nTdPG2nxx6Vj+HzaaTm1+nx/iyVj930ysbViPRrj45vL9SAuyc7j1efguqj+jd4/T33rD3HEcPj8O\n1GP8WOY/Z4TTT7sKadHhbcsZnaCJ3TPZk6VdrKbTutmP0U2nqgrGOsr8deiuI2X09EqKM1dt3uuG\nf/jdN/06/wAPE546S9rwud+Gaaf+XH8NMMPK2wGjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAABrcRp4nDtRWPPHP8PCYusPoWSvNjtX1iYfPuWaXtX8MzCuvjfw32siu8ptXoxi\n0wy5t4YulReqmazu2skbquURWFInddM7VYRGyL291KFnCcfj8e0le/Lbmn8n0N4b2Ur4nHLWmPsY\n5e5a5+OXyXugBZmiY3iY9Xz7NjnTa3Ph/BeYj5PoTxftFg8Hjk2iOmWkW/Psrr418V5WrWd2faFc\nV2jdnEMXWxntupmN7NiYU27iWML6dVMVnddjgVqMsdHr+CW5uE6f4Rt+7yuSsTDv+zWXn0WTHP3L\n/tK+GHl+O0A1c4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Dn93W56/wDM\nt/L3z59qp24jn+OS38lnpr4r7ZxHQ2TEstt3PXUrt27K57rr1VT0BjKnJPRbMqMs7QlV2fYvHvrd\nVknyrEfu9m8f7FZI8fVU85iJewbT45NfQBKo817W4eulzxHaZrL0rje09ItwqbfhtBVs3leai8RD\nKLw1sduesL606dWFdsZT1jdhNeq6K9DlhCVUU6s4jZnt1YzAhnM71dH2bycmszY/K1d/0c6OzY4R\nfwuK4p8rTstn6z8k7HrwGzkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHz3\nVxvr80/8y38voTwGpj/F5/8AqT/JfjTx/WVeyY6FPspc9dZPVXaOq2WEwIUTVRmjo2rNfLHRI3vZ\nDJycXtX8dZh7t879nsnhcbwz23tt+r6I2nxyb+gCVBzuPY/E4PqI9K7ui19fTxNBnp60n+Aj5/pJ\n3jZu1aOnnltMNussdfXbm+l3ZM9URHREdZVXTuT1Nk7boQiOkJw28PU47/htEp5eivJPLMTCZ9Vv\nx7mJ3iJ9UqNHk8XR4b+tIXuhxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD\nweqjbWZ4/wCZP8vePCaz/wDIaiP+Zb+UX408f0r9lOxWOifJhXWjfyYWllPRXYQxnrCrJHRd3YZI\n6A1NJecHEsN/S0T+76bE7xE+r5dk93LW3pL6ZpMni6PDf8VIn9m2fjm8s9rgFmQxvHNS0esbMiew\nPnHLyai9fS0w2aNfUTtrs3+uf5bGPqy068fF227KtSsdFlKqNGMV6myyY6sbdIQI8tlOWOi6Jhhk\nj3RD0vA8nicMx9etZmHRcT2Zyb6XNT8N9/2dt0T449T2AJVAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAHhdfG3E9TH9cvdPEcXjk4zqI/q3L8aeP6xr2TsxpLOekMK6mFo6qpXSrm\nOqBixvHSVmzC4OfqK7S9/wAByeLwbTW9K7fo8Fqo6Paeyl+fglI/Da0NcMPK7QC7AAB8313TiOf/\nAKk/y2MHWrX4jG3E9R/1Lfyv0/aFNOrHxuU7LI7MMayGTVlHWUXhNe6Z6wIUsb9d1m20q7dkDpez\nN9tRqKT5xEvRvKez9+Xis1/FSYerb5+OTyf6AFlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAB43j9eXjN/jWJ/Z7J5L2mry8Upb8VIF8f6aGOey2eynHvOy7bowrrYSxZSwQJ2YXZ\n92N4BoanrEvVexmTm4blr+HJ/aHltRHSXofYm/1Wrp5RaJaYY+X49WA0c4AD51xONuKan/qW/lbp\n+0MOLRtxbU/9SU4J7KadWPjep2WQrr2WRPRk1TvsndXMpiRCb9FNu0rbTuqvKBscCjfi9PhWZeue\nV9n434rafTHL1TfPxy+T/QAszAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHmv\navHtfTZfnV6VxPajHzcNrf8ABeJFs/XnMcr4no18c+6vr2YadkY2YM57sEDLyY37Mo7MMnYGlqO0\nvQ+xNfqNVb1tEfs87qZ2rL0/sVX/AHdnt65P7Q0wx8vx6UBo5wAHz/jUbcX1PT78qtO2vaCnJxjP\n8Zif2amnnspp04+OjWejKJ6MKdmcMmyJn4m5ZHzEVPMwtJv0VZLbQDqezcb8RzT6Y/7vUPM+ytZt\nn1OTyiIh6Ztn45N/6AFlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABocbxeLw\nnUR5xXm/Rvq8+OMuDJjntaswEeBxT0bNZ6NatZpNqz3rO0rqsdO3PxlaWEMpY+aqWXkryT0ZT2V3\n7A0dVPuy9f7G124NM/iyT/Z4zWT7sw957MYfB4Fp4/FE2/WWmGHldcBowAAeM9qKcvFeb8VIly9P\n0nq7ntbTbVYL+tJj93CwT76unR4/jo0nozhhTsy3Y1sWljM9Ce7HyQIm3RRlttVbaWrnt0Sh6n2U\nx8vD8mSfv3/h3XN4Bi8Lg2nj8Uc36y6TeOPXugCUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAPD8RxeBxXUU26Tbmj8+quro+02Lw+I4ssdslNvzhzazvDPbq8d7GW7Dfqz2VzG\n0s2qd+iu/Zn5Ksk9BVztX1mI8930zh2LwOHabH+HHWP2fNYp4+vwYvxXiP3fUqxtWIjyjZtj45/L\nfaQFmQADzftfj3w6fJ6WmHmsP23rvaqnNwqLfhvEvIYZ+sV038bo0noy36MK9oZQxrdMyrlnMbMZ\nQKrS1M07zEestq/RRjr4utwY/wAV4j91p9V18fQdJj8LR4ccfdpEfsuREbREJbuMAAAAAAAAAAAA\nBAJAAAAEAJEAJQAJQAJEAJQAJQAJEACUJAQlAJEAJQAJQJAAAEAJEAJBAAAJAABAJEJAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwvanDzaPFmjvjv8A\ntLztJ3h7HjGHx+FainnFeaPnHV4vFbeIU038VbHeGF+kso7Mb9mTdhKnLK3dRm7SIrHhGPxeP6Sv\n9cT/AHfSnz72Zx+J7Q45/BWZ/Z9BbZ+OXyfQBZQABzeP4/E4NqI9Ii36S8Ng/wAx9C4jTxOH6ivr\njn+Hz3B/mQi/GvjdCnWNlsdI2V07LIlg6USrt2ZzZXMoFV+zPhGLxeOaavpbm/RVltEN72Yx+Jxm\nb7dKUmf7L5+s9/HtRA2cqRACRACRACRACUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQCQQCRACRACRCQBCQBCQB\nACRACRACRACRACL1i9LVntMbPATTwdRkxT3pea/u+gPE8Xx+DxrPHlaYt+qNfGvjvtXXsi0dOrKk\ndEXjZg6VMtbP2bMtXUdpEV0/Y2nNxbNf8OP+727xvsXH+N1U/wBEfy9k3nxyb+gCVQAGOWvNivX1\nrMPnGGOXNNfOJ2fSZ6w+dZKeHxDPX8N7R+6L8a+L63KdoZ7q6zvEMpnowdKJ6ywmWUyqvIKM0vQ+\nx+D6rU55+9aKx+TzWa36vbezmDwODYenW+95/Nphj5L6dQBo5wAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAEiAAAEoA\nAAAAAAAAAAAAAEAkEAkRuAkQbgkQAkQAkQAkQAl5T2nx8nEMOT8dNv0l6pwfarHvpcGWPu32/WCr\nYvK4mOem6b9mGKd4Z3idmFdka0y1c892zfpMtLPaNpEV6D2Kj/Eauf6YeweQ9ieuTVz8K/3evbT4\n5NfQBKoAA8FxCvJxrUx/XMvevD8Zry8fz/Haf2RfjTx/6RSOnRMyypHu9kXjowrqVSrvPRnZVl6V\nkK0775MsUjvadn0nT4ow6bFijtSsVfPuFYvpPGtNTy54mfy6vorXDm8l9pEC7JIgBIgBIgBIgBIg\nBIgBIhIAgBIhIAgBIgBIIBIAAhIAhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAAAAAAAAAAAA\nAAAAAAAAABAJQkAEAAAAAAAAAAjc3BIjdG4Mkbo5kcwMjdhzHMDPc3V8xzAs3N1fMjmBZubq+Y5g\nWbm6vmOYFm5ur5jmBZubq+Y5gWbm6vmOYFm5ur5jmBZubq+Y5gWbm6vmTzAz3N2HMnmBlu5ftFTx\nOEZJ/DMW/d0t2rxKni8N1FPWkiZ9eS08e7Cy8dGGn6UhZaJljXZGnmc3UT3dPP2cnUT78xCIV6j2\nH/8A9c/6f7vXPI+w8bU1U+vL/d63du5NfUiDcVSIAS8b7RV5eOb/AIqRL2TyXtNX/e2KfXH/AHlF\n+NPH/pr4+2xcxx0hFpY11K7R16KM32ZWz3UaidqSgrc9kcPicWyZJjfw6T+727y3sXh2xarN+K0V\nh6lvPjj3e0ASqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJQAAAAAkQAkQAkAAAAAAAAAAAAAAA\nEgAAAAAAAAAAAAAAAAAAAAAgAAABKDcAN0bgkY8xzAyRux5kcwM9zdXNkTcFm6OZXzMeYFvMibKu\nZHMC2bo51U2RuC2bom6rc3BZzom6sBZzI52ADPnOdggFnMc6skFnMc6rc3BbznOp3RzAv50c6nml\nHMC/nOf4qOY5wX85zqOc5wbHOc7X5znBsc6edr85zg2ec52vzpi4NjmY5bROG+/bllVzsNTk5dLl\nn0pP8BHmMHWNmzt0aum8obm08vVjfrtnxztR0mXHzTvaZdjVRMTLkZo6yiFen9iZ2pqY/wBP93rN\n3kPY+/LfPX1rE/u9XzN3HfqzdO6vmTuIZ7m7Hc3Bnu8t7TR/vHBP9E/y9Pu837SV31umn+if5Rfi\n/j/01MMb1hjkrtKzBG0bMsmOZY11tOYamr6Und0LUc7XT7u3rJPqL8er9lcPhcFpbzyWm39v7O00\n+FYvA4Zpsc94xxu227jv1IAgAAAAAAAAABKAAAASgASgBIgBIgBIgBIhIAAAAAAAAAAAAAAAAAAC\nUACUJAAAAAAAAAAAABIAAAAAAAAAAAAAAAAAAAAg3AEbomQZbo3YzLGbAz3RNlc3YzcFs2YzdVN2\nM2Bdzom6nmNwW86JurTAMuY3REJ2BB1ZRVMVBhsbSsiqeUFXLucq3lTygp5TlXcpygp5TlXcpygp\n5TlXcqOUFXKjlXcrGYBXysdlswiYBVMdUTCyY6sZBWxlnMMZgGLGZZSwkDdHMiWO4MuY5mEyjcFn\nN1OdVzHMC3nTzqeY5gX85zqOZPMC+Lqdbk20eb/RKOZr8QybaK/XvtH7iZ9aGlp2luzT3fg19NHS\nOjbmPcYX67XH1XSZ9XIzRvMuzrK7zLkZYmYnciunb9lZ5dTk+OP+71cXeP8AZnJ/ip2nf3J/l6iL\n/Fu5L9bMWZczXi6YuIbEWTzKIuyiwLt3nuO25uI4a/hx7/rLuczg8TicvFLbfdpEK6+NPH/phhjo\nstLGkctUWnoxrrU3j1cnWTzZq1jzl1clo5Zcu8c+txR63iP3Tn6pv4+g4o5cVI9IiGe7CJ2iE7t3\nGyN2O6dwSINwSISAlAAlACRAAlAAlACRACRCQAAAAAAAAAASgASISAAAAAAAAAAAAACQAAAAAAAA\nAAAAAASAAAAAAAAAAAAAAAAIAAAQCAJljuljsCJlhMs9mOwMJYys5TkBVsjZdyHICrZPKt5E8oK4\nqmKrOVOwMIqyirPY2Bjyp2ZbAI2NmSARsbMgEbI2ZAMdjZICNkbMkSCNmOzJEgx2YyzljMAwlhKy\nWEwCuWErJhhMArlhLOWEgxljMpljIImWMyTKJA3N0IBO5vux3NwZbnMx3NwZczT4jf3MdPW27a3a\nfJOq1XNP2KdIRfi+J2trSYfcjeF+Wm1OicVeWIiN9kai8xjY12ORqultnI1Ecsujq79XP1FovWYI\nrTgeq+j8QrWZ+3Mx+r2UXeC0WG2Ti2kiN5mL807eUREvbzbaejefHJv62Iv8WUXa0WTFhVtRdlF2\nrz9WUXBtc7jR9dqc2T1ttHyhvZMvJitb0jdq6XHNcNenWVN3028U99WRj6Kb02be3Tq18/SN2Lpc\n3UdN9nOmZrqKX/DaJ/d0svvTLRzV3jomK6+Pd1vvWJj0ZczT0mXxNJht60hfFnQ4qu3N1cWTEgs3\nTur5k7gz3N2O5uDM3Y7m4MtxBuCQASIASIASAAAAAAACRCQAAAAAAAAEoSAAAAAAAAAAAlAAlCQA\nAAAAAAAAAAASAAAAAAAAAAAAIASgAAAEJAQJQCNkbMgGOyOVnsAw5TlZ7GwMOVPKy2NgY7GzIBGx\nskA2AAAAAAAAAAQkBAEghEskAxYzDPZGwK5hjMLJhjMAqmGEwumrCagomFcw2JqqtUFEsLLrV82F\no7gqljKyYYTGwMZRKUSCAQAboJnaN5Bjkneu0d5W4ccViIiOzHFWbTzNumP1Zarr8eeRMbxDW1Mx\nNO67NbkhzNVnmInqzaOZrL93JyZeV0M1++7S02jvxDWxhxx033tPpC8Z6rrezWjmZyazJG2/u03h\n2vFibTHoqvamiwVwY+nLGzV0+SZ1Mx8G0/45tOhzJ5lXMc3UVXRdlF1HP+iYsDPLPPy49/tz1+Te\npSIr0ho6ak5Ms5J8o2q6NImOrHV7XX488ypzTtHXo0s9t6zG7c1G1qz6ubeZiZ3UatXJG3yauSO7\ncvMTEx5tPLb3prPRMVr0HB8vicNxf0+7+kt+LOJwTJyY/Bnz3tH93X36N58cWvq6LSyiyndMSlC7\nmZcymLJiwLosmJVRLKLAtiU7q4lMSCzc3YxJuDMRuAlKAEgAAAlAkAAAAAABKAEgAAAAAJAAAAAA\nAAAAAAAEgAAAAAAAAAAAAAkAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAhIAAACAAAASgAAAAAAEAAAA\nhGzJAImGMwzQDDZjNVuyNgUTVhNGxysZqDVmiu1G5NN2M4waM0+DCaN2cbGcQNGaMZq3JxMJxA1J\nqx2bU4kU09slorWNwa20z02RXHbJbl26QvtFovbHWkxEdJt5y2MOHlr2U1W3jx+1hiw8vSO63lmI\nXRTaEWmtY6snRHO1VpmJ+DjavpSZl2s8b7y4HFcnh0n0gha5ebJN55KRM2mdoiPN6fh+kpwXh0Wy\nRHj5Otp/s5Ps1p62y31+em9aTMYt/OfVfxTiPjZ52naI7fBrI5t66xz5+a1rW7yx0eSL6iZjtEOX\nqNbSletom3lENjh2fbHzbbWt3iVozruc+5ztWubf4M4ybpQ2Oboyrva0Vjza8WdDR4OkXt3n9ldX\nkaePP9VtYqctYhdvt5oivTeCZ2YOxXk6ubqMfV0b9mrljfqlFcq88k7z2U5axeItDa1OPessuC8P\nya7XRWYnwqdbT/ZMilvIu4dpslNdixXja8Y5tt85djZdbDWnGOesRtXFtuw6T27No5Kx2OrKYQlC\nExKJgBnEpiyvdlEgsizKLKollFgWxLKJVRLKJBbEp3VxLKJBnuMWQJEbpBIAAAJAAAABIAAAAAAA\nlAJAAAAAAAAAAAAAASAAAAAAAAAAAAAJAAAABAJABAlAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAA\nAAABAJQAAAAgAABAAI2EoBGyJhkgGPKxmqxAKpownHC+YRMdN5BrTj67R3bOn01o7p01Iv71u89o\nb9a7LfBTfS1vWI2jf12VfQPSW8KX2mas+NC2iv6xMNfJpMnLtEbuuxtMRCtzF55NR5rPps1N/ctP\ny6uHreE6nXZ4pak48X3rT06fB7fNeI33cbX6mI32R/MWu7XF116aDSRhxbRERs8f499bkyZeeKae\nkzE2mdon81/tfxDLGOunwbzlzbx08oaHBvZHJlx48mrvaa94pu04y617576rNGLRRM0397JEd/lu\n9Dw/S3x4qxffo6mm4NjwUiKY4iI9Ib1dHFY6QIaNabbrYrLfrpJtaK1rMzPZb/s+05IpP59OyLeJ\nk7eNfRaOc1ue32I7fGXYpi5Y77M8OGMeOKxHSFsU3Y29deZMzirl6dlVvhLatCjJHeYQv1rXnps1\n8k9/VsW6qLVmZIi1rzitlvFKRvaZ2h6TSaenC9FFY+3brM+sqeG8Prp4+kZ+lvuxPkr1mqm95nfp\nDXM459676a2q1dsV7XietvNno78+CJn1cjX6mOeIm0bR33dfRU5NJjidt9t5afjG/V6JZ7I2QMNh\nnyo2BhsMuVG3wAhMSbbQRAMolnE+iuGUSCyJZRKuGUSCyJZK4llEgyZMYTuCUsYSCQASISAAAlCQ\nAAAAAAEoASCASAAAAAAAAAAAAlACRACQAAAAAAAAAEgCEoASCAAAAAAAAAAAAAAAAAAAAAAABAAA\nAAAAAAAISAIAAAAAAQAAACASgAAAQJAQAAhIDHZhln3do7z0WS18mWsajHjmes7pg3dNi5aRMNqO\nyvDHTpPRaigHZhN4hHRlaVN59JY3zRENLUavaO+yq0iNVlitJ6vNcR1MVi0zO0era1/Ea0rPvbz5\nPM5MWp45qvo2GZrhmfrsnpHpHzTCseEcM/2vrr8Q1Eb4qzy44nziPN63HpYiIiI7LNHoqabBTFii\nIpSNohuVxrKtWMEejPwY9G1FFmHB4mWJn7MdfnIM9JpIx15to5pbUaas/a6rqViI7MxPxqX0UT1r\nO3wVzpbR2hviP5i03Y5s6a879FNtHljydhExCv8AMTPJXBnRZbz0iG5ptFjwe/l96zctMVamTJtE\nyTMibu1VrdTzRMR0j0ed4lr64MVpm0RERvMz5NvX62uOJ69XhOKX1HH9bHDtFvNYnfJeOy0Z2ojX\n6jjnEq6fRUmccTvN/J9H0eKcOnx45neaxEbubwHgOHg+milI3vP2resu3Wu0JQmITsmISDHZHKz2\nJgFc1RMLJhGwK9iIZ7MZgEdgmAEwyiWCdwWRLKJVxKYsC2JTuriWUSDNlEsIlMAySx3SCRCQSIAS\nAAACRACQAAAAAAASIASAAAAAAAAAAAAAAACRACRACQASIAAAAAAAAAAAAAAAAAAAAAAAAQCUAAAA\nAAAAAAIAAAAAAAAQAAAAAACBICBICAAEJAQJQCJcLjuS2ny6fPG/LWdpd1o8T0X07SXx/e7wCdJx\nWa0jmneHQpxPDMdZmJfNtZm49weZrh0/j4o7VtSZ2+Uw0/8A7o49k92vBLc/ntFohFW9PqGXimOI\n6Tu1L8T3eCx6r2t1O3JwvHjifO99v7t/Bwf2l1PXU6rS6eJ8qUm8x+so5TsekzcSjbvs4mt4rzW5\nK2mbT0itesy2cHsvbvqtbmyz5xERWP2jd1tJwrTaONsOKtZ8585+cnDrzmn4Rq+IZObUROHD32n7\nVv8A0ej0uhxaXFGPFSK1j0bkY4jyZRVZVXFGUVWbGwKsk8mObekNrSW3pWf1a2aYjHbm7bNnQ1id\nPW0TvuDdhJEbQABMsLW2R0ZTMQrvfbz2YWzVhpanUxEd0dWkW5c8R5uXxDX1w4pnfr5Q19XxKuOJ\n2neXltVqtVxbV/RdJ715+1bypANfiOu1HENV9C0MTfNeesx2rD1PAeBYuE6aKx72W3W9/WVnBuB4\neF4dqRzZbdb5J72l160WVK02ZxCYhOwI23TsnY2BGxsnYBjsiYZsZBjMMZZSgGEolMsQDdG6NwZ7\npiVe6YkFsSziVMWZRILolMSriWUSCyJTuwhMSDMRCQSI3SAlACRCQAAEoAEoASAAAAAAAAACUACR\nACQAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAABAAAAAAAAAAAAACBKAAAAAAAQ\nJQAAAhICEbJAYTWJ7wx8KvpC0BV4ceieWGewDHlNmWwCNjZICNhIDmcZredBecdpiY69FXCOLW+i\nUiZidukulmxxlx2paN4mNng+K4+I8Hy2yaTfl37TXetoCPfRxfp1qi3F48ofKMvtvxak8s6LDv61\nrZji9rPaLUf5PC+bfttS0q8q3p9W/wBrRMdpUZuKdN99nzvFqPbTVz7nD8OKs+do2/mW3h4D7Xaq\nZnPrtNpqz35aRaYOHY9Zk4pNt9rR+rl6zi+OnS+WN57Rv1lXp/YrNaYtruL6zNPnGO3hxP6O5w/2\nf0HDuun09Yv55Le9afznqcOvO4tBreMTHu30unnva0bWt8on+70nDuE4OHYYx4Kbesz3tPrMuhGO\nIjpDOKrK9YVpsyiGUQnYGOyUgI2SlAIEmwMWMs9kTAMJYzDOYRMArmGErZhhMArlHmzmGMwDE3Ts\nbAbs4swj5pgFkSziVcM4BZEsolXDKAZwyhjCYBkACQhIAAAAAAAJAAAAAAAAAAAAAAAAAAAShIAA\nAAAAAAJAAAAAAAAAAAAAABAJEAAAAAAAAAAAAAAAIEoBKAAAAAAAAAAAAAAABAlAAAAAAAIAAAAA\nBAkBAkBAkBAlACEgMZjdjbFW8bWrEx8YWANb6Fp+bfwab+vLDKMFK9qxH5L0bAr8OPRPKz2AY7J2\nSbAjYZAI2E7AIEgIEgIEgMdkSy2NgY7MdlmyNoBXsxmFuyNgVTVjNV3KjlBRNTlXTVHKCrlIqt5T\nlBhEMohlFerLlBjEMohMVTEARDKCITsAk2AEgAAAkAAAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAD/\n2Q==",L1=class{constructor(e){d(this,"version"),d(this,"config"),d(this,"result"),d(this,"state"),d(this,"process"),d(this,"tf"),d(this,"env",gq),d(this,"draw",_X),d(this,"match",$Q),d(this,"models"),d(this,"events"),d(this,"faceTriangulation"),d(this,"faceUVMap"),d(this,"performance"),h(this,$1,void 0),h(this,M1,void 0),h(this,_1,void 0),d(this,"analyze",((...e)=>{if(!c(this,M1))return;const t=this.tf.engine().state.numTensors,n=c(this,$1);f(this,$1,t);const a=t-n;0!==a&&Uj(...e,a)})),h(this,F1,(e=>{if(!c(this,_1))return null;if(!e)return"input is not defined";if(this.env.node&&!(e instanceof di))return"input must be a tensor";try{this.tf.getBackend()}catch(e){return"backend not loaded"}return null})),d(this,"webcam",new class{constructor(){d(this,"config"),d(this,"element"),d(this,"stream"),d(this,"devices",[]),d(this,"enumerate",(async()=>{try{const e=await navigator.mediaDevices.enumerateDevices();this.devices=e.filter((e=>"videoinput"===e.kind))}catch(e){this.devices=[]}return this.devices})),d(this,"start",(async e=>{var t,n;if((null==e?void 0:e.debug)&&(this.config.debug=null==e?void 0:e.debug),(null==e?void 0:e.crop)&&(this.config.crop=null==e?void 0:e.crop),(null==e?void 0:e.mode)&&(this.config.mode=null==e?void 0:e.mode),(null==e?void 0:e.width)&&(this.config.width=null==e?void 0:e.width),(null==e?void 0:e.height)&&(this.config.height=null==e?void 0:e.height),(null==e?void 0:e.id)&&(this.config.id=null==e?void 0:e.id),null==e?void 0:e.element)if("string"==typeof e.element){const t=document.getElementById(e.element);if(!(t&&t instanceof HTMLVideoElement))return this.config.debug&&Uj("webcam","cannot get dom element",e.element),`webcam error: cannot get dom element: ${e.element}`;this.element=t}else{if(!(e.element instanceof HTMLVideoElement))return this.config.debug&&Uj("webcam","unknown dom element",e.element),`webcam error: unknown dom element: ${e.element}`;this.element=e.element}else this.element=document.createElement("video");const a={audio:!1,video:{facingMode:"front"===this.config.mode?"user":"environment",resizeMode:this.config.crop?"crop-and-scale":"none"}};if((null==(t=this.config)?void 0:t.width)>0&&(a.video.width={ideal:this.config.width}),(null==(n=this.config)?void 0:n.height)>0&&(a.video.height={ideal:this.config.height}),this.config.id&&(a.video.deviceId=this.config.id),this.element.addEventListener("play",(()=>{this.config.debug&&Uj("webcam","play")})),this.element.addEventListener("pause",(()=>{this.config.debug&&Uj("webcam","pause")})),this.element.addEventListener("click",(async()=>{this.element&&this.stream&&(this.element.paused?await this.element.play():this.element.pause())})),!(null==navigator?void 0:navigator.mediaDevices))return this.config.debug&&Uj("webcam error","no devices"),"webcam error: no devices";try{this.stream=await navigator.mediaDevices.getUserMedia(a)}catch(e){return Uj("webcam",e),`webcam error: ${e}`}if(!this.stream)return this.config.debug&&Uj("webcam error","no stream"),"webcam error no stream";this.element.srcObject=this.stream;const r=new Promise((e=>{this.element?this.element.onloadeddata=()=>e(!0):e(!1)}));return await r,await this.element.play(),this.config.debug&&Uj("webcam",{width:this.width,height:this.height,label:this.label,stream:this.stream,track:this.track,settings:this.settings,constraints:this.constraints,capabilities:this.capabilities}),`webcam: ${this.label}`})),d(this,"pause",(()=>{this.element&&this.element.pause()})),d(this,"play",(async()=>{this.element&&await this.element.play()})),d(this,"stop",(()=>{this.config.debug&&Uj("webcam","stop"),this.track&&this.track.stop()})),this.config={element:void 0,debug:!0,mode:"front",crop:!1,width:0,height:0}}get track(){if(this.stream)return this.stream.getVideoTracks()[0]}get capabilities(){if(this.track)return this.track.getCapabilities?this.track.getCapabilities():void 0}get constraints(){if(this.track)return this.track.getConstraints?this.track.getConstraints():void 0}get settings(){if(!this.stream)return;const e=this.stream.getVideoTracks()[0];return e.getSettings?e.getSettings():void 0}get label(){return this.track?this.track.label:""}get paused(){var e;return(null==(e=this.element)?void 0:e.paused)||!1}get width(){var e;return(null==(e=this.element)?void 0:e.videoWidth)||0}get height(){var e;return(null==(e=this.element)?void 0:e.videoHeight)||0}}),d(this,"emit",(e=>{var t;(null==(t=this.events)?void 0:t.dispatchEvent)&&this.events.dispatchEvent(new Event(e))})),h(this,O1,{});const t=(Vj.tfjs||Of).replace(/-(.*)/,"");var n;qj.wasmPath=`https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@${t}/dist/`,qj.modelBasePath=gq.browser?"../models/":"file://models/",this.version=CX,Object.defineProperty(this,"version",{value:CX}),this.config=JSON.parse(JSON.stringify(qj)),Object.seal(this.config),this.config.cacheModels="undefined"!=typeof indexedDB,e&&(this.config=jj(this.config,e)),n=this.config,IX.cacheModels=n.cacheModels,IX.verbose=n.debug,IX.modelBasePath=n.modelBasePath,this.tf=m,this.state="idle",f(this,$1,0),f(this,M1,!1),f(this,_1,!1),this.performance={},this.events="undefined"!=typeof EventTarget?new EventTarget:void 0,this.models=new P1(this),vK(),this.result=bQ(),this.process={tensor:null,canvas:null},this.faceTriangulation=GZ,this.faceUVMap=HZ,R1(this,null,""),this.emit("create"),(this.config.debug||this.env.browser)&&Uj(`version: ${this.version}`),this.config.debug&&Uj(`tfjs version: ${this.tf.version["tfjs-core"]}`);const a=JSON.parse(JSON.stringify(this.env));delete a.kernels,delete a.initial,delete a.perfadd,this.config.debug&&Uj("environment:",a)}reset(){const e=this.config.backend;this.config=JSON.parse(JSON.stringify(qj)),this.config.backend=e,hq(),gq.initial=!0}validate(e){const t=Hj(qj,e||this.config);return 0===t.length&&(this.config=jj(this.config,e)),t}now(){return Gj()}image(e,t=!1){return yq(e,this.config,t)}async segmentation(e,t){var n,a,r;if(t&&(this.config=jj(this.config,t)),!this.config.segmentation.enabled)return null;const i=await yq(e,this.config);if(!i.tensor)return null;let s=null;return(null==(n=this.config.segmentation.modelPath)?void 0:n.includes("rvm"))&&(s=await async function(e,t){if(d1||(d1=await S1(t)),!(null==d1?void 0:d1.executor))return null;w1.src=bo(e,255),k1!==t.segmentation.ratio&&I1(t);const[n,a,r,i,s,o]=await d1.executeAsync(w1,v1);let l;switch(t.segmentation.mode||"default"){case"default":l=T1(n,a);break;case"alpha":l=T1(null,a);break;case"foreground":l=T1(n,null);break;case"state":u=r,l=ro((()=>{const e={};return e.unstack=Kp(u,-1),e.concat=Qo(e.unstack,1),e.split=Np(e.concat,4,1),e.stack=Qo(e.split,2),e.squeeze=Ep(e.stack,[0]),e.expand=yu(e.squeeze,-1),e.add=Ao(e.expand,1),e.mul=vo(e.add,127.5),e.cast=qs(e.mul,"int32"),e.tile=Au(e.cast,[1,1,3]),e.alpha=yl([e.tile.shape[0]||0,e.tile.shape[1]||0,1],255,"int32"),Qo([e.tile,e.alpha],-1)}));break;default:l=Zi(0)}var u;return io([w1.src,n,a,w1.r1i,w1.r2i,w1.r3i,w1.r4i]),[w1.r1i,w1.r2i,w1.r3i,w1.r4i]=[r,i,s,o],l}(i.tensor,this.config)),(null==(a=this.config.segmentation.modelPath)?void 0:a.includes("meet"))&&(s=await async function(e,t){var n;if(wQ||(wQ=await RQ(t)),!(null==wQ?void 0:wQ.executor)||!(null==(n=null==wQ?void 0:wQ.inputs)?void 0:n[0].shape))return null;const a={};let r;switch(a.resize=yh.resizeBilinear(e,[wQ.inputs[0].shape?wQ.inputs[0].shape[1]:0,wQ.inputs[0].shape?wQ.inputs[0].shape[2]:0],!1),a.norm=bo(a.resize,EX.tf255),a.res=wQ.execute(a.norm),a.squeeze=Ep(a.res,[0]),[a.bgRaw,a.fgRaw]=Kp(a.squeeze,2),a.fg=wp(a.fgRaw),a.mul=vo(a.fg,EX.tf255),a.expand=yu(a.mul,2),a.output=yh.resizeBilinear(a.expand,[e.shape[1]||0,e.shape[2]||0]),t.segmentation.mode||"default"){case"default":a.input=Ep(e),a.concat=Qo([a.input,a.output],-1),r=qs(a.concat,"int32");break;case"alpha":r=qs(a.output,"int32");break;default:r=Zi(0)}return Object.keys(a).forEach((e=>io(a[e]))),r}(i.tensor,this.config)),(null==(r=this.config.segmentation.modelPath)?void 0:r.includes("selfie"))&&(s=await async function(e,t){var n;if(N1||(N1=await E1(t)),!(null==N1?void 0:N1.executor)||!(null==(n=null==N1?void 0:N1.inputs)?void 0:n[0].shape))return null;const a={};let r;switch(a.resize=yh.resizeBilinear(e,[N1.inputs[0].shape?N1.inputs[0].shape[1]:0,N1.inputs[0].shape?N1.inputs[0].shape[2]:0],!1),a.norm=bo(a.resize,EX.tf255),a.res=N1.execute(a.norm),a.squeeze=Ep(a.res,[0]),a.alpha=yh.resizeBilinear(a.squeeze,[e.shape[1]||0,e.shape[2]||0]),a.mul=vo(a.alpha,EX.tf255),t.segmentation.mode||"default"){case"default":a.input=Ep(e),a.concat=Qo([a.input,a.mul],-1),r=qs(a.concat,"int32");break;case"alpha":r=qs(a.mul,"int32");break;default:r=Zi(0)}return Object.keys(a).forEach((e=>io(a[e]))),r}(i.tensor,this.config)),io(i.tensor),s}compare(e,t){return async function(e,t,n){const a={};if(!t||!n||4!==t.shape.length||t.shape.length!==n.shape.length)return e.debug||Uj("invalid input tensor or tensor shapes do not match:",t.shape,n.shape),0;if(1!==t.shape[0]||1!==n.shape[0]||3!==t.shape[3]||3!==n.shape[3])return e.debug||Uj("input tensors must be of shape [1, height, width, 3]:",t.shape,n.shape),0;a.input1=Xs(t),a.input2=t.shape[1]!==n.shape[1]||t.shape[2]!==n.shape[2]?yh.resizeBilinear(n,[t.shape[1],t.shape[2]]):Xs(n),a.diff=Hu(a.input1,a.input2),a.squared=vo(a.diff,a.diff),a.sum=pu(a.squared);const r=(await a.sum.data())[0]/(t.shape[1]||1)/(t.shape[2]||1)/255/3;return io([a.input1,a.input2,a.diff,a.squared,a.sum]),r}(this.config,e,t)}async init(){await $X(this,!0),await this.tf.ready(),hq()}async load(e){this.state="load";const t=Gj(),n=Object.values(this.models.models).filter((e=>e)).length;e&&(this.config=jj(this.config,e)),this.env.initial&&(await $X(this,!1)||Uj("error: backend check failed"),await uo(),this.env.browser&&(this.config.debug&&Uj("configuration:",this.config),this.config.debug&&Uj("tf flags:",this.tf.ENV.flags))),await this.models.load(this),this.env.initial&&this.config.debug&&Uj("tf engine state:",this.tf.engine().state.numBytes,"bytes",this.tf.engine().state.numTensors,"tensors"),this.env.initial=!1,Object.values(this.models.models).filter((e=>e)).length!==n&&(this.models.validate(),this.emit("load"));const a=Math.trunc(Gj()-t);a>(this.performance.loadModels||0)&&(this.performance.loadModels=this.env.perfadd?(this.performance.loadModels||0)+a:a)}next(e=this.result){return function(e,t){var n,a,r,i,s,o,l,u,d,p,c,h,f,m,y,g,A,x,b,v,w,k,I,S,N,C;const T=Gj();if(!e)return bQ();const E=Date.now()-e.timestamp,R=E<1e3?8-Math.log(E+1):1;if(e.canvas&&(TQ.canvas=e.canvas),e.error&&(TQ.error=e.error),TQ.body&&e.body.length===TQ.body.length)for(let i=0;i<e.body.length;i++){const s=e.body[i].box.map(((e,t)=>((R-1)*TQ.body[i].box[t]+e)/R)),o=e.body[i].boxRaw.map(((e,t)=>((R-1)*TQ.body[i].boxRaw[t]+e)/R)),l=e.body[i].keypoints.map(((e,t)=>{var n,a,r,s,o,l,u,d,p;return{score:e.score,part:e.part,position:[TQ.body[i].keypoints[t]?((R-1)*(TQ.body[i].keypoints[t].position[0]||0)+(e.position[0]||0))/R:e.position[0],TQ.body[i].keypoints[t]?((R-1)*(TQ.body[i].keypoints[t].position[1]||0)+(e.position[1]||0))/R:e.position[1],TQ.body[i].keypoints[t]?((R-1)*(TQ.body[i].keypoints[t].position[2]||0)+(e.position[2]||0))/R:e.position[2]],positionRaw:[TQ.body[i].keypoints[t]?((R-1)*(TQ.body[i].keypoints[t].positionRaw[0]||0)+(e.positionRaw[0]||0))/R:e.positionRaw[0],TQ.body[i].keypoints[t]?((R-1)*(TQ.body[i].keypoints[t].positionRaw[1]||0)+(e.positionRaw[1]||0))/R:e.positionRaw[1],TQ.body[i].keypoints[t]?((R-1)*(TQ.body[i].keypoints[t].positionRaw[2]||0)+(e.positionRaw[2]||0))/R:e.positionRaw[2]],distance:[TQ.body[i].keypoints[t]?((R-1)*((null==(n=TQ.body[i].keypoints[t].distance)?void 0:n[0])||0)+((null==(a=e.distance)?void 0:a[0])||0))/R:null==(r=e.distance)?void 0:r[0],TQ.body[i].keypoints[t]?((R-1)*((null==(s=TQ.body[i].keypoints[t].distance)?void 0:s[1])||0)+((null==(o=e.distance)?void 0:o[1])||0))/R:null==(l=e.distance)?void 0:l[1],TQ.body[i].keypoints[t]?((R-1)*((null==(u=TQ.body[i].keypoints[t].distance)?void 0:u[2])||0)+((null==(d=e.distance)?void 0:d[2])||0))/R:null==(p=e.distance)?void 0:p[2]]}})),u={};let d={connected:{}};(null==(n=t.body.modelPath)?void 0:n.includes("efficientpose"))?d=YK:(null==(a=t.body.modelPath)?void 0:a.includes("blazepose"))?d=wK:(null==(r=t.body.modelPath)?void 0:r.includes("movenet"))&&(d=vQ);for(const[e,t]of Object.entries(d.connected)){const n=[];for(let e=0;e<t.length-1;e++){const a=l.find((n=>n.part===t[e])),r=l.find((n=>n.part===t[e+1]));a&&r&&n.push([a.position,r.position])}u[e]=n}TQ.body[i]={...e.body[i],box:s,boxRaw:o,keypoints:l,annotations:u}}else TQ.body=JSON.parse(JSON.stringify(e.body));if(TQ.hand&&e.hand.length===TQ.hand.length)for(let t=0;t<e.hand.length;t++){const n=e.hand[t].box.map(((e,n)=>((R-1)*TQ.hand[t].box[n]+e)/R)),a=e.hand[t].boxRaw.map(((e,n)=>((R-1)*TQ.hand[t].boxRaw[n]+e)/R));TQ.hand[t].keypoints.length!==e.hand[t].keypoints.length&&(TQ.hand[t].keypoints=e.hand[t].keypoints);const r=e.hand[t].keypoints&&e.hand[t].keypoints.length>0?e.hand[t].keypoints.map(((e,n)=>e.map(((e,a)=>((R-1)*(TQ.hand[t].keypoints[n][a]||1)+(e||0))/R)))):[];let l={};if(Object.keys(TQ.hand[t].annotations).length!==Object.keys(e.hand[t].annotations).length)TQ.hand[t].annotations=e.hand[t].annotations,l=TQ.hand[t].annotations;else if(e.hand[t].annotations)for(const n of Object.keys(e.hand[t].annotations))l[n]=(null==(o=null==(s=null==(i=e.hand[t])?void 0:i.annotations)?void 0:s[n])?void 0:o[0])?e.hand[t].annotations[n].map(((e,a)=>e.map(((e,r)=>((R-1)*TQ.hand[t].annotations[n][a][r]+e)/R)))):null;TQ.hand[t]={...e.hand[t],box:n,boxRaw:a,keypoints:r,annotations:l}}else TQ.hand=JSON.parse(JSON.stringify(e.hand));if(TQ.face&&e.face.length===TQ.face.length)for(let t=0;t<e.face.length;t++){const n=e.face[t].box.map(((e,n)=>((R-1)*TQ.face[t].box[n]+e)/R)),a=e.face[t].boxRaw.map(((e,n)=>((R-1)*TQ.face[t].boxRaw[n]+e)/R));let r=e.face[t].annotations;if(Object.keys(TQ.face[t].annotations).length!==Object.keys(e.face[t].annotations).length)TQ.face[t].annotations=e.face[t].annotations,r=TQ.face[t].annotations;else if(e.face[t].annotations)for(const n of Object.keys(e.face[t].annotations))r[n]=(null==(d=null==(u=null==(l=e.face[t])?void 0:l.annotations)?void 0:u[n])?void 0:d[0])?e.face[t].annotations[n].map(((e,a)=>e.map(((e,r)=>((R-1)*TQ.face[t].annotations[n][a][r]+e)/R)))):null;if(e.face[t].rotation){const i={matrix:[0,0,0,0,0,0,0,0,0],angle:{roll:0,yaw:0,pitch:0},gaze:{bearing:0,strength:0}};i.matrix=null==(p=e.face[t].rotation)?void 0:p.matrix,i.angle={roll:((R-1)*((null==(h=null==(c=TQ.face[t].rotation)?void 0:c.angle)?void 0:h.roll)||0)+((null==(m=null==(f=e.face[t].rotation)?void 0:f.angle)?void 0:m.roll)||0))/R,yaw:((R-1)*((null==(g=null==(y=TQ.face[t].rotation)?void 0:y.angle)?void 0:g.yaw)||0)+((null==(x=null==(A=e.face[t].rotation)?void 0:A.angle)?void 0:x.yaw)||0))/R,pitch:((R-1)*((null==(v=null==(b=TQ.face[t].rotation)?void 0:b.angle)?void 0:v.pitch)||0)+((null==(k=null==(w=e.face[t].rotation)?void 0:w.angle)?void 0:k.pitch)||0))/R},i.gaze={bearing:((R-1)*((null==(I=TQ.face[t].rotation)?void 0:I.gaze.bearing)||0)+((null==(S=e.face[t].rotation)?void 0:S.gaze.bearing)||0))/R,strength:((R-1)*((null==(N=TQ.face[t].rotation)?void 0:N.gaze.strength)||0)+((null==(C=e.face[t].rotation)?void 0:C.gaze.strength)||0))/R},TQ.face[t]={...e.face[t],rotation:i,box:n,boxRaw:a,annotations:r}}else TQ.face[t]={...e.face[t],box:n,boxRaw:a,annotations:r}}else TQ.face=JSON.parse(JSON.stringify(e.face));if(TQ.object&&e.object.length===TQ.object.length)for(let t=0;t<e.object.length;t++){const n=e.object[t].box.map(((e,n)=>((R-1)*TQ.object[t].box[n]+e)/R)),a=e.object[t].boxRaw.map(((e,n)=>((R-1)*TQ.object[t].boxRaw[n]+e)/R));TQ.object[t]={...e.object[t],box:n,boxRaw:a}}else TQ.object=JSON.parse(JSON.stringify(e.object));if(e.persons){const t=e.persons;if(TQ.persons&&t.length===TQ.persons.length)for(let e=0;e<t.length;e++)TQ.persons[e].box=t[e].box.map(((t,n)=>((R-1)*TQ.persons[e].box[n]+t)/R));else TQ.persons=JSON.parse(JSON.stringify(t))}e.gesture&&(TQ.gesture=e.gesture),TQ.width=e.width,TQ.height=e.height;const $=Gj();return EQ=gq.perfadd?EQ+Math.round($-T):Math.round($-T),e.performance&&(TQ.performance={...e.performance,interpolate:EQ}),TQ}(e,this.config)}async warmup(e){const t=Gj(),n=await async function(e,t){await $X(e,!1);const n=Gj();return e.state="warmup",t&&(e.config=jj(e.config,t)),e.config.warmup&&0!==e.config.warmup.length&&"none"!==e.config.warmup?new Promise((async t=>{await e.models.load(),await async function(e){var t,n,a,r;if(!He().flagRegistry.ENGINE_COMPILE_ONLY)return;const i=po(),s=yo();if("webgl"!==i&&"humangl"!==i||!(null==s?void 0:s.checkCompileCompletion))return;He().set("ENGINE_COMPILE_ONLY",!0);const o=to().state.numTensors,l=[];for(const[i,s]of Object.entries(e.models.models)){if(!s)continue;const o=(null==s?void 0:s.modelSignature)&&(null==(n=null==(t=null==s?void 0:s.inputs)?void 0:t[0])?void 0:n.shape)?[...s.inputs[0].shape]:[1,64,64,3],u=(null==s?void 0:s.modelSignature)&&(null==(r=null==(a=null==s?void 0:s.inputs)?void 0:a[0])?void 0:r.dtype)?s.inputs[0].dtype:"float32";for(let e=0;e<o.length;e++)-1===o[e]&&(o[e]=0===e?1:64);const d=sd(o,u);try{const e=s.execute(d);l.push(i),Array.isArray(e)?e.forEach((e=>io(e))):io(e)}catch(t){e.config.debug&&Uj("compile fail model:",i)}io(d)}const u=await s.checkCompileCompletionAsync();s.getUniformLocations(),e.config.debug&&Uj("compile pass:",{models:l,kernels:u.length}),He().set("ENGINE_COMPILE_ONLY",!1);const d=to().state.numTensors;d-o>0&&Uj("tensor leak:",d-o)}(e);const a=await async function(e){let t;return t="function"==typeof createImageBitmap?await async function(e){const t=(e,t="application/octet-stream")=>fetch(`data:${t};base64,${e}`).then((e=>e.blob()));let n,a;switch(e.config.warmup){case"face":n=await t(D1);break;case"body":case"full":n=await t(z1);break;default:n=null}if(n){const t=await createImageBitmap(n);a=await e.detect(t,e.config),t.close()}return a}(e):"undefined"!=typeof Image||void 0!==gq.Canvas?await async function(e){return new Promise((t=>{let n,a;switch(e.config.warmup){case"face":n="data:image/jpeg;base64,"+D1;break;case"full":case"body":n="data:image/jpeg;base64,"+z1;break;default:n=""}if("undefined"!=typeof Image)a=new Image;else{if(!gq.Image)return void t(void 0);a=new gq.Image}a.onload=async()=>{const n=fq(a.naturalWidth,a.naturalHeight);if(n){const r=n.getContext("2d");r&&r.drawImage(a,0,0);const i=await e.image(n,!0),s=i.tensor?await e.detect(i.tensor,e.config):void 0;t(s)}else Uj("Warmup: Canvas not found"),t(void 0)},n?a.src=n:t(void 0)}))}(e):await async function(e){const t=e=>Buffer.from(e,"base64");let n,a;if(n="face"===e.config.warmup?t(D1):t(z1),"node"in m&&"tensorflow"===po()){const t=(void 0).decodeJpeg(n),r=yu(t,0);e.tf.dispose(t),a=await e.detect(r,e.config),e.tf.dispose(r)}else e.config.debug&&Uj("Warmup tfjs-node not loaded");return a}(e),t}(e),r=Gj();e.config.debug&&Uj("warmup",e.config.warmup,Math.round(r-n),"ms"),e.emit("warmup"),t(a)})):bQ()}(this,e),a=Gj();return this.performance.warmup=Math.trunc(a-t),n}async profile(e,t){const n=await this.tf.profile((()=>this.detect(e,t))),a={};let r=0;for(const e of n.kernels){const t=Number(e.kernelTimeMs)||0;a[e.name]?a[e.name]+=t:a[e.name]=t,r+=t}const i=[];Object.entries(a).forEach((e=>i.push({kernel:e[0],time:e[1],perc:0})));for(const e of i)e.perc=Math.round(1e3*e.time/r)/1e3,e.time=Math.round(1e3*e.time)/1e3;return i.sort(((e,t)=>t.time-e.time)),i.length=20,i}async detect(e,t){return this.state="detect",new Promise((async n=>{var a,r,i,s,o,l,u,d,p,h,f,m,y,g,A,x,b,v,w,k,I;let S;this.state="config",this.config=jj(this.config,t),this.state="check";const N=c(this,F1).call(this,e);N&&(Uj(N,e),this.emit("error"),n(bQ(N)));const C=Gj();await this.load(),S=Gj(),this.state="image";const T=await yq(e,this.config);if(this.process=T,this.performance.inputProcess=this.env.perfadd?(this.performance.inputProcess||0)+Math.trunc(Gj()-S):Math.trunc(Gj()-S),this.analyze("Get Image:"),!T.tensor)return this.config.debug&&Uj("could not convert input to tensor"),this.emit("error"),void n(bQ("could not convert input to tensor"));this.emit("image"),S=Gj(),this.config.skipAllowed=await async function(e,t){let n=!1;if(0===e.cacheSensitivity||!t.shape||4!==t.shape.length||t.shape[1]>3840||t.shape[2]>2160)return n;if(cq.inputTensor)if(cq.inputTensor.shape[1]!==t.shape[1]||cq.inputTensor.shape[2]!==t.shape[2])io(cq.inputTensor),cq.inputTensor=Xs(t);else{const a={};a.diff=Hu(t,cq.inputTensor),a.squared=vo(a.diff,a.diff),a.sum=pu(a.squared);const r=(await a.sum.data())[0]/(t.shape[1]||1)/(t.shape[2]||1)/255/3;io([cq.inputTensor,a.diff,a.squared,a.sum]),cq.inputTensor=Xs(t),n=r<=(e.cacheSensitivity||0)}else cq.inputTensor=Xs(t);return n}(this.config,T.tensor),this.config.filter.autoBrightness=!!this.config.filter.autoBrightness&&this.config.skipAllowed,this.performance.totalFrames||(this.performance.totalFrames=0),this.performance.cachedFrames||(this.performance.cachedFrames=0),this.performance.totalFrames++,this.config.skipAllowed&&this.performance.cachedFrames++,this.performance.cacheCheck=this.env.perfadd?(this.performance.cacheCheck||0)+Math.trunc(Gj()-S):Math.trunc(Gj()-S),this.analyze("Check Changed:");let E=[],R=[],$=[],M=[];this.state="detect:face",this.config.async?(E=this.config.face.enabled?eJ(this,T.tensor):[],this.performance.face&&delete this.performance.face):(S=Gj(),E=this.config.face.enabled?await eJ(this,T.tensor):[],this.performance.face=this.env.perfadd?(this.performance.face||0)+Math.trunc(Gj()-S):Math.trunc(Gj()-S)),!this.config.async||-1!==this.config.body.maxDetected&&-1!==this.config.hand.maxDetected||(E=await E),this.analyze("Start Body:"),this.state="detect:body";const _=-1===this.config.body.maxDetected?jj(this.config,{body:{maxDetected:this.config.face.enabled?1*E.length:1}}):this.config;this.config.async?((null==(a=this.config.body.modelPath)?void 0:a.includes("posenet"))?R=this.config.body.enabled?b1(T.tensor,_):[]:(null==(r=this.config.body.modelPath)?void 0:r.includes("blazepose"))?R=this.config.body.enabled?UK(T.tensor,_):[]:(null==(i=this.config.body.modelPath)?void 0:i.includes("efficientpose"))?R=this.config.body.enabled?iZ(T.tensor,_):[]:(null==(s=this.config.body.modelPath)?void 0:s.includes("movenet"))&&(R=this.config.body.enabled?jQ(T.tensor,_):[]),this.performance.body&&delete this.performance.body):(S=Gj(),(null==(o=this.config.body.modelPath)?void 0:o.includes("posenet"))?R=this.config.body.enabled?await b1(T.tensor,_):[]:(null==(l=this.config.body.modelPath)?void 0:l.includes("blazepose"))?R=this.config.body.enabled?await UK(T.tensor,_):[]:(null==(u=this.config.body.modelPath)?void 0:u.includes("efficientpose"))?R=this.config.body.enabled?await iZ(T.tensor,_):[]:(null==(d=this.config.body.modelPath)?void 0:d.includes("movenet"))&&(R=this.config.body.enabled?await jQ(T.tensor,_):[]),this.performance.body=this.env.perfadd?(this.performance.body||0)+Math.trunc(Gj()-S):Math.trunc(Gj()-S)),this.analyze("End Body:"),this.analyze("Start Hand:"),this.state="detect:hand";const F=-1===this.config.hand.maxDetected?jj(this.config,{hand:{maxDetected:this.config.face.enabled?2*E.length:1}}):this.config;this.config.async?((null==(h=null==(p=this.config.hand.detector)?void 0:p.modelPath)?void 0:h.includes("handdetect"))?$=this.config.hand.enabled?lQ(T.tensor,F):[]:(null==(m=null==(f=this.config.hand.detector)?void 0:f.modelPath)?void 0:m.includes("handtrack"))&&($=this.config.hand.enabled?xQ(T.tensor,F):[]),this.performance.hand&&delete this.performance.hand):(S=Gj(),(null==(g=null==(y=this.config.hand.detector)?void 0:y.modelPath)?void 0:g.includes("handdetect"))?$=this.config.hand.enabled?await lQ(T.tensor,F):[]:(null==(x=null==(A=this.config.hand.detector)?void 0:A.modelPath)?void 0:x.includes("handtrack"))&&($=this.config.hand.enabled?await xQ(T.tensor,F):[]),this.performance.hand=this.env.perfadd?(this.performance.hand||0)+Math.trunc(Gj()-S):Math.trunc(Gj()-S)),this.analyze("End Hand:"),this.analyze("Start Object:"),this.state="detect:object",this.config.async?((null==(b=this.config.object.modelPath)?void 0:b.includes("nanodet"))?M=this.config.object.enabled?JQ(T.tensor,this.config):[]:(null==(v=this.config.object.modelPath)?void 0:v.includes("centernet"))&&(M=this.config.object.enabled?ZK(T.tensor,this.config):[]),this.performance.object&&delete this.performance.object):(S=Gj(),(null==(w=this.config.object.modelPath)?void 0:w.includes("nanodet"))?M=this.config.object.enabled?await JQ(T.tensor,this.config):[]:(null==(k=this.config.object.modelPath)?void 0:k.includes("centernet"))&&(M=this.config.object.enabled?await ZK(T.tensor,this.config):[]),this.performance.object=this.env.perfadd?(this.performance.object||0)+Math.trunc(Gj()-S):Math.trunc(Gj()-S)),this.analyze("End Object:"),this.state="detect:await",this.config.async&&([E,R,$,M]=await Promise.all([E,R,$,M])),this.state="detect:gesture";let O=[];this.config.gesture.enabled&&(S=Gj(),O=[...LJ(E),...zJ(R),...BJ($),...WJ(E)],this.config.async?this.performance.gesture&&delete this.performance.gesture:this.performance.gesture=this.env.perfadd?(this.performance.gesture||0)+Math.trunc(Gj()-S):Math.trunc(Gj()-S)),this.performance.total=this.env.perfadd?(this.performance.total||0)+Math.trunc(Gj()-C):Math.trunc(Gj()-C);const P=(null==(I=this.process.tensor)?void 0:I.shape)||[0,0,0,0];this.result={face:E,body:R,hand:$,gesture:O,object:M,performance:this.performance,canvas:this.process.canvas,timestamp:Date.now(),error:null,width:P[2],height:P[1],get persons(){return function(e,t,n,a,r){var i,s,o,l,u,d;let p=0;const c=[];for(const h of e){const e={id:p++,face:h,body:null,hands:{left:null,right:null},gestures:[],box:[0,0,0,0]};for(const n of t)h.box[0]>n.box[0]&&h.box[0]<n.box[0]+n.box[2]&&h.box[1]+h.box[3]>n.box[1]&&h.box[1]+h.box[3]<n.box[1]+n.box[3]&&(e.body=n);if(e.body)for(const t of n)t.box[0]+t.box[2]>e.body.box[0]&&t.box[0]+t.box[2]<e.body.box[0]+e.body.box[2]&&t.box[1]+t.box[3]>e.body.box[1]&&t.box[1]+t.box[3]<e.body.box[1]+e.body.box[3]&&e.hands&&(e.hands.left=t),t.box[0]<e.body.box[0]+e.body.box[2]&&t.box[0]>e.body.box[0]&&t.box[1]+t.box[3]>e.body.box[1]&&t.box[1]+t.box[3]<e.body.box[1]+e.body.box[3]&&e.hands&&(e.hands.right=t);for(const t of a)(void 0!==t.face&&t.face===h.id||void 0!==t.iris&&t.iris===h.id||void 0!==t.body&&t.body===(null==(i=e.body)?void 0:i.id)||void 0!==t.hand&&t.hand===(null==(s=e.hands.left)?void 0:s.id)||void 0!==t.hand&&t.hand===(null==(o=e.hands.right)?void 0:o.id))&&e.gestures.push(t);const f=[],m=[],y=e=>{e&&4===e.length&&(f.push(e[0],e[0]+e[2]),m.push(e[1],e[1]+e[3]))};y(e.face.box),y(null==(l=e.body)?void 0:l.box),y(null==(u=e.hands.left)?void 0:u.box),y(null==(d=e.hands.right)?void 0:d.box);const g=Math.min(...f),A=Math.min(...m);e.box=[g,A,Math.max(...f)-g,Math.max(...m)-A],(null==r?void 0:r[1])&&(null==r?void 0:r[2])&&(e.boxRaw=[e.box[0]/r[2],e.box[1]/r[1],e.box[2]/r[2],e.box[3]/r[1]]),c.push(e)}return c}(E,R,$,O,P)}},io(T.tensor),this.emit("detect"),this.state="idle",n(this.result)}))}async sleep(e){return new Promise((t=>{setTimeout(t,e)}))}async video(e,t=!0,n=0){t?(c(this,O1)[e.id]||(this.config.debug&&Uj("video start",e.id),c(this,O1)[e.id]=!0),!e.paused&&c(this,O1)[e.id]&&e.readyState>=2&&await this.detect(e),n>0&&await this.sleep(n),c(this,O1)[e.id]&&requestAnimationFrame((()=>this.video(e,t,n)))):(this.config.debug&&Uj("video stop",e.id),c(this,O1)[e.id]=!1)}};$1=new WeakMap,M1=new WeakMap,_1=new WeakMap,F1=new WeakMap,O1=new WeakMap}},u={};function d(e){var t=u[e];if(void 0!==t)return t.exports;var n=u[e]={exports:{}};return l[e](n,n.exports,d),n.exports}d.amdO={},r="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",i="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",s="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",o=e=>{e&&!e.d&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},d.a=(e,t,n)=>{var a;n&&((a=[]).d=1);var l,u,d,p=new Set,c=e.exports,h=new Promise(((e,t)=>{d=t,u=e}));h[i]=c,h[r]=e=>(a&&e(a),p.forEach(e),h.catch((e=>{}))),e.exports=h,t((e=>{var t;l=(e=>e.map((e=>{if(null!==e&&"object"==typeof e){if(e[r])return e;if(e.then){var t=[];t.d=0,e.then((e=>{n[i]=e,o(t)}),(e=>{n[s]=e,o(t)}));var n={};return n[r]=e=>e(t),n}}var a={};return a[r]=e=>{},a[i]=e,a})))(e);var n=()=>l.map((e=>{if(e[s])throw e[s];return e[i]})),u=new Promise((e=>{(t=()=>e(n)).r=0;var i=e=>e!==a&&!p.has(e)&&(p.add(e),e&&!e.d&&(t.r++,e.push(t)));l.map((e=>e[r](i)))}));return t.r?u:n()}),(e=>(e?d(h[s]=e):u(c),o(a)))),a&&(a.d=0)},d.d=(e,t)=>{for(var n in t)d.o(t,n)&&!d.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},d.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),d.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),d(819)})()}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var i=t[a]={exports:{}};return e[a](i,i.exports,n),i.exports}return n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n(4553)})()));
import { PlusOutlined } from '@ant-design/icons';import styled from '@emotion/styled';import { Button, Checkbox, Input, InputNumber, Select } from 'antd';import Form from 'antd/lib/form';import { FC, useMemo } from 'react';import { NODE_TYPE_SELECT_OPTIONS } from '../../../constants/forms';import { TNode } from '../../../types/tests';import { FORM_COMMON_RULES } from '../../../utils/forms';export const FormListItemWrapper = styled('div')`  display: flex;  flex-direction: column;  background-color: ${({ theme }) => theme.COLORS.WHITE.C200};  border: 1px solid ${({ theme }) => theme.COLORS.WHITE.C300};  padding: 12px;  border-radius: 12px;  margin-bottom: 18px;`;type TProps = {  nodes: TNode[];  onEdit: (nodes: TNode[]) => void;};export const FullDescriptionSettings: FC<TProps> = ({ nodes, onEdit }) => {  const [form] = Form.useForm();  const handleFormChange = (    changedValues: Partial<{      descriptionFull: {        [key: number]: Partial<TNode>;      };    }>,    values: Partial<{      descriptionFull: {        [key: number]: Partial<TNode>;      };    }>  ) => {    let valuesToAdd = Object.values(values?.descriptionFull ?? {}).map(      (el, index) => ({        ...el,        key: `${el?.type ?? 'empty'}-${index}`,      })    );    if (      valuesToAdd.length === 1 &&      (!valuesToAdd[0].type || !valuesToAdd[0].value)    ) {      valuesToAdd = [];    }    onEdit(valuesToAdd || []);  };  const formInitialValues = useMemo(() => {    return {      descriptionFull: nodes,    };  }, []);  return (    <Form      form={form}      layout="vertical"      onValuesChange={handleFormChange}      initialValues={formInitialValues}    >      <Form.List name="descriptionFull">        {(fields, { add, remove }) => (          <>            {fields.map(({ key, name, ...restField }) => (              <FormListItemWrapper key={key}>                <Form.Item                  {...restField}                  name={[name, 'type']}                  rules={[FORM_COMMON_RULES.required]}                  label="Тип элемента"                >                  <Select                    placeholder="Тип элемента"                    style={{                      width: 160,                    }}                    options={NODE_TYPE_SELECT_OPTIONS}                  />                </Form.Item>                <Form.Item noStyle shouldUpdate>                  {() => {                    const currentType = form.getFieldValue([                      'descriptionFull',                      name,                      'type',                    ]);                    return (                      <>                        <Form.Item                          {...restField}                          name={[name, 'value']}                          rules={[FORM_COMMON_RULES.required]}                          label="Содержание"                        >                          {currentType === 'text' ? (                            <Input.TextArea placeholder="Введите много текста" />                          ) : (                            <Input placeholder="Введите текст" />                          )}                        </Form.Item>                        <Form.Item                          {...restField}                          name={[name, 'order']}                          label="Порядок в документе"                          tooltip={                            'Если не указывать, будет отображаться в порядке создания'                          }                        >                          <InputNumber placeholder="Введите" min={0} />                        </Form.Item>                        {currentType === 'title' && (                          <Form.Item                            {...restField}                            name={[name, 'level']}                            rules={[FORM_COMMON_RULES.required]}                            label="Уровень заголовка"                          >                            <InputNumber                              placeholder="Введите"                              min={1}                              max={5}                            />                          </Form.Item>                        )}                        {currentType === 'video' && (                          <Form.Item                            {...restField}                            name={[name, 'videoViewingGuarantee']}                            rules={[FORM_COMMON_RULES.required]}                            label="Гарантия просмотра"                            valuePropName={'checked'}                          >                            <Checkbox />                          </Form.Item>                        )}                      </>                    );                  }}                </Form.Item>                <div>                  <Button onClick={() => remove(name)}>Удалить элемент</Button>                </div>              </FormListItemWrapper>            ))}            <Button              type="dashed"              onClick={() =>                add({                  order: fields.length + 1,                })              }              block              icon={<PlusOutlined />}            >              Добавить элемент            </Button>          </>        )}      </Form.List>    </Form>  );};
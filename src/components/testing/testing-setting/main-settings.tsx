import { PlusOutlined } from '@ant-design/icons';import { Button, Form, Input, InputNumber } from 'antd';import { FC } from 'react';import { useTestEditContext } from '../../../context/testing/test-edit-context';import { TTestBaseSettings } from '../../../types/tests';import { FORM_COMMON_RULES } from '../../../utils/forms';import { FormListItemWrapper } from './full-description-settings';type TProps = {  handleFormChange: <T extends keyof TTestBaseSettings>(    objValue: Record<T, TTestBaseSettings[T]>,    values: TTestBaseSettings  ) => void;};export const MainSettings: FC<TProps> = ({ handleFormChange }) => {  const { baseSettings } = useTestEditContext();  const [form] = Form.useForm<TTestBaseSettings>();  return (    <Form      layout={'vertical'}      form={form}      onValuesChange={handleFormChange}      initialValues={{        title: baseSettings.title,        descriptionShort: baseSettings.descriptionShort,      }}    >      <Form.Item        name={'title'}        label={'Название тестирования'}        rules={[FORM_COMMON_RULES.required]}      >        <Input placeholder="Введите" />      </Form.Item>      <Form.Item name={'descriptionShort'} label={'Описание'}>        <Input.TextArea          autoSize={{            minRows: 3,            maxRows: 5,          }}          placeholder="Введите"        />      </Form.Item>      <Form.List name="stages">        {(fields, { add, remove }) => (          <>            {fields.map(({ key, name, ...restField }) => (              <FormListItemWrapper key={key}>                <Form.Item                  {...restField}                  name={[name, 'title']}                  label="Заголовок этапа"                >                  <Input placeholder="Введите" />                </Form.Item>                <Form.Item                  {...restField}                  name={[name, 'descriptionShort']}                  label="Короткое описание этапа"                >                  <Input.TextArea                    autoSize={{                      minRows: 2,                      maxRows: 5,                    }}                    placeholder="Введите"                  />                </Form.Item>                <Form.Item                  {...restField}                  name={[name, 'order']}                  label="Номер этапа"                  tooltip={                    'Если не указывать, будет отображаться в порядке создания'                  }                >                  <InputNumber min={0} placeholder="Введите" />                </Form.Item>                <div>                  <Button onClick={() => remove(name)}>Удалить этап</Button>                </div>              </FormListItemWrapper>            ))}            <Button              type="dashed"              onClick={() =>                add({                  order: fields.length + 1,                  id: String(fields.length + 1 + new Date().toString()),                })              }              block              icon={<PlusOutlined />}            >              Добавить новый этап            </Button>          </>        )}      </Form.List>    </Form>  );};
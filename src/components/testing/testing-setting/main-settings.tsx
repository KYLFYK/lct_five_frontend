import { PlusOutlined } from '@ant-design/icons';import {  Button,  DatePicker,  Form,  Input,  InputNumber,  Popconfirm,  Switch,} from 'antd';import locale from 'antd/es/date-picker/locale/ru_RU';import dayjs from 'dayjs';import { FC } from 'react';import { BASE_DATE_FORMAT_STRING } from '../../../constants/patterns';import { useTestEditContext } from '../../../context/testing/test-edit-context';import { TTestBaseSettings } from '../../../types/tests';import { FORM_COMMON_RULES } from '../../../utils/forms';import { FormListItemWrapper } from './full-description-settings';type TProps = {  handleFormChange: <T extends keyof TTestBaseSettings>(    objValue: Record<T, TTestBaseSettings[T]>,    values: TTestBaseSettings  ) => void;};export const MainSettings: FC<TProps> = ({ handleFormChange }) => {  const { baseSettings, stages } = useTestEditContext();  const [form] = Form.useForm<TTestBaseSettings>();  return (    <Form      layout={'vertical'}      form={form}      onValuesChange={handleFormChange}      initialValues={{        title: baseSettings.title,        descriptionShort: baseSettings.descriptionShort,        useStages: baseSettings.useStages,        stages: stages.map((el) => ({          ...el,          deadLine: dayjs(el.deadLine),        })),      }}    >      <Form.Item        name={'title'}        label={'Название тестирования'}        rules={[FORM_COMMON_RULES.required]}      >        <Input placeholder="Введите" />      </Form.Item>      <Form.Item name={'descriptionShort'} label={'Описание'}>        <Input.TextArea          autoSize={{            minRows: 3,            maxRows: 5,          }}          placeholder="Введите"        />      </Form.Item>      <Form.Item        name={'useStages'}        valuePropName={'checked'}        label={'Тестировании из несколько этапов'}        tooltip={          'Вы можете добавлять вопросы либо в этапы, либо в само тестирование. Включение этого параметра удалит вопросы не привязанные к конкретным этапам.'        }      >        <Switch />      </Form.Item>      <Form.Item noStyle dependencies={['useStages']}>        {({ getFieldValue }) => {          const isUseStages = getFieldValue('useStages');          if (!isUseStages) {            return null;          }          return (            <Form.List name="stages">              {(fields, { add, remove }) => (                <>                  {fields.map(({ key, name, ...restField }) => (                    <FormListItemWrapper key={key}>                      <Form.Item                        {...restField}                        name={[name, 'id']}                        hidden={true}                      >                        <Input placeholder="Введите" />                      </Form.Item>                      <Form.Item                        {...restField}                        name={[name, 'order']}                        hidden={true}                      >                        <InputNumber placeholder="Введите" />                      </Form.Item>                      <Form.Item                        {...restField}                        name={[name, 'title']}                        label="Заголовок этапа"                      >                        <Input placeholder="Введите" />                      </Form.Item>                      <Form.Item                        {...restField}                        name={[name, 'descriptionShort']}                        label="Короткое описание этапа"                      >                        <Input.TextArea                          autoSize={{                            minRows: 2,                            maxRows: 5,                          }}                          placeholder="Введите"                        />                      </Form.Item>                      <Form.Item                        {...restField}                        name={[name, 'order']}                        label="Номер этапа"                        tooltip={                          'Если не указывать, будет отображаться в порядке создания'                        }                      >                        <InputNumber min={0} placeholder="Введите" />                      </Form.Item>                      <Form.Item                        {...restField}                        name={[name, 'deadLine']}                        label="Крайняя дата прохождения тестирования"                        tooltip={                          'Вы также сможете назначить дату для каждого сотрудника индивидуально в момент назначения тестирования'                        }                        rules={[                          () => ({                            validator(_, value) {                              if (!value || !dayjs().isAfter(value)) {                                return Promise.resolve();                              }                              return Promise.reject(                                new Error('Дата не может быть в прошлом')                              );                            },                          }),                        ]}                      >                        <DatePicker                          showTime={{                            showSecond: false,                          }}                          format={BASE_DATE_FORMAT_STRING}                          locale={locale}                          showNow={false}                          disabledDate={(date) =>                            dayjs().startOf('day').isAfter(date)                          }                        />                      </Form.Item>                      <div>                        <Popconfirm                          title="Удалить этап?"                          description="Содержимое этапа будет безвозвратно удалено, продолжить?"                          onConfirm={() => remove(name)}                          okText="Да, удалить"                          cancelText="Отмена"                          okType="danger"                        >                          <Button>Удалить этап</Button>                        </Popconfirm>                      </div>                    </FormListItemWrapper>                  ))}                  <Button                    type="dashed"                    onClick={() =>                      add({                        order: fields.length + 1,                        id: String(fields.length + 1 + new Date().toString()),                      })                    }                    block                    icon={<PlusOutlined />}                  >                    Добавить этап                  </Button>                </>              )}            </Form.List>          );        }}      </Form.Item>    </Form>  );};
import { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';import {  Button,  Checkbox,  Divider,  Input,  InputNumber,  Select,  Space,  Switch,  Typography,} from 'antd';import Form from 'antd/lib/form';import { FC } from 'react';import { NODE_TYPE_SELECT_OPTIONS } from '../../../constants/forms';import { TQuestion } from '../../../types/tests';import { FORM_COMMON_RULES } from '../../../utils/forms';import { FormListItemWrapper } from './full-description-settings';type TProps = {  onFormChange: (    a: any,    values: {      questions: TQuestion[];    }  ) => void;  initialValues?: {    questions: TQuestion[];  };};export const QuestionsSettings: FC<TProps> = ({  onFormChange,  initialValues,}) => {  const [form] = Form.useForm();  return (    <Form      layout="vertical"      form={form}      onValuesChange={onFormChange}      initialValues={initialValues}    >      <Form.List name="questions">        {(fields, { add, remove }) => (          <>            {fields.map(({ key, name, ...restField }) => (              <FormListItemWrapper key={key}>                <Typography.Title level={5}>                  Содержание вопроса                </Typography.Title>                <Form.Item {...restField} name={[name, 'id']} hidden>                  <Input />                </Form.Item>                <Form.Item                  {...restField}                  name={[name, 'order']}                  label="Порядок в документе"                  tooltip={                    'Если не указывать, будет отображаться в порядке создания'                  }                >                  <InputNumber placeholder="Введите" min={0} />                </Form.Item>                <Form.List name={[name, 'question']}>                  {(questionFields, questionOperations) => (                    <>                      {questionFields.map((questionField) => (                        <FormListItemWrapper key={`${questionField.key}-keys`}>                          <Form.Item                            name={[questionField.name, 'type']}                            rules={[FORM_COMMON_RULES.required]}                            label="Тип элемента"                          >                            <Select                              placeholder="Тип элемента"                              style={{                                width: 160,                              }}                              options={NODE_TYPE_SELECT_OPTIONS}                            />                          </Form.Item>                          <Form.Item noStyle shouldUpdate>                            {() => {                              const currentType = form.getFieldValue([                                'questions',                                name,                                'question',                                questionField.name,                                'type',                              ]);                              return (                                <>                                  <Form.Item                                    name={[questionField.name, 'value']}                                    rules={[FORM_COMMON_RULES.required]}                                    label="Содержание"                                  >                                    {currentType === 'text' ? (                                      <Input.TextArea placeholder="Введите много текста" />                                    ) : (                                      <Input placeholder="Введите текст" />                                    )}                                  </Form.Item>                                  <Form.Item                                    name={[questionField.name, 'order']}                                    label="Порядок в документе"                                    tooltip={                                      'Если не указывать, будет отображаться в порядке создания'                                    }                                  >                                    <InputNumber                                      placeholder="Введите"                                      min={0}                                    />                                  </Form.Item>                                  {currentType === 'title' && (                                    <Form.Item                                      name={[questionField.name, 'level']}                                      rules={[FORM_COMMON_RULES.required]}                                      label="Уровень заголовка"                                    >                                      <InputNumber                                        placeholder="Введите"                                        min={1}                                        max={5}                                      />                                    </Form.Item>                                  )}                                  {currentType === 'video' && (                                    <Form.Item                                      name={[                                        questionField.name,                                        'videoViewingGuarantee',                                      ]}                                      rules={[FORM_COMMON_RULES.required]}                                      label="Гарантия просмотра"                                      valuePropName={'checked'}                                    >                                      <Checkbox />                                    </Form.Item>                                  )}                                </>                              );                            }}                          </Form.Item>                          <div>                            <Button                              onClick={() =>                                questionOperations.remove(questionField.name)                              }                              danger                              type="dashed"                            >                              Удалить элемент                            </Button>                          </div>                        </FormListItemWrapper>                      ))}                      <div>                        <Button                          type="dashed"                          onClick={() =>                            questionOperations.add({                              order: questionFields.length + 1,                              key: String(                                questionFields.length +                                  1 +                                  new Date().toString()                              ),                              id: String(                                questionFields.length +                                  1 +                                  new Date().toString()                              ),                            })                          }                          icon={<PlusOutlined />}                        >                          Добавить элемент                        </Button>                      </div>                    </>                  )}                </Form.List>                <Divider                  style={{                    margin: '12px 0',                  }}                />                <Typography.Title level={5}>Варианты ответов</Typography.Title>                <Form.Item                  {...restField}                  name={[name, 'multiple']}                  label="Несколько вариантов"                  valuePropName={'checked'}                  hidden                >                  <Switch />                </Form.Item>                <Form.List name={[name, 'variants']}>                  {(variants, variantsOperations) => (                    <>                      {variants.map((variant) => (                        <div key={String(name) + String(variant.key)}>                          <Space size={12}>                            <Form.Item                              name={[variant.name, 'label']}                              label={`Ответ ${variant.key + 1}`}                              rules={[FORM_COMMON_RULES.required]}                            >                              <Input />                            </Form.Item>                            <Form.Item                              name={[variant.name, 'correct']}                              label={`Ответ верный?`}                              valuePropName={'checked'}                            >                              <Switch />                            </Form.Item>                            <div>                              <Button                                type="dashed"                                onClick={() =>                                  variantsOperations.remove(variant.name)                                }                                danger                                icon={<MinusCircleOutlined />}                              />                            </div>                          </Space>                        </div>                      ))}                      <div>                        <Button                          type="dashed"                          onClick={() =>                            variantsOperations.add({                              id: String(                                variants.length + 1 + new Date().toString()                              ),                            })                          }                          block                          icon={<PlusOutlined />}                        >                          Добавить ответ                        </Button>                      </div>                    </>                  )}                </Form.List>                <div                  style={{                    marginTop: 12,                  }}                >                  <Button                    type="dashed"                    onClick={() => remove(name)}                    icon={<MinusCircleOutlined />}                    danger                  >                    Удалить вопрос                  </Button>                </div>              </FormListItemWrapper>            ))}            <Button              type="dashed"              onClick={() =>                add({                  order: fields.length + 1,                  id: String(fields.length + 1 + new Date().toString()),                  question: [],                  variants: [],                })              }              block              icon={<PlusOutlined />}            >              Добавить вопрос            </Button>          </>        )}      </Form.List>    </Form>  );};
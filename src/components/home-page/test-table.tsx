import {  DeleteOutlined,  EditOutlined,  LinkOutlined,  PlayCircleOutlined, ProfileOutlined,} from '@ant-design/icons';import { Popconfirm, Tooltip } from 'antd';import Space from 'antd/lib/space';import { ColumnsType } from 'antd/lib/table';import dayjs from 'dayjs';import { BASE_DATE_FORMAT_STRING } from '../../constants/patterns';import { TTabledTest } from '../../types/tests';type TTableRecordCallback<T> = (record: T) => unknown;export const testColumns: <T extends TTabledTest>(props: {  onCopy?: TTableRecordCallback<T>;  onDelete?: TTableRecordCallback<T>;  onEdit?: TTableRecordCallback<T>;  onStart?: TTableRecordCallback<T>;  onStat?: TTableRecordCallback<T>;}) => ColumnsType<T> = ({ onCopy, onDelete, onEdit, onStart, onStat }) => [  {    title: 'Название',    dataIndex: 'title',    key: 'title',    sorter: function (rowA, rowB) {      return rowA.title.localeCompare(rowB.title);    },  },  {    title: 'Описание',    dataIndex: 'description',    key: 'description',  },  {    title: 'Дата создания',    dataIndex: 'createDate',    key: 'createDate',    sorter: function (rowA, rowB) {      return dayjs(rowA.createDate).unix() - dayjs(rowB.createDate).unix();    },    render: (value) => dayjs(value).format(BASE_DATE_FORMAT_STRING),  },  {    title: 'Дата обновления',    dataIndex: 'updateDate',    key: 'updateDate',    sorter: function (rowA, rowB) {      return dayjs(rowA.updateDate).unix() - dayjs(rowB.updateDate).unix();    },    render: (value) => dayjs(value).format(BASE_DATE_FORMAT_STRING),  },  {    title: '',    dataIndex: 'actions',    key: 'actions',    render: (_, record) => {      return (        <Space size={8}>          {onStart && (            <Tooltip title="Пройти тестирование">              <PlayCircleOutlined                onClick={() => {                  onStart(record);                }}              />            </Tooltip>          )}          {onCopy && (            <Tooltip title="Скопировать ссылку">              <LinkOutlined                onClick={() => {                  onCopy(record);                }}              />            </Tooltip>          )}          {onEdit && (            <Tooltip title="Редактировать тест">              <EditOutlined                onClick={() => {                  onEdit(record);                }}              />            </Tooltip>          )}          {onDelete && (            <Popconfirm              title="Удалить тест?"              description="Вы уверены что хотите удалить тест?"              onConfirm={() => {                onDelete(record);              }}              okText="Да, удалить"              cancelText="Отмена"              okType="danger"              placement="bottomLeft"            >              <Tooltip title="Удалить тест">                <DeleteOutlined />              </Tooltip>            </Popconfirm>          )}          {onStat && (              <Tooltip title="Показать статистику">                <ProfileOutlined                    onClick={() => {                      onStat(record);                    }}                />              </Tooltip>          )}        </Space>      );    },  },];
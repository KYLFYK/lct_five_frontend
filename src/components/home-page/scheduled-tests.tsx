import styled from '@emotion/styled';import Table from 'antd/lib/table';import dayjs from 'dayjs';import { TableProps as RcTableProps } from 'rc-table/lib/Table';import { FC, useCallback, useMemo } from 'react';import { useNavigate } from 'react-router-dom';import { TTabledTest } from '../../types/tests';import { getTestPassingLink } from '../../utils/route-utils';import { testColumns } from './test-table';const TableWrapper = styled('div')`  width: 100%;`;const dataSource: RcTableProps<TTabledTest>['data'] = [  {    id: '1',    key: '1',    title: 'Безопасность на рабочем месте',    createDate: dayjs()      .add(-42, 'days')      .add(3, 'hours')      .add(48, 'minutes')      .toISOString(),    updateDate: dayjs()      .add(-5, 'days')      .add(1, 'hours')      .add(32, 'minutes')      .toISOString(),    description: 'Тестирование: "Безопасность на рабочем месте"',  },  {    id: '2',    key: '2',    title: 'Корпоративная этика',    createDate: dayjs()      .add(-83, 'days')      .add(6, 'hours')      .add(11, 'minutes')      .toISOString(),    updateDate: dayjs()      .add(-12, 'days')      .add(2, 'hours')      .add(23, 'minutes')      .toISOString(),    description: 'Тестирование: "Корпоративная этика"',  },  {    id: '3',    key: '3',    title: 'Онбординг',    createDate: dayjs()      .add(-342, 'days')      .add(4, 'hours')      .add(24, 'minutes')      .toISOString(),    updateDate: dayjs()      .add(-46, 'days')      .add(7, 'hours')      .add(27, 'minutes')      .toISOString(),    description: 'Проект: "Личный кабинет сотрудника"',  },  {    id: '4',    key: '4',    title: 'Пожарная безопасность',    createDate: dayjs()      .add(-478, 'days')      .add(9, 'hours')      .add(7, 'minutes')      .toISOString(),    updateDate: dayjs()      .add(-48, 'days')      .add(2, 'hours')      .add(56, 'minutes')      .toISOString(),    description: '',  },];export const ScheduledTests: FC = () => {  const navigate = useNavigate();  const handleStart = useCallback((record: TTabledTest) => {    navigate(getTestPassingLink(record.id));  }, []);  const dataScheduledColumns = useMemo(() => {    return testColumns({      onStart: handleStart,    });  }, []);  return (    <TableWrapper>      <Table        columns={dataScheduledColumns}        dataSource={dataSource}        pagination={false}      />    </TableWrapper>  );};
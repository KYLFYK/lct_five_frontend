import styled from '@emotion/styled';import { message, notification } from 'antd';import Input from 'antd/lib/input/Input';import Space from 'antd/lib/space';import Table from 'antd/lib/table';import Typography from 'antd/lib/typography';import dayjs from 'dayjs';import { TableProps as RcTableProps } from 'rc-table/lib/Table';import { FC, useCallback, useMemo } from 'react';import { useNavigate } from 'react-router-dom';import { TTabledTest } from '../../types/tests';import { getTestEditLink, getTestPassingLink } from '../../utils/route-utils';import { testColumns } from './test-table';const TableWrapper = styled('div')`  width: 100%;`;const dataSource: RcTableProps<TTabledTest>['data'] = [  {    id: '1',    key: '1',    title: 'Безопасность на рабочем месте',    createDate: dayjs()      .add(-42, 'days')      .add(3, 'hours')      .add(48, 'minutes')      .toISOString(),    updateDate: dayjs()      .add(-5, 'days')      .add(1, 'hours')      .add(32, 'minutes')      .toISOString(),    description: 'Тестирование: "Безопасность на рабочем месте"',  },  {    id: '2',    key: '2',    title: 'Корпоративная этика',    createDate: dayjs()      .add(-83, 'days')      .add(6, 'hours')      .add(11, 'minutes')      .toISOString(),    updateDate: dayjs()      .add(-12, 'days')      .add(2, 'hours')      .add(23, 'minutes')      .toISOString(),    description: 'Тестирование: "Корпоративная этика"',  },];export const CreatedTests: FC = () => {  const navigate = useNavigate();  const [messageApi, messageContextHolder] = message.useMessage();  const [api, notificationContextHolder] = notification.useNotification();  const handleEdit = useCallback((record: TTabledTest) => {    navigate(getTestEditLink(record.id));  }, []);  const handleDelete = useCallback((record: TTabledTest) => {    console.log('Delete: ' + record.id);  }, []);  const handleCopyLink = useCallback(async (record: TTabledTest) => {    const textToCopy = getTestPassingLink(record.id, true);    try {      await navigator.clipboard.writeText(textToCopy);      messageApi.success`Ссылка на прохождение теста скопирована`;    } catch (e) {      api.error({        message: 'Произошла ошибка при копировании',        description: (          <Space size={12} direction="vertical">            <Typography.Text>Ссылка на прохождение теста</Typography.Text>            <Input value={textToCopy} readOnly />          </Space>        ),      });    }  }, []);  const dataCreatedColumns = useMemo(() => {    return testColumns({      onEdit: handleEdit,      onCopy: handleCopyLink,      onDelete: handleDelete,    });  }, []);  return (    <TableWrapper>      {messageContextHolder}      {notificationContextHolder}      <Table        columns={dataCreatedColumns}        dataSource={dataSource}        pagination={false}      />    </TableWrapper>  );};
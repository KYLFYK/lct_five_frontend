import { TTestStage, TTesting, TTestingStatus } from './tests';import {TUser} from "./user";export type TVideoStat = {  status: 'not-started' | 'paused' | 'in-progress' | 'completed';  duration: number; // В секундах  viewingGuarantee: boolean; // Была ли включена функция гарантированного просмотра  playStartDate?: string; // Дата и время начала проигрывания видео в ISO формате  playCompleteDate?: string; // Дата и время начала проигрывания видео в ISO формате  pausesDates?: {    start: string; // Дата и время начала паузы в ISO формате    end?: string; // Дата и время окончания паузы в ISO формате  }[];  averageAttention?: {    // Внимательность просмотра - массив со средней внимательностью (видео делится на N промежутков и считается среднее на каждый промежуток) (минимум 4 промежутка)    value: number; // Внимательность на промежутке (0-100)  }[]; // Будет только если viewingGuarantee = true};export type TStatisticByStage = {  stageId: TTestStage['id']; // id Этапа тестирования  status: TTestingStatus; // Статус прохождения этапа  questionsCompleted: string // Количество пройденных вопросов  dateOpen: string; // Дата и время в ISO формате  dateComplete: string; // Дата и время в ISO формате  videoStats?: TVideoStat[]; // Статистика по видосам на этапе  stageDeadLine: TTestStage['deadLine']; // Дата и время окончания тестирования в ISO формате  questionsStartDate?: string; // Дата и время начала прохождения вопросов в ISO формате  questionsCompleteDate?: string; // Дата и время окончания прохождения вопросов в ISO формате};export type TTestByUserStatistic = {  testId: TTesting['id'];  userId: string;  username: string;  stagesStats: TStatisticByStage[];  status: TTestingStatus;};export type TTestStatisticRecord = {  status: TTestingStatus,} & TUser;export type TTestStatistic = {  testId: string,  testTitle: string,  users: TTestStatisticRecord[]}
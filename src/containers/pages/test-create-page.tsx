import styled from '@emotion/styled';import { Tabs } from 'antd';import { FC, useEffect, useMemo, useRef, useState } from 'react';import { TestingFullDescription } from '../../components/testing/testing-full-description';import {  TestingPreview,  TestingWrapper,} from '../../components/testing/testing-preview';import { TestingQuestions } from '../../components/testing/testing-questions';import { TestingSetting } from '../../components/testing/testing-setting';import {  TestEditContext,  useTestEditContext,} from '../../context/testing/test-edit-context';import { TTestEditAreaTab } from '../../types/tests';const Wrapper = styled('div')`  display: grid;  grid-template-columns: 6fr 5fr;  grid-column-gap: 30px;`;const TestingTabs = styled(TestingWrapper)`  margin-bottom: 30px;  padding-block: 12px;`;const TestCreate: FC = () => {  const tabsWrapperRef = useRef<HTMLDivElement>(null);  const [maxWidth, setMaxWidth] = useState(0);  useEffect(() => {    if (tabsWrapperRef.current) {      setMaxWidth(tabsWrapperRef.current.clientWidth);    }  }, []);  const { baseSettings, stages, questions } = useTestEditContext();  const [currentTab, setCurrentTab] = useState<TTestEditAreaTab | string>(    TTestEditAreaTab.QUESTIONS  );  const testTabs = useMemo(() => {    const tabs: {      key: string;      label: string;    }[] = [      {        key: TTestEditAreaTab.MAIN,        label: 'Основная информация',      },      {        key: TTestEditAreaTab.FULL_DESCRIPTION,        label: 'Подробное описание',      },      {        key: TTestEditAreaTab.QUESTIONS,        label: 'Вопросы тестирования',      },    ];    if (stages.length > 0) {      let newTabs = stages.map((el, index) => ({        key: `stage-${el.id}`,        label: el.title ? `Этап - "${el.title}"` : `Этап - ${index + 1}`,      }));      tabs.push(...newTabs);    } else if (baseSettings.useStages) {      tabs.push({        key: TTestEditAreaTab.QUESTIONS,        label: 'Вопросы тестирования',      });    }    return tabs;  }, [stages, baseSettings.useStages]);  return (    <Wrapper>      <div ref={tabsWrapperRef}>        <TestingTabs          style={{            maxWidth: maxWidth,          }}        >          <Tabs            tabPosition="top"            activeKey={currentTab}            items={testTabs}            onChange={setCurrentTab as any}          />        </TestingTabs>        {currentTab === TTestEditAreaTab.MAIN && (          <TestingPreview testData={baseSettings} stages={stages} />        )}        {currentTab === TTestEditAreaTab.FULL_DESCRIPTION && (          <TestingFullDescription            descriptionFull={baseSettings.descriptionFull}          />        )}        {currentTab === TTestEditAreaTab.QUESTIONS && (          <TestingQuestions fullPage questions={questions} />        )}      </div>      <div>        <TestingSetting currentTab={currentTab} />      </div>    </Wrapper>  );};export const TestCreatePage: FC = () => {  return (    <TestEditContext>      <TestCreate />    </TestEditContext>  );};